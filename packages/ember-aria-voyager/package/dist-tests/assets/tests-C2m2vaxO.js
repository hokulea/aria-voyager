function _mergeNamespaces(n, m) {
  for (var i = 0; i < m.length; i++) {
    const e = m[i];
    if (typeof e !== 'string' && !Array.isArray(e)) { for (const k in e) {
      if (k !== 'default' && !(k in n)) {
        const d = Object.getOwnPropertyDescriptor(e, k);
        if (d) {
          Object.defineProperty(n, k, d.get ? d : {
            enumerable: true,
            get: () => e[k]
          });
        }
      }
    } }
  }
  return Object.freeze(Object.defineProperty(n, Symbol.toStringTag, { value: 'Module' }));
}

true&&(function polyfill() {
  const relList = document.createElement("link").relList;
  if (relList && relList.supports && relList.supports("modulepreload")) {
    return;
  }
  for (const link of document.querySelectorAll('link[rel="modulepreload"]')) {
    processPreload(link);
  }
  new MutationObserver((mutations) => {
    for (const mutation of mutations) {
      if (mutation.type !== "childList") {
        continue;
      }
      for (const node of mutation.addedNodes) {
        if (node.tagName === "LINK" && node.rel === "modulepreload")
          processPreload(node);
      }
    }
  }).observe(document, { childList: true, subtree: true });
  function getFetchOpts(link) {
    const fetchOpts = {};
    if (link.integrity) fetchOpts.integrity = link.integrity;
    if (link.referrerPolicy) fetchOpts.referrerPolicy = link.referrerPolicy;
    if (link.crossOrigin === "use-credentials")
      fetchOpts.credentials = "include";
    else if (link.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
    else fetchOpts.credentials = "same-origin";
    return fetchOpts;
  }
  function processPreload(link) {
    if (link.ep)
      return;
    link.ep = true;
    const fetchOpts = getFetchOpts(link);
    fetch(link.href, fetchOpts);
  }
}());

// check if window exists and actually is the global
const hasDOM = typeof self === 'object' && self !== null && self.Object === Object && typeof Window !== 'undefined' && self.constructor === Window && typeof document === 'object' && document !== null && self.document === document && typeof location === 'object' && location !== null && self.location === location && typeof history === 'object' && history !== null && self.history === history && typeof navigator === 'object' && navigator !== null && self.navigator === navigator && typeof navigator.userAgent === 'string';
const window$1 = hasDOM ? self : null;
const location$1 = hasDOM ? self.location : null;
const history$1 = hasDOM ? self.history : null;
const userAgent = hasDOM ? self.navigator.userAgent : 'Lynx (textmode)';
const isChrome = hasDOM ? typeof chrome === 'object' && !(typeof opera === 'object') : false;
const isFirefox = hasDOM ? /Firefox|FxiOS/.test(userAgent) : false;
const environment = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  hasDOM,
  history: history$1,
  isChrome,
  isFirefox,
  location: location$1,
  userAgent,
  window: window$1
}, Symbol.toStringTag, {
  value: 'Module'
}));

/* globals window, self */

// from lodash to catch fake globals
function checkGlobal(value) {
  return value && value.Object === Object ? value : undefined;
}

// element ids can ruin global miss checks
function checkElementIdShadowing(value) {
  return value && value.nodeType === undefined ? value : undefined;
}
// export real global
const global$1$1 = checkGlobal(checkElementIdShadowing(typeof global === 'object' && global)) || checkGlobal(typeof self === 'object' && self) || checkGlobal(typeof window === 'object' && window) || typeof mainContext !== 'undefined' && mainContext ||
// set before strict mode in Ember loader/wrapper
new Function('return this')(); // eval outside of strict mode

// legacy imports/exports/lookup stuff (should we keep this??)
const context$1 = function (global, Ember) {
  return Ember === undefined ? {
    imports: global,
    exports: global,
    lookup: global
  } : {
    // import jQuery
    imports: Ember.imports || global,
    // export Ember
    exports: Ember.exports || global,
    // search for Namespaces
    lookup: Ember.lookup || global
  };
}(global$1$1, global$1$1.Ember);
function getLookup() {
  return context$1.lookup;
}
function setLookup(value) {
  context$1.lookup = value;
}
const ENV = {
  ENABLE_OPTIONAL_FEATURES: false,
  /**
    Determines whether Ember should add to `Array`
    native object prototypes, a few extra methods in order to provide a more
    friendly API.
     The behavior from setting this option to `true` was deprecated in Ember 5.10.
     @property EXTEND_PROTOTYPES
    @type Boolean
    @default true
    @for EmberENV
    @private
    @deprecated in v5.10
  */
  EXTEND_PROTOTYPES: {
    Array: false
  },
  /**
    The `LOG_STACKTRACE_ON_DEPRECATION` property, when true, tells Ember to log
    a full stack trace during deprecation warnings.
     @property LOG_STACKTRACE_ON_DEPRECATION
    @type Boolean
    @default true
    @for EmberENV
    @public
  */
  LOG_STACKTRACE_ON_DEPRECATION: true,
  /**
    The `LOG_VERSION` property, when true, tells Ember to log versions of all
    dependent libraries in use.
     @property LOG_VERSION
    @type Boolean
    @default true
    @for EmberENV
    @public
  */
  LOG_VERSION: true,
  RAISE_ON_DEPRECATION: false,
  STRUCTURED_PROFILE: false,
  /**
    Whether to perform extra bookkeeping needed to make the `captureRenderTree`
    API work.
     This has to be set before the ember JavaScript code is evaluated. This is
    usually done by setting `window.EmberENV = { _DEBUG_RENDER_TREE: true };`
    before the "vendor" `<script>` tag in `index.html`.
     Setting the flag after Ember is already loaded will not work correctly. It
    may appear to work somewhat, but fundamentally broken.
     This is not intended to be set directly. Ember Inspector will enable the
    flag on behalf of the user as needed.
     This flag is always on in development mode.
     The flag is off by default in production mode, due to the cost associated
    with the the bookkeeping work.
     The expected flow is that Ember Inspector will ask the user to refresh the
    page after enabling the feature. It could also offer a feature where the
    user add some domains to the "always on" list. In either case, Ember
    Inspector will inject the code on the page to set the flag if needed.
     @property _DEBUG_RENDER_TREE
    @for EmberENV
    @type Boolean
    @default false
    @private
  */
  _DEBUG_RENDER_TREE: false,
  /**
   Whether to force all deprecations to be enabled. This is used internally by
   Ember to enable deprecations in tests. It is not intended to be set in
   projects.
    @property _ALL_DEPRECATIONS_ENABLED
   @for EmberENV
   @type Boolean
   @default false
   @private
   */
  _ALL_DEPRECATIONS_ENABLED: false,
  /**
   Override the version of ember-source used to determine when deprecations "break".
   This is used internally by Ember to test with deprecated features "removed".
   This is never intended to be set by projects.
   @property _OVERRIDE_DEPRECATION_VERSION
   @for EmberENV
   @type string | null
   @default null
   @private
   */
  _OVERRIDE_DEPRECATION_VERSION: null,
  /**
    Whether the app defaults to using async observers.
     This is not intended to be set directly, as the implementation may change in
    the future. Use `@ember/optional-features` instead.
     @property _DEFAULT_ASYNC_OBSERVERS
    @for EmberENV
    @type Boolean
    @default false
    @private
  */
  _DEFAULT_ASYNC_OBSERVERS: false,
  /**
    Controls the maximum number of scheduled rerenders without "settling". In general,
    applications should not need to modify this environment variable, but please
    open an issue so that we can determine if a better default value is needed.
     @property _RERENDER_LOOP_LIMIT
    @for EmberENV
    @type number
    @default 1000
    @private
   */
  _RERENDER_LOOP_LIMIT: 1000,
  EMBER_LOAD_HOOKS: {},
  FEATURES: {}
};
(EmberENV => {
  if (typeof EmberENV !== 'object' || EmberENV === null) return;
  for (let flag in EmberENV) {
    if (!Object.prototype.hasOwnProperty.call(EmberENV, flag) || flag === 'EXTEND_PROTOTYPES' || flag === 'EMBER_LOAD_HOOKS') continue;
    let defaultValue = ENV[flag];
    if (defaultValue === true) {
      ENV[flag] = EmberENV[flag] !== false;
    } else if (defaultValue === false) {
      ENV[flag] = EmberENV[flag] === true;
    } else {
      ENV[flag] = EmberENV[flag];
    }
  }

  // TODO: Remove in Ember 6.5. This setting code for EXTEND_PROTOTYPES
  // should stay for at least an LTS cycle so that users get the explicit
  // deprecation exception when it breaks in >= 6.0.0.
  let {
    EXTEND_PROTOTYPES
  } = EmberENV;
  if (EXTEND_PROTOTYPES !== undefined) {
    if (typeof EXTEND_PROTOTYPES === 'object' && EXTEND_PROTOTYPES !== null) {
      ENV.EXTEND_PROTOTYPES.Array = EXTEND_PROTOTYPES.Array !== false;
    } else {
      ENV.EXTEND_PROTOTYPES.Array = EXTEND_PROTOTYPES !== false;
    }
  }

  // TODO this does not seem to be used by anything,
  //      can we remove it? do we need to deprecate it?
  let {
    EMBER_LOAD_HOOKS
  } = EmberENV;
  if (typeof EMBER_LOAD_HOOKS === 'object' && EMBER_LOAD_HOOKS !== null) {
    for (let hookName in EMBER_LOAD_HOOKS) {
      if (!Object.prototype.hasOwnProperty.call(EMBER_LOAD_HOOKS, hookName)) continue;
      let hooks = EMBER_LOAD_HOOKS[hookName];
      if (Array.isArray(hooks)) {
        ENV.EMBER_LOAD_HOOKS[hookName] = hooks.filter(hook => typeof hook === 'function');
      }
    }
  }
  let {
    FEATURES
  } = EmberENV;
  if (typeof FEATURES === 'object' && FEATURES !== null) {
    for (let feature in FEATURES) {
      if (!Object.prototype.hasOwnProperty.call(FEATURES, feature)) continue;
      ENV.FEATURES[feature] = FEATURES[feature] === true;
    }
  }
})(global$1$1.EmberENV);
function getENV() {
  return ENV;
}

let assert$1 = () => {};

/**
 @module @ember/debug
 @public
*/
/**
  Allows for runtime registration of handler functions that override the default deprecation behavior.
  Deprecations are invoked by calls to [@ember/debug/deprecate](/ember/release/classes/@ember%2Fdebug/methods/deprecate?anchor=deprecate).
  The following example demonstrates its usage by registering a handler that throws an error if the
  message contains the word "should", otherwise defers to the default handler.

  ```javascript
  import { registerDeprecationHandler } from '@ember/debug';

  registerDeprecationHandler((message, options, next) => {
    if (message.indexOf('should') !== -1) {
      throw new Error(`Deprecation message with should: ${message}`);
    } else {
      // defer to whatever handler was registered before this one
      next(message, options);
    }
  });
  ```

  The handler function takes the following arguments:

  <ul>
    <li> <code>message</code> - The message received from the deprecation call.</li>
    <li> <code>options</code> - An object passed in with the deprecation call containing additional information including:</li>
      <ul>
        <li> <code>id</code> - An id of the deprecation in the form of <code>package-name.specific-deprecation</code>.</li>
        <li> <code>until</code> - The Ember version number the feature and deprecation will be removed in.</li>
      </ul>
    <li> <code>next</code> - A function that calls into the previously registered handler.</li>
  </ul>

  @public
  @static
  @method registerDeprecationHandler
  @for @ember/debug
  @param handler {Function} A function to handle deprecation calls.
  @since 2.1.0
*/
let registerHandler$1 = () => {};
let deprecate$1 = () => {};
const defaultDeprecate = deprecate$1;

let testing = false;
function isTesting() {
  return testing;
}
function setTesting(value) {
  testing = Boolean(value);
}

let registerHandler = () => {};

const {
  toString: objectToString
} = Object.prototype;
const {
  toString: functionToString
} = Function.prototype;
const {
  isArray: isArray$4
} = Array;
const {
  keys: objectKeys
} = Object;
const {
  stringify
} = JSON;
const LIST_LIMIT = 100;
const DEPTH_LIMIT = 4;
const SAFE_KEY = /^[\w$]+$/;

/**
 @module @ember/debug
*/
/**
  Convenience method to inspect an object. This method will attempt to
  convert the object into a useful string description.

  It is a pretty simple implementation. If you want something more robust,
  use something like JSDump: https://github.com/NV/jsDump

  @method inspect
  @static
  @param {Object} obj The object you want to inspect.
  @return {String} A description of the object
  @since 1.4.0
  @private
*/
function inspect(obj) {
  // detect Node util.inspect call inspect(depth: number, opts: object)
  if (typeof obj === 'number' && arguments.length === 2) {
    return this;
  }
  return inspectValue(obj, 0);
}
function inspectValue(value, depth, seen) {
  let valueIsArray = false;
  switch (typeof value) {
    case 'undefined':
      return 'undefined';
    case 'object':
      if (value === null) return 'null';
      if (isArray$4(value)) {
        valueIsArray = true;
        break;
      }
      // is toString Object.prototype.toString or undefined then traverse
      if (value.toString === objectToString || value.toString === undefined) {
        break;
      }
      // custom toString
      return value.toString();
    case 'function':
      return value.toString === functionToString ? value.name ? `[Function:${value.name}]` : `[Function]` : value.toString();
    case 'string':
      return stringify(value);
    case 'symbol':
    case 'boolean':
    case 'number':
    default:
      return value.toString();
  }
  if (seen === undefined) {
    seen = new WeakSet();
  } else {
    if (seen.has(value)) return `[Circular]`;
  }
  seen.add(value);
  return valueIsArray ? inspectArray(value, depth + 1, seen) : inspectObject(value, depth + 1, seen);
}
function inspectKey(key) {
  return SAFE_KEY.test(key) ? key : stringify(key);
}
function inspectObject(obj, depth, seen) {
  if (depth > DEPTH_LIMIT) {
    return '[Object]';
  }
  let s = '{';
  let keys = objectKeys(obj);
  for (let i = 0; i < keys.length; i++) {
    s += i === 0 ? ' ' : ', ';
    if (i >= LIST_LIMIT) {
      s += `... ${keys.length - LIST_LIMIT} more keys`;
      break;
    }
    let key = keys[i];
    s += `${inspectKey(String(key))}: ${inspectValue(obj[key], depth, seen)}`;
  }
  s += ' }';
  return s;
}
function inspectArray(arr, depth, seen) {
  if (depth > DEPTH_LIMIT) {
    return '[Array]';
  }
  let s = '[';
  for (let i = 0; i < arr.length; i++) {
    s += i === 0 ? ' ' : ', ';
    if (i >= LIST_LIMIT) {
      s += `... ${arr.length - LIST_LIMIT} more items`;
      break;
    }
    s += inspectValue(arr[i], depth, seen);
  }
  s += ' ]';
  return s;
}

/**
  @module @ember/debug
*/
/**
  Ember Inspector calls this function to capture the current render tree.

  In production mode, this requires turning on `ENV._DEBUG_RENDER_TREE`
  before loading Ember.

  @private
  @static
  @method captureRenderTree
  @for @ember/debug
  @param app {ApplicationInstance} An `ApplicationInstance`.
  @since 3.14.0
*/
function captureRenderTree(app) {
  let domRenderer = app.lookup('renderer:-dom');
  if (!domRenderer) {
    throw new Error(`BUG: owner is missing renderer`);
  }
  // SAFETY: Ideally we'd assert here but that causes awkward circular requires since this is also in @ember/debug.
  // This is only for debug stuff so not very risky.
  let renderer = domRenderer;
  return renderer.debugRenderTree.capture();
}

// These are the default production build versions:
const noop$3 = () => {};
let warn = noop$3;
let debug = noop$3;
let runInDebug = noop$3;
let deprecateFunc = function () {
  return arguments[arguments.length - 1];
};
function deprecate(...args) {
  return (defaultDeprecate)(...args);
}

/**
  Strongly hint runtimes to intern the provided string.

  When do I need to use this function?

  For the most part, never. Pre-mature optimization is bad, and often the
  runtime does exactly what you need it to, and more often the trade-off isn't
  worth it.

  Why?

  Runtimes store strings in at least 2 different representations:
  Ropes and Symbols (interned strings). The Rope provides a memory efficient
  data-structure for strings created from concatenation or some other string
  manipulation like splitting.

  Unfortunately checking equality of different ropes can be quite costly as
  runtimes must resort to clever string comparison algorithms. These
  algorithms typically cost in proportion to the length of the string.
  Luckily, this is where the Symbols (interned strings) shine. As Symbols are
  unique by their string content, equality checks can be done by pointer
  comparison.

  How do I know if my string is a rope or symbol?

  Typically (warning general sweeping statement, but truthy in runtimes at
  present) static strings created as part of the JS source are interned.
  Strings often used for comparisons can be interned at runtime if some
  criteria are met.  One of these criteria can be the size of the entire rope.
  For example, in chrome 38 a rope longer then 12 characters will not
  intern, nor will segments of that rope.

  Some numbers: http://jsperf.com/eval-vs-keys/8

  Known Trick™

  @private
  @return {String} interned version of the provided string
*/
function intern(str) {
  let obj = Object.create(null);
  obj[str] = 1;
  for (let key in obj) {
    if (key === str) {
      return key;
    }
  }
  return str;
}

/**
  Returns whether Type(value) is Object.

  Useful for checking whether a value is a valid WeakMap key.

  Refs: https://tc39.github.io/ecma262/#sec-typeof-operator-runtime-semantics-evaluation
        https://tc39.github.io/ecma262/#sec-weakmap.prototype.set

  @private
  @function isObject
*/
function isObject(value) {
  return value !== null && (typeof value === 'object' || typeof value === 'function');
}

/**
 @module @ember/object
*/

/**
 @private
 @return {Number} the uuid
 */
let _uuid$1 = 0;

/**
 Generates a universally unique identifier. This method
 is used internally by Ember for assisting with
 the generation of GUID's and other unique identifiers.

 @public
 @return {Number} [description]
 */
function uuid$1() {
  return ++_uuid$1;
}

/**
 Prefix used for guids through out Ember.
 @private
 @property GUID_PREFIX
 @for Ember
 @type String
 @final
 */
const GUID_PREFIX = 'ember';

// Used for guid generation...
const OBJECT_GUIDS = new WeakMap();
const NON_OBJECT_GUIDS = new Map();
/**
  A unique key used to assign guids and other private metadata to objects.
  If you inspect an object in your browser debugger you will often see these.
  They can be safely ignored.

  On browsers that support it, these properties are added with enumeration
  disabled so they won't show up when you iterate over your properties.

  @private
  @property GUID_KEY
  @for Ember
  @type String
  @final
*/
const GUID_KEY = intern(`__ember${Date.now()}`);

/**
  Generates a new guid, optionally saving the guid to the object that you
  pass in. You will rarely need to use this method. Instead you should
  call `guidFor(obj)`, which return an existing guid if available.

  @private
  @method generateGuid
  @static
  @for @ember/object/internals
  @param {Object} [obj] Object the guid will be used for. If passed in, the guid will
    be saved on the object and reused whenever you pass the same object
    again.

    If no object is passed, just generate a new guid.
  @param {String} [prefix] Prefix to place in front of the guid. Useful when you want to
    separate the guid into separate namespaces.
  @return {String} the guid
*/
// eslint-disable-next-line @typescript-eslint/no-wrapper-object-types
function generateGuid(obj, prefix = GUID_PREFIX) {
  let guid = prefix + uuid$1().toString();
  if (isObject(obj)) {
    OBJECT_GUIDS.set(obj, guid);
  }
  return guid;
}

/**
  Returns a unique id for the object. If the object does not yet have a guid,
  one will be assigned to it. You can call this on any object,
  `EmberObject`-based or not.

  You can also use this method on DOM Element objects.

  @public
  @static
  @method guidFor
  @for @ember/object/internals
  @param {Object} obj any object, string, number, Element, or primitive
  @return {String} the unique guid for this instance.
*/
function guidFor(value) {
  let guid;
  if (isObject(value)) {
    guid = OBJECT_GUIDS.get(value);
    if (guid === undefined) {
      guid = `${GUID_PREFIX}${uuid$1()}`;
      OBJECT_GUIDS.set(value, guid);
    }
  } else {
    guid = NON_OBJECT_GUIDS.get(value);
    if (guid === undefined) {
      let type = typeof value;
      if (type === 'string') {
        guid = `st${uuid$1()}`;
      } else if (type === 'number') {
        guid = `nu${uuid$1()}`;
      } else if (type === 'symbol') {
        guid = `sy${uuid$1()}`;
      } else {
        guid = `(${value})`;
      }
      NON_OBJECT_GUIDS.set(value, guid);
    }
  }
  return guid;
}
let getDebugName$1;
const getDebugName$1$1 = getDebugName$1;
const HAS_SUPER_PATTERN = /\.(_super|call\(this|apply\(this)/;
const fnToString = Function.prototype.toString;
const checkHasSuper = (() => {
  let sourceAvailable = fnToString.call(function () {
    return this;
  }).indexOf('return this') > -1;
  if (sourceAvailable) {
    return function checkHasSuper(func) {
      return HAS_SUPER_PATTERN.test(fnToString.call(func));
    };
  }
  return function checkHasSuper() {
    return true;
  };
})();
const HAS_SUPER_MAP = new WeakMap();
const ROOT = Object.freeze(function () {});
HAS_SUPER_MAP.set(ROOT, false);
function hasSuper(func) {
  let hasSuper = HAS_SUPER_MAP.get(func);
  if (hasSuper === undefined) {
    hasSuper = checkHasSuper(func);
    HAS_SUPER_MAP.set(func, hasSuper);
  }
  return hasSuper;
}
class ObserverListenerMeta {
  listeners = undefined;
  observers = undefined;
}
const OBSERVERS_LISTENERS_MAP = new WeakMap();
function createObserverListenerMetaFor(fn) {
  let meta = OBSERVERS_LISTENERS_MAP.get(fn);
  if (meta === undefined) {
    meta = new ObserverListenerMeta();
    OBSERVERS_LISTENERS_MAP.set(fn, meta);
  }
  return meta;
}
function observerListenerMetaFor(fn) {
  return OBSERVERS_LISTENERS_MAP.get(fn);
}
function setObservers(func, observers) {
  let meta = createObserverListenerMetaFor(func);
  meta.observers = observers;
}
function setListeners(func, listeners) {
  let meta = createObserverListenerMetaFor(func);
  meta.listeners = listeners;
}
const IS_WRAPPED_FUNCTION_SET = new WeakSet();

/**
  Wraps the passed function so that `this._super` will point to the superFunc
  when the function is invoked. This is the primitive we use to implement
  calls to super.

  @private
  @method wrap
  @for Ember
  @param {Function} func The function to call
  @param {Function} superFunc The super function.
  @return {Function} wrapped function.
*/
function wrap(func, superFunc) {
  if (!hasSuper(func)) {
    return func;
  }
  // ensure an unwrapped super that calls _super is wrapped with a terminal _super
  if (!IS_WRAPPED_FUNCTION_SET.has(superFunc) && hasSuper(superFunc)) {
    return _wrap(func, _wrap(superFunc, ROOT));
  }
  return _wrap(func, superFunc);
}
function _wrap(func, superFunc) {
  function superWrapper() {
    let orig = this._super;
    this._super = superFunc;
    let ret = func.apply(this, arguments);
    this._super = orig;
    return ret;
  }
  IS_WRAPPED_FUNCTION_SET.add(superWrapper);
  let meta = OBSERVERS_LISTENERS_MAP.get(func);
  if (meta !== undefined) {
    OBSERVERS_LISTENERS_MAP.set(superWrapper, meta);
  }
  return superWrapper;
}
function lookupDescriptor(obj, keyName) {
  let current = obj;
  do {
    let descriptor = Object.getOwnPropertyDescriptor(current, keyName);
    if (descriptor !== undefined) {
      return descriptor;
    }
    current = Object.getPrototypeOf(current);
  } while (current !== null);
  return null;
}

// the delete is meant to hint at runtimes that this object should remain in
// dictionary mode. This is clearly a runtime specific hack, but currently it
// appears worthwhile in some usecases. Please note, these deletes do increase
// the cost of creation dramatically over a plain Object.create. And as this
// only makes sense for long-lived dictionaries that aren't instantiated often.
function makeDictionary(parent) {
  let dict = Object.create(parent);
  dict['_dict'] = null;
  delete dict['_dict'];
  return dict;
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-assignment
const OWNER$1 = Symbol("OWNER");

/**
  Framework objects in a Glimmer application may receive an owner object.
  Glimmer is unopinionated about this owner, but will forward it through its
  internal resolution system, and through its managers if it is provided.
*/
function getOwner$3(object) {
  return object[OWNER$1];
}

/**
  `setOwner` set's an object's owner
*/
function setOwner$2(object, owner) {
  object[OWNER$1] = owner;
}

/**
  @module @ember/owner
 */

/**
  The name for a factory consists of a namespace and the name of a specific type
  within that namespace, like `'service:session'`.

  **Note:** `FullName` is *not* a class, just a contract for strings used in the
  DI system. It is currently documented as a class only due to limits in our
  documentation infrastructure.

  @for @ember/owner
  @class FullName
  @public
 */

/**
  A type registry for the DI system, which other participants in the DI system
  can register themselves into with declaration merging. The contract for this
  type is that its keys are the `Type` from a `FullName`, and each value for a
  `Type` is another registry whose keys are the `Name` from a `FullName`. The
  mechanic for providing a registry is [declaration merging][handbook].

  [handbook]: https://www.typescriptlang.org/docs/handbook/declaration-merging.html

  For example, Ember's `@ember/service` module includes this set of definitions:

  ```ts
  export default class Service extends EmberObject {}

  // For concrete singleton classes to be merged into.
  interface Registry extends Record<string, Service> {}

  declare module '@ember/owner' {
    service: Registry;
  }
  ```

  Declarations of services can then include the registry:

  ```ts
  import Service from '@ember/service';

  export default class Session extends Service {
    login(username: string, password: string) {
      // ...
    }
  }

  declare module '@ember/service' {
    interface Registry {
      session: Session;
    }
  }
  ```

  Then users of the `Owner` API will be able to do things like this with strong
  type safety guarantees:

  ```ts
  getOwner(this)?.lookup('service:session').login("hello", "1234abcd");
  ```

  @for @ember/owner
  @private
 */
// eslint-disable-next-line @typescript-eslint/no-empty-object-type

// Convenience utility for pulling a specific factory manager off `DIRegistry`
// if one exists, or falling back to the default definition otherwise.
/**
  @private
 */

/**
  The common interface for the ability to `register()` an item, shared by the
  `Owner` and `RegistryProxy` interfaces.

  @for @ember/owner
  @class BasicRegistry
  @private
 */

/**
  The common interface for the ability to `lookup()` or get the `factoryFor` an
  item, shared by the `Owner` and `ContainerProxy` interfaces.

  @for @ember/owner
  @class BasicContainer
  @private
 */

/**
  Framework objects in an Ember application (components, services, routes,
  etc.) are created via a factory and dependency injection system. Each of
  these objects is the responsibility of an "owner", which handles its
  instantiation and manages its lifetime.

  An `Owner` is not a class you construct; it is one the framework constructs
  for you. The normal way to get access to the relevant `Owner` is using the
  `getOwner` function.

  @for @ember/owner
  @uses BasicRegistry
  @uses BasicContainer
  @class Owner
  @since 4.10.0
  @public
 */

/**
 * Interface representing the options for registering an item as a factory.
 *
 * @for @ember/owner
 * @class RegisterOptions
 * @public
 */

/**
  Registered factories are instantiated by having create called on them.
  Additionally they are singletons by default, so each time they are looked up
  they return the same instance.

  However, that behavior can be modified with the `instantiate` and `singleton`
  options to the `Owner.register()` method.

  @for @ember/owner
  @class Factory
  @since 4.10.0
  @public
 */

/**
  The interface representing a manager which can be used for introspection of
  the factory's class or for the creation of factory instances with initial
  properties. The manager is an object with the following properties:

  - `class` - The registered or resolved class.
  - `create` - A function that will create an instance of the class with any
  dependencies injected.

  **Note:** `FactoryManager` is *not* user-constructible; the only legal way
  to get a `FactoryManager` is via `Owner.factoryFor`.

  @for @ember/owner
  @class FactoryManager
  @extends Factory
  @public
 */

/**
 * A record mapping all known items of a given type: if the item is known it
 * will be `true`; otherwise it will be `false` or `undefined`.
 */

/**
  A `Resolver` is the mechanism responsible for looking up code in your
  application and converting its naming conventions into the actual classes,
  functions, and templates that Ember needs to resolve its dependencies, for
  example, what template to render for a given route. It is a system that helps
  the app resolve the lookup of JavaScript modules agnostic of what kind of
  module system is used, which can be AMD, CommonJS or just plain globals. It
  is used to lookup routes, models, components, templates, or anything that is
  used in your Ember app.

  This interface is not a concrete class; instead, it represents the contract a
  custom resolver must implement. Most apps never need to think about this: in
  the default blueprint, this is supplied by the `ember-resolver` package.

  @for @ember/owner
  @class Resolver
  @since 4.10.0
  @public
 */

/**
  The internal representation of a `Factory`, for the extra detail available for
  private use internally than we expose to consumers.

  @for @ember/owner
  @class InternalFactory
  @private
 */

/**
  @private
  @method isFactory
  @param {Object} obj
  @return {Boolean}
  @static
 */
function isFactory(obj) {
  return obj != null && typeof obj.create === 'function';
}

// NOTE: For docs, see the definition at the public API site in `@ember/owner`;
// we document it there for the sake of public API docs and for TS consumption,
// while having the richer `InternalOwner` representation for Ember itself.
function getOwner$2(object) {
  // SAFETY: this is a convention. From the glimmer perspective, the owner really can be any object.
  return getOwner$3(object);
}

/**
  `setOwner` forces a new owner on a given object instance. This is primarily
  useful in some testing cases.

  @method setOwner
  @static
  @for @ember/owner
  @param {Object} object An object instance.
  @param {Owner} object The new owner object of the object instance.
  @since 2.3.0
  @public
*/
function setOwner$1(object, owner) {
  setOwner$2(object, owner);
}

/**
 A container used to instantiate and cache objects.

 Every `Container` must be associated with a `Registry`, which is referenced
 to determine the factory and options that should be used to instantiate
 objects.

 The public API for `Container` is still in flux and should not be considered
 stable.

 @private
 @class Container
 */
class Container {
  static _leakTracking;
  owner;
  registry;
  cache;
  factoryManagerCache;
  validationCache;
  isDestroyed;
  isDestroying;
  constructor(registry, options = {}) {
    this.registry = registry;
    this.owner = options.owner || null;
    this.cache = makeDictionary(options.cache || null);
    this.factoryManagerCache = makeDictionary(options.factoryManagerCache || null);
    this.isDestroyed = false;
    this.isDestroying = false;
  }

  /**
   @private
   @property registry
   @type Registry
   @since 1.11.0
   */

  /**
   @private
   @property cache
   @type InheritingDict
   */

  /**
   @private
   @property validationCache
   @type InheritingDict
   */

  /**
   Given a fullName return a corresponding instance.
    The default behavior is for lookup to return a singleton instance.
   The singleton is scoped to the container, allowing multiple containers
   to all have their own locally scoped singletons.
    ```javascript
   let registry = new Registry();
   let container = registry.container();
    registry.register('api:twitter', Twitter);
    let twitter = container.lookup('api:twitter');
    twitter instanceof Twitter; // => true
    // by default the container will return singletons
   let twitter2 = container.lookup('api:twitter');
   twitter2 instanceof Twitter; // => true
    twitter === twitter2; //=> true
   ```
    If singletons are not wanted, an optional flag can be provided at lookup.
    ```javascript
   let registry = new Registry();
   let container = registry.container();
    registry.register('api:twitter', Twitter);
    let twitter = container.lookup('api:twitter', { singleton: false });
   let twitter2 = container.lookup('api:twitter', { singleton: false });
    twitter === twitter2; //=> false
   ```
    @private
   @method lookup
   @param {String} fullName
   @param {RegisterOptions} [options]
   @return {any}
   */
  lookup(fullName, options) {
    if (this.isDestroyed) {
      throw new Error(`Cannot call \`.lookup('${fullName}')\` after the owner has been destroyed`);
    }
    return lookup(this, this.registry.normalize(fullName), options);
  }

  /**
   A depth first traversal, destroying the container, its descendant containers and all
   their managed objects.
    @private
   @method destroy
   */
  destroy() {
    this.isDestroying = true;
    destroyDestroyables(this);
  }
  finalizeDestroy() {
    resetCache(this);
    this.isDestroyed = true;
  }

  /**
   Clear either the entire cache or just the cache for a particular key.
    @private
   @method reset
   @param {String} fullName optional key to reset; if missing, resets everything
  */
  reset(fullName) {
    if (this.isDestroyed) return;
    if (fullName === undefined) {
      destroyDestroyables(this);
      resetCache(this);
    } else {
      resetMember(this, this.registry.normalize(fullName));
    }
  }

  /**
   Returns an object that can be used to provide an owner to a
   manually created instance.
    @private
   @method ownerInjection
   @returns { Object }
  */
  ownerInjection() {
    let injection = {};
    setOwner$1(injection, this.owner);
    return injection;
  }

  /**
   Given a fullName, return the corresponding factory. The consumer of the factory
   is responsible for the destruction of any factory instances, as there is no
   way for the container to ensure instances are destroyed when it itself is
   destroyed.
    @public
   @method factoryFor
   @param {String} fullName
   @return {any}
   */
  factoryFor(fullName) {
    if (this.isDestroyed) {
      throw new Error(`Cannot call \`.factoryFor('${fullName}')\` after the owner has been destroyed`);
    }
    let normalizedName = this.registry.normalize(fullName);
    return factoryFor(this, normalizedName, fullName);
  }
}
function isSingleton(container, fullName) {
  return container.registry.getOption(fullName, 'singleton') !== false;
}
function isInstantiatable(container, fullName) {
  return container.registry.getOption(fullName, 'instantiate') !== false;
}
function lookup(container, fullName, options = {}) {
  let normalizedName = fullName;
  if (options.singleton === true || options.singleton === undefined && isSingleton(container, fullName)) {
    let cached = container.cache[normalizedName];
    if (cached !== undefined) {
      return cached;
    }
  }
  return instantiateFactory(container, normalizedName, fullName, options);
}
function factoryFor(container, normalizedName, fullName) {
  let cached = container.factoryManagerCache[normalizedName];
  if (cached !== undefined) {
    return cached;
  }
  let factory = container.registry.resolve(normalizedName);
  if (factory === undefined) {
    return;
  }
  let manager = new InternalFactoryManager(container, factory, fullName, normalizedName);
  container.factoryManagerCache[normalizedName] = manager;
  return manager;
}
function isSingletonClass(container, fullName, {
  instantiate,
  singleton
}) {
  return singleton !== false && !instantiate && isSingleton(container, fullName) && !isInstantiatable(container, fullName);
}
function isSingletonInstance(container, fullName, {
  instantiate,
  singleton
}) {
  return singleton !== false && instantiate !== false && (singleton === true || isSingleton(container, fullName)) && isInstantiatable(container, fullName);
}
function isFactoryClass(container, fullname, {
  instantiate,
  singleton
}) {
  return instantiate === false && (singleton === false || !isSingleton(container, fullname)) && !isInstantiatable(container, fullname);
}
function isFactoryInstance(container, fullName, {
  instantiate,
  singleton
}) {
  return instantiate !== false && (singleton === false || !isSingleton(container, fullName)) && isInstantiatable(container, fullName);
}
function instantiateFactory(container, normalizedName, fullName, options) {
  let factoryManager = factoryFor(container, normalizedName, fullName);
  if (factoryManager === undefined) {
    return;
  }

  // SomeClass { singleton: true, instantiate: true } | { singleton: true } | { instantiate: true } | {}
  // By default majority of objects fall into this case
  if (isSingletonInstance(container, fullName, options)) {
    let instance = container.cache[normalizedName] = factoryManager.create();

    // if this lookup happened _during_ destruction (emits a deprecation, but
    // is still possible) ensure that it gets destroyed
    if (container.isDestroying) {
      if (typeof instance.destroy === 'function') {
        instance.destroy();
      }
    }
    return instance;
  }

  // SomeClass { singleton: false, instantiate: true }
  if (isFactoryInstance(container, fullName, options)) {
    return factoryManager.create();
  }

  // SomeClass { singleton: true, instantiate: false } | { instantiate: false } | { singleton: false, instantiation: false }
  if (isSingletonClass(container, fullName, options) || isFactoryClass(container, fullName, options)) {
    return factoryManager.class;
  }
  throw new Error('Could not create factory');
}
function destroyDestroyables(container) {
  let cache = container.cache;
  let keys = Object.keys(cache);
  for (let key of keys) {
    let value = cache[key];
    if (value.destroy) {
      value.destroy();
    }
  }
}
function resetCache(container) {
  container.cache = makeDictionary(null);
  container.factoryManagerCache = makeDictionary(null);
}
function resetMember(container, fullName) {
  let member = container.cache[fullName];
  delete container.factoryManagerCache[fullName];
  if (member) {
    delete container.cache[fullName];
    if (member.destroy) {
      member.destroy();
    }
  }
}
const INIT_FACTORY = Symbol('INIT_FACTORY');
function getFactoryFor(obj) {
  // SAFETY: since we know `obj` is an `object`, we also know we can safely ask
  // whether a key is set on it.
  return obj[INIT_FACTORY];
}
function setFactoryFor(obj, factory) {
  // SAFETY: since we know `obj` is an `object`, we also know we can safely set
  // a key it safely at this location. (The only way this could be blocked is if
  // someone has gone out of their way to use `Object.defineProperty()` with our
  // internal-only symbol and made it `writable: false`.)
  obj[INIT_FACTORY] = factory;
}
class InternalFactoryManager {
  container;
  owner;
  class;
  fullName;
  normalizedName;
  madeToString;
  injections;
  constructor(container, factory, fullName, normalizedName) {
    this.container = container;
    this.owner = container.owner;
    this.class = factory;
    this.fullName = fullName;
    this.normalizedName = normalizedName;
    this.madeToString = undefined;
    this.injections = undefined;
  }
  toString() {
    if (this.madeToString === undefined) {
      this.madeToString = this.container.registry.makeToString(this.class, this.fullName);
    }
    return this.madeToString;
  }
  create(options) {
    let {
      container
    } = this;
    if (container.isDestroyed) {
      throw new Error(`Cannot create new instances after the owner has been destroyed (you attempted to create ${this.fullName})`);
    }
    let props = options ? {
      ...options
    } : {};
    setOwner$1(props, container.owner);
    setFactoryFor(props, this);
    return this.class.create(props);
  }
}
const VALID_FULL_NAME_REGEXP = /^[^:]+:[^:]+$/;

/**
 A registry used to store factory and option information keyed
 by type.

 A `Registry` stores the factory and option information needed by a
 `Container` to instantiate and cache objects.

 The API for `Registry` is still in flux and should not be considered stable.

 @private
 @class Registry
 @since 1.11.0
*/
class Registry {
  _failSet;
  resolver;
  fallback;
  registrations;
  _normalizeCache;
  _options;
  _resolveCache;
  _typeOptions;
  constructor(options = {}) {
    this.fallback = options.fallback || null;
    this.resolver = options.resolver || null;
    this.registrations = makeDictionary(options.registrations || null);
    this._normalizeCache = makeDictionary(null);
    this._resolveCache = makeDictionary(null);
    this._failSet = new Set();
    this._options = makeDictionary(null);
    this._typeOptions = makeDictionary(null);
  }

  /**
   A backup registry for resolving registrations when no matches can be found.
    @private
   @property fallback
   @type Registry
   */

  /**
   An object that has a `resolve` method that resolves a name.
    @private
   @property resolver
   @type Resolver
   */

  /**
   @private
   @property registrations
   @type InheritingDict
   */

  /**
   @private
    @property _normalizeCache
   @type InheritingDict
   */

  /**
   @private
    @property _resolveCache
   @type InheritingDict
   */

  /**
   @private
    @property _options
   @type InheritingDict
   */

  /**
   @private
    @property _typeOptions
   @type InheritingDict
   */

  /**
   Creates a container based on this registry.
    @private
   @method container
   @param {Object} options
   @return {Container} created container
   */
  container(options) {
    return new Container(this, options);
  }

  /**
   Registers a factory for later injection.
    Example:
    ```javascript
   let registry = new Registry();
    registry.register('model:user', Person, {singleton: false });
   registry.register('fruit:favorite', Orange);
   registry.register('communication:main', Email, {singleton: false});
   ```
    @private
   @method register
   @param {String} fullName
   @param {Function} factory
   @param {Object} options
   */

  register(fullName, factory, options = {}) {
    let normalizedName = this.normalize(fullName);
    this._failSet.delete(normalizedName);
    this.registrations[normalizedName] = factory;
    this._options[normalizedName] = options;
  }

  /**
   Unregister a fullName
    ```javascript
   let registry = new Registry();
   registry.register('model:user', User);
    registry.resolve('model:user').create() instanceof User //=> true
    registry.unregister('model:user')
   registry.resolve('model:user') === undefined //=> true
   ```
    @private
   @method unregister
   @param {String} fullName
   */
  unregister(fullName) {
    let normalizedName = this.normalize(fullName);
    delete this.registrations[normalizedName];
    delete this._resolveCache[normalizedName];
    delete this._options[normalizedName];
    this._failSet.delete(normalizedName);
  }

  /**
   Given a fullName return the corresponding factory.
    By default `resolve` will retrieve the factory from
   the registry.
    ```javascript
   let registry = new Registry();
   registry.register('api:twitter', Twitter);
    registry.resolve('api:twitter') // => Twitter
   ```
    Optionally the registry can be provided with a custom resolver.
   If provided, `resolve` will first provide the custom resolver
   the opportunity to resolve the fullName, otherwise it will fallback
   to the registry.
    ```javascript
   let registry = new Registry();
   registry.resolver = function(fullName) {
      // lookup via the module system of choice
    };
    // the twitter factory is added to the module system
   registry.resolve('api:twitter') // => Twitter
   ```
    @private
   @method resolve
   @param {String} fullName
   @return {Function} fullName's factory
   */
  resolve(fullName) {
    let factory = resolve$4(this, this.normalize(fullName));
    if (factory === undefined && this.fallback !== null) {
      factory = this.fallback.resolve(fullName);
    }
    return factory;
  }

  /**
   A hook that can be used to describe how the resolver will
   attempt to find the factory.
    For example, the default Ember `.describe` returns the full
   class name (including namespace) where Ember's resolver expects
   to find the `fullName`.
    @private
   @method describe
   @param {String} fullName
   @return {string} described fullName
   */
  describe(fullName) {
    if (this.resolver !== null && this.resolver.lookupDescription) {
      return this.resolver.lookupDescription(fullName);
    } else if (this.fallback !== null) {
      return this.fallback.describe(fullName);
    } else {
      return fullName;
    }
  }

  /**
   A hook to enable custom fullName normalization behavior
    @private
   @method normalizeFullName
   @param {String} fullName
   @return {string} normalized fullName
   */
  normalizeFullName(fullName) {
    if (this.resolver !== null && this.resolver.normalize) {
      return this.resolver.normalize(fullName);
    } else if (this.fallback !== null) {
      return this.fallback.normalizeFullName(fullName);
    } else {
      return fullName;
    }
  }

  /**
   Normalize a fullName based on the application's conventions
    @private
   @method normalize
   @param {String} fullName
   @return {string} normalized fullName
   */
  normalize(fullName) {
    return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this.normalizeFullName(fullName));
  }

  /**
   @method makeToString
    @private
   @param {any} factory
   @param {string} fullName
   @return {function} toString function
   */
  makeToString(factory, fullName) {
    if (this.resolver !== null && this.resolver.makeToString) {
      return this.resolver.makeToString(factory, fullName);
    } else if (this.fallback !== null) {
      return this.fallback.makeToString(factory, fullName);
    } else {
      return typeof factory === 'string' ? factory : factory.name ?? '(unknown class)';
    }
  }

  /**
   Given a fullName check if the container is aware of its factory
   or singleton instance.
    @private
   @method has
   @param {String} fullName
   @param {Object} [options]
   @param {String} [options.source] the fullname of the request source (used for local lookups)
   @return {Boolean}
   */
  has(fullName) {
    if (!this.isValidFullName(fullName)) {
      return false;
    }
    return has$1(this, this.normalize(fullName));
  }

  /**
   Allow registering options for all factories of a type.
    ```javascript
   let registry = new Registry();
   let container = registry.container();
    // if all of type `connection` must not be singletons
   registry.optionsForType('connection', { singleton: false });
    registry.register('connection:twitter', TwitterConnection);
   registry.register('connection:facebook', FacebookConnection);
    let twitter = container.lookup('connection:twitter');
   let twitter2 = container.lookup('connection:twitter');
    twitter === twitter2; // => false
    let facebook = container.lookup('connection:facebook');
   let facebook2 = container.lookup('connection:facebook');
    facebook === facebook2; // => false
   ```
    @private
   @method optionsForType
   @param {String} type
   @param {Object} options
   */
  optionsForType(type, options) {
    this._typeOptions[type] = options;
  }
  getOptionsForType(type) {
    let optionsForType = this._typeOptions[type];
    if (optionsForType === undefined && this.fallback !== null) {
      optionsForType = this.fallback.getOptionsForType(type);
    }
    return optionsForType;
  }

  /**
   @private
   @method options
   @param {String} fullName
   @param {Object} options
   */
  options(fullName, options) {
    let normalizedName = this.normalize(fullName);
    this._options[normalizedName] = options;
  }
  getOptions(fullName) {
    let normalizedName = this.normalize(fullName);
    let options = this._options[normalizedName];
    if (options === undefined && this.fallback !== null) {
      options = this.fallback.getOptions(fullName);
    }
    return options;
  }
  getOption(fullName, optionName) {
    let options = this._options[fullName];
    if (options !== undefined && options[optionName] !== undefined) {
      return options[optionName];
    }
    let type = fullName.split(':')[0];
    options = this._typeOptions[type];
    if (options && options[optionName] !== undefined) {
      return options[optionName];
    } else if (this.fallback !== null) {
      return this.fallback.getOption(fullName, optionName);
    }
    return undefined;
  }

  /**
   @private
   @method knownForType
   @param {String} type the type to iterate over
  */
  knownForType(type) {
    let localKnown = makeDictionary(null);
    let registeredNames = Object.keys(this.registrations);
    for (let fullName of registeredNames) {
      let itemType = fullName.split(':')[0];
      if (itemType === type) {
        localKnown[fullName] = true;
      }
    }
    let fallbackKnown, resolverKnown;
    if (this.fallback !== null) {
      fallbackKnown = this.fallback.knownForType(type);
    }
    if (this.resolver !== null && this.resolver.knownForType) {
      resolverKnown = this.resolver.knownForType(type);
    }
    return Object.assign({}, fallbackKnown, localKnown, resolverKnown);
  }
  isValidFullName(fullName) {
    return VALID_FULL_NAME_REGEXP.test(fullName);
  }
}
function resolve$4(registry, _normalizedName) {
  let normalizedName = _normalizedName;
  let cached = registry._resolveCache[normalizedName];
  if (cached !== undefined) {
    return cached;
  }
  if (registry._failSet.has(normalizedName)) {
    return;
  }
  let resolved;
  if (registry.resolver) {
    resolved = registry.resolver.resolve(normalizedName);
  }
  if (resolved === undefined) {
    resolved = registry.registrations[normalizedName];
  }
  if (resolved === undefined) {
    registry._failSet.add(normalizedName);
  } else {
    registry._resolveCache[normalizedName] = resolved;
  }
  return resolved;
}
function has$1(registry, fullName) {
  return registry.resolve(fullName) !== undefined;
}
const privateNames = makeDictionary(null);
const privateSuffix = `${Math.random()}${Date.now()}`.replace('.', '');
function privatize([fullName]) {
  let name = privateNames[fullName];
  if (name) {
    return name;
  }
  let [type, rawName] = fullName.split(':');
  return privateNames[fullName] = intern(`${type}:${rawName}-${privateSuffix}`);
}

// Some legacy symbols still need to be enumerable for a variety of reasons.
// This code exists for that, and as a fallback in IE11. In general, prefer
// `symbol` below when creating a new symbol.
function enumerableSymbol(debugName) {
  // TODO: Investigate using platform symbols, but we do not
  // want to require non-enumerability for this API, which
  // would introduce a large cost.
  let id = GUID_KEY + Math.floor(Math.random() * Date.now()).toString();
  let symbol = intern(`__${debugName}${id}__`);
  return symbol;
}
const symbol = Symbol;

//////////
/**
 * Schedules a VM revalidation.
 *
 * Note: this has a default value so that tags can warm themselves when first loaded.
 */
let scheduleDestroy,
  scheduleDestroyed,
  toIterator$1,
  toBool$1,
  getProp,
  setProp,
  getPath,
  setPath,
  scheduleRevalidate = () => {};
function setGlobalContext(context) {
  scheduleRevalidate = context.scheduleRevalidate, scheduleDestroy = context.scheduleDestroy, scheduleDestroyed = context.scheduleDestroyed, toIterator$1 = context.toIterator, toBool$1 = context.toBool, getProp = context.getProp, setProp = context.setProp, getPath = context.getPath, setPath = context.setPath;
}

let enableDestroyableTracking,
  assertDestroyablesDestroyed,
  DESTROYABLE_META = new WeakMap();
function push(collection, newItem) {
  return null === collection ? newItem : Array.isArray(collection) ? (collection.push(newItem), collection) : [collection, newItem];
}
function iterate$1(collection, fn) {
  Array.isArray(collection) ? collection.forEach(fn) : null !== collection && fn(collection);
}
function remove(collection, item, message) {
  if (Array.isArray(collection) && collection.length > 1) {
    let index = collection.indexOf(item);
    return collection.splice(index, 1), collection;
  }
  return null;
}
function getDestroyableMeta(destroyable) {
  let meta = DESTROYABLE_META.get(destroyable);
  return void 0 === meta && (meta = {
    parents: null,
    children: null,
    eagerDestructors: null,
    destructors: null,
    state: 0
  }, DESTROYABLE_META.set(destroyable, meta)), meta;
}
function associateDestroyableChild(parent, child) {
  let parentMeta = getDestroyableMeta(parent),
    childMeta = getDestroyableMeta(child);
  return parentMeta.children = push(parentMeta.children, child), childMeta.parents = push(childMeta.parents, parent), child;
}
function registerDestructor$1(destroyable, destructor, eager = false) {
  let meta = getDestroyableMeta(destroyable),
    destructorsKey = eager ? "eagerDestructors" : "destructors";
  return meta[destructorsKey] = push(meta[destructorsKey], destructor), destructor;
}
function unregisterDestructor$1(destroyable, destructor, eager = false) {
  let meta = getDestroyableMeta(destroyable),
    destructorsKey = eager ? "eagerDestructors" : "destructors";
  meta[destructorsKey] = remove(meta[destructorsKey], destructor);
}

////////////
function destroy(destroyable) {
  let meta = getDestroyableMeta(destroyable);
  if (meta.state >= 1) return;
  let {
    parents: parents,
    children: children,
    eagerDestructors: eagerDestructors,
    destructors: destructors
  } = meta;
  meta.state = 1, iterate$1(children, destroy), iterate$1(eagerDestructors, destructor => {
    destructor(destroyable);
  }), iterate$1(destructors, destructor => {
    scheduleDestroy(destroyable, destructor);
  }), scheduleDestroyed(() => {
    iterate$1(parents, parent => {
      !function (child, parent) {
        let parentMeta = getDestroyableMeta(parent);
        0 === parentMeta.state && (parentMeta.children = remove(parentMeta.children, child));
      }(destroyable, parent);
    }), meta.state = 2;
  });
}
function destroyChildren(destroyable) {
  let {
    children: children
  } = getDestroyableMeta(destroyable);
  iterate$1(children, destroy);
}
function _hasDestroyableChildren(destroyable) {
  let meta = DESTROYABLE_META.get(destroyable);
  return void 0 !== meta && null !== meta.children;
}
function isDestroying(destroyable) {
  let meta = DESTROYABLE_META.get(destroyable);
  return void 0 !== meta && meta.state >= 1;
}
function isDestroyed(destroyable) {
  let meta = DESTROYABLE_META.get(destroyable);
  return void 0 !== meta && meta.state >= 2;
}

const objectPrototype = Object.prototype;

/**
@module ember
*/

const UNDEFINED = symbol('undefined');
var ListenerKind = /*#__PURE__*/function (ListenerKind) {
  ListenerKind[ListenerKind["ADD"] = 0] = "ADD";
  ListenerKind[ListenerKind["ONCE"] = 1] = "ONCE";
  ListenerKind[ListenerKind["REMOVE"] = 2] = "REMOVE";
  return ListenerKind;
}(ListenerKind || {});
let currentListenerVersion = 1;
class Meta {
  /** @internal */
  _descriptors;
  /** @internal */
  _mixins;
  /** @internal */
  _isInit;
  /** @internal */
  _lazyChains;
  /** @internal */
  _values;
  /** @internal */
  _revisions;
  /** @internal */
  source;
  /** @internal */
  proto;
  /** @internal */
  _parent;

  /** @internal */
  _listeners;
  /** @internal */
  _listenersVersion = 1;
  /** @internal */
  _inheritedEnd = -1;
  /** @internal */
  _flattenedVersion = 0;

  // DEBUG
  /** @internal */
  constructor(obj) {
    this._parent = undefined;
    this._descriptors = undefined;
    this._mixins = undefined;
    this._lazyChains = undefined;
    this._values = undefined;
    this._revisions = undefined;

    // initial value for all flags right now is false
    // see FLAGS const for detailed list of flags used
    this._isInit = false;

    // used only internally
    this.source = obj;
    this.proto = obj.constructor === undefined ? undefined : obj.constructor.prototype;
    this._listeners = undefined;
  }

  /** @internal */
  get parent() {
    let parent = this._parent;
    if (parent === undefined) {
      let proto = getPrototypeOf$2(this.source);
      this._parent = parent = proto === null || proto === objectPrototype ? null : meta$1(proto);
    }
    return parent;
  }
  setInitializing() {
    this._isInit = true;
  }

  /** @internal */
  unsetInitializing() {
    this._isInit = false;
  }

  /** @internal */
  isInitializing() {
    return this._isInit;
  }

  /** @internal */
  isPrototypeMeta(obj) {
    return this.proto === this.source && this.source === obj;
  }

  /** @internal */
  _getOrCreateOwnMap(key) {
    return this[key] || (this[key] = Object.create(null));
  }

  /** @internal */
  _getOrCreateOwnSet(key) {
    return this[key] || (this[key] = new Set());
  }

  /** @internal */
  _findInheritedMap(key, subkey) {
    let pointer = this;
    while (pointer !== null) {
      let map = pointer[key];
      if (map !== undefined) {
        let value = map.get(subkey);
        if (value !== undefined) {
          return value;
        }
      }
      pointer = pointer.parent;
    }
  }

  /** @internal */
  _hasInInheritedSet(key, value) {
    let pointer = this;
    while (pointer !== null) {
      let set = pointer[key];
      if (set !== undefined && set.has(value)) {
        return true;
      }
      pointer = pointer.parent;
    }
    return false;
  }

  /** @internal */
  valueFor(key) {
    let values = this._values;
    return values !== undefined ? values[key] : undefined;
  }

  /** @internal */
  setValueFor(key, value) {
    let values = this._getOrCreateOwnMap('_values');
    values[key] = value;
  }

  /** @internal */
  revisionFor(key) {
    let revisions = this._revisions;
    return revisions !== undefined ? revisions[key] : undefined;
  }

  /** @internal */
  setRevisionFor(key, revision) {
    let revisions = this._getOrCreateOwnMap('_revisions');
    revisions[key] = revision;
  }

  /** @internal */
  writableLazyChainsFor(key) {
    let lazyChains = this._getOrCreateOwnMap('_lazyChains');
    let chains = lazyChains[key];
    if (chains === undefined) {
      chains = lazyChains[key] = [];
    }
    return chains;
  }

  /** @internal */
  readableLazyChainsFor(key) {
    let lazyChains = this._lazyChains;
    if (lazyChains !== undefined) {
      return lazyChains[key];
    }
    return undefined;
  }

  /** @internal */
  addMixin(mixin) {
    let set = this._getOrCreateOwnSet('_mixins');
    set.add(mixin);
  }

  /** @internal */
  hasMixin(mixin) {
    return this._hasInInheritedSet('_mixins', mixin);
  }

  /** @internal */
  forEachMixins(fn) {
    let pointer = this;
    let seen;
    while (pointer !== null) {
      let set = pointer._mixins;
      if (set !== undefined) {
        seen = seen === undefined ? new Set() : seen;
        // TODO cleanup typing here
        set.forEach(mixin => {
          if (!seen.has(mixin)) {
            seen.add(mixin);
            fn(mixin);
          }
        });
      }
      pointer = pointer.parent;
    }
  }

  /** @internal */
  writeDescriptors(subkey, value) {
    let map = this._descriptors || (this._descriptors = new Map());
    map.set(subkey, value);
  }

  /** @internal */
  peekDescriptors(subkey) {
    let possibleDesc = this._findInheritedMap('_descriptors', subkey);
    return possibleDesc === UNDEFINED ? undefined : possibleDesc;
  }

  /** @internal */
  removeDescriptors(subkey) {
    this.writeDescriptors(subkey, UNDEFINED);
  }

  /** @internal */
  forEachDescriptors(fn) {
    let pointer = this;
    let seen;
    while (pointer !== null) {
      let map = pointer._descriptors;
      if (map !== undefined) {
        seen = seen === undefined ? new Set() : seen;
        map.forEach((value, key) => {
          if (!seen.has(key)) {
            seen.add(key);
            if (value !== UNDEFINED) {
              fn(key, value);
            }
          }
        });
      }
      pointer = pointer.parent;
    }
  }

  /** @internal */
  addToListeners(eventName, target, method, once, sync) {
    this.pushListener(eventName, target, method, once ? ListenerKind.ONCE : ListenerKind.ADD, sync);
  }

  /** @internal */
  removeFromListeners(eventName, target, method) {
    this.pushListener(eventName, target, method, ListenerKind.REMOVE);
  }
  pushListener(event, target, method, kind, sync = false) {
    let listeners = this.writableListeners();
    let i = indexOfListener(listeners, event, target, method);

    // remove if found listener was inherited
    if (i !== -1 && i < this._inheritedEnd) {
      listeners.splice(i, 1);
      this._inheritedEnd--;
      i = -1;
    }

    // if not found, push. Note that we must always push if a listener is not
    // found, even in the case of a function listener remove, because we may be
    // attempting to add or remove listeners _before_ flattening has occurred.
    if (i === -1) {
      listeners.push({
        event,
        target,
        method,
        kind,
        sync
      });
    } else {
      let listener = listeners[i];
      // want to splice it out entirely so we don't hold onto a reference.
      if (kind === ListenerKind.REMOVE && listener.kind !== ListenerKind.REMOVE) {
        listeners.splice(i, 1);
      } else {
        listener.kind = kind;
        listener.sync = sync;
      }
    }
  }
  writableListeners() {
    // Check if we need to invalidate and reflatten. We need to do this if we
    // have already flattened (flattened version is the current version) and
    // we are either writing to a prototype meta OR we have never inherited, and
    // may have cached the parent's listeners.
    if (this._flattenedVersion === currentListenerVersion && (this.source === this.proto || this._inheritedEnd === -1)) {
      currentListenerVersion++;
    }

    // Inherited end has not been set, then we have never created our own
    // listeners, but may have cached the parent's
    if (this._inheritedEnd === -1) {
      this._inheritedEnd = 0;
      this._listeners = [];
    }
    return this._listeners;
  }

  /**
    Flattening is based on a global revision counter. If the revision has
    bumped it means that somewhere in a class inheritance chain something has
    changed, so we need to reflatten everything. This can only happen if:
     1. A meta has been flattened (listener has been called)
    2. The meta is a prototype meta with children who have inherited its
       listeners
    3. A new listener is subsequently added to the meta (e.g. via `.reopen()`)
     This is a very rare occurrence, so while the counter is global it shouldn't
    be updated very often in practice.
  */
  flattenedListeners() {
    if (this._flattenedVersion < currentListenerVersion) {
      let parent = this.parent;
      if (parent !== null) {
        // compute
        let parentListeners = parent.flattenedListeners();
        if (parentListeners !== undefined) {
          if (this._listeners === undefined) {
            this._listeners = parentListeners;
          } else {
            let listeners = this._listeners;
            if (this._inheritedEnd > 0) {
              listeners.splice(0, this._inheritedEnd);
              this._inheritedEnd = 0;
            }
            for (let listener of parentListeners) {
              let index = indexOfListener(listeners, listener.event, listener.target, listener.method);
              if (index === -1) {
                listeners.unshift(listener);
                this._inheritedEnd++;
              }
            }
          }
        }
      }
      this._flattenedVersion = currentListenerVersion;
    }
    return this._listeners;
  }

  /** @internal */
  matchingListeners(eventName) {
    let listeners = this.flattenedListeners();
    let result;
    if (listeners !== undefined) {
      for (let listener of listeners) {
        // REMOVE listeners are placeholders that tell us not to
        // inherit, so they never match. Only ADD and ONCE can match.
        if (listener.event === eventName && (listener.kind === ListenerKind.ADD || listener.kind === ListenerKind.ONCE)) {
          if (result === undefined) {
            // we create this array only after we've found a listener that
            // matches to avoid allocations when no matches are found.
            result = [];
          }
          result.push(listener.target, listener.method, listener.kind === ListenerKind.ONCE);
        }
      }
    }
    return result;
  }

  /** @internal */
  observerEvents() {
    let listeners = this.flattenedListeners();
    let result;
    if (listeners !== undefined) {
      for (let listener of listeners) {
        // REMOVE listeners are placeholders that tell us not to
        // inherit, so they never match. Only ADD and ONCE can match.
        if ((listener.kind === ListenerKind.ADD || listener.kind === ListenerKind.ONCE) && listener.event.indexOf(':change') !== -1) {
          if (result === undefined) {
            // we create this array only after we've found a listener that
            // matches to avoid allocations when no matches are found.
            result = [];
          }
          result.push(listener);
        }
      }
    }
    return result;
  }
}
const getPrototypeOf$2 = Object.getPrototypeOf;
const metaStore = new WeakMap();
function setMeta(obj, meta) {
  metaStore.set(obj, meta);
}
function peekMeta(obj) {
  let meta = metaStore.get(obj);
  if (meta !== undefined) {
    return meta;
  }
  let pointer = getPrototypeOf$2(obj);
  while (pointer !== null) {
    meta = metaStore.get(pointer);
    if (meta !== undefined) {
      if (meta.proto !== pointer) {
        // The meta was a prototype meta which was not marked as initializing.
        // This can happen when a prototype chain was created manually via
        // Object.create() and the source object does not have a constructor.
        meta.proto = pointer;
      }
      return meta;
    }
    pointer = getPrototypeOf$2(pointer);
  }
  return null;
}

/**
  Retrieves the meta hash for an object. If `writable` is true ensures the
  hash is writable for this object as well.

  The meta object contains information about computed property descriptors as
  well as any watched properties and other information. You generally will
  not access this information directly but instead work with higher level
  methods that manipulate this hash indirectly.

  @method meta
  @for Ember
  @private

  @param {Object} obj The object to retrieve meta for
  @param {Boolean} [writable=true] Pass `false` if you do not intend to modify
    the meta hash, allowing the method to avoid making an unnecessary copy.
  @return {Object} the meta hash for an object
*/
const meta$1 = function meta(obj) {
  let maybeMeta = peekMeta(obj);

  // remove this code, in-favor of explicit parent
  if (maybeMeta !== null && maybeMeta.source === obj) {
    return maybeMeta;
  }
  let newMeta = new Meta(obj);
  setMeta(obj, newMeta);
  return newMeta;
};
function indexOfListener(listeners, event, target, method) {
  for (let i = listeners.length - 1; i >= 0; i--) {
    let listener = listeners[i];
    if (listener.event === event && listener.target === target && listener.method === method) {
      return i;
    }
  }
  return -1;
}

function unwrap(val) {
  if (null == val) throw new Error("Expected value to be present");
  return val;
}
const INITIAL = 1;
let $REVISION = 1;

//////////
const COMPUTE = Symbol("TAG_COMPUTE");

//////////
/**
 * `value` receives a tag and returns an opaque Revision based on that tag. This
 * snapshot can then later be passed to `validate` with the same tag to
 * determine if the tag has changed at all since the time that `value` was
 * called.
 *
 * @param tag
 */
function valueForTag(tag) {
  return tag[COMPUTE]();
}

/**
 * `validate` receives a tag and a snapshot from a previous call to `value` with
 * the same tag, and determines if the tag is still valid compared to the
 * snapshot. If the tag's state has changed at all since then, `validate` will
 * return false, otherwise it will return true. This is used to determine if a
 * calculation related to the tags should be rerun.
 *
 * @param tag
 * @param snapshot
 */
function validateTag(tag, snapshot) {
  return snapshot >= tag[COMPUTE]();
}

//////////
Reflect.set(globalThis, "COMPUTE_SYMBOL", COMPUTE);
const TYPE$1 = Symbol("TAG_TYPE");

// this is basically a const
let ALLOW_CYCLES;
class MonomorphicTagImpl {
  static combine(tags) {
    switch (tags.length) {
      case 0:
        return CONSTANT_TAG;
      case 1:
        return tags[0];
      default:
        {
          let tag = new MonomorphicTagImpl(2);
          return tag.subtag = tags, tag;
        }
    }
  }
  constructor(type) {
    this.revision = 1, this.lastChecked = 1, this.lastValue = 1, this.isUpdating = false, this.subtag = null, this.subtagBufferCache = null, this[TYPE$1] = type;
  }
  [COMPUTE]() {
    let {
      lastChecked: lastChecked
    } = this;
    if (this.isUpdating) {
      this.lastChecked = ++$REVISION;
    } else if (lastChecked !== $REVISION) {
      this.isUpdating = true, this.lastChecked = $REVISION;
      try {
        let {
          subtag: subtag,
          revision: revision
        } = this;
        if (null !== subtag) if (Array.isArray(subtag)) for (const tag of subtag) {
          let value = tag[COMPUTE]();
          revision = Math.max(value, revision);
        } else {
          let subtagValue = subtag[COMPUTE]();
          subtagValue === this.subtagBufferCache ? revision = Math.max(revision, this.lastValue) : (
          // Clear the temporary buffer cache
          this.subtagBufferCache = null, revision = Math.max(revision, subtagValue));
        }
        this.lastValue = revision;
      } finally {
        this.isUpdating = false;
      }
    }
    return this.lastValue;
  }
  static updateTag(_tag, _subtag) {
    // TODO: TS 3.7 should allow us to do this via assertion
    let tag = _tag,
      subtag = _subtag;
    subtag === CONSTANT_TAG ? tag.subtag = null : (
    // There are two different possibilities when updating a subtag:
    // 1. subtag[COMPUTE]() <= tag[COMPUTE]();
    // 2. subtag[COMPUTE]() > tag[COMPUTE]();
    // The first possibility is completely fine within our caching model, but
    // the second possibility presents a problem. If the parent tag has
    // already been read, then it's value is cached and will not update to
    // reflect the subtag's greater value. Next time the cache is busted, the
    // subtag's value _will_ be read, and it's value will be _greater_ than
    // the saved snapshot of the parent, causing the resulting calculation to
    // be rerun erroneously.
    // In order to prevent this, when we first update to a new subtag we store
    // its computed value, and then check against that computed value on
    // subsequent updates. If its value hasn't changed, then we return the
    // parent's previous value. Once the subtag changes for the first time,
    // we clear the cache and everything is finally in sync with the parent.
    tag.subtagBufferCache = subtag[COMPUTE](), tag.subtag = subtag);
  }
  static dirtyTag(tag, disableConsumptionAssertion) {
    tag.revision = ++$REVISION, scheduleRevalidate();
  }
}
const DIRTY_TAG$1 = MonomorphicTagImpl.dirtyTag,
  UPDATE_TAG = MonomorphicTagImpl.updateTag;

//////////
function createTag() {
  return new MonomorphicTagImpl(0);
}
function createUpdatableTag() {
  return new MonomorphicTagImpl(1);
}

//////////
const CONSTANT_TAG = new MonomorphicTagImpl(3);
function isConstTag(tag) {
  return tag === CONSTANT_TAG;
}

//////////
class CurrentTag {
  [COMPUTE]() {
    return $REVISION;
  }
  constructor() {
    this[TYPE$1] = 101;
  }
}
const CURRENT_TAG = new CurrentTag(),
  combine = MonomorphicTagImpl.combine;

//////////
// Warm
let tag1 = createUpdatableTag(),
  tag2 = createUpdatableTag(),
  tag3 = createUpdatableTag();
valueForTag(tag1), DIRTY_TAG$1(tag1), valueForTag(tag1), UPDATE_TAG(tag1, combine([tag2, tag3])), valueForTag(tag1), DIRTY_TAG$1(tag2), valueForTag(tag1), DIRTY_TAG$1(tag3), valueForTag(tag1), UPDATE_TAG(tag1, tag3), valueForTag(tag1), DIRTY_TAG$1(tag3), valueForTag(tag1);
const TRACKED_TAGS = new WeakMap();
function dirtyTagFor(obj, key, meta) {
  let tags = TRACKED_TAGS.get(obj) ;
  // No tags have been setup for this object yet, return
  if (void 0 === tags) return;
  // Dirty the tag for the specific property if it exists
  let propertyTag = tags.get(key);
  void 0 !== propertyTag && (DIRTY_TAG$1(propertyTag, true));
}
function tagMetaFor(obj) {
  let tags = TRACKED_TAGS.get(obj);
  return void 0 === tags && (tags = new Map(), TRACKED_TAGS.set(obj, tags)), tags;
}
function tagFor(obj, key, meta) {
  let tags = void 0 === meta ? tagMetaFor(obj) : meta,
    tag = tags.get(key);
  return void 0 === tag && (tag = createUpdatableTag(), tags.set(key, tag)), tag;
}

/**
 * An object that that tracks @tracked properties that were consumed.
 */
class Tracker {
  add(tag) {
    tag !== CONSTANT_TAG && (this.tags.add(tag), this.last = tag);
  }
  combine() {
    let {
      tags: tags
    } = this;
    return 0 === tags.size ? CONSTANT_TAG : 1 === tags.size ? this.last : combine(Array.from(this.tags));
  }
  constructor() {
    this.tags = new Set(), this.last = null;
  }
}

/**
 * Whenever a tracked computed property is entered, the current tracker is
 * saved off and a new tracker is replaced.
 *
 * Any tracked properties consumed are added to the current tracker.
 *
 * When a tracked computed property is exited, the tracker's tags are
 * combined and added to the parent tracker.
 *
 * The consequence is that each tracked computed property has a tag
 * that corresponds to the tracked properties consumed inside of
 * itself, including child tracked computed properties.
 */
let CURRENT_TRACKER = null;
const OPEN_TRACK_FRAMES = [];
function beginTrackFrame(debuggingContext) {
  OPEN_TRACK_FRAMES.push(CURRENT_TRACKER), CURRENT_TRACKER = new Tracker();
}
function endTrackFrame() {
  let current = CURRENT_TRACKER;
  return CURRENT_TRACKER = OPEN_TRACK_FRAMES.pop() || null, unwrap(current).combine();
}
function beginUntrackFrame() {
  OPEN_TRACK_FRAMES.push(CURRENT_TRACKER), CURRENT_TRACKER = null;
}
function endUntrackFrame() {
  CURRENT_TRACKER = OPEN_TRACK_FRAMES.pop() || null;
}
function isTracking() {
  return null !== CURRENT_TRACKER;
}
function consumeTag(tag) {
  null !== CURRENT_TRACKER && CURRENT_TRACKER.add(tag);
}
const FN = Symbol("FN"),
  LAST_VALUE = Symbol("LAST_VALUE"),
  TAG = Symbol("TAG"),
  SNAPSHOT = Symbol("SNAPSHOT");
function createCache(fn, debuggingLabel) {
  let cache = {
    [FN]: fn,
    [LAST_VALUE]: void 0,
    [TAG]: void 0,
    [SNAPSHOT]: -1
  };
  return cache;
}
function getValue(cache) {
  let fn = cache[FN],
    tag = cache[TAG],
    snapshot = cache[SNAPSHOT];
  if (void 0 !== tag && validateTag(tag, snapshot)) consumeTag(tag);else {
    beginTrackFrame();
    try {
      cache[LAST_VALUE] = fn();
    } finally {
      tag = endTrackFrame(), cache[TAG] = tag, cache[SNAPSHOT] = valueForTag(tag), consumeTag(tag);
    }
  }
  return cache[LAST_VALUE];
}
function isConst(cache) {
  let tag = cache[TAG];
  // replace this with `expect` when we can
  return isConstTag(tag);
}
function track(block, debugLabel) {
  let tag;
  beginTrackFrame();
  try {
    block();
  } finally {
    tag = endTrackFrame();
  }
  return tag;
}

// untrack() is currently mainly used to handle places that were previously not
// tracked, and that tracking now would cause backtracking rerender assertions.
// I think once we move everyone forward onto modern APIs, we'll probably be
// able to remove it, but I'm not sure yet.
function untrack(callback) {
  beginUntrackFrame();
  try {
    return callback();
  } finally {
    endUntrackFrame();
  }
}
function trackedData(key, initializer) {
  let values = new WeakMap(),
    hasInitializer = "function" == typeof initializer;
  return {
    getter: function (self) {
      let value;
      // If the field has never been initialized, we should initialize it
      return consumeTag(tagFor(self, key)), hasInitializer && !values.has(self) ? (
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      value = initializer.call(self), values.set(self, value)) : value = values.get(self), value;
    },
    setter: function (self, value) {
      dirtyTagFor(self, key), values.set(self, value);
    }
  };
}
const GLIMMER_VALIDATOR_REGISTRATION = Symbol("GLIMMER_VALIDATOR_REGISTRATION");
if (Reflect.has(globalThis, GLIMMER_VALIDATOR_REGISTRATION)) throw new Error("The `@glimmer/validator` library has been included twice in this application. It could be different versions of the package, or the same version included twice by mistake. `@glimmer/validator` depends on having a single copy of the package in use at any time in an application, even if they are the same version. You must dedupe your build to remove the duplicate packages in order to prevent this error.");
Reflect.set(globalThis, GLIMMER_VALIDATOR_REGISTRATION, true);

const EMPTY_ARRAY$4 = Object.freeze([]);
function emptyArray() {
  return EMPTY_ARRAY$4;
}
const EMPTY_STRING_ARRAY = emptyArray();
function* reverse(input) {
  for (let i = input.length - 1; i >= 0; i--)
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
  yield input[i];
}
function* enumerate(input) {
  let i = 0;
  for (const item of input) yield [i++, item];
}
function getLast(list) {
  return 0 === list.length ? void 0 : list[list.length - 1];
}
function dict() {
  return Object.create(null);
}
function isDict(u) {
  return null != u;
}
function isIndexable$2(u) {
  return "function" == typeof u || "object" == typeof u && null !== u;
}
class StackImpl {
  constructor(values = []) {
    this.current = null, this.stack = values;
  }
  get size() {
    return this.stack.length;
  }
  push(item) {
    this.current = item, this.stack.push(item);
  }
  pop() {
    let item = this.stack.pop();
    return this.current = getLast(this.stack) ?? null, void 0 === item ? null : item;
  }
  nth(from) {
    let len = this.stack.length;
    return len < from ? null : this.stack[len - from];
  }
  isEmpty() {
    return 0 === this.stack.length;
  }
  snapshot() {
    return [...this.stack];
  }
  toArray() {
    return this.stack;
  }
}
function clearElement(parent) {
  let current = parent.firstChild;
  for (; current;) {
    let next = current.nextSibling;
    parent.removeChild(current), current = next;
  }
}
const assign = Object.assign;

const REFERENCE = Symbol("REFERENCE");
class ReferenceImpl {
  constructor(type) {
    this.tag = null, this.lastRevision = INITIAL, this.children = null, this.compute = null, this.update = null, this[REFERENCE] = type;
  }
}
function createPrimitiveRef(value) {
  const ref = new ReferenceImpl(2);
  return ref.tag = CONSTANT_TAG, ref.lastValue = value, ref;
}
const UNDEFINED_REFERENCE = createPrimitiveRef(void 0),
  NULL_REFERENCE = createPrimitiveRef(null),
  TRUE_REFERENCE = createPrimitiveRef(true),
  FALSE_REFERENCE = createPrimitiveRef(false);
function createConstRef(value, debugLabel) {
  const ref = new ReferenceImpl(0);
  return ref.lastValue = value, ref.tag = CONSTANT_TAG, ref;
}
function createUnboundRef(value, debugLabel) {
  const ref = new ReferenceImpl(2);
  return ref.lastValue = value, ref.tag = CONSTANT_TAG, ref;
}
function createComputeRef(compute, update = null, debugLabel = "unknown") {
  const ref = new ReferenceImpl(1);
  return ref.compute = compute, ref.update = update, ref;
}
function createReadOnlyRef(ref) {
  return isUpdatableRef(ref) ? createComputeRef(() => valueForRef(ref), null, ref.debugLabel) : ref;
}
function isInvokableRef(ref) {
  return 3 === ref[REFERENCE];
}
function createInvokableRef(inner) {
  const ref = createComputeRef(() => valueForRef(inner), value => updateRef(inner, value));
  return ref.debugLabel = inner.debugLabel, ref[REFERENCE] = 3, ref;
}
function isConstRef(_ref) {
  return _ref.tag === CONSTANT_TAG;
}
function isUpdatableRef(_ref) {
  return null !== _ref.update;
}
function valueForRef(_ref) {
  const ref = _ref;
  let {
    tag: tag
  } = ref;
  if (tag === CONSTANT_TAG) return ref.lastValue;
  const {
    lastRevision: lastRevision
  } = ref;
  let lastValue;
  if (null !== tag && validateTag(tag, lastRevision)) lastValue = ref.lastValue;else {
    const {
        compute: compute
      } = ref,
      newTag = track(() => {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
        lastValue = ref.lastValue = compute();
      });
    tag = ref.tag = newTag, ref.lastRevision = valueForTag(newTag);
  }
  return consumeTag(tag), lastValue;
}
function updateRef(_ref, value) {
  (0, _ref.update)(value);
}
function childRefFor(_parentRef, path) {
  const parentRef = _parentRef,
    type = parentRef[REFERENCE];
  let child,
    children = parentRef.children;
  if (null === children) children = parentRef.children = new Map();else {
    const next = children.get(path);
    if (next) return next;
  }
  if (2 === type) {
    const parent = valueForRef(parentRef);
    child = isDict(parent) ? createUnboundRef(parent[path]) : UNDEFINED_REFERENCE;
  } else child = createComputeRef(() => {
    const parent = valueForRef(parentRef);
    if (isDict(parent)) return getProp(parent, path);
  }, val => {
    const parent = valueForRef(parentRef);
    if (isDict(parent)) return setProp(parent, path, val);
  });
  return children.set(path, child), child;
}
function childRefFromParts(root, parts) {
  let reference = root;
  for (const part of parts) reference = childRefFor(reference, part);
  return reference;
}
const NULL_IDENTITY = {},
  KEY = (_, index) => index,
  INDEX = (_, index) => String(index),
  IDENTITY = item => null === item ? NULL_IDENTITY : item;
class WeakMapWithPrimitives {
  get weakMap() {
    return void 0 === this._weakMap && (this._weakMap = new WeakMap()), this._weakMap;
  }
  get primitiveMap() {
    return void 0 === this._primitiveMap && (this._primitiveMap = new Map()), this._primitiveMap;
  }
  set(key, value) {
    isIndexable$2(key) ? this.weakMap.set(key, value) : this.primitiveMap.set(key, value);
  }
  get(key) {
    return isIndexable$2(key) ? this.weakMap.get(key) : this.primitiveMap.get(key);
  }
}
const IDENTITIES = new WeakMapWithPrimitives();

/**
 * When iterating over a list, it's possible that an item with the same unique
 * key could be encountered twice:
 *
 * ```js
 * let arr = ['same', 'different', 'same', 'same'];
 * ```
 *
 * In general, we want to treat these items as _unique within the list_. To do
 * this, we track the occurences of every item as we iterate the list, and when
 * an item occurs more than once, we generate a new unique key just for that
 * item, and that occurence within the list. The next time we iterate the list,
 * and encounter an item for the nth time, we can get the _same_ key, and let
 * Glimmer know that it should reuse the DOM for the previous nth occurence.
 */
function uniqueKeyFor(keyFor) {
  let seen = new WeakMapWithPrimitives();
  return (value, memo) => {
    let key = keyFor(value, memo),
      count = seen.get(key) || 0;
    return seen.set(key, count + 1), 0 === count ? key : function (value, count) {
      let identities = IDENTITIES.get(value);
      void 0 === identities && (identities = [], IDENTITIES.set(value, identities));
      let identity = identities[count];
      return void 0 === identity && (identity = {
        value: value,
        count: count
      }, identities[count] = identity), identity;
    }(key, count);
  };
}
function createIteratorRef(listRef, key) {
  return createComputeRef(() => {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    let iterable = valueForRef(listRef),
      keyFor = function (key) {
        switch (key) {
          case "@key":
            return uniqueKeyFor(KEY);
          case "@index":
            return uniqueKeyFor(INDEX);
          case "@identity":
            return uniqueKeyFor(IDENTITY);
          default:
            return function (path) {
              return uniqueKeyFor(item => getPath(item, path));
            }(key);
        }
      }(key);
    if (Array.isArray(iterable)) return new ArrayIterator$1(iterable, keyFor);
    let maybeIterator = toIterator$1(iterable);
    return null === maybeIterator ? new ArrayIterator$1(EMPTY_ARRAY$4, () => null) : new IteratorWrapper(maybeIterator, keyFor);
  });
}
function createIteratorItemRef(_value) {
  let value = _value,
    tag = createTag();
  return createComputeRef(() => (consumeTag(tag), value), newValue => {
    value !== newValue && (value = newValue, DIRTY_TAG$1(tag));
  });
}
class IteratorWrapper {
  constructor(inner, keyFor) {
    this.inner = inner, this.keyFor = keyFor;
  }
  isEmpty() {
    return this.inner.isEmpty();
  }
  next() {
    let nextValue = this.inner.next();
    return null !== nextValue && (nextValue.key = this.keyFor(nextValue.value, nextValue.memo)), nextValue;
  }
}
let ArrayIterator$1 = class ArrayIterator {
  constructor(iterator, keyFor) {
    this.iterator = iterator, this.keyFor = keyFor, this.pos = 0, 0 === iterator.length ? this.current = {
      kind: "empty"
    } : this.current = {
      kind: "first",
      value: iterator[this.pos]
    };
  }
  isEmpty() {
    return "empty" === this.current.kind;
  }
  next() {
    let value,
      current = this.current;
    if ("first" === current.kind) this.current = {
      kind: "progress"
    }, value = current.value;else {
      if (this.pos >= this.iterator.length - 1) return null;
      value = this.iterator[++this.pos];
    }
    let {
      keyFor: keyFor
    } = this;
    return {
      key: keyFor(value, this.pos),
      value: value,
      memo: this.pos
    };
  }
};

const ContentType = {
    Component: 0,
    Helper: 1,
    String: 2,
    SafeString: 4,
    Fragment: 5,
    Node: 6},
  InternalComponentCapabilities = {
    Empty: 0,
    dynamicLayout: 1,
    dynamicTag: 2,
    prepareArgs: 4,
    createArgs: 8,
    attributeHook: 16,
    elementHook: 32,
    dynamicScope: 64,
    createCaller: 128,
    updateHook: 256,
    createInstance: 512,
    wrapped: 1024,
    willDestroy: 2048,
    hasSubOwner: 4096
  },
  ARG_SHIFT = 8,
  TYPE_SIZE = 255,
  TYPE_MASK = 255,
  OPERAND_LEN_MASK = 768,
  MACHINE_MASK = 1024,
  $pc = 0,
  $ra = 1,
  $fp = 2,
  $sp = 3,
  $s0 = 4,
  $s1 = 5,
  $t0 = 6,
  $t1 = 7,
  $v0 = 8;
function isLowLevelRegister(register) {
  return register <= 3;
}

const CUSTOM_TAG_FOR = new WeakMap();
function getCustomTagFor(obj) {
  return CUSTOM_TAG_FOR.get(obj);
}
function setCustomTagFor(obj, customTagFn) {
  CUSTOM_TAG_FOR.set(obj, customTagFn);
}
function convertToInt(prop) {
  if ("symbol" == typeof prop) return null;
  const num = Number(prop);
  return isNaN(num) ? null : num % 1 == 0 ? num : null;
}

// eslint-disable-next-line @typescript-eslint/no-empty-object-type -- @fixme
class NamedArgsProxy {
  constructor(named) {
    this.named = named;
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-object-type -- @fixme
  get(_target, prop) {
    const ref = this.named[prop];
    if (void 0 !== ref) return valueForRef(ref);
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-object-type -- @fixme
  has(_target, prop) {
    return prop in this.named;
  }
  ownKeys() {
    return Object.keys(this.named);
  }
  isExtensible() {
    return false;
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-object-type -- @fixme
  getOwnPropertyDescriptor(_target, prop) {
    return {
      enumerable: true,
      configurable: true
    };
  }
}
class PositionalArgsProxy {
  constructor(positional) {
    this.positional = positional;
  }
  get(target, prop) {
    let {
      positional: positional
    } = this;
    if ("length" === prop) return positional.length;
    const parsed = convertToInt(prop);
    return null !== parsed && parsed < positional.length ? valueForRef(positional[parsed]) : target[prop];
    // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-return, @typescript-eslint/no-unsafe-member-access
  }
  isExtensible() {
    return false;
  }
  has(_target, prop) {
    const parsed = convertToInt(prop);
    return null !== parsed && parsed < this.positional.length;
  }
}
const argsProxyFor = (capturedArgs, type) => {
    const {
        named: named,
        positional: positional
      } = capturedArgs,
      namedHandler = new NamedArgsProxy(named),
      positionalHandler = new PositionalArgsProxy(positional),
      namedTarget = Object.create(null);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    const namedProxy = new Proxy(namedTarget, namedHandler),
      positionalProxy = new Proxy([], positionalHandler);
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    return setCustomTagFor(namedProxy, (_obj, key) => function (namedArgs, key) {
      return track(() => {
        key in namedArgs &&
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
        valueForRef(namedArgs[key]);
      });
    }(named, key)), setCustomTagFor(positionalProxy, (_obj, key) => function (positionalArgs, key) {
      return track(() => {
        "[]" === key &&
        // consume all of the tags in the positional array
        positionalArgs.forEach(valueForRef);
        const parsed = convertToInt(key);
        null !== parsed && parsed < positionalArgs.length &&
        // consume the tag of the referenced index
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
        valueForRef(positionalArgs[parsed]);
      });
    }(positional, key)), {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      named: namedProxy,
      positional: positionalProxy
    };
  };
function buildCapabilities(capabilities) {
  return capabilities;
}
const EMPTY = InternalComponentCapabilities.Empty;

/**
 * Converts a ComponentCapabilities object into a 32-bit integer representation.
 */
function capabilityFlagsFrom(capabilities) {
  return EMPTY | capability(capabilities, "dynamicLayout") | capability(capabilities, "dynamicTag") | capability(capabilities, "prepareArgs") | capability(capabilities, "createArgs") | capability(capabilities, "attributeHook") | capability(capabilities, "elementHook") | capability(capabilities, "dynamicScope") | capability(capabilities, "createCaller") | capability(capabilities, "updateHook") | capability(capabilities, "createInstance") | capability(capabilities, "wrapped") | capability(capabilities, "willDestroy") | capability(capabilities, "hasSubOwner");
}
function capability(capabilities, capability) {
  return capabilities[capability] ? InternalComponentCapabilities[capability] : EMPTY;
}
function managerHasCapability(_manager, capabilities, capability) {
  return !!(capabilities & capability);
}
function hasCapability(capabilities, capability) {
  return !!(capabilities & capability);
}
function helperCapabilities(managerAPI, options = {}) {
  return buildCapabilities({
    hasValue: Boolean(options.hasValue),
    hasDestroyable: Boolean(options.hasDestroyable),
    hasScheduledEffect: Boolean(options.hasScheduledEffect)
  });
}

////////////
function hasValue(manager) {
  return manager.capabilities.hasValue;
}
function hasDestroyable(manager) {
  return manager.capabilities.hasDestroyable;
}

////////////
class CustomHelperManager {
  constructor(factory) {
    this.factory = factory, this.helperManagerDelegates = new WeakMap(), this.undefinedDelegate = null;
  }
  getDelegateForOwner(owner) {
    let delegate = this.helperManagerDelegates.get(owner);
    if (void 0 === delegate) {
      let {
        factory: factory
      } = this;
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      if (delegate = factory(owner), false)
        // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
        ;
      this.helperManagerDelegates.set(owner, delegate);
    }
    return delegate;
  }
  getDelegateFor(owner) {
    if (void 0 === owner) {
      let {
        undefinedDelegate: undefinedDelegate
      } = this;
      if (null === undefinedDelegate) {
        let {
          factory: factory
        } = this;
        this.undefinedDelegate = undefinedDelegate = factory(void 0);
      }
      return undefinedDelegate;
    }
    return this.getDelegateForOwner(owner);
  }
  getHelper(definition) {
    return (capturedArgs, owner) => {
      let manager = this.getDelegateFor(owner);
      const args = argsProxyFor(capturedArgs),
        bucket = manager.createHelper(definition, args);
      if (hasValue(manager)) {
        let cache = createComputeRef(() => manager.getValue(bucket), null, false);
        return hasDestroyable(manager) && associateDestroyableChild(cache, manager.getDestroyable(bucket)), cache;
      }
      if (hasDestroyable(manager)) {
        let ref = createConstRef(void 0);
        return associateDestroyableChild(ref, manager.getDestroyable(bucket)), ref;
      }
      return UNDEFINED_REFERENCE;
    };
  }
}
class FunctionHelperManager {
  createHelper(fn, args) {
    return {
      fn: fn,
      args: args
    };
  }
  getValue({
    fn: fn,
    args: args
  }) {
    return Object.keys(args.named).length > 0 ? fn(...args.positional, args.named) : fn(...args.positional);
  }
  getDebugName(fn) {
    return fn.name ? `(helper function ${fn.name})` : "(anonymous helper function)";
  }
  constructor() {
    this.capabilities = buildCapabilities({
      hasValue: true,
      hasDestroyable: false,
      hasScheduledEffect: false
    });
  }
}
const COMPONENT_MANAGERS = new WeakMap(),
  MODIFIER_MANAGERS = new WeakMap(),
  HELPER_MANAGERS = new WeakMap(),
  getPrototypeOf$1 = Object.getPrototypeOf;
function setManager(map, manager, obj) {
  return map.set(obj, manager), obj;
}
function getManager(map, obj) {
  let pointer = obj;
  for (; null !== pointer;) {
    const manager = map.get(pointer);
    if (void 0 !== manager) return manager;
    pointer = getPrototypeOf$1(pointer);
  }
}

///////////
function setInternalModifierManager(manager, definition) {
  return setManager(MODIFIER_MANAGERS, manager, definition);
}
function getInternalModifierManager(definition, isOptional) {
  const manager = getManager(MODIFIER_MANAGERS, definition);
  return void 0 === manager ? (null) : manager;
}
function setInternalHelperManager(manager, definition) {
  return setManager(HELPER_MANAGERS, manager, definition);
}
const DEFAULT_MANAGER = new CustomHelperManager(() => new FunctionHelperManager());
function getInternalHelperManager(definition, isOptional) {
  let manager = getManager(HELPER_MANAGERS, definition);
  // Functions are special-cased because functions are defined
  // as the "default" helper, per: https://github.com/emberjs/rfcs/pull/756
  if (void 0 === manager && "function" == typeof definition && (manager = DEFAULT_MANAGER), manager) return manager;
  if (true === isOptional) return null;
  return null;
}
function setInternalComponentManager(factory, obj) {
  return setManager(COMPONENT_MANAGERS, factory, obj);
}
function getInternalComponentManager(definition, isOptional) {
  const manager = getManager(COMPONENT_MANAGERS, definition);
  return void 0 === manager ? (null) : manager;
}

///////////
function hasInternalComponentManager(definition) {
  return void 0 !== getManager(COMPONENT_MANAGERS, definition);
}
function hasInternalHelperManager(definition) {
  return function (definition) {
    return "function" == typeof definition;
  }(definition) || void 0 !== getManager(HELPER_MANAGERS, definition);
}
const CAPABILITIES$5 = {
  dynamicLayout: false,
  dynamicTag: false,
  prepareArgs: false,
  createArgs: true,
  attributeHook: false,
  elementHook: false,
  createCaller: false,
  dynamicScope: true,
  updateHook: true,
  createInstance: true,
  wrapped: false,
  willDestroy: false,
  hasSubOwner: false
};
function componentCapabilities(managerAPI, options = {}) {
  let updateHook = Boolean(options.updateHook);
  return buildCapabilities({
    asyncLifeCycleCallbacks: Boolean(options.asyncLifecycleCallbacks),
    destructor: Boolean(options.destructor),
    updateHook: updateHook
  });
}
function hasAsyncLifeCycleCallbacks(delegate) {
  return delegate.capabilities.asyncLifeCycleCallbacks;
}
function hasUpdateHook(delegate) {
  return delegate.capabilities.updateHook;
}

/**
  The CustomComponentManager allows addons to provide custom component
  implementations that integrate seamlessly into Ember. This is accomplished
  through a delegate, registered with the custom component manager, which
  implements a set of hooks that determine component behavior.

  To create a custom component manager, instantiate a new CustomComponentManager
  class and pass the delegate as the first argument:

  ```js
  let manager = new CustomComponentManager({
    // ...delegate implementation...
  });
  ```

  ## Delegate Hooks

  Throughout the lifecycle of a component, the component manager will invoke
  delegate hooks that are responsible for surfacing those lifecycle changes to
  the end developer.

  * `create()` - invoked when a new instance of a component should be created
  * `update()` - invoked when the arguments passed to a component change
  * `getContext()` - returns the object that should be
*/
class CustomComponentManager {
  constructor(factory) {
    this.factory = factory, this.componentManagerDelegates = new WeakMap();
  }
  getDelegateFor(owner) {
    let {
        componentManagerDelegates: componentManagerDelegates
      } = this,
      delegate = componentManagerDelegates.get(owner);
    if (void 0 === delegate) {
      let {
        factory: factory
      } = this;
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      if (delegate = factory(owner), false)
        // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
        ;
      componentManagerDelegates.set(owner, delegate);
    }
    return delegate;
  }
  create(owner, definition, vmArgs) {
    let delegate = this.getDelegateFor(owner),
      args = argsProxyFor(vmArgs.capture()),
      component = delegate.createComponent(definition, args);
    return new CustomComponentState(component, delegate, args);
  }
  getDebugName(definition) {
    // eslint-disable-next-line @typescript-eslint/no-base-to-string
    return "function" == typeof definition ? definition.name : definition.toString();
  }
  update(bucket) {
    let {
      delegate: delegate
    } = bucket;
    if (hasUpdateHook(delegate)) {
      let {
        component: component,
        args: args
      } = bucket;
      delegate.updateComponent(component, args);
    }
  }
  didCreate({
    component: component,
    delegate: delegate
  }) {
    hasAsyncLifeCycleCallbacks(delegate) && delegate.didCreateComponent(component);
  }
  didUpdate({
    component: component,
    delegate: delegate
  }) {
    (function (delegate) {
      return hasAsyncLifeCycleCallbacks(delegate) && hasUpdateHook(delegate);
    })(delegate) && delegate.didUpdateComponent(component);
  }
  didRenderLayout() {}
  didUpdateLayout() {}
  getSelf({
    component: component,
    delegate: delegate
  }) {
    return createConstRef(delegate.getContext(component));
  }
  getDestroyable(bucket) {
    const {
      delegate: delegate
    } = bucket;
    if (function (delegate) {
      return delegate.capabilities.destructor;
    }(delegate)) {
      const {
        component: component
      } = bucket;
      return registerDestructor$1(bucket, () => delegate.destroyComponent(component)), bucket;
    }
    return null;
  }
  getCapabilities() {
    return CAPABILITIES$5;
  }
}

/**
 * Stores internal state about a component instance after it's been created.
 */
class CustomComponentState {
  constructor(component, delegate, args) {
    this.component = component, this.delegate = delegate, this.args = args;
  }
}
function modifierCapabilities(managerAPI, optionalFeatures = {}) {
  return buildCapabilities({
    disableAutoTracking: Boolean(optionalFeatures.disableAutoTracking)
  });
}

/**
  The CustomModifierManager allows addons to provide custom modifier
  implementations that integrate seamlessly into Ember. This is accomplished
  through a delegate, registered with the custom modifier manager, which
  implements a set of hooks that determine modifier behavior.
  To create a custom modifier manager, instantiate a new CustomModifierManager
  class and pass the delegate as the first argument:

  ```js
  let manager = new CustomModifierManager({
    // ...delegate implementation...
  });
  ```

  ## Delegate Hooks

  Throughout the lifecycle of a modifier, the modifier manager will invoke
  delegate hooks that are responsible for surfacing those lifecycle changes to
  the end developer.
  * `createModifier()` - invoked when a new instance of a modifier should be created
  * `installModifier()` - invoked when the modifier is installed on the element
  * `updateModifier()` - invoked when the arguments passed to a modifier change
  * `destroyModifier()` - invoked when the modifier is about to be destroyed
*/
class CustomModifierManager {
  constructor(factory) {
    this.factory = factory, this.componentManagerDelegates = new WeakMap();
  }
  getDelegateFor(owner) {
    let {
        componentManagerDelegates: componentManagerDelegates
      } = this,
      delegate = componentManagerDelegates.get(owner);
    if (void 0 === delegate) {
      let {
        factory: factory
      } = this;
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      if (delegate = factory(owner), false)
        // TODO: This error message should make sense in both Ember and Glimmer https://github.com/glimmerjs/glimmer-vm/issues/1200
        ;
      componentManagerDelegates.set(owner, delegate);
    }
    return delegate;
  }
  create(owner, element, definition, capturedArgs) {
    let state,
      delegate = this.getDelegateFor(owner),
      args = argsProxyFor(capturedArgs),
      instance = delegate.createModifier(definition, args);
    return state = {
      tag: createUpdatableTag(),
      element: element,
      delegate: delegate,
      args: args,
      modifier: instance
    }, registerDestructor$1(state, () => delegate.destroyModifier(instance, args)), state;
  }
  getDebugName(definition) {
    return "function" == typeof definition ? definition.name || definition.toString() : "<unknown>";
  }
  getDebugInstance({
    modifier: modifier
  }) {
    return modifier;
  }
  getTag({
    tag: tag
  }) {
    return tag;
  }
  install({
    element: element,
    args: args,
    modifier: modifier,
    delegate: delegate
  }) {
    let {
      capabilities: capabilities
    } = delegate;
    capabilities.disableAutoTracking ? untrack(() => delegate.installModifier(modifier, element, args)) : delegate.installModifier(modifier, element, args);
  }
  update({
    args: args,
    modifier: modifier,
    delegate: delegate
  }) {
    let {
      capabilities: capabilities
    } = delegate;
    capabilities.disableAutoTracking ? untrack(() => delegate.updateModifier(modifier, args)) : delegate.updateModifier(modifier, args);
  }
  getDestroyable(state) {
    return state;
  }
}
function setComponentManager$1(factory, obj) {
  return setInternalComponentManager(new CustomComponentManager(factory), obj);
}
function setModifierManager$1(factory, obj) {
  return setInternalModifierManager(new CustomModifierManager(factory), obj);
}
function setHelperManager(factory, obj) {
  return setInternalHelperManager(new CustomHelperManager(factory), obj);
}
const TEMPLATES$1 = new WeakMap(),
  getPrototypeOf = Reflect.getPrototypeOf;
function setComponentTemplate(factory, obj) {
  return TEMPLATES$1.set(obj, factory), obj;
}
function getComponentTemplate(obj) {
  let pointer = obj;
  for (; null !== pointer;) {
    let template = TEMPLATES$1.get(pointer);
    if (void 0 !== template) return template;
    pointer = getPrototypeOf(pointer);
  }
}

const PROXIES = new WeakSet();
function isProxy(value) {
  if (isObject(value)) {
    return PROXIES.has(value);
  }
  return false;
}
function setProxy(object) {
  if (isObject(object)) {
    PROXIES.add(object);
  }
}

const EMBER_ARRAYS = new WeakSet();
function setEmberArray(obj) {
  EMBER_ARRAYS.add(obj);
}
function isEmberArray(obj) {
  return EMBER_ARRAYS.has(obj);
}

let Cache$1 = class Cache {
  size = 0;
  misses = 0;
  hits = 0;
  constructor(limit, func, store = new Map()) {
    this.limit = limit;
    this.func = func;
    this.store = store;
  }
  get(key) {
    if (this.store.has(key)) {
      this.hits++;
      // SAFETY: we know the value is present because `.has(key)` was `true`.
      return this.store.get(key);
    } else {
      this.misses++;
      return this.set(key, this.func(key));
    }
  }
  set(key, value) {
    if (this.limit > this.size) {
      this.size++;
      this.store.set(key, value);
    }
    return value;
  }
  purge() {
    this.store.clear();
    this.size = 0;
    this.hits = 0;
    this.misses = 0;
  }
};

// this file gets replaced with the real value during the build
const Version = '6.5.0';

function objectAt(array, index) {
  if (Array.isArray(array)) {
    return array[index];
  } else {
    return array.objectAt(index);
  }
}

// This is exported for `@tracked`, but should otherwise be avoided. Use `tagForObject`.
const SELF_TAG = symbol('SELF_TAG');
function tagForProperty(obj, propertyKey, addMandatorySetter = false, meta) {
  let customTagFor = getCustomTagFor(obj);
  if (customTagFor !== undefined) {
    return customTagFor(obj, propertyKey, addMandatorySetter);
  }
  let tag = tagFor(obj, propertyKey, meta);
  return tag;
}
function tagForObject(obj) {
  if (isObject(obj)) {
    return tagFor(obj, SELF_TAG);
  }
  return CONSTANT_TAG;
}
function markObjectAsDirty(obj, propertyKey) {
  dirtyTagFor(obj, propertyKey);
  dirtyTagFor(obj, SELF_TAG);
}
const CHAIN_PASS_THROUGH = new WeakSet();
function finishLazyChains(meta, key, value) {
  let lazyTags = meta.readableLazyChainsFor(key);
  if (lazyTags === undefined) {
    return;
  }
  if (isObject(value)) {
    for (let [tag, deps] of lazyTags) {
      UPDATE_TAG(tag, getChainTagsForKey(value, deps, tagMetaFor(value), peekMeta(value)));
    }
  }
  lazyTags.length = 0;
}
function getChainTagsForKeys(obj, keys, tagMeta, meta) {
  let tags = [];
  for (let key of keys) {
    getChainTags(tags, obj, key, tagMeta, meta);
  }
  return combine(tags);
}
function getChainTagsForKey(obj, key, tagMeta, meta) {
  return combine(getChainTags([], obj, key, tagMeta, meta));
}
function getChainTags(chainTags, obj, path, tagMeta, meta$1$1) {
  let current = obj;
  let currentTagMeta = tagMeta;
  let currentMeta = meta$1$1;
  let pathLength = path.length;
  let segmentEnd = -1;
  // prevent closures
  let segment, descriptor;
  while (true) {
    let lastSegmentEnd = segmentEnd + 1;
    segmentEnd = path.indexOf('.', lastSegmentEnd);
    if (segmentEnd === -1) {
      segmentEnd = pathLength;
    }
    segment = path.slice(lastSegmentEnd, segmentEnd);

    // If the segment is an @each, we can process it and then break
    if (segment === '@each' && segmentEnd !== pathLength) {
      lastSegmentEnd = segmentEnd + 1;
      segmentEnd = path.indexOf('.', lastSegmentEnd);
      let arrLength = current.length;
      if (typeof arrLength !== 'number' ||
      // TODO: should the second test be `isEmberArray` instead?
      !(Array.isArray(current) || 'objectAt' in current)) {
        // If the current object isn't an array, there's nothing else to do,
        // we don't watch individual properties. Break out of the loop.
        break;
      } else if (arrLength === 0) {
        // Fast path for empty arrays
        chainTags.push(tagForProperty(current, '[]'));
        break;
      }
      if (segmentEnd === -1) {
        segment = path.slice(lastSegmentEnd);
      } else {
        // Deprecated, remove once we turn the deprecation into an assertion
        segment = path.slice(lastSegmentEnd, segmentEnd);
      }

      // Push the tags for each item's property
      for (let i = 0; i < arrLength; i++) {
        let item = objectAt(current, i);
        if (item) {
          chainTags.push(tagForProperty(item, segment, true));
          currentMeta = peekMeta(item);
          descriptor = currentMeta !== null ? currentMeta.peekDescriptors(segment) : undefined;

          // If the key is an alias, we need to bootstrap it
          if (descriptor !== undefined && typeof descriptor.altKey === 'string') {
            // eslint-disable-next-line @typescript-eslint/no-unused-expressions
            item[segment];
          }
        }
      }

      // Push the tag for the array length itself
      chainTags.push(tagForProperty(current, '[]', true, currentTagMeta));
      break;
    }
    let propertyTag = tagForProperty(current, segment, true, currentTagMeta);
    descriptor = currentMeta !== null ? currentMeta.peekDescriptors(segment) : undefined;
    chainTags.push(propertyTag);

    // If we're at the end of the path, processing the last segment, and it's
    // not an alias, we should _not_ get the last value, since we already have
    // its tag. There's no reason to access it and do more work.
    if (segmentEnd === pathLength) {
      // If the key was an alias, we should always get the next value in order to
      // bootstrap the alias. This is because aliases, unlike other CPs, should
      // always be in sync with the aliased value.
      if (CHAIN_PASS_THROUGH.has(descriptor)) {
        // eslint-disable-next-line @typescript-eslint/no-unused-expressions
        current[segment];
      }
      break;
    }
    if (descriptor === undefined) {
      // If the descriptor is undefined, then its a normal property, so we should
      // lookup the value to chain off of like normal.

      if (!(segment in current) && typeof current.unknownProperty === 'function') {
        current = current.unknownProperty(segment);
      } else {
        current = current[segment];
      }
    } else if (CHAIN_PASS_THROUGH.has(descriptor)) {
      current = current[segment];
    } else {
      // If the descriptor is defined, then its a normal CP (not an alias, which
      // would have been handled earlier). We get the last revision to check if
      // the CP is still valid, and if so we use the cached value. If not, then
      // we create a lazy chain lookup, and the next time the CP is calculated,
      // it will update that lazy chain.
      let instanceMeta = currentMeta.source === current ? currentMeta : meta$1(current);
      let lastRevision = instanceMeta.revisionFor(segment);
      if (lastRevision !== undefined && validateTag(propertyTag, lastRevision)) {
        current = instanceMeta.valueFor(segment);
      } else {
        // use metaFor here to ensure we have the meta for the instance
        let lazyChains = instanceMeta.writableLazyChainsFor(segment);
        let rest = path.substring(segmentEnd + 1);
        let placeholderTag = createUpdatableTag();
        lazyChains.push([placeholderTag, rest]);
        chainTags.push(placeholderTag);
        break;
      }
    }
    if (!isObject(current)) {
      // we've hit the end of the chain for now, break out
      break;
    }
    currentTagMeta = tagMetaFor(current);
    currentMeta = peekMeta(current);
  }
  return chainTags;
}
function isElementDescriptor(args) {
  let [maybeTarget, maybeKey, maybeDesc] = args;
  return (
    // Ensure we have the right number of args
    args.length === 3 && (
    // Make sure the target is a class or object (prototype)
    typeof maybeTarget === 'function' || typeof maybeTarget === 'object' && maybeTarget !== null) &&
    // Make sure the key is a string
    typeof maybeKey === 'string' && (
    // Make sure the descriptor is the right shape
    typeof maybeDesc === 'object' && maybeDesc !== null || maybeDesc === undefined)
  );
}
function nativeDescDecorator(propertyDesc) {
  let decorator = function () {
    return propertyDesc;
  };
  setClassicDecorator(decorator);
  return decorator;
}

/**
  Objects of this type can implement an interface to respond to requests to
  get and set. The default implementation handles simple properties.

  @class Descriptor
  @private
*/
class ComputedDescriptor {
  enumerable = true;
  configurable = true;
  _dependentKeys = undefined;
  _meta = undefined;
  setup(_obj, keyName, _propertyDesc, meta) {
    meta.writeDescriptors(keyName, this);
  }
  teardown(_obj, keyName, meta) {
    meta.removeDescriptors(keyName);
  }
}
function DESCRIPTOR_GETTER_FUNCTION(name, descriptor) {
  function getter() {
    return descriptor.get(this, name);
  }
  return getter;
}
function DESCRIPTOR_SETTER_FUNCTION(name, descriptor) {
  let set = function CPSETTER_FUNCTION(value) {
    return descriptor.set(this, name, value);
  };
  COMPUTED_SETTERS.add(set);
  return set;
}
const COMPUTED_SETTERS = new WeakSet();
function makeComputedDecorator(desc, DecoratorClass) {
  let decorator = function COMPUTED_DECORATOR(target, key, propertyDesc, maybeMeta, isClassicDecorator) {
    let meta$1$1 = arguments.length === 3 ? meta$1(target) : maybeMeta;
    desc.setup(target, key, propertyDesc, meta$1$1);
    let computedDesc = {
      enumerable: desc.enumerable,
      configurable: desc.configurable,
      get: DESCRIPTOR_GETTER_FUNCTION(key, desc),
      set: DESCRIPTOR_SETTER_FUNCTION(key, desc)
    };
    return computedDesc;
  };
  setClassicDecorator(decorator, desc);
  Object.setPrototypeOf(decorator, DecoratorClass.prototype);
  return decorator;
}

/////////////

const DECORATOR_DESCRIPTOR_MAP = new WeakMap();

/**
  Returns the CP descriptor associated with `obj` and `keyName`, if any.

  @method descriptorForProperty
  @param {Object} obj the object to check
  @param {String} keyName the key to check
  @return {Descriptor}
  @private
*/
function descriptorForProperty(obj, keyName, _meta) {
  let meta = _meta === undefined ? peekMeta(obj) : _meta;
  if (meta !== null) {
    return meta.peekDescriptors(keyName);
  }
}
function descriptorForDecorator(dec) {
  return DECORATOR_DESCRIPTOR_MAP.get(dec);
}

/**
  Check whether a value is a decorator

  @method isClassicDecorator
  @param {any} possibleDesc the value to check
  @return {boolean}
  @private
*/
function isClassicDecorator(dec) {
  return typeof dec === 'function' && DECORATOR_DESCRIPTOR_MAP.has(dec);
}

/**
  Set a value as a decorator

  @method setClassicDecorator
  @param {function} decorator the value to mark as a decorator
  @private
*/
function setClassicDecorator(dec, value = true) {
  DECORATOR_DESCRIPTOR_MAP.set(dec, value);
}
const END_WITH_EACH_REGEX = /\.@each$/;

/**
  Expands `pattern`, invoking `callback` for each expansion.

  The only pattern supported is brace-expansion, anything else will be passed
  once to `callback` directly.

  Example

  ```js
  import { expandProperties } from '@ember/object/computed';

  function echo(arg){ console.log(arg); }

  expandProperties('foo.bar', echo);              //=> 'foo.bar'
  expandProperties('{foo,bar}', echo);            //=> 'foo', 'bar'
  expandProperties('foo.{bar,baz}', echo);        //=> 'foo.bar', 'foo.baz'
  expandProperties('{foo,bar}.baz', echo);        //=> 'foo.baz', 'bar.baz'
  expandProperties('foo.{bar,baz}.[]', echo)      //=> 'foo.bar.[]', 'foo.baz.[]'
  expandProperties('{foo,bar}.{spam,eggs}', echo) //=> 'foo.spam', 'foo.eggs', 'bar.spam', 'bar.eggs'
  expandProperties('{foo}.bar.{baz}')             //=> 'foo.bar.baz'
  ```

  @method expandProperties
  @static
  @for @ember/object/computed
  @public
  @param {String} pattern The property pattern to expand.
  @param {Function} callback The callback to invoke.  It is invoked once per
  expansion, and is passed the expansion.
*/
function expandProperties(pattern, callback) {
  let start = pattern.indexOf('{');
  if (start < 0) {
    callback(pattern.replace(END_WITH_EACH_REGEX, '.[]'));
  } else {
    dive('', pattern, start, callback);
  }
}
function dive(prefix, pattern, start, callback) {
  let end = pattern.indexOf('}'),
    i = 0,
    newStart,
    arrayLength;
  let tempArr = pattern.substring(start + 1, end).split(',');
  let after = pattern.substring(end + 1);
  prefix = prefix + pattern.substring(0, start);
  arrayLength = tempArr.length;
  while (i < arrayLength) {
    newStart = after.indexOf('{');
    if (newStart < 0) {
      callback((prefix + tempArr[i++] + after).replace(END_WITH_EACH_REGEX, '.[]'));
    } else {
      dive(prefix + tempArr[i++], after, newStart, callback);
    }
  }
}
const AFTER_OBSERVERS = ':change';
function changeEvent(keyName) {
  return keyName + AFTER_OBSERVERS;
}

/**
@module @ember/object
*/

function addListener(obj, eventName, target, method, once, sync = true) {
  if (!method && 'function' === typeof target) {
    method = target;
    target = null;
  }
  meta$1(obj).addToListeners(eventName, target, method, once === true, sync);
}

/**
  Remove an event listener

  Arguments should match those passed to `addListener`.

  @method removeListener
  @static
  @for @ember/object/events
  @param obj
  @param {String} eventName
  @param {Object|Function} target A target object or a function
  @param {Function|String} method A function or the name of a function to be called on `target`
  @public
*/
function removeListener(obj, eventName, targetOrFunction, functionOrName) {
  let target, method;
  if (typeof targetOrFunction === 'object') {
    target = targetOrFunction;
    method = functionOrName;
  } else {
    target = null;
    method = targetOrFunction;
  }
  let m = meta$1(obj);
  m.removeFromListeners(eventName, target, method);
}

/**
  Send an event. The execution of suspended listeners
  is skipped, and once listeners are removed. A listener without
  a target is executed on the passed object. If an array of actions
  is not passed, the actions stored on the passed object are invoked.

  @method sendEvent
  @static
  @for @ember/object/events
  @param obj
  @param {String} eventName
  @param {Array} params Optional parameters for each listener.
  @return {Boolean} if the event was delivered to one or more actions
  @public
*/
function sendEvent(obj, eventName, params, actions, _meta) {
  if (actions === undefined) {
    let meta = _meta === undefined ? peekMeta(obj) : _meta;
    actions = meta !== null ? meta.matchingListeners(eventName) : undefined;
  }
  if (actions === undefined || actions.length === 0) {
    return false;
  }
  for (let i = actions.length - 3; i >= 0; i -= 3) {
    // looping in reverse for once listeners
    let target = actions[i];
    let method = actions[i + 1];
    let once = actions[i + 2];
    if (!method) {
      continue;
    }
    if (once) {
      removeListener(obj, eventName, target, method);
    }
    if (!target) {
      target = obj;
    }
    let type = typeof method;
    if (type === 'string' || type === 'symbol') {
      method = target[method];
    }
    method.apply(target, params);
  }
  return true;
}

/**
  @public
  @method hasListeners
  @static
  @for @ember/object/events
  @param obj
  @param {String} eventName
  @return {Boolean} if `obj` has listeners for event `eventName`
*/
function hasListeners(obj, eventName) {
  let meta = peekMeta(obj);
  if (meta === null) {
    return false;
  }
  let matched = meta.matchingListeners(eventName);
  return matched !== undefined && matched.length > 0;
}

/**
  Define a property as a function that should be executed when
  a specified event or events are triggered.

  ``` javascript
  import EmberObject from '@ember/object';
  import { on } from '@ember/object/evented';
  import { sendEvent } from '@ember/object/events';

  let Job = EmberObject.extend({
    logCompleted: on('completed', function() {
      console.log('Job completed!');
    })
  });

  let job = Job.create();

  sendEvent(job, 'completed'); // Logs 'Job completed!'
 ```

  @method on
  @static
  @for @ember/object/evented
  @param {String} eventNames*
  @param {Function} func
  @return {Function} the listener function, passed as last argument to on(...)
  @public
*/
function on$3(...args) {
  let func = args.pop();
  let events = args;
  setListeners(func, events);
  return func;
}
const SYNC_DEFAULT = !ENV._DEFAULT_ASYNC_OBSERVERS;
const SYNC_OBSERVERS = new Map();
const ASYNC_OBSERVERS = new Map();

/**
@module @ember/object
*/

/**
  @method addObserver
  @static
  @for @ember/object/observers
  @param obj
  @param {String} path
  @param {Object|Function} target
  @param {Function|String} [method]
  @public
*/
function addObserver(obj, path, target, method, sync = SYNC_DEFAULT) {
  let eventName = changeEvent(path);
  addListener(obj, eventName, target, method, false, sync);
  let meta = peekMeta(obj);
  if (meta === null || !(meta.isPrototypeMeta(obj) || meta.isInitializing())) {
    activateObserver(obj, eventName, sync);
  }
}

/**
  @method removeObserver
  @static
  @for @ember/object/observers
  @param obj
  @param {String} path
  @param {Object|Function} target
  @param {Function|String} [method]
  @public
*/
function removeObserver(obj, path, target, method, sync = SYNC_DEFAULT) {
  let eventName = changeEvent(path);
  let meta = peekMeta(obj);
  if (meta === null || !(meta.isPrototypeMeta(obj) || meta.isInitializing())) {
    deactivateObserver(obj, eventName, sync);
  }
  removeListener(obj, eventName, target, method);
}
function getOrCreateActiveObserversFor(target, sync) {
  let observerMap = sync === true ? SYNC_OBSERVERS : ASYNC_OBSERVERS;
  if (!observerMap.has(target)) {
    observerMap.set(target, new Map());
    registerDestructor$1(target, () => destroyObservers(target), true);
  }
  return observerMap.get(target);
}
function activateObserver(target, eventName, sync = false) {
  let activeObservers = getOrCreateActiveObserversFor(target, sync);
  if (activeObservers.has(eventName)) {
    activeObservers.get(eventName).count++;
  } else {
    let path = eventName.substring(0, eventName.lastIndexOf(':'));
    let tag = getChainTagsForKey(target, path, tagMetaFor(target), peekMeta(target));
    activeObservers.set(eventName, {
      count: 1,
      path,
      tag,
      lastRevision: valueForTag(tag),
      suspended: false
    });
  }
}
let DEACTIVATE_SUSPENDED = false;
let SCHEDULED_DEACTIVATE = [];
function deactivateObserver(target, eventName, sync = false) {
  if (DEACTIVATE_SUSPENDED === true) {
    SCHEDULED_DEACTIVATE.push([target, eventName, sync]);
    return;
  }
  let observerMap = sync === true ? SYNC_OBSERVERS : ASYNC_OBSERVERS;
  let activeObservers = observerMap.get(target);
  if (activeObservers !== undefined) {
    let observer = activeObservers.get(eventName);
    observer.count--;
    if (observer.count === 0) {
      activeObservers.delete(eventName);
      if (activeObservers.size === 0) {
        observerMap.delete(target);
      }
    }
  }
}
function suspendedObserverDeactivation() {
  DEACTIVATE_SUSPENDED = true;
}
function resumeObserverDeactivation() {
  DEACTIVATE_SUSPENDED = false;
  for (let [target, eventName, sync] of SCHEDULED_DEACTIVATE) {
    deactivateObserver(target, eventName, sync);
  }
  SCHEDULED_DEACTIVATE = [];
}

/**
 * Primarily used for cases where we are redefining a class, e.g. mixins/reopen
 * being applied later. Revalidates all the observers, resetting their tags.
 *
 * @private
 * @param target
 */
function revalidateObservers(target) {
  if (ASYNC_OBSERVERS.has(target)) {
    ASYNC_OBSERVERS.get(target).forEach(observer => {
      observer.tag = getChainTagsForKey(target, observer.path, tagMetaFor(target), peekMeta(target));
      observer.lastRevision = valueForTag(observer.tag);
    });
  }
  if (SYNC_OBSERVERS.has(target)) {
    SYNC_OBSERVERS.get(target).forEach(observer => {
      observer.tag = getChainTagsForKey(target, observer.path, tagMetaFor(target), peekMeta(target));
      observer.lastRevision = valueForTag(observer.tag);
    });
  }
}
let lastKnownRevision = 0;
function flushAsyncObservers(_schedule) {
  let currentRevision = valueForTag(CURRENT_TAG);
  if (lastKnownRevision === currentRevision) {
    return;
  }
  lastKnownRevision = currentRevision;
  ASYNC_OBSERVERS.forEach((activeObservers, target) => {
    let meta = peekMeta(target);
    activeObservers.forEach((observer, eventName) => {
      if (!validateTag(observer.tag, observer.lastRevision)) {
        let sendObserver = () => {
          try {
            sendEvent(target, eventName, [target, observer.path], undefined, meta);
          } finally {
            observer.tag = getChainTagsForKey(target, observer.path, tagMetaFor(target), peekMeta(target));
            observer.lastRevision = valueForTag(observer.tag);
          }
        };
        if (_schedule) {
          _schedule('actions', sendObserver);
        } else {
          sendObserver();
        }
      }
    });
  });
}
function flushSyncObservers() {
  // When flushing synchronous observers, we know that something has changed (we
  // only do this during a notifyPropertyChange), so there's no reason to check
  // a global revision.

  SYNC_OBSERVERS.forEach((activeObservers, target) => {
    let meta = peekMeta(target);
    activeObservers.forEach((observer, eventName) => {
      if (!observer.suspended && !validateTag(observer.tag, observer.lastRevision)) {
        try {
          observer.suspended = true;
          sendEvent(target, eventName, [target, observer.path], undefined, meta);
        } finally {
          observer.tag = getChainTagsForKey(target, observer.path, tagMetaFor(target), peekMeta(target));
          observer.lastRevision = valueForTag(observer.tag);
          observer.suspended = false;
        }
      }
    });
  });
}
function setObserverSuspended(target, property, suspended) {
  let activeObservers = SYNC_OBSERVERS.get(target);
  if (!activeObservers) {
    return;
  }
  let observer = activeObservers.get(changeEvent(property));
  if (observer) {
    observer.suspended = suspended;
  }
}
function destroyObservers(target) {
  if (SYNC_OBSERVERS.size > 0) SYNC_OBSERVERS.delete(target);
  if (ASYNC_OBSERVERS.size > 0) ASYNC_OBSERVERS.delete(target);
}
const PROPERTY_DID_CHANGE = Symbol('PROPERTY_DID_CHANGE');
let deferred$2 = 0;

/**
  This function is called just after an object property has changed.
  It will notify any observers and clear caches among other things.

  Normally you will not need to call this method directly but if for some
  reason you can't directly watch a property you can invoke this method
  manually.

  @method notifyPropertyChange
  @for @ember/object
  @param {Object} obj The object with the property that will change
  @param {String} keyName The property key (or path) that will change.
  @param {Meta} [_meta] The objects meta.
  @param {unknown} [value] The new value to set for the property
  @return {void}
  @since 3.1.0
  @public
*/
function notifyPropertyChange(obj, keyName, _meta, value) {
  let meta = _meta === undefined ? peekMeta(obj) : _meta;
  if (meta !== null && (meta.isInitializing() || meta.isPrototypeMeta(obj))) {
    return;
  }
  markObjectAsDirty(obj, keyName);
  if (deferred$2 <= 0) {
    flushSyncObservers();
  }
  if (PROPERTY_DID_CHANGE in obj) {
    // that checks its arguments length, so we have to explicitly not call this with `value`
    // if it is not passed to `notifyPropertyChange`
    if (arguments.length === 4) {
      obj[PROPERTY_DID_CHANGE](keyName, value);
    } else {
      obj[PROPERTY_DID_CHANGE](keyName);
    }
  }
}

/**
  @method beginPropertyChanges
  @chainable
  @private
*/
function beginPropertyChanges() {
  deferred$2++;
  suspendedObserverDeactivation();
}

/**
  @method endPropertyChanges
  @private
*/
function endPropertyChanges() {
  deferred$2--;
  if (deferred$2 <= 0) {
    flushSyncObservers();
    resumeObserverDeactivation();
  }
}

/**
  Make a series of property changes together in an
  exception-safe way.

  ```javascript
  Ember.changeProperties(function() {
    obj1.set('foo', mayBlowUpWhenSet);
    obj2.set('bar', baz);
  });
  ```

  @method changeProperties
  @param {Function} callback
  @private
*/
function changeProperties(callback) {
  beginPropertyChanges();
  try {
    callback();
  } finally {
    endPropertyChanges();
  }
}
function noop$2() {}
/**
  `@computed` is a decorator that turns a JavaScript getter and setter into a
  computed property, which is a _cached, trackable value_. By default the getter
  will only be called once and the result will be cached. You can specify
  various properties that your computed property depends on. This will force the
  cached result to be cleared if the dependencies are modified, and lazily recomputed the next time something asks for it.

  In the following example we decorate a getter - `fullName` -  by calling
  `computed` with the property dependencies (`firstName` and `lastName`) as
  arguments. The `fullName` getter will be called once (regardless of how many
  times it is accessed) as long as its dependencies do not change. Once
  `firstName` or `lastName` are updated any future calls to `fullName` will
  incorporate the new values, and any watchers of the value such as templates
  will be updated:

  ```javascript
  import { computed, set } from '@ember/object';

  class Person {
    constructor(firstName, lastName) {
      set(this, 'firstName', firstName);
      set(this, 'lastName', lastName);
    }

    @computed('firstName', 'lastName')
    get fullName() {
      return `${this.firstName} ${this.lastName}`;
    }
  });

  let tom = new Person('Tom', 'Dale');

  tom.fullName; // 'Tom Dale'
  ```

  You can also provide a setter, which will be used when updating the computed
  property. Ember's `set` function must be used to update the property
  since it will also notify observers of the property:

  ```javascript
  import { computed, set } from '@ember/object';

  class Person {
    constructor(firstName, lastName) {
      set(this, 'firstName', firstName);
      set(this, 'lastName', lastName);
    }

    @computed('firstName', 'lastName')
    get fullName() {
      return `${this.firstName} ${this.lastName}`;
    }

    set fullName(value) {
      let [firstName, lastName] = value.split(' ');

      set(this, 'firstName', firstName);
      set(this, 'lastName', lastName);
    }
  });

  let person = new Person();

  set(person, 'fullName', 'Peter Wagenet');
  person.firstName; // 'Peter'
  person.lastName;  // 'Wagenet'
  ```

  You can also pass a getter function or object with `get` and `set` functions
  as the last argument to the computed decorator. This allows you to define
  computed property _macros_:

  ```js
  import { computed } from '@ember/object';

  function join(...keys) {
    return computed(...keys, function() {
      return keys.map(key => this[key]).join(' ');
    });
  }

  class Person {
    @join('firstName', 'lastName')
    fullName;
  }
  ```

  Note that when defined this way, getters and setters receive the _key_ of the
  property they are decorating as the first argument. Setters receive the value
  they are setting to as the second argument instead. Additionally, setters must
  _return_ the value that should be cached:

  ```javascript
  import { computed, set } from '@ember/object';

  function fullNameMacro(firstNameKey, lastNameKey) {
    return computed(firstNameKey, lastNameKey, {
      get() {
        return `${this[firstNameKey]} ${this[lastNameKey]}`;
      }

      set(key, value) {
        let [firstName, lastName] = value.split(' ');

        set(this, firstNameKey, firstName);
        set(this, lastNameKey, lastName);

        return value;
      }
    });
  }

  class Person {
    constructor(firstName, lastName) {
      set(this, 'firstName', firstName);
      set(this, 'lastName', lastName);
    }

    @fullNameMacro('firstName', 'lastName') fullName;
  });

  let person = new Person();

  set(person, 'fullName', 'Peter Wagenet');
  person.firstName; // 'Peter'
  person.lastName;  // 'Wagenet'
  ```

  Computed properties can also be used in classic classes. To do this, we
  provide the getter and setter as the last argument like we would for a macro,
  and we assign it to a property on the class definition. This is an _anonymous_
  computed macro:

  ```javascript
  import EmberObject, { computed, set } from '@ember/object';

  let Person = EmberObject.extend({
    // these will be supplied by `create`
    firstName: null,
    lastName: null,

    fullName: computed('firstName', 'lastName', {
      get() {
        return `${this.firstName} ${this.lastName}`;
      }

      set(key, value) {
        let [firstName, lastName] = value.split(' ');

        set(this, 'firstName', firstName);
        set(this, 'lastName', lastName);

        return value;
      }
    })
  });

  let tom = Person.create({
    firstName: 'Tom',
    lastName: 'Dale'
  });

  tom.get('fullName') // 'Tom Dale'
  ```

  You can overwrite computed property without setters with a normal property (no
  longer computed) that won't change if dependencies change. You can also mark
  computed property as `.readOnly()` and block all attempts to set it.

  ```javascript
  import { computed, set } from '@ember/object';

  class Person {
    constructor(firstName, lastName) {
      set(this, 'firstName', firstName);
      set(this, 'lastName', lastName);
    }

    @computed('firstName', 'lastName').readOnly()
    get fullName() {
      return `${this.firstName} ${this.lastName}`;
    }
  });

  let person = new Person();
  person.set('fullName', 'Peter Wagenet'); // Uncaught Error: Cannot set read-only property "fullName" on object: <(...):emberXXX>
  ```

  Additional resources:
  - [Decorators RFC](https://github.com/emberjs/rfcs/blob/master/text/0408-decorators.md)
  - [New CP syntax RFC](https://github.com/emberjs/rfcs/blob/master/text/0011-improved-cp-syntax.md)
  - [New computed syntax explained in "Ember 1.12 released" ](https://emberjs.com/blog/2015/05/13/ember-1-12-released.html#toc_new-computed-syntax)

  @class ComputedProperty
  @public
*/
class ComputedProperty extends ComputedDescriptor {
  _readOnly = false;
  _hasConfig = false;
  _getter = undefined;
  _setter = undefined;
  constructor(args) {
    super();
    let maybeConfig = args[args.length - 1];
    if (typeof maybeConfig === 'function' || maybeConfig !== null && typeof maybeConfig === 'object') {
      this._hasConfig = true;
      let config = args.pop();
      if (typeof config === 'function') {
        this._getter = config;
      } else {
        const objectConfig = config;
        this._getter = objectConfig.get || noop$2;
        this._setter = objectConfig.set;
      }
    }
    if (args.length > 0) {
      this._property(...args);
    }
  }
  setup(obj, keyName, propertyDesc, meta) {
    super.setup(obj, keyName, propertyDesc, meta);
    if (this._hasConfig === false) {
      let {
        get,
        set
      } = propertyDesc;
      if (get !== undefined) {
        this._getter = get;
      }
      if (set !== undefined) {
        this._setter = function setterWrapper(_key, value) {
          let ret = set.call(this, value);
          if (get !== undefined) {
            return typeof ret === 'undefined' ? get.call(this) : ret;
          }
          return ret;
        };
      }
    }
  }
  _property(...passedArgs) {
    let args = [];
    function addArg(property) {
      args.push(property);
    }
    for (let arg of passedArgs) {
      expandProperties(arg, addArg);
    }
    this._dependentKeys = args;
  }
  get(obj, keyName) {
    let meta$1$1 = meta$1(obj);
    let tagMeta = tagMetaFor(obj);
    let propertyTag = tagFor(obj, keyName, tagMeta);
    let ret;
    let revision = meta$1$1.revisionFor(keyName);
    if (revision !== undefined && validateTag(propertyTag, revision)) {
      ret = meta$1$1.valueFor(keyName);
    } else {
      let {
        _getter,
        _dependentKeys
      } = this;

      // Create a tracker that absorbs any trackable actions inside the CP
      untrack(() => {
        ret = _getter.call(obj, keyName);
      });
      if (_dependentKeys !== undefined) {
        UPDATE_TAG(propertyTag, getChainTagsForKeys(obj, _dependentKeys, tagMeta, meta$1$1));
      }
      meta$1$1.setValueFor(keyName, ret);
      meta$1$1.setRevisionFor(keyName, valueForTag(propertyTag));
      finishLazyChains(meta$1$1, keyName, ret);
    }
    consumeTag(propertyTag);

    // Add the tag of the returned value if it is an array, since arrays
    // should always cause updates if they are consumed and then changed
    if (Array.isArray(ret)) {
      consumeTag(tagFor(ret, '[]'));
    }
    return ret;
  }
  set(obj, keyName, value) {
    if (this._readOnly) {
      this._throwReadOnlyError(obj, keyName);
    }
    let meta$1$1 = meta$1(obj);

    // ensure two way binding works when the component has defined a computed
    // property with both a setter and dependent keys, in that scenario without
    // the sync observer added below the caller's value will never be updated
    //
    // See GH#18147 / GH#19028 for details.
    if (
    // ensure that we only run this once, while the component is being instantiated
    meta$1$1.isInitializing() && this._dependentKeys !== undefined && this._dependentKeys.length > 0 && typeof obj[PROPERTY_DID_CHANGE] === 'function' && obj.isComponent) {
      addObserver(obj, keyName, () => {
        obj[PROPERTY_DID_CHANGE](keyName);
      }, undefined, true);
    }
    let ret;
    try {
      beginPropertyChanges();
      ret = this._set(obj, keyName, value, meta$1$1);
      finishLazyChains(meta$1$1, keyName, ret);
      let tagMeta = tagMetaFor(obj);
      let propertyTag = tagFor(obj, keyName, tagMeta);
      let {
        _dependentKeys
      } = this;
      if (_dependentKeys !== undefined) {
        UPDATE_TAG(propertyTag, getChainTagsForKeys(obj, _dependentKeys, tagMeta, meta$1$1));
        if (false) ;
      }
      meta$1$1.setRevisionFor(keyName, valueForTag(propertyTag));
    } finally {
      endPropertyChanges();
    }
    return ret;
  }
  _throwReadOnlyError(obj, keyName) {
    throw new Error(`Cannot set read-only property "${keyName}" on object: ${inspect(obj)}`);
  }
  _set(obj, keyName, value, meta) {
    let hadCachedValue = meta.revisionFor(keyName) !== undefined;
    let cachedValue = meta.valueFor(keyName);
    let ret;
    let {
      _setter
    } = this;
    setObserverSuspended(obj, keyName, true);
    try {
      ret = _setter.call(obj, keyName, value, cachedValue);
    } finally {
      setObserverSuspended(obj, keyName, false);
    }

    // allows setter to return the same value that is cached already
    if (hadCachedValue && cachedValue === ret) {
      return ret;
    }
    meta.setValueFor(keyName, ret);
    notifyPropertyChange(obj, keyName, meta, value);
    return ret;
  }

  /* called before property is overridden */
  teardown(obj, keyName, meta) {
    if (meta.revisionFor(keyName) !== undefined) {
      meta.setRevisionFor(keyName, undefined);
      meta.setValueFor(keyName, undefined);
    }
    super.teardown(obj, keyName, meta);
  }
}
// TODO: This class can be svelted once `meta` has been deprecated
class ComputedDecoratorImpl extends Function {
  /**
    Call on a computed property to set it into read-only mode. When in this
    mode the computed property will throw an error when set.
     Example:
     ```javascript
    import { computed, set } from '@ember/object';
     class Person {
      @computed().readOnly()
      get guid() {
        return 'guid-guid-guid';
      }
    }
     let person = new Person();
    set(person, 'guid', 'new-guid'); // will throw an exception
    ```
     Classic Class Example:
     ```javascript
    import EmberObject, { computed } from '@ember/object';
     let Person = EmberObject.extend({
      guid: computed(function() {
        return 'guid-guid-guid';
      }).readOnly()
    });
     let person = Person.create();
    person.set('guid', 'new-guid'); // will throw an exception
    ```
     @method readOnly
    @return {ComputedProperty} this
    @chainable
    @public
  */
  readOnly() {
    let desc = descriptorForDecorator(this);
    desc._readOnly = true;
    return this;
  }

  /**
    In some cases, you may want to annotate computed properties with additional
    metadata about how they function or what values they operate on. For example,
    computed property functions may close over variables that are then no longer
    available for introspection. You can pass a hash of these values to a
    computed property.
     Example:
     ```javascript
    import { computed } from '@ember/object';
    import Person from 'my-app/utils/person';
     class Store {
      @computed().meta({ type: Person })
      get person() {
        let personId = this.personId;
        return Person.create({ id: personId });
      }
    }
    ```
     Classic Class Example:
     ```javascript
    import { computed } from '@ember/object';
    import Person from 'my-app/utils/person';
     const Store = EmberObject.extend({
      person: computed(function() {
        let personId = this.get('personId');
        return Person.create({ id: personId });
      }).meta({ type: Person })
    });
    ```
     The hash that you pass to the `meta()` function will be saved on the
    computed property descriptor under the `_meta` key. Ember runtime
    exposes a public API for retrieving these values from classes,
    via the `metaForProperty()` function.
     @method meta
    @param {Object} meta
    @chainable
    @public
  */

  meta(meta) {
    let prop = descriptorForDecorator(this);
    if (arguments.length === 0) {
      return prop._meta || {};
    } else {
      prop._meta = meta;
      return this;
    }
  }

  // TODO: Remove this when we can provide alternatives in the ecosystem to
  // addons such as ember-macro-helpers that use it.
  /** @internal */
  get _getter() {
    return descriptorForDecorator(this)._getter;
  }

  // TODO: Refactor this, this is an internal API only
  /** @internal */
  set enumerable(value) {
    descriptorForDecorator(this).enumerable = value;
  }
}

/**
  This helper returns a new property descriptor that wraps the passed
  computed property function. You can use this helper to define properties with
  native decorator syntax, mixins, or via `defineProperty()`.

  Example:

  ```js
  import { computed, set } from '@ember/object';

  class Person {
    constructor() {
      this.firstName = 'Betty';
      this.lastName = 'Jones';
    },

    @computed('firstName', 'lastName')
    get fullName() {
      return `${this.firstName} ${this.lastName}`;
    }
  }

  let client = new Person();

  client.fullName; // 'Betty Jones'

  set(client, 'lastName', 'Fuller');
  client.fullName; // 'Betty Fuller'
  ```

  Classic Class Example:

  ```js
  import EmberObject, { computed } from '@ember/object';

  let Person = EmberObject.extend({
    init() {
      this._super(...arguments);

      this.firstName = 'Betty';
      this.lastName = 'Jones';
    },

    fullName: computed('firstName', 'lastName', function() {
      return `${this.get('firstName')} ${this.get('lastName')}`;
    })
  });

  let client = Person.create();

  client.get('fullName'); // 'Betty Jones'

  client.set('lastName', 'Fuller');
  client.get('fullName'); // 'Betty Fuller'
  ```

  You can also provide a setter, either directly on the class using native class
  syntax, or by passing a hash with `get` and `set` functions.

  Example:

  ```js
  import { computed, set } from '@ember/object';

  class Person {
    constructor() {
      this.firstName = 'Betty';
      this.lastName = 'Jones';
    },

    @computed('firstName', 'lastName')
    get fullName() {
      return `${this.firstName} ${this.lastName}`;
    }

    set fullName(value) {
      let [firstName, lastName] = value.split(/\s+/);

      set(this, 'firstName', firstName);
      set(this, 'lastName', lastName);

      return value;
    }
  }

  let client = new Person();

  client.fullName; // 'Betty Jones'

  set(client, 'lastName', 'Fuller');
  client.fullName; // 'Betty Fuller'
  ```

  Classic Class Example:

  ```js
  import EmberObject, { computed } from '@ember/object';

  let Person = EmberObject.extend({
    init() {
      this._super(...arguments);

      this.firstName = 'Betty';
      this.lastName = 'Jones';
    },

    fullName: computed('firstName', 'lastName', {
      get(key) {
        return `${this.get('firstName')} ${this.get('lastName')}`;
      },
      set(key, value) {
        let [firstName, lastName] = value.split(/\s+/);
        this.setProperties({ firstName, lastName });
        return value;
      }
    })
  });

  let client = Person.create();
  client.get('firstName'); // 'Betty'

  client.set('fullName', 'Carroll Fuller');
  client.get('firstName'); // 'Carroll'
  ```

  When passed as an argument, the `set` function should accept two parameters,
  `key` and `value`. The value returned from `set` will be the new value of the
  property.

  _Note: This is the preferred way to define computed properties when writing third-party
  libraries that depend on or use Ember, since there is no guarantee that the user
  will have [prototype Extensions](https://guides.emberjs.com/release/configuring-ember/disabling-prototype-extensions/) enabled._

  @method computed
  @for @ember/object
  @static
  @param {String} [dependentKeys*] Optional dependent keys that trigger this computed property.
  @param {Function} func The computed property function.
  @return {ComputedDecorator} property decorator instance
  @public
*/
// @computed without parens or computed with descriptor args

// @computed with keys only

// @computed with keys and config

// @computed with config only

function computed(...args) {
  if (isElementDescriptor(args)) {
    // SAFETY: We passed in the impl for this class
    let decorator = makeComputedDecorator(new ComputedProperty([]), ComputedDecoratorImpl);
    return decorator(args[0], args[1], args[2]);
  }

  // SAFETY: We passed in the impl for this class
  return makeComputedDecorator(new ComputedProperty(args), ComputedDecoratorImpl);
}

/**
  Allows checking if a given property on an object is a computed property. For the most part,
  this doesn't matter (you would normally just access the property directly and use its value),
  but for some tooling specific scenarios (e.g. the ember-inspector) it is important to
  differentiate if a property is a computed property or a "normal" property.

  This will work on either a class's prototype or an instance itself.

  @static
  @method isComputed
  @for @ember/debug
  @private
 */
function isComputed(obj, key) {
  return Boolean(descriptorForProperty(obj, key));
}

/**
@module @ember/object
*/

function defineProperty(obj, keyName, desc, data, _meta) {
  let meta$1$1 = _meta === undefined ? meta$1(obj) : _meta;
  let previousDesc = descriptorForProperty(obj, keyName, meta$1$1);
  let wasDescriptor = previousDesc !== undefined;
  if (wasDescriptor) {
    previousDesc.teardown(obj, keyName, meta$1$1);
  }
  if (isClassicDecorator(desc)) {
    defineDecorator(obj, keyName, desc, meta$1$1);
  } else if (desc === null || desc === undefined) {
    defineValue(obj, keyName, data, wasDescriptor, true);
  } else {
    // fallback to ES5
    Object.defineProperty(obj, keyName, desc);
  }

  // if key is being watched, override chains that
  // were initialized with the prototype
  if (!meta$1$1.isPrototypeMeta(obj)) {
    revalidateObservers(obj);
  }
}
function defineDecorator(obj, keyName, desc, meta) {
  let propertyDesc;
  {
    propertyDesc = desc(obj, keyName, undefined, meta);
  }
  Object.defineProperty(obj, keyName, propertyDesc);

  // pass the decorator function forward for backwards compat
  return desc;
}
function defineValue(obj, keyName, value, wasDescriptor, enumerable = true) {
  if (wasDescriptor === true || enumerable === false) {
    Object.defineProperty(obj, keyName, {
      configurable: true,
      enumerable,
      writable: true,
      value
    });
  } else {
    {
      obj[keyName] = value;
    }
  }
  return value;
}
const firstDotIndexCache = new Cache$1(1000, key => key.indexOf('.'));
function isPath(path) {
  return typeof path === 'string' && firstDotIndexCache.get(path) !== -1;
}
function hasUnknownProperty(val) {
  return typeof val === 'object' && val !== null && typeof val.unknownProperty === 'function';
}

// ..........................................................
// GET AND SET
//
// If we are on a platform that supports accessors we can use those.
// Otherwise simulate accessors by looking up the property directly on the
// object.

/**
  Gets the value of a property on an object. If the property is computed,
  the function will be invoked. If the property is not defined but the
  object implements the `unknownProperty` method then that will be invoked.

  ```javascript
  import { get } from '@ember/object';
  get(obj, "name");
  ```

  If you plan to run on IE8 and older browsers then you should use this
  method anytime you want to retrieve a property on an object that you don't
  know for sure is private. (Properties beginning with an underscore '_'
  are considered private.)

  On all newer browsers, you only need to use this method to retrieve
  properties if the property might not be defined on the object and you want
  to respect the `unknownProperty` handler. Otherwise you can ignore this
  method.

  Note that if the object itself is `undefined`, this method will throw
  an error.

  @method get
  @for @ember/object
  @static
  @param {Object} obj The object to retrieve from.
  @param {String} keyName The property key to retrieve
  @return {Object} the property value or `null`.
  @public
*/

function get$1(obj, keyName) {
  return isPath(keyName) ? _getPath(obj, keyName) : _getProp(obj, keyName);
}
function _getProp(obj, keyName) {
  if (obj == null) {
    return;
  }
  let value;
  if (typeof obj === 'object' || typeof obj === 'function') {
    {
      value = obj[keyName];
    }
    if (value === undefined && typeof obj === 'object' && !(keyName in obj) && hasUnknownProperty(obj)) {
      value = obj.unknownProperty(keyName);
    }
    if (isTracking()) {
      consumeTag(tagFor(obj, keyName));
      if (Array.isArray(value) || isEmberArray(value)) {
        // Add the tag of the returned value if it is an array, since arrays
        // should always cause updates if they are consumed and then changed
        consumeTag(tagFor(value, '[]'));
      }
    }
  } else {
    // SAFETY: It should be ok to access properties on any non-nullish value
    value = obj[keyName];
  }
  return value;
}
function _getPath(obj, path, forSet) {
  let parts = typeof path === 'string' ? path.split('.') : path;
  for (let part of parts) {
    if (obj === undefined || obj === null || obj.isDestroyed) {
      return undefined;
    }
    if (forSet && (part === '__proto__' || part === 'constructor')) {
      return;
    }
    obj = _getProp(obj, part);
  }
  return obj;
}

// Warm it up
_getProp('foo', 'a');
_getProp('foo', 1);
_getProp({}, 'a');
_getProp({}, 1);
_getProp({
  unknownProperty() {}
}, 'a');
_getProp({
  unknownProperty() {}
}, 1);
get$1({}, 'foo');
get$1({}, 'foo.bar');
let fakeProxy = {};
setProxy(fakeProxy);
track(() => _getProp({}, 'a'));
track(() => _getProp({}, 1));
track(() => _getProp({
  a: []
}, 'a'));
track(() => _getProp({
  a: fakeProxy
}, 'a'));

/**
 @module ember
*/
/**
  Helper class that allows you to register your library with Ember.

  Singleton created at `Ember.libraries`.

  @class Libraries
  @constructor
  @private
*/
class Libraries {
  _registry;
  _coreLibIndex;
  constructor() {
    this._registry = [];
    this._coreLibIndex = 0;
  }
  _getLibraryByName(name) {
    let libs = this._registry;
    for (let lib of libs) {
      if (lib.name === name) {
        return lib;
      }
    }
    return undefined;
  }
  register(name, version, isCoreLibrary) {
    let index = this._registry.length;
    if (!this._getLibraryByName(name)) {
      if (isCoreLibrary) {
        index = this._coreLibIndex++;
      }
      this._registry.splice(index, 0, {
        name,
        version
      });
    }
  }
  registerCoreLibrary(name, version) {
    this.register(name, version, true);
  }
  deRegister(name) {
    let lib = this._getLibraryByName(name);
    let index;
    if (lib) {
      index = this._registry.indexOf(lib);
      this._registry.splice(index, 1);
    }
  }
}
const LIBRARIES = new Libraries();
LIBRARIES.registerCoreLibrary('Ember', Version);

/**
 @module ember
 @private
 */

/**
  Read-only property that returns the result of a container lookup.

  @class InjectedProperty
  @namespace Ember
  @constructor
  @param {String} type The container type the property will lookup
  @param {String} nameOrDesc (optional) The name the property will lookup, defaults
         to the property's name
  @private
*/
// Decorator factory (with args)
// (Also matches non-decorator form, types may be incorrect for this.)

// Non-decorator

// Decorator (without args)

// Catch-all for service and controller injections

function inject$1(type, ...args) {
  let elementDescriptor;
  let name;
  if (isElementDescriptor(args)) {
    elementDescriptor = args;
  } else if (typeof args[0] === 'string') {
    name = args[0];
  }
  let getInjection = function (propertyName) {
    let owner = getOwner$2(this) || this.container; // fallback to `container` for backwards compat
    return owner.lookup(`${type}:${name || propertyName}`);
  };
  let decorator = computed({
    get: getInjection,
    set(keyName, value) {
      defineProperty(this, keyName, null, value);
    }
  });
  if (elementDescriptor) {
    return decorator(elementDescriptor[0], elementDescriptor[1], elementDescriptor[2]);
  } else {
    return decorator;
  }
}
function tracked(...args) {
  if (!isElementDescriptor(args)) {
    let propertyDesc = args[0];
    let initializer = propertyDesc ? propertyDesc.initializer : undefined;
    let value = propertyDesc ? propertyDesc.value : undefined;
    let decorator = function (target, key, _desc, _meta, isClassicDecorator) {
      let fieldDesc = {
        initializer: initializer || (() => value)
      };
      return descriptorForField([target, key, fieldDesc]);
    };
    setClassicDecorator(decorator);
    return decorator;
  }
  return descriptorForField(args);
}
function descriptorForField([target, key, desc]) {
  let {
    getter,
    setter
  } = trackedData(key, desc ? desc.initializer : undefined);
  function get() {
    let value = getter(this);

    // Add the tag of the returned value if it is an array, since arrays
    // should always cause updates if they are consumed and then changed
    if (Array.isArray(value) || isEmberArray(value)) {
      consumeTag(tagFor(value, '[]'));
    }
    return value;
  }
  function set(newValue) {
    setter(this, newValue);
    dirtyTagFor(this, SELF_TAG);
  }
  let newDesc = {
    enumerable: true,
    configurable: true,
    isTracked: true,
    get,
    set
  };
  COMPUTED_SETTERS.add(set);
  meta$1(target).writeDescriptors(key, new TrackedDescriptor(get, set));
  return newDesc;
}
class TrackedDescriptor {
  constructor(_get, _set) {
    this._get = _get;
    this._set = _set;
    CHAIN_PASS_THROUGH.add(this);
  }
  get(obj) {
    return this._get.call(obj);
  }
  set(obj, _key, value) {
    this._set.call(obj, value);
  }
}

const NAMES = new WeakMap();
function setName(obj, name) {
  if (isObject(obj)) NAMES.set(obj, name);
}
function getName(obj) {
  return NAMES.get(obj);
}

const hasOwnProperty$2 = Object.prototype.hasOwnProperty;
let searchDisabled = false;
const flags = {
  _set: 0,
  _unprocessedNamespaces: false,
  get unprocessedNamespaces() {
    return this._unprocessedNamespaces;
  },
  set unprocessedNamespaces(v) {
    this._set++;
    this._unprocessedNamespaces = v;
  }
};
let unprocessedMixins = false;
const NAMESPACES = [];
const NAMESPACES_BY_ID = Object.create(null);
function addNamespace(namespace) {
  flags.unprocessedNamespaces = true;
  NAMESPACES.push(namespace);
}
function removeNamespace(namespace) {
  let name = getName(namespace);
  delete NAMESPACES_BY_ID[name];
  NAMESPACES.splice(NAMESPACES.indexOf(namespace), 1);
  if (name in context$1.lookup && namespace === context$1.lookup[name]) {
    context$1.lookup[name] = undefined;
  }
}
function findNamespaces() {
  if (!flags.unprocessedNamespaces) {
    return;
  }
  let lookup = context$1.lookup;
  let keys = Object.keys(lookup);
  for (let key of keys) {
    // Only process entities that start with uppercase A-Z
    if (!isUppercase(key.charCodeAt(0))) {
      continue;
    }
    let obj = tryIsNamespace(lookup, key);
    if (obj) {
      setName(obj, key);
    }
  }
}
function findNamespace(name) {
  if (!searchDisabled) {
    processAllNamespaces();
  }
  return NAMESPACES_BY_ID[name];
}
function processNamespace(namespace) {
  _processNamespace([namespace.toString()], namespace, new Set());
}
function processAllNamespaces() {
  let unprocessedNamespaces = flags.unprocessedNamespaces;
  if (unprocessedNamespaces) {
    findNamespaces();
    flags.unprocessedNamespaces = false;
  }
  if (unprocessedNamespaces || unprocessedMixins) {
    let namespaces = NAMESPACES;
    for (let namespace of namespaces) {
      processNamespace(namespace);
    }
    unprocessedMixins = false;
  }
}
function isSearchDisabled() {
  return searchDisabled;
}
function setSearchDisabled(flag) {
  searchDisabled = Boolean(flag);
}
function setUnprocessedMixins() {
  unprocessedMixins = true;
}
function _processNamespace(paths, root, seen) {
  let idx = paths.length;
  let id = paths.join('.');
  NAMESPACES_BY_ID[id] = root;
  setName(root, id);

  // Loop over all of the keys in the namespace, looking for classes
  for (let key in root) {
    if (!hasOwnProperty$2.call(root, key)) {
      continue;
    }
    let obj = root[key];

    // If we are processing the `Ember` namespace, for example, the
    // `paths` will start with `["Ember"]`. Every iteration through
    // the loop will update the **second** element of this list with
    // the key, so processing `Ember.View` will make the Array
    // `['Ember', 'View']`.
    paths[idx] = key;

    // If we have found an unprocessed class
    if (obj && getName(obj) === void 0) {
      // Replace the class' `toString` with the dot-separated path
      setName(obj, paths.join('.'));
      // Support nested namespaces
    } else if (obj && isNamespace(obj)) {
      // Skip aliased namespaces
      if (seen.has(obj)) {
        continue;
      }
      seen.add(obj);
      // Process the child namespace
      _processNamespace(paths, obj, seen);
    }
  }
  paths.length = idx; // cut out last item
}
function isNamespace(obj) {
  return obj != null && typeof obj === 'object' && obj.isNamespace;
}
function isUppercase(code) {
  return code >= 65 && code <= 90 // A
  ; // Z
}
function tryIsNamespace(lookup, prop) {
  try {
    let obj = lookup[prop];
    return (obj !== null && typeof obj === 'object' || typeof obj === 'function') && obj.isNamespace && obj;
  } catch (_e) {
    // continue
  }
}

/**
@module @ember/object/mixin
*/
const a_concat = Array.prototype.concat;
function extractAccessors(properties) {
  if (properties !== undefined) {
    for (let key of Object.keys(properties)) {
      let desc = Object.getOwnPropertyDescriptor(properties, key);
      if (desc.get !== undefined || desc.set !== undefined) {
        Object.defineProperty(properties, key, {
          value: nativeDescDecorator(desc)
        });
      }
    }
  }
  return properties;
}
function concatenatedMixinProperties(concatProp, props, values, base) {
  // reset before adding each new mixin to pickup concats from previous
  let concats = values[concatProp] || base[concatProp];
  if (props[concatProp]) {
    concats = concats ? a_concat.call(concats, props[concatProp]) : props[concatProp];
  }
  return concats;
}
function giveDecoratorSuper(key, decorator, property, descs) {
  if (property === true) {
    return decorator;
  }
  let originalGetter = property._getter;
  if (originalGetter === undefined) {
    return decorator;
  }
  let superDesc = descs[key];

  // Check to see if the super property is a decorator first, if so load its descriptor
  let superProperty = typeof superDesc === 'function' ? descriptorForDecorator(superDesc) : superDesc;
  if (superProperty === undefined || superProperty === true) {
    return decorator;
  }
  let superGetter = superProperty._getter;
  if (superGetter === undefined) {
    return decorator;
  }
  let get = wrap(originalGetter, superGetter);
  let set;
  let originalSetter = property._setter;
  let superSetter = superProperty._setter;
  if (superSetter !== undefined) {
    if (originalSetter !== undefined) {
      set = wrap(originalSetter, superSetter);
    } else {
      // If the super property has a setter, we default to using it no matter what.
      // This is clearly very broken and weird, but it's what was here so we have
      // to keep it until the next major at least.
      //
      // TODO: Add a deprecation here.
      set = superSetter;
    }
  } else {
    set = originalSetter;
  }

  // only create a new CP if we must
  if (get !== originalGetter || set !== originalSetter) {
    // Since multiple mixins may inherit from the same parent, we need
    // to clone the computed property so that other mixins do not receive
    // the wrapped version.
    let dependentKeys = property._dependentKeys || [];
    let newProperty = new ComputedProperty([...dependentKeys, {
      get,
      set
    }]);
    newProperty._readOnly = property._readOnly;
    newProperty._meta = property._meta;
    newProperty.enumerable = property.enumerable;

    // SAFETY: We passed in the impl for this class
    return makeComputedDecorator(newProperty, ComputedProperty);
  }
  return decorator;
}
function giveMethodSuper(key, method, values, descs) {
  // Methods overwrite computed properties, and do not call super to them.
  if (descs[key] !== undefined) {
    return method;
  }

  // Find the original method in a parent mixin
  let superMethod = values[key];

  // Only wrap the new method if the original method was a function
  if (typeof superMethod === 'function') {
    return wrap(method, superMethod);
  }
  return method;
}
function simpleMakeArray(value) {
  if (!value) {
    return [];
  } else if (!Array.isArray(value)) {
    return [value];
  } else {
    return value;
  }
}
function applyConcatenatedProperties(key, value, values) {
  let baseValue = values[key];
  let ret = simpleMakeArray(baseValue).concat(simpleMakeArray(value));
  return ret;
}
function applyMergedProperties(key, value, values) {
  let baseValue = values[key];
  if (!baseValue) {
    return value;
  }
  let newBase = Object.assign({}, baseValue);
  let hasFunction = false;
  let props = Object.keys(value);
  for (let prop of props) {
    let propValue = value[prop];
    if (typeof propValue === 'function') {
      hasFunction = true;
      newBase[prop] = giveMethodSuper(prop, propValue, baseValue, {});
    } else {
      newBase[prop] = propValue;
    }
  }
  if (hasFunction) {
    newBase._super = ROOT;
  }
  return newBase;
}
function mergeMixins(mixins, meta, descs, values, base, keys, keysWithSuper) {
  let currentMixin;
  for (let i = 0; i < mixins.length; i++) {
    currentMixin = mixins[i];
    if (MIXINS.has(currentMixin)) {
      if (meta.hasMixin(currentMixin)) {
        continue;
      }
      meta.addMixin(currentMixin);
      let {
        properties,
        mixins
      } = currentMixin;
      if (properties !== undefined) {
        mergeProps(meta, properties, descs, values, base, keys, keysWithSuper);
      } else if (mixins !== undefined) {
        mergeMixins(mixins, meta, descs, values, base, keys, keysWithSuper);
        if (currentMixin instanceof Mixin && currentMixin._without !== undefined) {
          currentMixin._without.forEach(keyName => {
            // deleting the key means we won't process the value
            let index = keys.indexOf(keyName);
            if (index !== -1) {
              keys.splice(index, 1);
            }
          });
        }
      }
    } else {
      mergeProps(meta, currentMixin, descs, values, base, keys, keysWithSuper);
    }
  }
}
function mergeProps(meta, props, descs, values, base, keys, keysWithSuper) {
  let concats = concatenatedMixinProperties('concatenatedProperties', props, values, base);
  let mergings = concatenatedMixinProperties('mergedProperties', props, values, base);
  let propKeys = Object.keys(props);
  for (let key of propKeys) {
    let value = props[key];
    if (value === undefined) continue;
    if (keys.indexOf(key) === -1) {
      keys.push(key);
      let desc = meta.peekDescriptors(key);
      if (desc === undefined) {
        // If the value is a classic decorator, we don't want to actually
        // access it, because that will execute the decorator while we're
        // building the class.
        if (!isClassicDecorator(value)) {
          // The superclass did not have a CP, which means it may have
          // observers or listeners on that property.
          let prev = values[key] = base[key];
          if (typeof prev === 'function') {
            updateObserversAndListeners(base, key, prev, false);
          }
        }
      } else {
        descs[key] = desc;

        // The super desc will be overwritten on descs, so save off the fact that
        // there was a super so we know to Object.defineProperty when writing
        // the value
        keysWithSuper.push(key);
        desc.teardown(base, key, meta);
      }
    }
    let isFunction = typeof value === 'function';
    if (isFunction) {
      let desc = descriptorForDecorator(value);
      if (desc !== undefined) {
        // Wrap descriptor function to implement _super() if needed
        descs[key] = giveDecoratorSuper(key, value, desc, descs);
        values[key] = undefined;
        continue;
      }
    }
    if (concats && concats.indexOf(key) >= 0 || key === 'concatenatedProperties' || key === 'mergedProperties') {
      value = applyConcatenatedProperties(key, value, values);
    } else if (mergings && mergings.indexOf(key) > -1) {
      value = applyMergedProperties(key, value, values);
    } else if (isFunction) {
      value = giveMethodSuper(key, value, values, descs);
    }
    values[key] = value;
    descs[key] = undefined;
  }
}
function updateObserversAndListeners(obj, key, fn, add) {
  let meta = observerListenerMetaFor(fn);
  if (meta === undefined) return;
  let {
    observers,
    listeners
  } = meta;
  if (observers !== undefined) {
    let updateObserver = add ? addObserver : removeObserver;
    for (let path of observers.paths) {
      updateObserver(obj, path, null, key, observers.sync);
    }
  }
  if (listeners !== undefined) {
    let updateListener = add ? addListener : removeListener;
    for (let listener of listeners) {
      updateListener(obj, listener, null, key);
    }
  }
}
function applyMixin(obj, mixins, _hideKeys = false) {
  let descs = Object.create(null);
  let values = Object.create(null);
  let meta$1$1 = meta$1(obj);
  let keys = [];
  let keysWithSuper = [];
  obj._super = ROOT;

  // Go through all mixins and hashes passed in, and:
  //
  // * Handle concatenated properties
  // * Handle merged properties
  // * Set up _super wrapping if necessary
  // * Set up computed property descriptors
  // * Copying `toString` in broken browsers
  mergeMixins(mixins, meta$1$1, descs, values, obj, keys, keysWithSuper);
  for (let key of keys) {
    let value = values[key];
    let desc = descs[key];
    if (value !== undefined) {
      if (typeof value === 'function') {
        updateObserversAndListeners(obj, key, value, true);
      }
      defineValue(obj, key, value, keysWithSuper.indexOf(key) !== -1, !_hideKeys);
    } else if (desc !== undefined) {
      defineDecorator(obj, key, desc, meta$1$1);
    }
  }
  if (!meta$1$1.isPrototypeMeta(obj)) {
    revalidateObservers(obj);
  }
  return obj;
}

/**
  @method mixin
  @param obj
  @param mixins*
  @return obj
  @private
*/
function mixin(obj, ...args) {
  applyMixin(obj, args);
  return obj;
}
const MIXINS = new WeakSet();

/**
  The `Mixin` class allows you to create mixins, whose properties can be
  added to other classes. For instance,

  ```javascript
  import Mixin from '@ember/object/mixin';

  const EditableMixin = Mixin.create({
    edit() {
      console.log('starting to edit');
      this.set('isEditing', true);
    },
    isEditing: false
  });
  ```

  ```javascript
  import EmberObject from '@ember/object';
  import EditableMixin from '../mixins/editable';

  // Mix mixins into classes by passing them as the first arguments to
  // `.extend.`
  const Comment = EmberObject.extend(EditableMixin, {
    post: null
  });

  let comment = Comment.create({
    post: somePost
  });

  comment.edit(); // outputs 'starting to edit'
  ```

  Note that Mixins are created with `Mixin.create`, not
  `Mixin.extend`.

  Note that mixins extend a constructor's prototype so arrays and object literals
  defined as properties will be shared amongst objects that implement the mixin.
  If you want to define a property in a mixin that is not shared, you can define
  it either as a computed property or have it be created on initialization of the object.

  ```javascript
  // filters array will be shared amongst any object implementing mixin
  import Mixin from '@ember/object/mixin';
  import { A } from '@ember/array';

  const FilterableMixin = Mixin.create({
    filters: A()
  });
  ```

  ```javascript
  import Mixin from '@ember/object/mixin';
  import { A } from '@ember/array';
  import { computed } from '@ember/object';

  // filters will be a separate array for every object implementing the mixin
  const FilterableMixin = Mixin.create({
    filters: computed(function() {
      return A();
    })
  });
  ```

  ```javascript
  import Mixin from '@ember/object/mixin';
  import { A } from '@ember/array';

  // filters will be created as a separate array during the object's initialization
  const Filterable = Mixin.create({
    filters: null,

    init() {
      this._super(...arguments);
      this.set("filters", A());
    }
  });
  ```

  @class Mixin
  @public
*/
class Mixin {
  /** @internal */

  /** @internal */
  mixins;

  /** @internal */
  properties;

  /** @internal */
  ownerConstructor;

  /** @internal */
  _without;
  /** @internal */
  constructor(mixins, properties) {
    MIXINS.add(this);
    this.properties = extractAccessors(properties);
    this.mixins = buildMixinsArray(mixins);
    this.ownerConstructor = undefined;
    this._without = undefined;
  }

  /**
    @method create
    @for @ember/object/mixin
    @static
    @param arguments*
    @public
  */
  static create(...args) {
    setUnprocessedMixins();
    let M = this;
    return new M(args, undefined);
  }

  // returns the mixins currently applied to the specified object
  // TODO: Make `mixin`
  /** @internal */
  static mixins(obj) {
    let meta = peekMeta(obj);
    let ret = [];
    if (meta === null) {
      return ret;
    }
    meta.forEachMixins(currentMixin => {
      // skip primitive mixins since these are always anonymous
      if (!currentMixin.properties) {
        ret.push(currentMixin);
      }
    });
    return ret;
  }

  /**
    @method reopen
    @param arguments*
    @private
    @internal
  */
  reopen(...args) {
    if (args.length === 0) {
      return this;
    }
    if (this.properties) {
      let currentMixin = new Mixin(undefined, this.properties);
      this.properties = undefined;
      this.mixins = [currentMixin];
    } else if (!this.mixins) {
      this.mixins = [];
    }
    this.mixins = this.mixins.concat(buildMixinsArray(args));
    return this;
  }

  /**
    @method apply
    @param obj
    @return applied object
    @private
    @internal
  */
  apply(obj, _hideKeys = false) {
    // Ember.NativeArray is a normal Ember.Mixin that we mix into `Array.prototype` when prototype extensions are enabled
    // mutating a native object prototype like this should _not_ result in enumerable properties being added (or we have significant
    // issues with things like deep equality checks from test frameworks, or things like jQuery.extend(true, [], [])).
    //
    // _hideKeys disables enumerablity when applying the mixin. This is a hack, and we should stop mutating the array prototype by default 😫
    return applyMixin(obj, [this], _hideKeys);
  }

  /** @internal */
  applyPartial(obj) {
    return applyMixin(obj, [this]);
  }

  /**
    @method detect
    @param obj
    @return {Boolean}
    @private
    @internal
  */
  detect(obj) {
    if (typeof obj !== 'object' || obj === null) {
      return false;
    }
    if (MIXINS.has(obj)) {
      return _detect(obj, this);
    }
    let meta = peekMeta(obj);
    if (meta === null) {
      return false;
    }
    return meta.hasMixin(this);
  }

  /** @internal */
  without(...args) {
    let ret = new Mixin([this]);
    ret._without = args;
    return ret;
  }

  /** @internal */
  keys() {
    let keys = _keys(this);
    return keys;
  }

  /** @internal */
  toString() {
    return '(unknown mixin)';
  }
}
function buildMixinsArray(mixins) {
  let length = mixins && mixins.length || 0;
  let m = undefined;
  if (length > 0) {
    m = new Array(length);
    for (let i = 0; i < length; i++) {
      let x = mixins[i];
      if (MIXINS.has(x)) {
        m[i] = x;
      } else {
        m[i] = new Mixin(undefined, x);
      }
    }
  }
  return m;
}
function _detect(curMixin, targetMixin, seen = new Set()) {
  if (seen.has(curMixin)) {
    return false;
  }
  seen.add(curMixin);
  if (curMixin === targetMixin) {
    return true;
  }
  let mixins = curMixin.mixins;
  if (mixins) {
    return mixins.some(mixin => _detect(mixin, targetMixin, seen));
  }
  return false;
}
function _keys(mixin, ret = new Set(), seen = new Set()) {
  if (seen.has(mixin)) {
    return;
  }
  seen.add(mixin);
  if (mixin.properties) {
    let props = Object.keys(mixin.properties);
    for (let prop of props) {
      ret.add(prop);
    }
  } else if (mixin.mixins) {
    mixin.mixins.forEach(x => _keys(x, ret, seen));
  }
  return ret;
}

/**
@module ember
*/

const RegistryProxyMixin = Mixin.create({
  __registry__: null,
  resolveRegistration(fullName) {
    return this.__registry__.resolve(fullName);
  },
  register: registryAlias('register'),
  unregister: registryAlias('unregister'),
  hasRegistration: registryAlias('has'),
  registeredOption: registryAlias('getOption'),
  registerOptions: registryAlias('options'),
  registeredOptions: registryAlias('getOptions'),
  registerOptionsForType: registryAlias('optionsForType'),
  registeredOptionsForType: registryAlias('getOptionsForType')
});
function registryAlias(name) {
  return function (...args) {
    // We need this cast because `Parameters` is deferred so that it is not
    // possible for TS to see it will always produce the right type. However,
    // since `AnyFn` has a rest type, it is allowed. See discussion on [this
    // issue](https://github.com/microsoft/TypeScript/issues/47615).
    return this.__registry__[name](...args);
  };
}

let onerror;
const onErrorTarget = {
  get onerror() {
    return onerror;
  }
};

// Ember.onerror getter
function getOnerror() {
  return onerror;
}
// Ember.onerror setter
function setOnerror(handler) {
  onerror = handler;
}
let dispatchOverride = null;

// allows testing adapter to override dispatch
function getDispatchOverride() {
  return dispatchOverride;
}
function setDispatchOverride(handler) {
  dispatchOverride = handler;
}

const SET_TIMEOUT = setTimeout;
const NOOP$3 = () => {};
function buildNext(flush) {
  // Using "promises first" here to:
  //
  // 1) Ensure more consistent experience on browsers that
  //    have differently queued microtasks (separate queues for
  //    MutationObserver vs Promises).
  // 2) Ensure better debugging experiences (it shows up in Chrome
  //    call stack as "Promise.then (async)") which is more consistent
  //    with user expectations
  //
  // When Promise is unavailable use MutationObserver (mostly so that we
  // still get microtasks on IE11), and when neither MutationObserver and
  // Promise are present use a plain old setTimeout.
  if (typeof Promise === 'function') {
    const autorunPromise = Promise.resolve();
    return () => autorunPromise.then(flush);
  } else if (typeof MutationObserver === 'function') {
    let iterations = 0;
    let observer = new MutationObserver(flush);
    let node = document.createTextNode('');
    observer.observe(node, {
      characterData: true
    });
    return () => {
      iterations = ++iterations % 2;
      node.data = '' + iterations;
      return iterations;
    };
  } else {
    return () => SET_TIMEOUT(flush, 0);
  }
}
function buildPlatform(flush) {
  let clearNext = NOOP$3;
  return {
    setTimeout(fn, ms) {
      return setTimeout(fn, ms);
    },
    clearTimeout(timerId) {
      return clearTimeout(timerId);
    },
    now() {
      return Date.now();
    },
    next: buildNext(flush),
    clearNext
  };
}
const NUMBER = /\d+/;
const TIMERS_OFFSET = 6;
function isCoercableNumber(suspect) {
  let type = typeof suspect;
  return type === 'number' && suspect === suspect || type === 'string' && NUMBER.test(suspect);
}
function getOnError(options) {
  return options.onError || options.onErrorTarget && options.onErrorTarget[options.onErrorMethod];
}
function findItem(target, method, collection) {
  let index = -1;
  for (let i = 0, l = collection.length; i < l; i += 4) {
    if (collection[i] === target && collection[i + 1] === method) {
      index = i;
      break;
    }
  }
  return index;
}
function findTimerItem(target, method, collection) {
  let index = -1;
  for (let i = 2, l = collection.length; i < l; i += 6) {
    if (collection[i] === target && collection[i + 1] === method) {
      index = i - 2;
      break;
    }
  }
  return index;
}
function getQueueItems(items, queueItemLength, queueItemPositionOffset = 0) {
  let queueItems = [];
  for (let i = 0; i < items.length; i += queueItemLength) {
    let maybeError = items[i + 3 /* stack */ + queueItemPositionOffset];
    let queueItem = {
      target: items[i + 0 /* target */ + queueItemPositionOffset],
      method: items[i + 1 /* method */ + queueItemPositionOffset],
      args: items[i + 2 /* args */ + queueItemPositionOffset],
      stack: maybeError !== undefined && 'stack' in maybeError ? maybeError.stack : ''
    };
    queueItems.push(queueItem);
  }
  return queueItems;
}
function binarySearch(time, timers) {
  let start = 0;
  let end = timers.length - TIMERS_OFFSET;
  let middle;
  let l;
  while (start < end) {
    // since timers is an array of pairs 'l' will always
    // be an integer
    l = (end - start) / TIMERS_OFFSET;
    // compensate for the index in case even number
    // of pairs inside timers
    middle = start + l - l % TIMERS_OFFSET;
    if (time >= timers[middle]) {
      start = middle + TIMERS_OFFSET;
    } else {
      end = middle;
    }
  }
  return time >= timers[start] ? start + TIMERS_OFFSET : start;
}
const QUEUE_ITEM_LENGTH = 4;
class Queue {
  constructor(name, options = {}, globalOptions = {}) {
    this._queueBeingFlushed = [];
    this.targetQueues = new Map();
    this.index = 0;
    this._queue = [];
    this.name = name;
    this.options = options;
    this.globalOptions = globalOptions;
  }
  stackFor(index) {
    if (index < this._queue.length) {
      let entry = this._queue[index * 3 + QUEUE_ITEM_LENGTH];
      if (entry) {
        return entry.stack;
      } else {
        return null;
      }
    }
  }
  flush(sync) {
    let {
      before,
      after
    } = this.options;
    let target;
    let method;
    let args;
    let errorRecordedForStack;
    this.targetQueues.clear();
    if (this._queueBeingFlushed.length === 0) {
      this._queueBeingFlushed = this._queue;
      this._queue = [];
    }
    if (before !== undefined) {
      before();
    }
    let invoke;
    let queueItems = this._queueBeingFlushed;
    if (queueItems.length > 0) {
      let onError = getOnError(this.globalOptions);
      invoke = onError ? this.invokeWithOnError : this.invoke;
      for (let i = this.index; i < queueItems.length; i += QUEUE_ITEM_LENGTH) {
        this.index += QUEUE_ITEM_LENGTH;
        method = queueItems[i + 1];
        // method could have been nullified / canceled during flush
        if (method !== null) {
          //
          //    ** Attention intrepid developer **
          //
          //    To find out the stack of this task when it was scheduled onto
          //    the run loop, add the following to your app.js:
          //
          //    Ember.run.backburner.DEBUG = true; // NOTE: This slows your app, don't leave it on in production.
          //
          //    Once that is in place, when you are at a breakpoint and navigate
          //    here in the stack explorer, you can look at `errorRecordedForStack.stack`,
          //    which will be the captured stack when this job was scheduled.
          //
          //    One possible long-term solution is the following Chrome issue:
          //       https://bugs.chromium.org/p/chromium/issues/detail?id=332624
          //
          target = queueItems[i];
          args = queueItems[i + 2];
          errorRecordedForStack = queueItems[i + 3]; // Debugging assistance
          invoke(target, method, args, onError, errorRecordedForStack);
        }
        if (this.index !== this._queueBeingFlushed.length && this.globalOptions.mustYield && this.globalOptions.mustYield()) {
          return 1 /* Pause */;
        }
      }
    }
    if (after !== undefined) {
      after();
    }
    this._queueBeingFlushed.length = 0;
    this.index = 0;
    if (sync !== false && this._queue.length > 0) {
      // check if new items have been added
      this.flush(true);
    }
  }
  hasWork() {
    return this._queueBeingFlushed.length > 0 || this._queue.length > 0;
  }
  cancel({
    target,
    method
  }) {
    let queue = this._queue;
    let targetQueueMap = this.targetQueues.get(target);
    if (targetQueueMap !== undefined) {
      targetQueueMap.delete(method);
    }
    let index = findItem(target, method, queue);
    if (index > -1) {
      queue[index + 1] = null;
      return true;
    }
    // if not found in current queue
    // could be in the queue that is being flushed
    queue = this._queueBeingFlushed;
    index = findItem(target, method, queue);
    if (index > -1) {
      queue[index + 1] = null;
      return true;
    }
    return false;
  }
  push(target, method, args, stack) {
    this._queue.push(target, method, args, stack);
    return {
      queue: this,
      target,
      method
    };
  }
  pushUnique(target, method, args, stack) {
    let localQueueMap = this.targetQueues.get(target);
    if (localQueueMap === undefined) {
      localQueueMap = new Map();
      this.targetQueues.set(target, localQueueMap);
    }
    let index = localQueueMap.get(method);
    if (index === undefined) {
      let queueIndex = this._queue.push(target, method, args, stack) - QUEUE_ITEM_LENGTH;
      localQueueMap.set(method, queueIndex);
    } else {
      let queue = this._queue;
      queue[index + 2] = args; // replace args
      queue[index + 3] = stack; // replace stack
    }
    return {
      queue: this,
      target,
      method
    };
  }
  _getDebugInfo(debugEnabled) {
    if (debugEnabled) {
      let debugInfo = getQueueItems(this._queue, QUEUE_ITEM_LENGTH);
      return debugInfo;
    }
    return undefined;
  }
  invoke(target, method, args /*, onError, errorRecordedForStack */) {
    if (args === undefined) {
      method.call(target);
    } else {
      method.apply(target, args);
    }
  }
  invokeWithOnError(target, method, args, onError, errorRecordedForStack) {
    try {
      if (args === undefined) {
        method.call(target);
      } else {
        method.apply(target, args);
      }
    } catch (error) {
      onError(error, errorRecordedForStack);
    }
  }
}
class DeferredActionQueues {
  constructor(queueNames = [], options) {
    this.queues = {};
    this.queueNameIndex = 0;
    this.queueNames = queueNames;
    queueNames.reduce(function (queues, queueName) {
      queues[queueName] = new Queue(queueName, options[queueName], options);
      return queues;
    }, this.queues);
  }
  /**
   * @method schedule
   * @param {String} queueName
   * @param {Any} target
   * @param {Any} method
   * @param {Any} args
   * @param {Boolean} onceFlag
   * @param {Any} stack
   * @return queue
   */
  schedule(queueName, target, method, args, onceFlag, stack) {
    let queues = this.queues;
    let queue = queues[queueName];
    if (queue === undefined) {
      throw new Error(`You attempted to schedule an action in a queue (${queueName}) that doesn\'t exist`);
    }
    if (method === undefined || method === null) {
      throw new Error(`You attempted to schedule an action in a queue (${queueName}) for a method that doesn\'t exist`);
    }
    this.queueNameIndex = 0;
    if (onceFlag) {
      return queue.pushUnique(target, method, args, stack);
    } else {
      return queue.push(target, method, args, stack);
    }
  }
  /**
   * DeferredActionQueues.flush() calls Queue.flush()
   *
   * @method flush
   * @param {Boolean} fromAutorun
   */
  flush(fromAutorun = false) {
    let queue;
    let queueName;
    let numberOfQueues = this.queueNames.length;
    while (this.queueNameIndex < numberOfQueues) {
      queueName = this.queueNames[this.queueNameIndex];
      queue = this.queues[queueName];
      if (queue.hasWork() === false) {
        this.queueNameIndex++;
        if (fromAutorun && this.queueNameIndex < numberOfQueues) {
          return 1 /* Pause */;
        }
      } else {
        if (queue.flush(false /* async */) === 1 /* Pause */) {
          return 1 /* Pause */;
        }
      }
    }
  }
  /**
   * Returns debug information for the current queues.
   *
   * @method _getDebugInfo
   * @param {Boolean} debugEnabled
   * @returns {IDebugInfo | undefined}
   */
  _getDebugInfo(debugEnabled) {
    if (debugEnabled) {
      let debugInfo = {};
      let queue;
      let queueName;
      let numberOfQueues = this.queueNames.length;
      let i = 0;
      while (i < numberOfQueues) {
        queueName = this.queueNames[i];
        queue = this.queues[queueName];
        debugInfo[queueName] = queue._getDebugInfo(debugEnabled);
        i++;
      }
      return debugInfo;
    }
    return;
  }
}
function iteratorDrain(fn) {
  let iterator = fn();
  let result = iterator.next();
  while (result.done === false) {
    result.value();
    result = iterator.next();
  }
}
const noop$1 = function () {};
const DISABLE_SCHEDULE = Object.freeze([]);
function parseArgs() {
  let length = arguments.length;
  let args;
  let method;
  let target;
  if (length === 0) ;else if (length === 1) {
    target = null;
    method = arguments[0];
  } else {
    let argsIndex = 2;
    let methodOrTarget = arguments[0];
    let methodOrArgs = arguments[1];
    let type = typeof methodOrArgs;
    if (type === 'function') {
      target = methodOrTarget;
      method = methodOrArgs;
    } else if (methodOrTarget !== null && type === 'string' && methodOrArgs in methodOrTarget) {
      target = methodOrTarget;
      method = target[methodOrArgs];
    } else if (typeof methodOrTarget === 'function') {
      argsIndex = 1;
      target = null;
      method = methodOrTarget;
    }
    if (length > argsIndex) {
      let len = length - argsIndex;
      args = new Array(len);
      for (let i = 0; i < len; i++) {
        args[i] = arguments[i + argsIndex];
      }
    }
  }
  return [target, method, args];
}
function parseTimerArgs() {
  let [target, method, args] = parseArgs(...arguments);
  let wait = 0;
  let length = args !== undefined ? args.length : 0;
  if (length > 0) {
    let last = args[length - 1];
    if (isCoercableNumber(last)) {
      wait = parseInt(args.pop(), 10);
    }
  }
  return [target, method, args, wait];
}
function parseDebounceArgs() {
  let target;
  let method;
  let isImmediate;
  let args;
  let wait;
  if (arguments.length === 2) {
    method = arguments[0];
    wait = arguments[1];
    target = null;
  } else {
    [target, method, args] = parseArgs(...arguments);
    if (args === undefined) {
      wait = 0;
    } else {
      wait = args.pop();
      if (!isCoercableNumber(wait)) {
        isImmediate = wait === true;
        wait = args.pop();
      }
    }
  }
  wait = parseInt(wait, 10);
  return [target, method, args, wait, isImmediate];
}
let UUID = 0;
let beginCount = 0;
let endCount = 0;
let beginEventCount = 0;
let endEventCount = 0;
let runCount = 0;
let joinCount = 0;
let deferCount = 0;
let scheduleCount = 0;
let scheduleIterableCount = 0;
let deferOnceCount = 0;
let scheduleOnceCount = 0;
let setTimeoutCount = 0;
let laterCount = 0;
let throttleCount = 0;
let debounceCount = 0;
let cancelTimersCount = 0;
let cancelCount = 0;
let autorunsCreatedCount = 0;
let autorunsCompletedCount = 0;
let deferredActionQueuesCreatedCount = 0;
let nestedDeferredActionQueuesCreated = 0;
class Backburner {
  constructor(queueNames, options) {
    this.DEBUG = false;
    this.currentInstance = null;
    this.instanceStack = [];
    this._eventCallbacks = {
      end: [],
      begin: []
    };
    this._timerTimeoutId = null;
    this._timers = [];
    this._autorun = false;
    this._autorunStack = null;
    this.queueNames = queueNames;
    this.options = options || {};
    if (typeof this.options.defaultQueue === 'string') {
      this._defaultQueue = this.options.defaultQueue;
    } else {
      this._defaultQueue = this.queueNames[0];
    }
    this._onBegin = this.options.onBegin || noop$1;
    this._onEnd = this.options.onEnd || noop$1;
    this._boundRunExpiredTimers = this._runExpiredTimers.bind(this);
    this._boundAutorunEnd = () => {
      autorunsCompletedCount++;
      // if the autorun was already flushed, do nothing
      if (this._autorun === false) {
        return;
      }
      this._autorun = false;
      this._autorunStack = null;
      this._end(true /* fromAutorun */);
    };
    let builder = this.options._buildPlatform || buildPlatform;
    this._platform = builder(this._boundAutorunEnd);
  }
  get counters() {
    return {
      begin: beginCount,
      end: endCount,
      events: {
        begin: beginEventCount,
        end: endEventCount
      },
      autoruns: {
        created: autorunsCreatedCount,
        completed: autorunsCompletedCount
      },
      run: runCount,
      join: joinCount,
      defer: deferCount,
      schedule: scheduleCount,
      scheduleIterable: scheduleIterableCount,
      deferOnce: deferOnceCount,
      scheduleOnce: scheduleOnceCount,
      setTimeout: setTimeoutCount,
      later: laterCount,
      throttle: throttleCount,
      debounce: debounceCount,
      cancelTimers: cancelTimersCount,
      cancel: cancelCount,
      loops: {
        total: deferredActionQueuesCreatedCount,
        nested: nestedDeferredActionQueuesCreated
      }
    };
  }
  get defaultQueue() {
    return this._defaultQueue;
  }
  /*
    @method begin
    @return instantiated class DeferredActionQueues
  */
  begin() {
    beginCount++;
    let options = this.options;
    let previousInstance = this.currentInstance;
    let current;
    if (this._autorun !== false) {
      current = previousInstance;
      this._cancelAutorun();
    } else {
      if (previousInstance !== null) {
        nestedDeferredActionQueuesCreated++;
        this.instanceStack.push(previousInstance);
      }
      deferredActionQueuesCreatedCount++;
      current = this.currentInstance = new DeferredActionQueues(this.queueNames, options);
      beginEventCount++;
      this._trigger('begin', current, previousInstance);
    }
    this._onBegin(current, previousInstance);
    return current;
  }
  end() {
    endCount++;
    this._end(false);
  }
  on(eventName, callback) {
    if (typeof callback !== 'function') {
      throw new TypeError(`Callback must be a function`);
    }
    let callbacks = this._eventCallbacks[eventName];
    if (callbacks !== undefined) {
      callbacks.push(callback);
    } else {
      throw new TypeError(`Cannot on() event ${eventName} because it does not exist`);
    }
  }
  off(eventName, callback) {
    let callbacks = this._eventCallbacks[eventName];
    if (!eventName || callbacks === undefined) {
      throw new TypeError(`Cannot off() event ${eventName} because it does not exist`);
    }
    let callbackFound = false;
    if (callback) {
      for (let i = 0; i < callbacks.length; i++) {
        if (callbacks[i] === callback) {
          callbackFound = true;
          callbacks.splice(i, 1);
          i--;
        }
      }
    }
    if (!callbackFound) {
      throw new TypeError(`Cannot off() callback that does not exist`);
    }
  }
  run() {
    runCount++;
    let [target, method, args] = parseArgs(...arguments);
    return this._run(target, method, args);
  }
  join() {
    joinCount++;
    let [target, method, args] = parseArgs(...arguments);
    return this._join(target, method, args);
  }
  /**
   * @deprecated please use schedule instead.
   */
  defer(queueName, target, method, ...args) {
    deferCount++;
    return this.schedule(queueName, target, method, ...args);
  }
  schedule(queueName, ..._args) {
    scheduleCount++;
    let [target, method, args] = parseArgs(..._args);
    let stack = this.DEBUG ? new Error() : undefined;
    return this._ensureInstance().schedule(queueName, target, method, args, false, stack);
  }
  /*
    Defer the passed iterable of functions to run inside the specified queue.
       @method scheduleIterable
    @param {String} queueName
    @param {Iterable} an iterable of functions to execute
    @return method result
  */
  scheduleIterable(queueName, iterable) {
    scheduleIterableCount++;
    let stack = this.DEBUG ? new Error() : undefined;
    return this._ensureInstance().schedule(queueName, null, iteratorDrain, [iterable], false, stack);
  }
  /**
   * @deprecated please use scheduleOnce instead.
   */
  deferOnce(queueName, target, method, ...args) {
    deferOnceCount++;
    return this.scheduleOnce(queueName, target, method, ...args);
  }
  scheduleOnce(queueName, ..._args) {
    scheduleOnceCount++;
    let [target, method, args] = parseArgs(..._args);
    let stack = this.DEBUG ? new Error() : undefined;
    return this._ensureInstance().schedule(queueName, target, method, args, true, stack);
  }
  setTimeout() {
    setTimeoutCount++;
    return this.later(...arguments);
  }
  later() {
    laterCount++;
    let [target, method, args, wait] = parseTimerArgs(...arguments);
    return this._later(target, method, args, wait);
  }
  throttle() {
    throttleCount++;
    let [target, method, args, wait, isImmediate = true] = parseDebounceArgs(...arguments);
    let index = findTimerItem(target, method, this._timers);
    let timerId;
    if (index === -1) {
      timerId = this._later(target, method, isImmediate ? DISABLE_SCHEDULE : args, wait);
      if (isImmediate) {
        this._join(target, method, args);
      }
    } else {
      timerId = this._timers[index + 1];
      let argIndex = index + 4;
      if (this._timers[argIndex] !== DISABLE_SCHEDULE) {
        this._timers[argIndex] = args;
      }
    }
    return timerId;
  }
  debounce() {
    debounceCount++;
    let [target, method, args, wait, isImmediate = false] = parseDebounceArgs(...arguments);
    let _timers = this._timers;
    let index = findTimerItem(target, method, _timers);
    let timerId;
    if (index === -1) {
      timerId = this._later(target, method, isImmediate ? DISABLE_SCHEDULE : args, wait);
      if (isImmediate) {
        this._join(target, method, args);
      }
    } else {
      let executeAt = this._platform.now() + wait;
      let argIndex = index + 4;
      if (_timers[argIndex] === DISABLE_SCHEDULE) {
        args = DISABLE_SCHEDULE;
      }
      timerId = _timers[index + 1];
      let i = binarySearch(executeAt, _timers);
      if (index + TIMERS_OFFSET === i) {
        _timers[index] = executeAt;
        _timers[argIndex] = args;
      } else {
        let stack = this._timers[index + 5];
        this._timers.splice(i, 0, executeAt, timerId, target, method, args, stack);
        this._timers.splice(index, TIMERS_OFFSET);
      }
      if (index === 0) {
        this._reinstallTimerTimeout();
      }
    }
    return timerId;
  }
  cancelTimers() {
    cancelTimersCount++;
    this._clearTimerTimeout();
    this._timers = [];
    this._cancelAutorun();
  }
  hasTimers() {
    return this._timers.length > 0 || this._autorun;
  }
  cancel(timer) {
    cancelCount++;
    if (timer === null || timer === undefined) {
      return false;
    }
    let timerType = typeof timer;
    if (timerType === 'number') {
      // we're cancelling a setTimeout or throttle or debounce
      return this._cancelLaterTimer(timer);
    } else if (timerType === 'object' && timer.queue && timer.method) {
      // we're cancelling a deferOnce
      return timer.queue.cancel(timer);
    }
    return false;
  }
  ensureInstance() {
    this._ensureInstance();
  }
  /**
   * Returns debug information related to the current instance of Backburner
   *
   * @method getDebugInfo
   * @returns {Object | undefined} Will return and Object containing debug information if
   * the DEBUG flag is set to true on the current instance of Backburner, else undefined.
   */
  getDebugInfo() {
    if (this.DEBUG) {
      return {
        autorun: this._autorunStack,
        counters: this.counters,
        timers: getQueueItems(this._timers, TIMERS_OFFSET, 2),
        instanceStack: [this.currentInstance, ...this.instanceStack].map(deferredActionQueue => deferredActionQueue && deferredActionQueue._getDebugInfo(this.DEBUG))
      };
    }
    return undefined;
  }
  _end(fromAutorun) {
    let currentInstance = this.currentInstance;
    let nextInstance = null;
    if (currentInstance === null) {
      throw new Error(`end called without begin`);
    }
    // Prevent double-finally bug in Safari 6.0.2 and iOS 6
    // This bug appears to be resolved in Safari 6.0.5 and iOS 7
    let finallyAlreadyCalled = false;
    let result;
    try {
      result = currentInstance.flush(fromAutorun);
    } finally {
      if (!finallyAlreadyCalled) {
        finallyAlreadyCalled = true;
        if (result === 1 /* Pause */) {
          const plannedNextQueue = this.queueNames[currentInstance.queueNameIndex];
          this._scheduleAutorun(plannedNextQueue);
        } else {
          this.currentInstance = null;
          if (this.instanceStack.length > 0) {
            nextInstance = this.instanceStack.pop();
            this.currentInstance = nextInstance;
          }
          this._trigger('end', currentInstance, nextInstance);
          this._onEnd(currentInstance, nextInstance);
        }
      }
    }
  }
  _join(target, method, args) {
    if (this.currentInstance === null) {
      return this._run(target, method, args);
    }
    if (target === undefined && args === undefined) {
      return method();
    } else {
      return method.apply(target, args);
    }
  }
  _run(target, method, args) {
    let onError = getOnError(this.options);
    this.begin();
    if (onError) {
      try {
        return method.apply(target, args);
      } catch (error) {
        onError(error);
      } finally {
        this.end();
      }
    } else {
      try {
        return method.apply(target, args);
      } finally {
        this.end();
      }
    }
  }
  _cancelAutorun() {
    if (this._autorun) {
      this._platform.clearNext();
      this._autorun = false;
      this._autorunStack = null;
    }
  }
  _later(target, method, args, wait) {
    let stack = this.DEBUG ? new Error() : undefined;
    let executeAt = this._platform.now() + wait;
    let id = UUID++;
    if (this._timers.length === 0) {
      this._timers.push(executeAt, id, target, method, args, stack);
      this._installTimerTimeout();
    } else {
      // find position to insert
      let i = binarySearch(executeAt, this._timers);
      this._timers.splice(i, 0, executeAt, id, target, method, args, stack);
      // always reinstall since it could be out of sync
      this._reinstallTimerTimeout();
    }
    return id;
  }
  _cancelLaterTimer(timer) {
    for (let i = 1; i < this._timers.length; i += TIMERS_OFFSET) {
      if (this._timers[i] === timer) {
        this._timers.splice(i - 1, TIMERS_OFFSET);
        if (i === 1) {
          this._reinstallTimerTimeout();
        }
        return true;
      }
    }
    return false;
  }
  /**
   Trigger an event. Supports up to two arguments. Designed around
   triggering transition events from one run loop instance to the
   next, which requires an argument for the  instance and then
   an argument for the next instance.
      @private
   @method _trigger
   @param {String} eventName
   @param {any} arg1
   @param {any} arg2
   */
  _trigger(eventName, arg1, arg2) {
    let callbacks = this._eventCallbacks[eventName];
    if (callbacks !== undefined) {
      for (let i = 0; i < callbacks.length; i++) {
        callbacks[i](arg1, arg2);
      }
    }
  }
  _runExpiredTimers() {
    this._timerTimeoutId = null;
    if (this._timers.length > 0) {
      this.begin();
      this._scheduleExpiredTimers();
      this.end();
    }
  }
  _scheduleExpiredTimers() {
    let timers = this._timers;
    let i = 0;
    let l = timers.length;
    let defaultQueue = this._defaultQueue;
    let n = this._platform.now();
    for (; i < l; i += TIMERS_OFFSET) {
      let executeAt = timers[i];
      if (executeAt > n) {
        break;
      }
      let args = timers[i + 4];
      if (args !== DISABLE_SCHEDULE) {
        let target = timers[i + 2];
        let method = timers[i + 3];
        let stack = timers[i + 5];
        this.currentInstance.schedule(defaultQueue, target, method, args, false, stack);
      }
    }
    timers.splice(0, i);
    this._installTimerTimeout();
  }
  _reinstallTimerTimeout() {
    this._clearTimerTimeout();
    this._installTimerTimeout();
  }
  _clearTimerTimeout() {
    if (this._timerTimeoutId === null) {
      return;
    }
    this._platform.clearTimeout(this._timerTimeoutId);
    this._timerTimeoutId = null;
  }
  _installTimerTimeout() {
    if (this._timers.length === 0) {
      return;
    }
    let minExpiresAt = this._timers[0];
    let n = this._platform.now();
    let wait = Math.max(0, minExpiresAt - n);
    this._timerTimeoutId = this._platform.setTimeout(this._boundRunExpiredTimers, wait);
  }
  _ensureInstance() {
    let currentInstance = this.currentInstance;
    if (currentInstance === null) {
      this._autorunStack = this.DEBUG ? new Error() : undefined;
      currentInstance = this.begin();
      this._scheduleAutorun(this.queueNames[0]);
    }
    return currentInstance;
  }
  _scheduleAutorun(plannedNextQueue) {
    autorunsCreatedCount++;
    const next = this._platform.next;
    const flush = this.options.flush;
    if (flush) {
      flush(plannedNextQueue, next);
    } else {
      next();
    }
    this._autorun = true;
  }
}
Backburner.Queue = Queue;
Backburner.buildPlatform = buildPlatform;
Backburner.buildNext = buildNext;

let currentRunLoop = null;
function _getCurrentRunLoop() {
  return currentRunLoop;
}
function onBegin(current) {
  currentRunLoop = current;
}
function onEnd(_current, next) {
  currentRunLoop = next;
  flushAsyncObservers(schedule);
}
function flush$1(queueName, next) {
  if (queueName === 'render' || queueName === _rsvpErrorQueue) {
    flushAsyncObservers(schedule);
  }
  next();
}
const _rsvpErrorQueue = `${Math.random()}${Date.now()}`.replace('.', '');

/**
  Array of named queues. This array determines the order in which queues
  are flushed at the end of the RunLoop. You can define your own queues by
  simply adding the queue name to this array. Normally you should not need
  to inspect or modify this property.

  @property queues
  @type Array
  @default ['actions', 'destroy']
  @private
*/
const _queues = ['actions',
// used in router transitions to prevent unnecessary loading state entry
// if all context promises resolve on the 'actions' queue first
'routerTransitions', 'render', 'afterRender', 'destroy',
// used to re-throw unhandled RSVP rejection errors specifically in this
// position to avoid breaking anything rendered in the other sections
_rsvpErrorQueue];

/**
 * @internal
 * @private
 */
const _backburner = new Backburner(_queues, {
  defaultQueue: 'actions',
  onBegin,
  onEnd,
  onErrorTarget,
  onErrorMethod: 'onerror',
  flush: flush$1
});

/**
 @module @ember/runloop
*/
// ..........................................................
// run - this is ideally the only public API the dev sees
//

/**
  Runs the passed target and method inside of a RunLoop, ensuring any
  deferred actions including bindings and views updates are flushed at the
  end.

  Normally you should not need to invoke this method yourself. However if
  you are implementing raw event handlers when interfacing with other
  libraries or plugins, you should probably wrap all of your code inside this
  call.

  ```javascript
  import { run } from '@ember/runloop';

  run(function() {
    // code to be executed within a RunLoop
  });
  ```
  @method run
  @for @ember/runloop
  @static
  @param {Object} [target] target of method to call
  @param {Function|String} method Method to invoke.
    May be a function or a string. If you pass a string
    then it will be looked up on the passed target.
  @param {Object} [args*] Any additional arguments you wish to pass to the method.
  @return {Object} return value from invoking the passed function.
  @public
*/

function run$1(...args) {
  // @ts-expect-error TS doesn't like our spread args
  return _backburner.run(...args);
}

/**
  If no run-loop is present, it creates a new one. If a run loop is
  present it will queue itself to run on the existing run-loops action
  queue.

  Please note: This is not for normal usage, and should be used sparingly.

  If invoked when not within a run loop:

  ```javascript
  import { join } from '@ember/runloop';

  join(function() {
    // creates a new run-loop
  });
  ```

  Alternatively, if called within an existing run loop:

  ```javascript
  import { run, join } from '@ember/runloop';

  run(function() {
    // creates a new run-loop

    join(function() {
      // joins with the existing run-loop, and queues for invocation on
      // the existing run-loops action queue.
    });
  });
  ```

  @method join
  @static
  @for @ember/runloop
  @param {Object} [target] target of method to call
  @param {Function|String} method Method to invoke.
    May be a function or a string. If you pass a string
    then it will be looked up on the passed target.
  @param {Object} [args*] Any additional arguments you wish to pass to the method.
  @return {Object} Return value from invoking the passed function. Please note,
  when called within an existing loop, no return value is possible.
  @public
*/

function join(methodOrTarget, methodOrArg, ...additionalArgs) {
  return _backburner.join(methodOrTarget, methodOrArg, ...additionalArgs);
}

/**
  Allows you to specify which context to call the specified function in while
  adding the execution of that function to the Ember run loop. This ability
  makes this method a great way to asynchronously integrate third-party libraries
  into your Ember application.

  `bind` takes two main arguments, the desired context and the function to
  invoke in that context. Any additional arguments will be supplied as arguments
  to the function that is passed in.

  Let's use the creation of a TinyMCE component as an example. Currently,
  TinyMCE provides a setup configuration option we can use to do some processing
  after the TinyMCE instance is initialized but before it is actually rendered.
  We can use that setup option to do some additional setup for our component.
  The component itself could look something like the following:

  ```app/components/rich-text-editor.js
  import Component from '@ember/component';
  import { on } from '@ember/object/evented';
  import { bind } from '@ember/runloop';

  export default Component.extend({
    initializeTinyMCE: on('didInsertElement', function() {
      tinymce.init({
        selector: '#' + this.$().prop('id'),
        setup: bind(this, this.setupEditor)
      });
    }),

    didInsertElement() {
      tinymce.init({
        selector: '#' + this.$().prop('id'),
        setup: bind(this, this.setupEditor)
      });
    }

    setupEditor(editor) {
      this.set('editor', editor);

      editor.on('change', function() {
        console.log('content changed!');
      });
    }
  });
  ```

  In this example, we use `bind` to bind the setupEditor method to the
  context of the RichTextEditor component and to have the invocation of that
  method be safely handled and executed by the Ember run loop.

  @method bind
  @static
  @for @ember/runloop
  @param {Object} [target] target of method to call
  @param {Function|String} method Method to invoke.
    May be a function or a string. If you pass a string
    then it will be looked up on the passed target.
  @param {Object} [args*] Any additional arguments you wish to pass to the method.
  @return {Function} returns a new function that will always have a particular context
  @since 1.4.0
  @public
*/

// This final fallback is the equivalent of the (quite unsafe!) type for `bind`
// from TS' defs for `Function.prototype.bind`. In general, it means we have a
// loss of safety if we do not

function bind(...curried) {
  return (...args) => join(...curried.concat(args));
}

/**
  Adds the passed target/method and any optional arguments to the named
  queue to be executed at the end of the RunLoop. If you have not already
  started a RunLoop when calling this method one will be started for you
  automatically.

  At the end of a RunLoop, any methods scheduled in this way will be invoked.
  Methods will be invoked in an order matching the named queues defined in
  the `queues` property.

  ```javascript
  import { schedule } from '@ember/runloop';

  schedule('afterRender', this, function() {
    // this will be executed in the 'afterRender' queue
    console.log('scheduled on afterRender queue');
  });

  schedule('actions', this, function() {
    // this will be executed in the 'actions' queue
    console.log('scheduled on actions queue');
  });

  // Note the functions will be run in order based on the run queues order.
  // Output would be:
  //   scheduled on actions queue
  //   scheduled on afterRender queue
  ```

  @method schedule
  @static
  @for @ember/runloop
  @param {String} queue The name of the queue to schedule against. Default queues is 'actions'
  @param {Object} [target] target object to use as the context when invoking a method.
  @param {String|Function} method The method to invoke. If you pass a string it
    will be resolved on the target object at the time the scheduled item is
    invoked allowing you to change the target function.
  @param {Object} [arguments*] Optional arguments to be passed to the queued method.
  @return {*} Timer information for use in canceling, see `cancel`.
  @public
*/

function schedule(...args) {
  // @ts-expect-error TS doesn't like the rest args here
  return _backburner.schedule(...args);
}

// Used by global test teardown
function _hasScheduledTimers() {
  return _backburner.hasTimers();
}

// Used by global test teardown
function _cancelTimers() {
  _backburner.cancelTimers();
}

/**
 Schedule a function to run one time during the current RunLoop. This is equivalent
  to calling `scheduleOnce` with the "actions" queue.

  @method once
  @static
  @for @ember/runloop
  @param {Object} [target] The target of the method to invoke.
  @param {Function|String} method The method to invoke.
    If you pass a string it will be resolved on the
    target at the time the method is invoked.
  @param {Object} [args*] Optional arguments to pass to the timeout.
  @return {Object} Timer information for use in canceling, see `cancel`.
  @public
*/

function once(...args) {
  // @ts-expect-error TS doesn't like the rest args here
  return _backburner.scheduleOnce('actions', ...args);
}

/**
  Schedules a function to run one time in a given queue of the current RunLoop.
  Calling this method with the same queue/target/method combination will have
  no effect (past the initial call).

  Note that although you can pass optional arguments these will not be
  considered when looking for duplicates. New arguments will replace previous
  calls.

  ```javascript
  import { run, scheduleOnce } from '@ember/runloop';

  function sayHi() {
    console.log('hi');
  }

  run(function() {
    scheduleOnce('afterRender', myContext, sayHi);
    scheduleOnce('afterRender', myContext, sayHi);
    // sayHi will only be executed once, in the afterRender queue of the RunLoop
  });
  ```

  Also note that for `scheduleOnce` to prevent additional calls, you need to
  pass the same function instance. The following case works as expected:

  ```javascript
  function log() {
    console.log('Logging only once');
  }

  function scheduleIt() {
    scheduleOnce('actions', myContext, log);
  }

  scheduleIt();
  scheduleIt();
  ```

  But this other case will schedule the function multiple times:

  ```javascript
  import { scheduleOnce } from '@ember/runloop';

  function scheduleIt() {
    scheduleOnce('actions', myContext, function() {
      console.log('Closure');
    });
  }

  scheduleIt();
  scheduleIt();

  // "Closure" will print twice, even though we're using `scheduleOnce`,
  // because the function we pass to it won't match the
  // previously scheduled operation.
  ```

  Available queues, and their order, can be found at `queues`

  @method scheduleOnce
  @static
  @for @ember/runloop
  @param {String} [queue] The name of the queue to schedule against. Default queues is 'actions'.
  @param {Object} [target] The target of the method to invoke.
  @param {Function|String} method The method to invoke.
    If you pass a string it will be resolved on the
    target at the time the method is invoked.
  @param {Object} [args*] Optional arguments to pass to the timeout.
  @return {Object} Timer information for use in canceling, see `cancel`.
  @public
*/

function scheduleOnce(...args) {
  // @ts-expect-error TS doesn't like the rest args here
  return _backburner.scheduleOnce(...args);
}

/**
  Schedules an item to run from within a separate run loop, after
  control has been returned to the system. This is equivalent to calling
  `later` with a wait time of 1ms.

  ```javascript
  import { next } from '@ember/runloop';

  next(myContext, function() {
    // code to be executed in the next run loop,
    // which will be scheduled after the current one
  });
  ```

  Multiple operations scheduled with `next` will coalesce
  into the same later run loop, along with any other operations
  scheduled by `later` that expire right around the same
  time that `next` operations will fire.

  Note that there are often alternatives to using `next`.
  For instance, if you'd like to schedule an operation to happen
  after all DOM element operations have completed within the current
  run loop, you can make use of the `afterRender` run loop queue (added
  by the `ember-views` package, along with the preceding `render` queue
  where all the DOM element operations happen).

  Example:

  ```app/components/my-component.js
  import Component from '@ember/component';
  import { scheduleOnce } from '@ember/runloop';

  export Component.extend({
    didInsertElement() {
      this._super(...arguments);
      scheduleOnce('afterRender', this, 'processChildElements');
    },

    processChildElements() {
      // ... do something with component's child component
      // elements after they've finished rendering, which
      // can't be done within this component's
      // `didInsertElement` hook because that gets run
      // before the child elements have been added to the DOM.
    }
  });
  ```

  One benefit of the above approach compared to using `next` is
  that you will be able to perform DOM/CSS operations before unprocessed
  elements are rendered to the screen, which may prevent flickering or
  other artifacts caused by delaying processing until after rendering.

  The other major benefit to the above approach is that `next`
  introduces an element of non-determinism, which can make things much
  harder to test, due to its reliance on `setTimeout`; it's much harder
  to guarantee the order of scheduled operations when they are scheduled
  outside of the current run loop, i.e. with `next`.

  @method next
  @static
  @for @ember/runloop
  @param {Object} [target] target of method to invoke
  @param {Function|String} method The method to invoke.
    If you pass a string it will be resolved on the
    target at the time the method is invoked.
  @param {Object} [args*] Optional arguments to pass to the timeout.
  @return {Object} Timer information for use in canceling, see `cancel`.
  @public
*/

function next(...args) {
  return _backburner.later(...args, 1);
}

/**
  Cancels a scheduled item. Must be a value returned by `later()`,
  `once()`, `scheduleOnce()`, `next()`, `debounce()`, or
  `throttle()`.

  ```javascript
  import {
    next,
    cancel,
    later,
    scheduleOnce,
    once,
    throttle,
    debounce
  } from '@ember/runloop';

  let runNext = next(myContext, function() {
    // will not be executed
  });

  cancel(runNext);

  let runLater = later(myContext, function() {
    // will not be executed
  }, 500);

  cancel(runLater);

  let runScheduleOnce = scheduleOnce('afterRender', myContext, function() {
    // will not be executed
  });

  cancel(runScheduleOnce);

  let runOnce = once(myContext, function() {
    // will not be executed
  });

  cancel(runOnce);

  let throttle = throttle(myContext, function() {
    // will not be executed
  }, 1, false);

  cancel(throttle);

  let debounce = debounce(myContext, function() {
    // will not be executed
  }, 1);

  cancel(debounce);

  let debounceImmediate = debounce(myContext, function() {
    // will be executed since we passed in true (immediate)
  }, 100, true);

  // the 100ms delay until this method can be called again will be canceled
  cancel(debounceImmediate);
  ```

  @method cancel
  @static
  @for @ember/runloop
  @param {Object} [timer] Timer object to cancel
  @return {Boolean} true if canceled or false/undefined if it wasn't found
  @public
*/
function cancel(timer) {
  return _backburner.cancel(timer);
}

// This is defined as a separate interface so that it can be used in the definition of
// `Owner` without also including the `__container__` property.

/**
  ContainerProxyMixin is used to provide public access to specific
  container functionality.

  @class ContainerProxyMixin
  @extends ContainerProxy
  @private
*/

const ContainerProxyMixin = Mixin.create({
  /**
   The container stores state.
    @private
   @property {Ember.Container} __container__
   */
  __container__: null,
  ownerInjection() {
    return this.__container__.ownerInjection();
  },
  lookup(fullName, options) {
    return this.__container__.lookup(fullName, options);
  },
  destroy() {
    let container = this.__container__;
    if (container) {
      join(() => {
        container.destroy();
        schedule('destroy', container, 'finalizeDestroy');
      });
    }
    this._super();
  },
  factoryFor(fullName) {
    return this.__container__.factoryFor(fullName);
  }
});

/**
@module ember
*/

/**
  Implements some standard methods for comparing objects. Add this mixin to
  any class you create that can compare its instances.

  You should implement the `compare()` method.

  @class Comparable
  @namespace Ember
  @since Ember 0.9
  @private
*/

const Comparable = Mixin.create({
  /**
    __Required.__ You must implement this method to apply this mixin.
     Override to return the result of the comparison of the two parameters. The
    compare method should return:
     - `-1` if `a < b`
    - `0` if `a == b`
    - `1` if `a > b`
     Default implementation raises an exception.
     @method compare
    @param a {Object} the first object to compare
    @param b {Object} the second object to compare
    @return {Number} the result of the comparison
    @private
  */
  compare: null
});

/**
@module ember
*/

const ActionHandler = Mixin.create({
  mergedProperties: ['actions'],
  /**
    The collection of functions, keyed by name, available on this
    `ActionHandler` as action targets.
     These functions will be invoked when a matching `{{action}}` is triggered
    from within a template and the application's current route is this route.
     Actions can also be invoked from other parts of your application
    via `ActionHandler#send`.
     The `actions` hash will inherit action handlers from
    the `actions` hash defined on extended parent classes
    or mixins rather than just replace the entire hash, e.g.:
     ```app/mixins/can-display-banner.js
    import Mixin from '@ember/object/mixin';
     export default Mixin.create({
      actions: {
        displayBanner(msg) {
          // ...
        }
      }
    });
    ```
     ```app/routes/welcome.js
    import Route from '@ember/routing/route';
    import CanDisplayBanner from '../mixins/can-display-banner';
     export default Route.extend(CanDisplayBanner, {
      actions: {
        playMusic() {
          // ...
        }
      }
    });
     // `WelcomeRoute`, when active, will be able to respond
    // to both actions, since the actions hash is merged rather
    // then replaced when extending mixins / parent classes.
    this.send('displayBanner');
    this.send('playMusic');
    ```
     Within a Controller, Route or Component's action handler,
    the value of the `this` context is the Controller, Route or
    Component object:
     ```app/routes/song.js
    import Route from '@ember/routing/route';
     export default Route.extend({
      actions: {
        myAction() {
          this.controllerFor("song");
          this.transitionTo("other.route");
          ...
        }
      }
    });
    ```
     It is also possible to call `this._super(...arguments)` from within an
    action handler if it overrides a handler defined on a parent
    class or mixin:
     Take for example the following routes:
     ```app/mixins/debug-route.js
    import Mixin from '@ember/object/mixin';
     export default Mixin.create({
      actions: {
        debugRouteInformation() {
          console.debug("It's a-me, console.debug!");
        }
      }
    });
    ```
     ```app/routes/annoying-debug.js
    import Route from '@ember/routing/route';
    import DebugRoute from '../mixins/debug-route';
     export default Route.extend(DebugRoute, {
      actions: {
        debugRouteInformation() {
          // also call the debugRouteInformation of mixed in DebugRoute
          this._super(...arguments);
           // show additional annoyance
          window.alert(...);
        }
      }
    });
    ```
     ## Bubbling
     By default, an action will stop bubbling once a handler defined
    on the `actions` hash handles it. To continue bubbling the action,
    you must return `true` from the handler:
     ```app/router.js
    Router.map(function() {
      this.route("album", function() {
        this.route("song");
      });
    });
    ```
     ```app/routes/album.js
    import Route from '@ember/routing/route';
     export default Route.extend({
      actions: {
        startPlaying: function() {
        }
      }
    });
    ```
     ```app/routes/album-song.js
    import Route from '@ember/routing/route';
     export default Route.extend({
      actions: {
        startPlaying() {
          // ...
           if (actionShouldAlsoBeTriggeredOnParentRoute) {
            return true;
          }
        }
      }
    });
    ```
     @property actions
    @type Object
    @default null
    @public
  */

  /**
    Triggers a named action on the `ActionHandler`. Any parameters
    supplied after the `actionName` string will be passed as arguments
    to the action target function.
     If the `ActionHandler` has its `target` property set, actions may
    bubble to the `target`. Bubbling happens when an `actionName` can
    not be found in the `ActionHandler`'s `actions` hash or if the
    action target function returns `true`.
     Example
     ```app/routes/welcome.js
    import Route from '@ember/routing/route';
     export default Route.extend({
      actions: {
        playTheme() {
          this.send('playMusic', 'theme.mp3');
        },
        playMusic(track) {
          // ...
        }
      }
    });
    ```
     @method send
    @param {String} actionName The action to trigger
    @param {*} context a context to send with the action
    @public
  */
  send(actionName, ...args) {
    if (this.actions && this.actions[actionName]) {
      let shouldBubble = this.actions[actionName].apply(this, args) === true;
      if (!shouldBubble) {
        return;
      }
    }
    let target = get$1(this, 'target');
    if (target) {
      target.send(...arguments);
    }
  }
});

/**
 @module @ember/object
*/
/**
  Sets the value of a property on an object, respecting computed properties
  and notifying observers and other listeners of the change.
  If the specified property is not defined on the object and the object
  implements the `setUnknownProperty` method, then instead of setting the
  value of the property on the object, its `setUnknownProperty` handler
  will be invoked with the two parameters `keyName` and `value`.

  ```javascript
  import { set } from '@ember/object';
  set(obj, "name", value);
  ```

  @method set
  @static
  @for @ember/object
  @param {Object} obj The object to modify.
  @param {String} keyName The property key to set
  @param {Object} value The value to set
  @return {Object} the passed value.
  @public
*/
function set(obj, keyName, value, tolerant) {
  if (obj.isDestroyed) {
    return value;
  }
  return isPath(keyName) ? _setPath(obj, keyName, value, tolerant) : _setProp(obj, keyName, value);
}
function _setProp(obj, keyName, value) {
  let descriptor = lookupDescriptor(obj, keyName);
  if (descriptor !== null && COMPUTED_SETTERS.has(descriptor.set)) {
    obj[keyName] = value;
    return value;
  }
  let currentValue;
  {
    currentValue = obj[keyName];
  }
  if (currentValue === undefined && 'object' === typeof obj && !(keyName in obj) && typeof obj.setUnknownProperty === 'function') {
    /* unknown property */
    obj.setUnknownProperty(keyName, value);
  } else {
    {
      obj[keyName] = value;
    }
    if (currentValue !== value) {
      notifyPropertyChange(obj, keyName);
    }
  }
  return value;
}
function _setPath(root, path, value, tolerant) {
  let parts = path.split('.');
  let keyName = parts.pop();
  let newRoot = _getPath(root, parts, true);
  if (newRoot !== null && newRoot !== undefined) {
    return set(newRoot, keyName, value);
  } else if (!tolerant) {
    throw new Error(`Property set failed: object in path "${parts.join('.')}" could not be found.`);
  }
}

/**
  Error-tolerant form of `set`. Will not blow up if any part of the
  chain is `undefined`, `null`, or destroyed.

  This is primarily used when syncing bindings, which may try to update after
  an object has been destroyed.

  ```javascript
  import { trySet } from '@ember/object';

  let obj = { name: "Zoey" };
  trySet(obj, "contacts.twitter", "@emberjs");
  ```

  @method trySet
  @static
  @for @ember/object
  @param {Object} root The object to modify.
  @param {String} path The property path to set
  @param {Object} value The value to set
  @public
*/
function trySet(root, path, value) {
  return set(root, path, value, true);
}

/**
@module ember
*/

function contentFor(proxy) {
  let content = get$1(proxy, 'content');
  // SAFETY: Ideally we'd assert instead of casting, but @glimmer/validator doesn't give us
  // sufficient public types for this. Previously this code was .js and worked correctly so
  // hopefully this is sufficiently reliable.
  UPDATE_TAG(tagForObject(proxy), tagForObject(content));
  return content;
}
function customTagForProxy(proxy, key, addMandatorySetter) {
  let meta = tagMetaFor(proxy);
  let tag = tagFor(proxy, key, meta);
  if (key in proxy) {
    return tag;
  } else {
    let tags = [tag, tagFor(proxy, 'content', meta)];
    let content = contentFor(proxy);
    if (isObject(content)) {
      tags.push(tagForProperty(content, key, addMandatorySetter));
    }
    return combine(tags);
  }
}

/**
  `Ember.ProxyMixin` forwards all properties not defined by the proxy itself
  to a proxied `content` object.  See ObjectProxy for more details.

  @class ProxyMixin
  @namespace Ember
  @private
*/

const ProxyMixin = Mixin.create({
  /**
    The object whose properties will be forwarded.
     @property content
    @type {unknown}
    @default null
    @public
  */
  content: null,
  init() {
    this._super(...arguments);
    setProxy(this);
    tagForObject(this);
    setCustomTagFor(this, customTagForProxy);
  },
  willDestroy() {
    this.set('content', null);
    this._super(...arguments);
  },
  isTruthy: computed('content', function () {
    return Boolean(get$1(this, 'content'));
  }),
  unknownProperty(key) {
    let content = contentFor(this);
    return content ? get$1(content, key) : undefined;
  },
  setUnknownProperty(key, value) {
    let m = meta$1(this);
    if (m.isInitializing() || m.isPrototypeMeta(this)) {
      // if marked as prototype or object is initializing then just
      // defineProperty rather than delegate
      defineProperty(this, key, null, value);
      return value;
    }
    let content = contentFor(this);
    return set(content, key, value);
  }
});

/**
@module @ember/enumerable
@private
*/

/**
  The methods in this mixin have been moved to [MutableArray](/ember/release/classes/MutableArray). This mixin has
  been intentionally preserved to avoid breaking Enumerable.detect checks
  until the community migrates away from them.

  @class Enumerable
  @private
*/
// eslint-disable-next-line @typescript-eslint/no-empty-object-type

const Enumerable = Mixin.create();

/**
@module ember
*/

/**
  The methods in this mixin have been moved to MutableArray. This mixin has
  been intentionally preserved to avoid breaking MutableEnumerable.detect
  checks until the community migrates away from them.

  @class MutableEnumerable
  @namespace Ember
  @uses Enumerable
  @private
*/
// eslint-disable-next-line @typescript-eslint/no-empty-object-type

const MutableEnumerable = Mixin.create(Enumerable);

/**
@module ember
*/

const TargetActionSupport = Mixin.create({
  target: null,
  action: null,
  actionContext: null,
  actionContextObject: computed('actionContext', function () {
    let actionContext = get$1(this, 'actionContext');
    if (typeof actionContext === 'string') {
      let value = get$1(this, actionContext);
      if (value === undefined) {
        value = get$1(context$1.lookup, actionContext);
      }
      return value;
    } else {
      return actionContext;
    }
  }),
  /**
  Send an `action` with an `actionContext` to a `target`. The action, actionContext
  and target will be retrieved from properties of the object. For example:
   ```javascript
  import { alias } from '@ember/object/computed';
   App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
    target: alias('controller'),
    action: 'save',
    actionContext: alias('context'),
    click() {
      this.triggerAction(); // Sends the `save` action, along with the current context
                            // to the current controller
    }
  });
  ```
   The `target`, `action`, and `actionContext` can be provided as properties of
  an optional object argument to `triggerAction` as well.
   ```javascript
  App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
    click() {
      this.triggerAction({
        action: 'save',
        target: this.get('controller'),
        actionContext: this.get('context')
      }); // Sends the `save` action, along with the current context
          // to the current controller
    }
  });
  ```
   The `actionContext` defaults to the object you are mixing `TargetActionSupport` into.
  But `target` and `action` must be specified either as properties or with the argument
  to `triggerAction`, or a combination:
   ```javascript
  import { alias } from '@ember/object/computed';
   App.SaveButtonView = Ember.View.extend(Ember.TargetActionSupport, {
    target: alias('controller'),
    click() {
      this.triggerAction({
        action: 'save'
      }); // Sends the `save` action, along with a reference to `this`,
          // to the current controller
    }
  });
  ```
   @method triggerAction
  @param opts {Object} (optional, with the optional keys action, target and/or actionContext)
  @return {Boolean} true if the action was sent successfully and did not return false
  @private
  */
  triggerAction(opts = {}) {
    let {
      action,
      target,
      actionContext
    } = opts;
    action = action || get$1(this, 'action');
    target = target || getTarget(this);
    if (actionContext === undefined) {
      actionContext = get$1(this, 'actionContextObject') || this;
    }
    let context = Array.isArray(actionContext) ? actionContext : [actionContext];
    if (target && action) {
      let ret;
      if (isSendable(target)) {
        ret = target.send(action, ...context);
      } else {
        ret = target[action](...context);
      }
      if (ret !== false) {
        return true;
      }
    }
    return false;
  }
});
function isSendable(obj) {
  return obj != null && typeof obj === 'object' && typeof obj.send === 'function';
}
function getTarget(instance) {
  let target = get$1(instance, 'target');
  if (target) {
    if (typeof target === 'string') {
      let value = get$1(instance, target);
      if (value === undefined) {
        value = get$1(context$1.lookup, target);
      }
      return value;
    } else {
      return target;
    }
  }
  if (instance._target) {
    return instance._target;
  }
  return null;
}

function callbacksFor(object) {
  let callbacks = object._promiseCallbacks;
  if (!callbacks) {
    callbacks = object._promiseCallbacks = {};
  }
  return callbacks;
}

/**
  @class EventTarget
  @for rsvp
  @public
*/
const EventTarget = {
  /**
    `EventTarget.mixin` extends an object with EventTarget methods. For
    Example:
     ```javascript
    import EventTarget from 'rsvp';
     let object = {};
     EventTarget.mixin(object);
     object.on('finished', function(event) {
      // handle event
    });
     object.trigger('finished', { detail: value });
    ```
     `EventTarget.mixin` also works with prototypes:
     ```javascript
    import EventTarget from 'rsvp';
     let Person = function() {};
    EventTarget.mixin(Person.prototype);
     let yehuda = new Person();
    let tom = new Person();
     yehuda.on('poke', function(event) {
      console.log('Yehuda says OW');
    });
     tom.on('poke', function(event) {
      console.log('Tom says OW');
    });
     yehuda.trigger('poke');
    tom.trigger('poke');
    ```
     @method mixin
    @for rsvp
    @private
    @param {Object} object object to extend with EventTarget methods
  */
  mixin(object) {
    object.on = this.on;
    object.off = this.off;
    object.trigger = this.trigger;
    object._promiseCallbacks = undefined;
    return object;
  },
  /**
    Registers a callback to be executed when `eventName` is triggered
     ```javascript
    object.on('event', function(eventInfo){
      // handle the event
    });
     object.trigger('event');
    ```
     @method on
    @for EventTarget
    @private
    @param {String} eventName name of the event to listen for
    @param {Function} callback function to be called when the event is triggered.
  */
  on(eventName, callback) {
    if (typeof callback !== 'function') {
      throw new TypeError('Callback must be a function');
    }
    let allCallbacks = callbacksFor(this);
    let callbacks = allCallbacks[eventName];
    if (!callbacks) {
      callbacks = allCallbacks[eventName] = [];
    }
    if (callbacks.indexOf(callback) === -1) {
      callbacks.push(callback);
    }
  },
  /**
    You can use `off` to stop firing a particular callback for an event:
     ```javascript
    function doStuff() { // do stuff! }
    object.on('stuff', doStuff);
     object.trigger('stuff'); // doStuff will be called
     // Unregister ONLY the doStuff callback
    object.off('stuff', doStuff);
    object.trigger('stuff'); // doStuff will NOT be called
    ```
     If you don't pass a `callback` argument to `off`, ALL callbacks for the
    event will not be executed when the event fires. For example:
     ```javascript
    let callback1 = function(){};
    let callback2 = function(){};
     object.on('stuff', callback1);
    object.on('stuff', callback2);
     object.trigger('stuff'); // callback1 and callback2 will be executed.
     object.off('stuff');
    object.trigger('stuff'); // callback1 and callback2 will not be executed!
    ```
     @method off
    @for rsvp
    @private
    @param {String} eventName event to stop listening to
    @param {Function} [callback] optional argument. If given, only the function
    given will be removed from the event's callback queue. If no `callback`
    argument is given, all callbacks will be removed from the event's callback
    queue.
  */
  off(eventName, callback) {
    let allCallbacks = callbacksFor(this);
    if (!callback) {
      allCallbacks[eventName] = [];
      return;
    }
    let callbacks = allCallbacks[eventName];
    let index = callbacks.indexOf(callback);
    if (index !== -1) {
      callbacks.splice(index, 1);
    }
  },
  /**
    Use `trigger` to fire custom events. For example:
     ```javascript
    object.on('foo', function(){
      console.log('foo event happened!');
    });
    object.trigger('foo');
    // 'foo event happened!' logged to the console
    ```
     You can also pass a value as a second argument to `trigger` that will be
    passed as an argument to all event listeners for the event:
     ```javascript
    object.on('foo', function(value){
      console.log(value.name);
    });
     object.trigger('foo', { name: 'bar' });
    // 'bar' logged to the console
    ```
     @method trigger
    @for rsvp
    @private
    @param {String} eventName name of the event to be triggered
    @param {*} [options] optional value to be passed to any event handlers for
    the given `eventName`
  */
  trigger(eventName, options, label) {
    let allCallbacks = callbacksFor(this);
    let callbacks = allCallbacks[eventName];
    if (callbacks) {
      // Don't cache the callbacks.length since it may grow
      let callback;
      for (let i = 0; i < callbacks.length; i++) {
        callback = callbacks[i];
        callback(options, label);
      }
    }
  }
};
const config = {
  instrument: false
};
EventTarget['mixin'](config);
function configure(name, value) {
  if (arguments.length === 2) {
    config[name] = value;
  } else {
    return config[name];
  }
}
const queue$1 = [];
function scheduleFlush$1() {
  setTimeout(() => {
    for (let i = 0; i < queue$1.length; i++) {
      let entry = queue$1[i];
      let payload = entry.payload;
      payload.guid = payload.key + payload.id;
      payload.childGuid = payload.key + payload.childId;
      if (payload.error) {
        payload.stack = payload.error.stack;
      }
      config['trigger'](entry.name, entry.payload);
    }
    queue$1.length = 0;
  }, 50);
}
function instrument$1(eventName, promise, child) {
  if (1 === queue$1.push({
    name: eventName,
    payload: {
      key: promise._guidKey,
      id: promise._id,
      eventName: eventName,
      detail: promise._result,
      childId: child && child._id,
      label: promise._label,
      timeStamp: Date.now(),
      error: config["instrument-with-stack"] ? new Error(promise._label) : null
    }
  })) {
    scheduleFlush$1();
  }
}

/**
  `Promise.resolve` returns a promise that will become resolved with the
  passed `value`. It is shorthand for the following:

  ```javascript
  import Promise from 'rsvp';

  let promise = new Promise(function(resolve, reject){
    resolve(1);
  });

  promise.then(function(value){
    // value === 1
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  import Promise from 'rsvp';

  let promise = RSVP.Promise.resolve(1);

  promise.then(function(value){
    // value === 1
  });
  ```

  @method resolve
  @for Promise
  @static
  @param {*} object value that the returned promise will be resolved with
  @param {String} [label] optional string for identifying the returned promise.
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve$2(object, label) {
  /*jshint validthis:true */
  let Constructor = this;
  if (object && typeof object === 'object' && object.constructor === Constructor) {
    return object;
  }
  let promise = new Constructor(noop, label);
  resolve$1$1(promise, object);
  return promise;
}
function withOwnPromise() {
  return new TypeError('A promises callback cannot return that same promise.');
}
function objectOrFunction(x) {
  let type = typeof x;
  return x !== null && (type === 'object' || type === 'function');
}
function noop() {}
const PENDING = void 0;
const FULFILLED = 1;
const REJECTED = 2;
function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
  try {
    then.call(value, fulfillmentHandler, rejectionHandler);
  } catch (e) {
    return e;
  }
}
function handleForeignThenable(promise, thenable, then) {
  config.async(promise => {
    let sealed = false;
    let error = tryThen(then, thenable, value => {
      if (sealed) {
        return;
      }
      sealed = true;
      if (thenable === value) {
        fulfill(promise, value);
      } else {
        resolve$1$1(promise, value);
      }
    }, reason => {
      if (sealed) {
        return;
      }
      sealed = true;
      reject$2(promise, reason);
    }, 'Settle: ' + (promise._label || ' unknown promise'));
    if (!sealed && error) {
      sealed = true;
      reject$2(promise, error);
    }
  }, promise);
}
function handleOwnThenable(promise, thenable) {
  if (thenable._state === FULFILLED) {
    fulfill(promise, thenable._result);
  } else if (thenable._state === REJECTED) {
    thenable._onError = null;
    reject$2(promise, thenable._result);
  } else {
    subscribe$1(thenable, undefined, value => {
      if (thenable === value) {
        fulfill(promise, value);
      } else {
        resolve$1$1(promise, value);
      }
    }, reason => reject$2(promise, reason));
  }
}
function handleMaybeThenable(promise, maybeThenable, then$1) {
  let isOwnThenable = maybeThenable.constructor === promise.constructor && then$1 === then && promise.constructor.resolve === resolve$2;
  if (isOwnThenable) {
    handleOwnThenable(promise, maybeThenable);
  } else if (typeof then$1 === 'function') {
    handleForeignThenable(promise, maybeThenable, then$1);
  } else {
    fulfill(promise, maybeThenable);
  }
}
function resolve$1$1(promise, value) {
  if (promise === value) {
    fulfill(promise, value);
  } else if (objectOrFunction(value)) {
    let then;
    try {
      then = value.then;
    } catch (error) {
      reject$2(promise, error);
      return;
    }
    handleMaybeThenable(promise, value, then);
  } else {
    fulfill(promise, value);
  }
}
function publishRejection(promise) {
  if (promise._onError) {
    promise._onError(promise._result);
  }
  publish(promise);
}
function fulfill(promise, value) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._result = value;
  promise._state = FULFILLED;
  if (promise._subscribers.length === 0) {
    if (config.instrument) {
      instrument$1('fulfilled', promise);
    }
  } else {
    config.async(publish, promise);
  }
}
function reject$2(promise, reason) {
  if (promise._state !== PENDING) {
    return;
  }
  promise._state = REJECTED;
  promise._result = reason;
  config.async(publishRejection, promise);
}
function subscribe$1(parent, child, onFulfillment, onRejection) {
  let subscribers = parent._subscribers;
  let length = subscribers.length;
  parent._onError = null;
  subscribers[length] = child;
  subscribers[length + FULFILLED] = onFulfillment;
  subscribers[length + REJECTED] = onRejection;
  if (length === 0 && parent._state) {
    config.async(publish, parent);
  }
}
function publish(promise) {
  let subscribers = promise._subscribers;
  let settled = promise._state;
  if (config.instrument) {
    instrument$1(settled === FULFILLED ? 'fulfilled' : 'rejected', promise);
  }
  if (subscribers.length === 0) {
    return;
  }
  let child,
    callback,
    result = promise._result;
  for (let i = 0; i < subscribers.length; i += 3) {
    child = subscribers[i];
    callback = subscribers[i + settled];
    if (child) {
      invokeCallback(settled, child, callback, result);
    } else {
      callback(result);
    }
  }
  promise._subscribers.length = 0;
}
function invokeCallback(state, promise, callback, result) {
  let hasCallback = typeof callback === 'function';
  let value,
    succeeded = true,
    error;
  if (hasCallback) {
    try {
      value = callback(result);
    } catch (e) {
      succeeded = false;
      error = e;
    }
  } else {
    value = result;
  }
  if (promise._state !== PENDING) ;else if (value === promise) {
    reject$2(promise, withOwnPromise());
  } else if (succeeded === false) {
    reject$2(promise, error);
  } else if (hasCallback) {
    resolve$1$1(promise, value);
  } else if (state === FULFILLED) {
    fulfill(promise, value);
  } else if (state === REJECTED) {
    reject$2(promise, value);
  }
}
function initializePromise(promise, resolver) {
  let resolved = false;
  try {
    resolver(value => {
      if (resolved) {
        return;
      }
      resolved = true;
      resolve$1$1(promise, value);
    }, reason => {
      if (resolved) {
        return;
      }
      resolved = true;
      reject$2(promise, reason);
    });
  } catch (e) {
    reject$2(promise, e);
  }
}
function then(onFulfillment, onRejection, label) {
  let parent = this;
  let state = parent._state;
  if (state === FULFILLED && !onFulfillment || state === REJECTED && !onRejection) {
    config.instrument && instrument$1('chained', parent, parent);
    return parent;
  }
  parent._onError = null;
  let child = new parent.constructor(noop, label);
  let result = parent._result;
  config.instrument && instrument$1('chained', parent, child);
  if (state === PENDING) {
    subscribe$1(parent, child, onFulfillment, onRejection);
  } else {
    let callback = state === FULFILLED ? onFulfillment : onRejection;
    config.async(() => invokeCallback(state, child, callback, result));
  }
  return child;
}
class Enumerator {
  constructor(Constructor, input, abortOnReject, label) {
    this._instanceConstructor = Constructor;
    this.promise = new Constructor(noop, label);
    this._abortOnReject = abortOnReject;
    this._isUsingOwnPromise = Constructor === Promise$1;
    this._isUsingOwnResolve = Constructor.resolve === resolve$2;
    this._init(...arguments);
  }
  _init(Constructor, input) {
    let len = input.length || 0;
    this.length = len;
    this._remaining = len;
    this._result = new Array(len);
    this._enumerate(input);
  }
  _enumerate(input) {
    let length = this.length;
    let promise = this.promise;
    for (let i = 0; promise._state === PENDING && i < length; i++) {
      this._eachEntry(input[i], i, true);
    }
    this._checkFullfillment();
  }
  _checkFullfillment() {
    if (this._remaining === 0) {
      let result = this._result;
      fulfill(this.promise, result);
      this._result = null;
    }
  }
  _settleMaybeThenable(entry, i, firstPass) {
    let c = this._instanceConstructor;
    if (this._isUsingOwnResolve) {
      let then$1,
        error,
        succeeded = true;
      try {
        then$1 = entry.then;
      } catch (e) {
        succeeded = false;
        error = e;
      }
      if (then$1 === then && entry._state !== PENDING) {
        entry._onError = null;
        this._settledAt(entry._state, i, entry._result, firstPass);
      } else if (typeof then$1 !== 'function') {
        this._settledAt(FULFILLED, i, entry, firstPass);
      } else if (this._isUsingOwnPromise) {
        let promise = new c(noop);
        if (succeeded === false) {
          reject$2(promise, error);
        } else {
          handleMaybeThenable(promise, entry, then$1);
          this._willSettleAt(promise, i, firstPass);
        }
      } else {
        this._willSettleAt(new c(resolve => resolve(entry)), i, firstPass);
      }
    } else {
      this._willSettleAt(c.resolve(entry), i, firstPass);
    }
  }
  _eachEntry(entry, i, firstPass) {
    if (entry !== null && typeof entry === 'object') {
      this._settleMaybeThenable(entry, i, firstPass);
    } else {
      this._setResultAt(FULFILLED, i, entry, firstPass);
    }
  }
  _settledAt(state, i, value, firstPass) {
    let promise = this.promise;
    if (promise._state === PENDING) {
      if (this._abortOnReject && state === REJECTED) {
        reject$2(promise, value);
      } else {
        this._setResultAt(state, i, value, firstPass);
        this._checkFullfillment();
      }
    }
  }
  _setResultAt(state, i, value, firstPass) {
    this._remaining--;
    this._result[i] = value;
  }
  _willSettleAt(promise, i, firstPass) {
    subscribe$1(promise, undefined, value => this._settledAt(FULFILLED, i, value, firstPass), reason => this._settledAt(REJECTED, i, reason, firstPass));
  }
}
function setSettledResult(state, i, value) {
  this._remaining--;
  if (state === FULFILLED) {
    this._result[i] = {
      state: 'fulfilled',
      value: value
    };
  } else {
    this._result[i] = {
      state: 'rejected',
      reason: value
    };
  }
}

/**
  `Promise.all` accepts an array of promises, and returns a new promise which
  is fulfilled with an array of fulfillment values for the passed promises, or
  rejected with the reason of the first passed promise to be rejected. It casts all
  elements of the passed iterable to promises as it runs this algorithm.

  Example:

  ```javascript
  import Promise, { resolve } from 'rsvp';

  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // The array here would be [ 1, 2, 3 ];
  });
  ```

  If any of the `promises` given to `RSVP.all` are rejected, the first promise
  that is rejected will be given as an argument to the returned promises's
  rejection handler. For example:

  Example:

  ```javascript
  import Promise, { resolve, reject } from 'rsvp';

  let promise1 = resolve(1);
  let promise2 = reject(new Error("2"));
  let promise3 = reject(new Error("3"));
  let promises = [ promise1, promise2, promise3 ];

  Promise.all(promises).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(error) {
    // error.message === "2"
  });
  ```

  @method all
  @for Promise
  @param {Array} entries array of promises
  @param {String} [label] optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all `promises` have been
  fulfilled, or rejected if any of them become rejected.
  @static
*/
function all$1(entries, label) {
  if (!Array.isArray(entries)) {
    return this.reject(new TypeError("Promise.all must be called with an array"), label);
  }
  return new Enumerator(this, entries, true /* abort on reject */, label).promise;
}

/**
  `Promise.race` returns a new promise which is settled in the same way as the
  first passed promise to settle.

  Example:

  ```javascript
  import Promise from 'rsvp';

  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 2');
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // result === 'promise 2' because it was resolved before promise1
    // was resolved.
  });
  ```

  `Promise.race` is deterministic in that only the state of the first
  settled promise matters. For example, even if other promises given to the
  `promises` array argument are resolved, but the first settled promise has
  become rejected before the other promises became fulfilled, the returned
  promise will become rejected:

  ```javascript
  import Promise from 'rsvp';

  let promise1 = new Promise(function(resolve, reject){
    setTimeout(function(){
      resolve('promise 1');
    }, 200);
  });

  let promise2 = new Promise(function(resolve, reject){
    setTimeout(function(){
      reject(new Error('promise 2'));
    }, 100);
  });

  Promise.race([promise1, promise2]).then(function(result){
    // Code here never runs
  }, function(reason){
    // reason.message === 'promise 2' because promise 2 became rejected before
    // promise 1 became fulfilled
  });
  ```

  An example real-world use case is implementing timeouts:

  ```javascript
  import Promise from 'rsvp';

  Promise.race([ajax('foo.json'), timeout(5000)])
  ```

  @method race
  @for Promise
  @static
  @param {Array} entries array of promises to observe
  @param {String} [label] optional string for describing the promise returned.
  Useful for tooling.
  @return {Promise} a promise which settles in the same way as the first passed
  promise to settle.
*/
function race$1(entries, label) {
  /*jshint validthis:true */
  let Constructor = this;
  let promise = new Constructor(noop, label);
  if (!Array.isArray(entries)) {
    reject$2(promise, new TypeError('Promise.race must be called with an array'));
    return promise;
  }
  for (let i = 0; promise._state === PENDING && i < entries.length; i++) {
    subscribe$1(Constructor.resolve(entries[i]), undefined, value => resolve$1$1(promise, value), reason => reject$2(promise, reason));
  }
  return promise;
}

/**
  `Promise.reject` returns a promise rejected with the passed `reason`.
  It is shorthand for the following:

  ```javascript
  import Promise from 'rsvp';

  let promise = new Promise(function(resolve, reject){
    reject(new Error('WHOOPS'));
  });

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  Instead of writing the above, your code now simply becomes the following:

  ```javascript
  import Promise from 'rsvp';

  let promise = Promise.reject(new Error('WHOOPS'));

  promise.then(function(value){
    // Code here doesn't run because the promise is rejected!
  }, function(reason){
    // reason.message === 'WHOOPS'
  });
  ```

  @method reject
  @for Promise
  @static
  @param {*} reason value that the returned promise will be rejected with.
  @param {String} [label] optional string for identifying the returned promise.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject$1(reason, label) {
  /*jshint validthis:true */
  let Constructor = this;
  let promise = new Constructor(noop, label);
  reject$2(promise, reason);
  return promise;
}
const guidKey = 'rsvp_' + Date.now() + '-';
let counter = 0;
function needsResolver() {
  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
}
function needsNew() {
  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
}

/**
  Promise objects represent the eventual result of an asynchronous operation. The
  primary way of interacting with a promise is through its `then` method, which
  registers callbacks to receive either a promise’s eventual value or the reason
  why the promise cannot be fulfilled.

  Terminology
  -----------

  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
  - `thenable` is an object or function that defines a `then` method.
  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
  - `exception` is a value that is thrown using the throw statement.
  - `reason` is a value that indicates why a promise was rejected.
  - `settled` the final resting state of a promise, fulfilled or rejected.

  A promise can be in one of three states: pending, fulfilled, or rejected.

  Promises that are fulfilled have a fulfillment value and are in the fulfilled
  state.  Promises that are rejected have a rejection reason and are in the
  rejected state.  A fulfillment value is never a thenable.

  Promises can also be said to *resolve* a value.  If this value is also a
  promise, then the original promise's settled state will match the value's
  settled state.  So a promise that *resolves* a promise that rejects will
  itself reject, and a promise that *resolves* a promise that fulfills will
  itself fulfill.


  Basic Usage:
  ------------

  ```js
  let promise = new Promise(function(resolve, reject) {
    // on success
    resolve(value);

    // on failure
    reject(reason);
  });

  promise.then(function(value) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Advanced Usage:
  ---------------

  Promises shine when abstracting away asynchronous interactions such as
  `XMLHttpRequest`s.

  ```js
  function getJSON(url) {
    return new Promise(function(resolve, reject){
      let xhr = new XMLHttpRequest();

      xhr.open('GET', url);
      xhr.onreadystatechange = handler;
      xhr.responseType = 'json';
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.send();

      function handler() {
        if (this.readyState === this.DONE) {
          if (this.status === 200) {
            resolve(this.response);
          } else {
            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
          }
        }
      };
    });
  }

  getJSON('/posts.json').then(function(json) {
    // on fulfillment
  }, function(reason) {
    // on rejection
  });
  ```

  Unlike callbacks, promises are great composable primitives.

  ```js
  Promise.all([
    getJSON('/posts'),
    getJSON('/comments')
  ]).then(function(values){
    values[0] // => postsJSON
    values[1] // => commentsJSON

    return values;
  });
  ```

  @class Promise
  @public
  @param {function} resolver
  @param {String} [label] optional string for labeling the promise.
  Useful for tooling.
  @constructor
*/
let Promise$1 = class Promise {
  constructor(resolver, label) {
    this._id = counter++;
    this._label = label;
    this._state = undefined;
    this._result = undefined;
    this._subscribers = [];
    config.instrument && instrument$1('created', this);
    if (noop !== resolver) {
      typeof resolver !== 'function' && needsResolver();
      this instanceof Promise ? initializePromise(this, resolver) : needsNew();
    }
  }
  _onError(reason) {
    config.after(() => {
      if (this._onError) {
        config.trigger('error', reason, this._label);
      }
    });
  }

  /**
    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
    as the catch block of a try/catch statement.
  
    ```js
    function findAuthor(){
      throw new Error('couldn\'t find that author');
    }
  
    // synchronous
    try {
      findAuthor();
    } catch(reason) {
      // something went wrong
    }
  
    // async with promises
    findAuthor().catch(function(reason){
      // something went wrong
    });
    ```
  
    @method catch
    @param {Function} onRejection
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
  */
  catch(onRejection, label) {
    return this.then(undefined, onRejection, label);
  }

  /**
    `finally` will be invoked regardless of the promise's fate just as native
    try/catch/finally behaves
  
    Synchronous example:
  
    ```js
    findAuthor() {
      if (Math.random() > 0.5) {
        throw new Error();
      }
      return new Author();
    }
  
    try {
      return findAuthor(); // succeed or fail
    } catch(error) {
      return findOtherAuthor();
    } finally {
      // always runs
      // doesn't affect the return value
    }
    ```
  
    Asynchronous example:
  
    ```js
    findAuthor().catch(function(reason){
      return findOtherAuthor();
    }).finally(function(){
      // author was either found, or not
    });
    ```
  
    @method finally
    @param {Function} callback
    @param {String} [label] optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
  */
  finally(callback, label) {
    let promise = this;
    let constructor = promise.constructor;
    if (typeof callback === 'function') {
      return promise.then(value => constructor.resolve(callback()).then(() => value), reason => constructor.resolve(callback()).then(() => {
        throw reason;
      }));
    }
    return promise.then(callback, callback);
  }
};
Promise$1.cast = resolve$2; // deprecated
Promise$1.all = all$1;
Promise$1.race = race$1;
Promise$1.resolve = resolve$2;
Promise$1.reject = reject$1;
Promise$1.prototype._guidKey = guidKey;

/**
  The primary way of interacting with a promise is through its `then` method,
  which registers callbacks to receive either a promise's eventual value or the
  reason why the promise cannot be fulfilled.

  ```js
  findUser().then(function(user){
    // user is available
  }, function(reason){
    // user is unavailable, and you are given the reason why
  });
  ```

  Chaining
  --------

  The return value of `then` is itself a promise.  This second, 'downstream'
  promise is resolved with the return value of the first promise's fulfillment
  or rejection handler, or rejected if the handler throws an exception.

  ```js
  findUser().then(function (user) {
    return user.name;
  }, function (reason) {
    return 'default name';
  }).then(function (userName) {
    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
    // will be `'default name'`
  });

  findUser().then(function (user) {
    throw new Error('Found user, but still unhappy');
  }, function (reason) {
    throw new Error('`findUser` rejected and we\'re unhappy');
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
    // If `findUser` rejected, `reason` will be '`findUser` rejected and we\'re unhappy'.
  });
  ```
  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.

  ```js
  findUser().then(function (user) {
    throw new PedagogicalException('Upstream error');
  }).then(function (value) {
    // never reached
  }).then(function (value) {
    // never reached
  }, function (reason) {
    // The `PedgagocialException` is propagated all the way down to here
  });
  ```

  Assimilation
  ------------

  Sometimes the value you want to propagate to a downstream promise can only be
  retrieved asynchronously. This can be achieved by returning a promise in the
  fulfillment or rejection handler. The downstream promise will then be pending
  until the returned promise is settled. This is called *assimilation*.

  ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // The user's comments are now available
  });
  ```

  If the assimliated promise rejects, then the downstream promise will also reject.

  ```js
  findUser().then(function (user) {
    return findCommentsByAuthor(user);
  }).then(function (comments) {
    // If `findCommentsByAuthor` fulfills, we'll have the value here
  }, function (reason) {
    // If `findCommentsByAuthor` rejects, we'll have the reason here
  });
  ```

  Simple Example
  --------------

  Synchronous Example

  ```javascript
  let result;

  try {
    result = findResult();
    // success
  } catch(reason) {
    // failure
  }
  ```

  Errback Example

  ```js
  findResult(function(result, err){
    if (err) {
      // failure
    } else {
      // success
    }
  });
  ```

  Promise Example;

  ```javascript
  findResult().then(function(result){
    // success
  }, function(reason){
    // failure
  });
  ```

  Advanced Example
  --------------

  Synchronous Example

  ```javascript
  let author, books;

  try {
    author = findAuthor();
    books  = findBooksByAuthor(author);
    // success
  } catch(reason) {
    // failure
  }
  ```

  Errback Example

  ```js

  function foundBooks(books) {

  }

  function failure(reason) {

  }

  findAuthor(function(author, err){
    if (err) {
      failure(err);
      // failure
    } else {
      try {
        findBoooksByAuthor(author, function(books, err) {
          if (err) {
            failure(err);
          } else {
            try {
              foundBooks(books);
            } catch(reason) {
              failure(reason);
            }
          }
        });
      } catch(error) {
        failure(err);
      }
      // success
    }
  });
  ```

  Promise Example;

  ```javascript
  findAuthor().
    then(findBooksByAuthor).
    then(function(books){
      // found books
  }).catch(function(reason){
    // something went wrong
  });
  ```

  @method then
  @param {Function} onFulfillment
  @param {Function} onRejection
  @param {String} [label] optional string for labeling the promise.
  Useful for tooling.
  @return {Promise}
*/
Promise$1.prototype.then = then;
function makeObject(_, argumentNames) {
  let obj = {};
  let length = _.length;
  let args = new Array(length);
  for (let x = 0; x < length; x++) {
    args[x] = _[x];
  }
  for (let i = 0; i < argumentNames.length; i++) {
    let name = argumentNames[i];
    obj[name] = args[i + 1];
  }
  return obj;
}
function arrayResult(_) {
  let length = _.length;
  let args = new Array(length - 1);
  for (let i = 1; i < length; i++) {
    args[i - 1] = _[i];
  }
  return args;
}
function wrapThenable(then, promise) {
  return {
    then(onFulFillment, onRejection) {
      return then.call(promise, onFulFillment, onRejection);
    }
  };
}

/**
  `denodeify` takes a 'node-style' function and returns a function that
  will return an `Promise`. You can use `denodeify` in Node.js or the
  browser when you'd prefer to use promises over using callbacks. For example,
  `denodeify` transforms the following:

  ```javascript
  let fs = require('fs');

  fs.readFile('myfile.txt', function(err, data){
    if (err) return handleError(err);
    handleData(data);
  });
  ```

  into:

  ```javascript
  let fs = require('fs');
  let readFile = denodeify(fs.readFile);

  readFile('myfile.txt').then(handleData, handleError);
  ```

  If the node function has multiple success parameters, then `denodeify`
  just returns the first one:

  ```javascript
  let request = denodeify(require('request'));

  request('http://example.com').then(function(res) {
    // ...
  });
  ```

  However, if you need all success parameters, setting `denodeify`'s
  second parameter to `true` causes it to return all success parameters
  as an array:

  ```javascript
  let request = denodeify(require('request'), true);

  request('http://example.com').then(function(result) {
    // result[0] -> res
    // result[1] -> body
  });
  ```

  Or if you pass it an array with names it returns the parameters as a hash:

  ```javascript
  let request = denodeify(require('request'), ['res', 'body']);

  request('http://example.com').then(function(result) {
    // result.res
    // result.body
  });
  ```

  Sometimes you need to retain the `this`:

  ```javascript
  let app = require('express')();
  let render = denodeify(app.render.bind(app));
  ```

  The denodified function inherits from the original function. It works in all
  environments, except IE 10 and below. Consequently all properties of the original
  function are available to you. However, any properties you change on the
  denodeified function won't be changed on the original function. Example:

  ```javascript
  let request = denodeify(require('request')),
      cookieJar = request.jar(); // <- Inheritance is used here

  request('http://example.com', {jar: cookieJar}).then(function(res) {
    // cookieJar.cookies holds now the cookies returned by example.com
  });
  ```

  Using `denodeify` makes it easier to compose asynchronous operations instead
  of using callbacks. For example, instead of:

  ```javascript
  let fs = require('fs');

  fs.readFile('myfile.txt', function(err, data){
    if (err) { ... } // Handle error
    fs.writeFile('myfile2.txt', data, function(err){
      if (err) { ... } // Handle error
      console.log('done')
    });
  });
  ```

  you can chain the operations together using `then` from the returned promise:

  ```javascript
  let fs = require('fs');
  let readFile = denodeify(fs.readFile);
  let writeFile = denodeify(fs.writeFile);

  readFile('myfile.txt').then(function(data){
    return writeFile('myfile2.txt', data);
  }).then(function(){
    console.log('done')
  }).catch(function(error){
    // Handle error
  });
  ```

  @method denodeify
  @public
  @static
  @for rsvp
  @param {Function} nodeFunc a 'node-style' function that takes a callback as
  its last argument. The callback expects an error to be passed as its first
  argument (if an error occurred, otherwise null), and the value from the
  operation as its second argument ('function(err, value){ }').
  @param {Boolean|Array} [options] An optional paramter that if set
  to `true` causes the promise to fulfill with the callback's success arguments
  as an array. This is useful if the node function has multiple success
  paramters. If you set this paramter to an array with names, the promise will
  fulfill with a hash with these names as keys and the success parameters as
  values.
  @return {Function} a function that wraps `nodeFunc` to return a `Promise`
*/
function denodeify(nodeFunc, options) {
  let fn = function () {
    let l = arguments.length;
    let args = new Array(l + 1);
    let promiseInput = false;
    for (let i = 0; i < l; ++i) {
      let arg = arguments[i];

      // TODO: this code really needs to be cleaned up
      if (!promiseInput) {
        if (arg !== null && typeof arg === 'object') {
          if (arg.constructor === Promise$1) {
            promiseInput = true;
          } else {
            try {
              promiseInput = arg.then;
            } catch (error) {
              let p = new Promise$1(noop);
              reject$2(p, error);
              return p;
            }
          }
        } else {
          promiseInput = false;
        }
        if (promiseInput && promiseInput !== true) {
          arg = wrapThenable(promiseInput, arg);
        }
      }
      args[i] = arg;
    }
    let promise = new Promise$1(noop);
    args[l] = function (err, val) {
      if (err) {
        reject$2(promise, err);
      } else if (options === undefined) {
        resolve$1$1(promise, val);
      } else if (options === true) {
        resolve$1$1(promise, arrayResult(arguments));
      } else if (Array.isArray(options)) {
        resolve$1$1(promise, makeObject(arguments, options));
      } else {
        resolve$1$1(promise, val);
      }
    };
    if (promiseInput) {
      return handlePromiseInput(promise, args, nodeFunc, this);
    } else {
      return handleValueInput(promise, args, nodeFunc, this);
    }
  };
  fn.__proto__ = nodeFunc;
  return fn;
}
function handleValueInput(promise, args, nodeFunc, self) {
  try {
    nodeFunc.apply(self, args);
  } catch (error) {
    reject$2(promise, error);
  }
  return promise;
}
function handlePromiseInput(promise, args, nodeFunc, self) {
  return Promise$1.all(args).then(args => handleValueInput(promise, args, nodeFunc, self));
}

/**
  This is a convenient alias for `Promise.all`.

  @method all
  @public
  @static
  @for rsvp
  @param {Array} array Array of promises.
  @param {String} [label] An optional label. This is useful
  for tooling.
*/
function all(array, label) {
  return Promise$1.all(array, label);
}

/**
@module rsvp
@public
**/

class AllSettled extends Enumerator {
  constructor(Constructor, entries, label) {
    super(Constructor, entries, false /* don't abort on reject */, label);
  }
}
AllSettled.prototype._setResultAt = setSettledResult;

/**
`RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing
a fail-fast method, it waits until all the promises have returned and
shows you all the results. This is useful if you want to handle multiple
promises' failure states together as a set.
 Returns a promise that is fulfilled when all the given promises have been
settled. The return promise is fulfilled with an array of the states of
the promises passed into the `promises` array argument.
 Each state object will either indicate fulfillment or rejection, and
provide the corresponding value or reason. The states will take one of
the following formats:
 ```javascript
{ state: 'fulfilled', value: value }
  or
{ state: 'rejected', reason: reason }
```
 Example:
 ```javascript
let promise1 = RSVP.Promise.resolve(1);
let promise2 = RSVP.Promise.reject(new Error('2'));
let promise3 = RSVP.Promise.reject(new Error('3'));
let promises = [ promise1, promise2, promise3 ];
 RSVP.allSettled(promises).then(function(array){
  // array == [
  //   { state: 'fulfilled', value: 1 },
  //   { state: 'rejected', reason: Error },
  //   { state: 'rejected', reason: Error }
  // ]
  // Note that for the second item, reason.message will be '2', and for the
  // third item, reason.message will be '3'.
}, function(error) {
  // Not run. (This block would only be called if allSettled had failed,
  // for instance if passed an incorrect argument type.)
});
```
 @method allSettled
@public
@static
@for rsvp
@param {Array} entries
@param {String} [label] - optional string that describes the promise.
Useful for tooling.
@return {Promise} promise that is fulfilled with an array of the settled
states of the constituent promises.
*/

function allSettled(entries, label) {
  if (!Array.isArray(entries)) {
    return Promise$1.reject(new TypeError("Promise.allSettled must be called with an array"), label);
  }
  return new AllSettled(Promise$1, entries, label).promise;
}

/**
  This is a convenient alias for `Promise.race`.

  @method race
  @public
  @static
  @for rsvp
  @param {Array} array Array of promises.
  @param {String} [label] An optional label. This is useful
  for tooling.
 */
function race(array, label) {
  return Promise$1.race(array, label);
}
class PromiseHash extends Enumerator {
  constructor(Constructor, object, abortOnReject = true, label) {
    super(Constructor, object, abortOnReject, label);
  }
  _init(Constructor, object) {
    this._result = {};
    this._enumerate(object);
  }
  _enumerate(input) {
    let keys = Object.keys(input);
    let length = keys.length;
    let promise = this.promise;
    this._remaining = length;
    let key, val;
    for (let i = 0; promise._state === PENDING && i < length; i++) {
      key = keys[i];
      val = input[key];
      this._eachEntry(val, key, true);
    }
    this._checkFullfillment();
  }
}

/**
  `hash` is similar to `all`, but takes an object instead of an array
  for its `promises` argument.

  Returns a promise that is fulfilled when all the given promises have been
  fulfilled, or rejected if any of them become rejected. The returned promise
  is fulfilled with a hash that has the same key names as the `promises` object
  argument. If any of the values in the object are not promises, they will
  simply be copied over to the fulfilled object.

  Example:

  ```javascript
  let promises = {
    myPromise: resolve(1),
    yourPromise: resolve(2),
    theirPromise: resolve(3),
    notAPromise: 4
  };

  hash(promises).then(function(hash){
    // hash here is an object that looks like:
    // {
    //   myPromise: 1,
    //   yourPromise: 2,
    //   theirPromise: 3,
    //   notAPromise: 4
    // }
  });
  ```

  If any of the `promises` given to `hash` are rejected, the first promise
  that is rejected will be given as the reason to the rejection handler.

  Example:

  ```javascript
  let promises = {
    myPromise: resolve(1),
    rejectedPromise: reject(new Error('rejectedPromise')),
    anotherRejectedPromise: reject(new Error('anotherRejectedPromise')),
  };

  hash(promises).then(function(hash){
    // Code here never runs because there are rejected promises!
  }, function(reason) {
    // reason.message === 'rejectedPromise'
  });
  ```

  An important note: `hash` is intended for plain JavaScript objects that
  are just a set of keys and values. `hash` will NOT preserve prototype
  chains.

  Example:

  ```javascript
  import { hash, resolve } from 'rsvp';
  function MyConstructor(){
    this.example = resolve('Example');
  }

  MyConstructor.prototype = {
    protoProperty: resolve('Proto Property')
  };

  let myObject = new MyConstructor();

  hash(myObject).then(function(hash){
    // protoProperty will not be present, instead you will just have an
    // object that looks like:
    // {
    //   example: 'Example'
    // }
    //
    // hash.hasOwnProperty('protoProperty'); // false
    // 'undefined' === typeof hash.protoProperty
  });
  ```

  @method hash
  @public
  @static
  @for rsvp
  @param {Object} object
  @param {String} [label] optional string that describes the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when all properties of `promises`
  have been fulfilled, or rejected if any of them become rejected.
*/
function hash$2(object, label) {
  return Promise$1.resolve(object, label).then(function (object) {
    if (object === null || typeof object !== 'object') {
      throw new TypeError("Promise.hash must be called with an object");
    }
    return new PromiseHash(Promise$1, object, label).promise;
  });
}
class HashSettled extends PromiseHash {
  constructor(Constructor, object, label) {
    super(Constructor, object, false, label);
  }
}
HashSettled.prototype._setResultAt = setSettledResult;

/**
  `hashSettled` is similar to `allSettled`, but takes an object
  instead of an array for its `promises` argument.

  Unlike `all` or `hash`, which implement a fail-fast method,
  but like `allSettled`, `hashSettled` waits until all the
  constituent promises have returned and then shows you all the results
  with their states and values/reasons. This is useful if you want to
  handle multiple promises' failure states together as a set.

  Returns a promise that is fulfilled when all the given promises have been
  settled, or rejected if the passed parameters are invalid.

  The returned promise is fulfilled with a hash that has the same key names as
  the `promises` object argument. If any of the values in the object are not
  promises, they will be copied over to the fulfilled object and marked with state
  'fulfilled'.

  Example:

  ```javascript
  import { hashSettled, resolve } from 'rsvp';

  let promises = {
    myPromise: resolve(1),
    yourPromise: resolve(2),
    theirPromise: resolve(3),
    notAPromise: 4
  };

  hashSettled(promises).then(function(hash){
    // hash here is an object that looks like:
    // {
    //   myPromise: { state: 'fulfilled', value: 1 },
    //   yourPromise: { state: 'fulfilled', value: 2 },
    //   theirPromise: { state: 'fulfilled', value: 3 },
    //   notAPromise: { state: 'fulfilled', value: 4 }
    // }
  });
  ```

  If any of the `promises` given to `hash` are rejected, the state will
  be set to 'rejected' and the reason for rejection provided.

  Example:

  ```javascript
  import { hashSettled, reject, resolve } from 'rsvp';

  let promises = {
    myPromise: resolve(1),
    rejectedPromise: reject(new Error('rejection')),
    anotherRejectedPromise: reject(new Error('more rejection')),
  };

  hashSettled(promises).then(function(hash){
    // hash here is an object that looks like:
    // {
    //   myPromise:              { state: 'fulfilled', value: 1 },
    //   rejectedPromise:        { state: 'rejected', reason: Error },
    //   anotherRejectedPromise: { state: 'rejected', reason: Error },
    // }
    // Note that for rejectedPromise, reason.message == 'rejection',
    // and for anotherRejectedPromise, reason.message == 'more rejection'.
  });
  ```

  An important note: `hashSettled` is intended for plain JavaScript objects that
  are just a set of keys and values. `hashSettled` will NOT preserve prototype
  chains.

  Example:

  ```javascript
  import Promise, { hashSettled, resolve } from 'rsvp';

  function MyConstructor(){
    this.example = resolve('Example');
  }

  MyConstructor.prototype = {
    protoProperty: Promise.resolve('Proto Property')
  };

  let myObject = new MyConstructor();

  hashSettled(myObject).then(function(hash){
    // protoProperty will not be present, instead you will just have an
    // object that looks like:
    // {
    //   example: { state: 'fulfilled', value: 'Example' }
    // }
    //
    // hash.hasOwnProperty('protoProperty'); // false
    // 'undefined' === typeof hash.protoProperty
  });
  ```

  @method hashSettled
  @public
  @for rsvp
  @param {Object} object
  @param {String} [label] optional string that describes the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled when when all properties of `promises`
  have been settled.
  @static
*/

function hashSettled(object, label) {
  return Promise$1.resolve(object, label).then(function (object) {
    if (object === null || typeof object !== 'object') {
      throw new TypeError("hashSettled must be called with an object");
    }
    return new HashSettled(Promise$1, object, false, label).promise;
  });
}

/**
  `rethrow` will rethrow an error on the next turn of the JavaScript event
  loop in order to aid debugging.

  Promises A+ specifies that any exceptions that occur with a promise must be
  caught by the promises implementation and bubbled to the last handler. For
  this reason, it is recommended that you always specify a second rejection
  handler function to `then`. However, `rethrow` will throw the exception
  outside of the promise, so it bubbles up to your console if in the browser,
  or domain/cause uncaught exception in Node. `rethrow` will also throw the
  error again so the error can be handled by the promise per the spec.

  ```javascript
  import { rethrow } from 'rsvp';

  function throws(){
    throw new Error('Whoops!');
  }

  let promise = new Promise(function(resolve, reject){
    throws();
  });

  promise.catch(rethrow).then(function(){
    // Code here doesn't run because the promise became rejected due to an
    // error!
  }, function (err){
    // handle the error here
  });
  ```

  The 'Whoops' error will be thrown on the next turn of the event loop
  and you can watch for it in your console. You can also handle it using a
  rejection handler given to `.then` or `.catch` on the returned promise.

  @method rethrow
  @public
  @static
  @for rsvp
  @param {Error} reason reason the promise became rejected.
  @throws Error
  @static
*/
function rethrow(reason) {
  setTimeout(() => {
    throw reason;
  });
  throw reason;
}

/**
  `defer` returns an object similar to jQuery's `$.Deferred`.
  `defer` should be used when porting over code reliant on `$.Deferred`'s
  interface. New code should use the `Promise` constructor instead.

  The object returned from `defer` is a plain object with three properties:

  * promise - an `Promise`.
  * reject - a function that causes the `promise` property on this object to
    become rejected
  * resolve - a function that causes the `promise` property on this object to
    become fulfilled.

  Example:

   ```javascript
   let deferred = defer();

   deferred.resolve("Success!");

   deferred.promise.then(function(value){
     // value here is "Success!"
   });
   ```

  @method defer
  @public
  @static
  @for rsvp
  @param {String} [label] optional string for labeling the promise.
  Useful for tooling.
  @return {Object}
 */

function defer(label) {
  let deferred = {
    resolve: undefined,
    reject: undefined
  };
  deferred.promise = new Promise$1((resolve, reject) => {
    deferred.resolve = resolve;
    deferred.reject = reject;
  }, label);
  return deferred;
}
class MapEnumerator extends Enumerator {
  constructor(Constructor, entries, mapFn, label) {
    super(Constructor, entries, true, label, mapFn);
  }
  _init(Constructor, input, bool, label, mapFn) {
    let len = input.length || 0;
    this.length = len;
    this._remaining = len;
    this._result = new Array(len);
    this._mapFn = mapFn;
    this._enumerate(input);
  }
  _setResultAt(state, i, value, firstPass) {
    if (firstPass) {
      try {
        this._eachEntry(this._mapFn(value, i), i, false);
      } catch (error) {
        this._settledAt(REJECTED, i, error, false);
      }
    } else {
      this._remaining--;
      this._result[i] = value;
    }
  }
}

/**
 `map` is similar to JavaScript's native `map` method. `mapFn` is eagerly called
  meaning that as soon as any promise resolves its value will be passed to `mapFn`.
  `map` returns a promise that will become fulfilled with the result of running
  `mapFn` on the values the promises become fulfilled with.

  For example:

  ```javascript
  import { map, resolve } from 'rsvp';

  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);
  let promises = [ promise1, promise2, promise3 ];

  let mapFn = function(item){
    return item + 1;
  };

  map(promises, mapFn).then(function(result){
    // result is [ 2, 3, 4 ]
  });
  ```

  If any of the `promises` given to `map` are rejected, the first promise
  that is rejected will be given as an argument to the returned promise's
  rejection handler. For example:

  ```javascript
  import { map, reject, resolve } from 'rsvp';

  let promise1 = resolve(1);
  let promise2 = reject(new Error('2'));
  let promise3 = reject(new Error('3'));
  let promises = [ promise1, promise2, promise3 ];

  let mapFn = function(item){
    return item + 1;
  };

  map(promises, mapFn).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(reason) {
    // reason.message === '2'
  });
  ```

  `map` will also wait if a promise is returned from `mapFn`. For example,
  say you want to get all comments from a set of blog posts, but you need
  the blog posts first because they contain a url to those comments.

  ```javscript
  import { map } from 'rsvp';

  let mapFn = function(blogPost){
    // getComments does some ajax and returns an Promise that is fulfilled
    // with some comments data
    return getComments(blogPost.comments_url);
  };

  // getBlogPosts does some ajax and returns an Promise that is fulfilled
  // with some blog post data
  map(getBlogPosts(), mapFn).then(function(comments){
    // comments is the result of asking the server for the comments
    // of all blog posts returned from getBlogPosts()
  });
  ```

  @method map
  @public
  @static
  @for rsvp
  @param {Array} promises
  @param {Function} mapFn function to be called on each fulfilled promise.
  @param {String} [label] optional string for labeling the promise.
  Useful for tooling.
  @return {Promise} promise that is fulfilled with the result of calling
  `mapFn` on each fulfilled promise or value when they become fulfilled.
   The promise will be rejected if any of the given `promises` become rejected.
*/
function map$1(promises, mapFn, label) {
  if (typeof mapFn !== 'function') {
    return Promise$1.reject(new TypeError("map expects a function as a second argument"), label);
  }
  return Promise$1.resolve(promises, label).then(function (promises) {
    if (!Array.isArray(promises)) {
      throw new TypeError("map must be called with an array");
    }
    return new MapEnumerator(Promise$1, promises, mapFn, label).promise;
  });
}

/**
  This is a convenient alias for `Promise.resolve`.

  @method resolve
  @public
  @static
  @for rsvp
  @param {*} value value that the returned promise will be resolved with
  @param {String} [label] optional string for identifying the returned promise.
  Useful for tooling.
  @return {Promise} a promise that will become fulfilled with the given
  `value`
*/
function resolve$3(value, label) {
  return Promise$1.resolve(value, label);
}

/**
  This is a convenient alias for `Promise.reject`.

  @method reject
  @public
  @static
  @for rsvp
  @param {*} reason value that the returned promise will be rejected with.
  @param {String} [label] optional string for identifying the returned promise.
  Useful for tooling.
  @return {Promise} a promise rejected with the given `reason`.
*/
function reject(reason, label) {
  return Promise$1.reject(reason, label);
}
const EMPTY_OBJECT = {};
class FilterEnumerator extends MapEnumerator {
  _checkFullfillment() {
    if (this._remaining === 0 && this._result !== null) {
      let result = this._result.filter(val => val !== EMPTY_OBJECT);
      fulfill(this.promise, result);
      this._result = null;
    }
  }
  _setResultAt(state, i, value, firstPass) {
    if (firstPass) {
      this._result[i] = value;
      let val,
        succeeded = true;
      try {
        val = this._mapFn(value, i);
      } catch (error) {
        succeeded = false;
        this._settledAt(REJECTED, i, error, false);
      }
      if (succeeded) {
        this._eachEntry(val, i, false);
      }
    } else {
      this._remaining--;
      if (!value) {
        this._result[i] = EMPTY_OBJECT;
      }
    }
  }
}

/**
 `filter` is similar to JavaScript's native `filter` method.
 `filterFn` is eagerly called meaning that as soon as any promise
  resolves its value will be passed to `filterFn`. `filter` returns
  a promise that will become fulfilled with the result of running
  `filterFn` on the values the promises become fulfilled with.

  For example:

  ```javascript
  import { filter, resolve } from 'rsvp';

  let promise1 = resolve(1);
  let promise2 = resolve(2);
  let promise3 = resolve(3);

  let promises = [promise1, promise2, promise3];

  let filterFn = function(item){
    return item > 1;
  };

  filter(promises, filterFn).then(function(result){
    // result is [ 2, 3 ]
  });
  ```

  If any of the `promises` given to `filter` are rejected, the first promise
  that is rejected will be given as an argument to the returned promise's
  rejection handler. For example:

  ```javascript
  import { filter, reject, resolve } from 'rsvp';

  let promise1 = resolve(1);
  let promise2 = reject(new Error('2'));
  let promise3 = reject(new Error('3'));
  let promises = [ promise1, promise2, promise3 ];

  let filterFn = function(item){
    return item > 1;
  };

  filter(promises, filterFn).then(function(array){
    // Code here never runs because there are rejected promises!
  }, function(reason) {
    // reason.message === '2'
  });
  ```

  `filter` will also wait for any promises returned from `filterFn`.
  For instance, you may want to fetch a list of users then return a subset
  of those users based on some asynchronous operation:

  ```javascript
  import { filter, resolve } from 'rsvp';

  let alice = { name: 'alice' };
  let bob   = { name: 'bob' };
  let users = [ alice, bob ];

  let promises = users.map(function(user){
    return resolve(user);
  });

  let filterFn = function(user){
    // Here, Alice has permissions to create a blog post, but Bob does not.
    return getPrivilegesForUser(user).then(function(privs){
      return privs.can_create_blog_post === true;
    });
  };
  filter(promises, filterFn).then(function(users){
    // true, because the server told us only Alice can create a blog post.
    users.length === 1;
    // false, because Alice is the only user present in `users`
    users[0] === bob;
  });
  ```

  @method filter
  @public
  @static
  @for rsvp
  @param {Array} promises
  @param {Function} filterFn - function to be called on each resolved value to
  filter the final results.
  @param {String} [label] optional string describing the promise. Useful for
  tooling.
  @return {Promise}
*/

function filter(promises, filterFn, label) {
  if (typeof filterFn !== 'function') {
    return Promise$1.reject(new TypeError("filter expects function as a second argument"), label);
  }
  return Promise$1.resolve(promises, label).then(function (promises) {
    if (!Array.isArray(promises)) {
      throw new TypeError("filter must be called with an array");
    }
    return new FilterEnumerator(Promise$1, promises, filterFn, label).promise;
  });
}
let len = 0;
let vertxNext;
function asap(callback, arg) {
  queue[len] = callback;
  queue[len + 1] = arg;
  len += 2;
  if (len === 2) {
    // If len is 1, that means that we need to schedule an async flush.
    // If additional callbacks are queued before the queue is flushed, they
    // will be processed by this flush that we are scheduling.
    scheduleFlush();
  }
}
const browserWindow = typeof window !== 'undefined' ? window : undefined;
const browserGlobal = browserWindow || {};
const BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
const isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';

// test for web worker but not in IE10
const isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

// node
function useNextTick() {
  let nextTick = process.nextTick;
  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
  // setImmediate should be used instead instead
  let version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
  if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
    nextTick = setImmediate;
  }
  return () => nextTick(flush);
}

// vertx
function useVertxTimer() {
  if (typeof vertxNext !== 'undefined') {
    return function () {
      vertxNext(flush);
    };
  }
  return useSetTimeout();
}
function useMutationObserver() {
  let iterations = 0;
  let observer = new BrowserMutationObserver(flush);
  let node = document.createTextNode('');
  observer.observe(node, {
    characterData: true
  });
  return () => node.data = iterations = ++iterations % 2;
}

// web worker
function useMessageChannel() {
  let channel = new MessageChannel();
  channel.port1.onmessage = flush;
  return () => channel.port2.postMessage(0);
}
function useSetTimeout() {
  return () => setTimeout(flush, 1);
}
const queue = new Array(1000);
function flush() {
  for (let i = 0; i < len; i += 2) {
    let callback = queue[i];
    let arg = queue[i + 1];
    callback(arg);
    queue[i] = undefined;
    queue[i + 1] = undefined;
  }
  len = 0;
}
function attemptVertex() {
  try {
    const vertx = Function('return this')().require('vertx');
    vertxNext = vertx.runOnLoop || vertx.runOnContext;
    return useVertxTimer();
  } catch (e) {
    return useSetTimeout();
  }
}
let scheduleFlush;
// Decide what async method to use to triggering processing of queued callbacks:
if (isNode) {
  scheduleFlush = useNextTick();
} else if (BrowserMutationObserver) {
  scheduleFlush = useMutationObserver();
} else if (isWorker) {
  scheduleFlush = useMessageChannel();
} else if (browserWindow === undefined && typeof window.require === 'function') {
  scheduleFlush = attemptVertex();
} else {
  scheduleFlush = useSetTimeout();
}

// defaults
config.async = asap;
config.after = cb => setTimeout(cb, 0);
const cast = resolve$3;
const async = (callback, arg) => config.async(callback, arg);
function on$2() {
  config.on(...arguments);
}
function off() {
  config.off(...arguments);
}

// Set up instrumentation through `window.__PROMISE_INTRUMENTATION__`
if (typeof window !== 'undefined' && typeof window['__PROMISE_INSTRUMENTATION__'] === 'object') {
  let callbacks = window['__PROMISE_INSTRUMENTATION__'];
  configure('instrument', true);
  for (let eventName in callbacks) {
    if (callbacks.hasOwnProperty(eventName)) {
      on$2(eventName, callbacks[eventName]);
    }
  }
}

// the default export here is for backwards compat:
//   https://github.com/tildeio/rsvp.js/issues/434
const RSVP = {
  asap,
  cast,
  Promise: Promise$1,
  EventTarget,
  all,
  allSettled,
  race,
  hash: hash$2,
  hashSettled,
  rethrow,
  defer,
  denodeify,
  configure,
  on: on$2,
  off,
  resolve: resolve$3,
  reject,
  map: map$1,
  async,
  filter
};
const RSVP$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  EventTarget,
  Promise: Promise$1,
  all,
  allSettled,
  asap,
  async,
  cast,
  configure,
  default: RSVP,
  defer,
  denodeify,
  filter,
  hash: hash$2,
  hashSettled,
  map: map$1,
  off,
  on: on$2,
  race,
  reject,
  resolve: resolve$3,
  rethrow
}, Symbol.toStringTag, {
  value: 'Module'
}));

configure('async', (callback, promise) => {
  _backburner.schedule('actions', null, callback, promise);
});
configure('after', cb => {
  _backburner.schedule(_rsvpErrorQueue, null, cb);
});
on$2('error', onerrorDefault);
function onerrorDefault(reason) {
  let error = errorFor(reason);
  if (error) {
    let overrideDispatch = getDispatchOverride();
    if (overrideDispatch) {
      overrideDispatch(error);
    } else {
      throw error;
    }
  }
}
function errorFor(reason) {
  if (!reason) return;
  let withErrorThrown = reason;
  if (withErrorThrown.errorThrown) {
    return unwrapErrorThrown(withErrorThrown);
  }
  let withName = reason;
  if (withName.name === 'UnrecognizedURLError') {
    return;
  }
  if (reason.name === 'TransitionAborted') {
    return;
  }
  return reason;
}
function unwrapErrorThrown(reason) {
  let error = reason.errorThrown;
  if (typeof error === 'string') {
    error = new Error(error);
  }
  Object.defineProperty(error, '__reason_with_error_thrown__', {
    value: reason,
    enumerable: false
  });
  return error;
}

function run(fn) {
  if (!_getCurrentRunLoop()) {
    return run$1(fn);
  } else {
    return fn();
  }
}

let lastPromise = null;
class TestPromise extends RSVP$1.Promise {
  constructor(executor, label) {
    super(executor, label);
    lastPromise = this;
  }
  then(onFulfilled, onRejected, label) {
    let normalizedOnFulfilled = typeof onFulfilled === 'function' ? result => isolate(onFulfilled, result) : undefined;
    return super.then(normalizedOnFulfilled, onRejected, label);
  }
}

/**
  This returns a thenable tailored for testing.  It catches failed
  `onSuccess` callbacks and invokes the `Ember.Test.adapter.exception`
  callback in the last chained then.

  This method should be returned by async helpers such as `wait`.

  @public
  @for Ember.Test
  @method promise
  @param {Function} resolver The function used to resolve the promise.
  @param {String} label An optional string for identifying the promise.
*/
function promise(resolver, label) {
  let fullLabel = `Ember.Test.promise: ${label || '<Unknown Promise>'}`;
  return new TestPromise(resolver, fullLabel);
}

/**
  Replacement for `Ember.RSVP.resolve`
  The only difference is this uses
  an instance of `Ember.Test.Promise`

  @public
  @for Ember.Test
  @method resolve
  @param {Mixed} The value to resolve
  @since 1.2.0
*/
function resolve$1(result, label) {
  return TestPromise.resolve(result, label);
}
function getLastPromise() {
  return lastPromise;
}

// This method isolates nested async methods
// so that they don't conflict with other last promises.
//
// 1. Set `Ember.Test.lastPromise` to null
// 2. Invoke method
// 3. Return the last promise created during method
function isolate(onFulfilled, result) {
  // Reset lastPromise for nested helpers
  lastPromise = null;
  let value = onFulfilled(result);
  let promise = lastPromise;
  lastPromise = null;

  // If the method returned a promise
  // return that promise. If not,
  // return the last async helper's promise
  if (value && value instanceof TestPromise || !promise) {
    return value;
  } else {
    return run(() => resolve$1(promise).then(() => value));
  }
}

const helpers = {};
/**
 @module @ember/test
*/

/**
  `registerHelper` is used to register a test helper that will be injected
  when `App.injectTestHelpers` is called.

  The helper method will always be called with the current Application as
  the first parameter.

  For example:

  ```javascript
  import { registerHelper } from '@ember/test';
  import { run } from '@ember/runloop';

  registerHelper('boot', function(app) {
    run(app, app.advanceReadiness);
  });
  ```

  This helper can later be called without arguments because it will be
  called with `app` as the first parameter.

  ```javascript
  import Application from '@ember/application';

  App = Application.create();
  App.injectTestHelpers();
  boot();
  ```

  @public
  @for @ember/test
  @static
  @method registerHelper
  @param {String} name The name of the helper method to add.
  @param {Function} helperMethod
  @param options {Object}
*/
function registerHelper(name, helperMethod) {
  helpers[name] = {
    method: helperMethod,
    meta: {
      wait: false
    }
  };
}

/**
  `registerAsyncHelper` is used to register an async test helper that will be injected
  when `App.injectTestHelpers` is called.

  The helper method will always be called with the current Application as
  the first parameter.

  For example:

  ```javascript
  import { registerAsyncHelper } from '@ember/test';
  import { run } from '@ember/runloop';

  registerAsyncHelper('boot', function(app) {
    run(app, app.advanceReadiness);
  });
  ```

  The advantage of an async helper is that it will not run
  until the last async helper has completed.  All async helpers
  after it will wait for it complete before running.


  For example:

  ```javascript
  import { registerAsyncHelper } from '@ember/test';

  registerAsyncHelper('deletePost', function(app, postId) {
    click('.delete-' + postId);
  });

  // ... in your test
  visit('/post/2');
  deletePost(2);
  visit('/post/3');
  deletePost(3);
  ```

  @public
  @for @ember/test
  @method registerAsyncHelper
  @param {String} name The name of the helper method to add.
  @param {Function} helperMethod
  @since 1.2.0
*/
function registerAsyncHelper(name, helperMethod) {
  helpers[name] = {
    method: helperMethod,
    meta: {
      wait: true
    }
  };
}

/**
  Remove a previously added helper method.

  Example:

  ```javascript
  import { unregisterHelper } from '@ember/test';

  unregisterHelper('wait');
  ```

  @public
  @method unregisterHelper
  @static
  @for @ember/test
  @param {String} name The helper to remove.
*/
function unregisterHelper(name) {
  delete helpers[name];
  // SAFETY: This isn't necessarily a safe thing to do, but in terms of the immediate types here
  // it won't error.
  delete TestPromise.prototype[name];
}

const callbacks$1 = [];

/**
  Used to register callbacks to be fired whenever `App.injectTestHelpers`
  is called.

  The callback will receive the current application as an argument.

  Example:

  ```javascript
  import $ from 'jquery';

  Ember.Test.onInjectHelpers(function() {
    $(document).ajaxSend(function() {
      Test.pendingRequests++;
    });

    $(document).ajaxComplete(function() {
      Test.pendingRequests--;
    });
  });
  ```

  @public
  @for Ember.Test
  @method onInjectHelpers
  @param {Function} callback The function to be called.
*/
function onInjectHelpers(callback) {
  callbacks$1.push(callback);
}
function invokeInjectHelpersCallbacks(app) {
  for (let callback of callbacks$1) {
    callback(app);
  }
}

/**
 @module @ember/test
*/
const contexts = [];
const callbacks = [];

/**
   This allows ember-testing to play nicely with other asynchronous
   events, such as an application that is waiting for a CSS3
   transition or an IndexDB transaction. The waiter runs periodically
   after each async helper (i.e. `click`, `andThen`, `visit`, etc) has executed,
   until the returning result is truthy. After the waiters finish, the next async helper
   is executed and the process repeats.

   For example:

   ```javascript
   import { registerWaiter } from '@ember/test';

   registerWaiter(function() {
     return myPendingTransactions() === 0;
   });
   ```
   The `context` argument allows you to optionally specify the `this`
   with which your callback will be invoked.

   For example:

   ```javascript
   import { registerWaiter } from '@ember/test';

   registerWaiter(MyDB, MyDB.hasPendingTransactions);
   ```

   @public
   @for @ember/test
   @static
   @method registerWaiter
   @param {Object} context (optional)
   @param {Function} callback
   @since 1.2.0
*/

function registerWaiter$1(
// Formatting makes a pretty big difference in how readable this is.
// prettier-ignore
...args) {
  let checkedCallback;
  let checkedContext;
  if (args.length === 1) {
    checkedContext = null;
    checkedCallback = args[0];
  } else {
    checkedContext = args[0];
    checkedCallback = args[1];
  }
  if (indexOf$1(checkedContext, checkedCallback) > -1) {
    return;
  }
  contexts.push(checkedContext);
  callbacks.push(checkedCallback);
}

/**
   `unregisterWaiter` is used to unregister a callback that was
   registered with `registerWaiter`.

   @public
   @for @ember/test
   @static
   @method unregisterWaiter
   @param {Object} context (optional)
   @param {Function} callback
   @since 1.2.0
*/
function unregisterWaiter(context, callback) {
  if (!callbacks.length) {
    return;
  }
  if (arguments.length === 1) {
    callback = context;
    context = null;
  }
  let i = indexOf$1(context, callback);
  if (i === -1) {
    return;
  }
  contexts.splice(i, 1);
  callbacks.splice(i, 1);
}

/**
  Iterates through each registered test waiter, and invokes
  its callback. If any waiter returns false, this method will return
  true indicating that the waiters have not settled yet.

  This is generally used internally from the acceptance/integration test
  infrastructure.

  @public
  @for @ember/test
  @static
  @method checkWaiters
*/
function checkWaiters$1() {
  if (!callbacks.length) {
    return false;
  }
  for (let i = 0; i < callbacks.length; i++) {
    let context = contexts[i];
    let callback = callbacks[i];
    // SAFETY: The loop ensures that this exists
    if (!callback.call(context)) {
      return true;
    }
  }
  return false;
}
function indexOf$1(context, callback) {
  for (let i = 0; i < callbacks.length; i++) {
    if (callbacks[i] === callback && contexts[i] === context) {
      return i;
    }
  }
  return -1;
}

let adapter;
function getAdapter() {
  return adapter;
}
function setAdapter(value) {
  adapter = value;
  if (value && typeof value.exception === 'function') {
    setDispatchOverride(adapterDispatch);
  } else {
    setDispatchOverride(null);
  }
}
function asyncStart() {
  if (adapter) {
    adapter.asyncStart();
  }
}
function asyncEnd() {
  if (adapter) {
    adapter.asyncEnd();
  }
}
function adapterDispatch(error) {
  adapter.exception(error);

  // @ts-expect-error Normally unreachable
  console.error(error.stack); // eslint-disable-line no-console
}

/**
  @module ember
*/

/**
  This is a container for an assortment of testing related functionality:

  * Choose your default test adapter (for your framework of choice).
  * Register/Unregister additional test helpers.
  * Setup callbacks to be fired when the test helpers are injected into
    your application.

  @class Test
  @namespace Ember
  @public
*/
const Test = {
  /**
    Hash containing all known test helpers.
     @property _helpers
    @private
    @since 1.7.0
  */
  _helpers: helpers,
  registerHelper,
  registerAsyncHelper,
  unregisterHelper,
  onInjectHelpers,
  Promise: TestPromise,
  promise,
  resolve: resolve$1,
  registerWaiter: registerWaiter$1,
  unregisterWaiter,
  checkWaiters: checkWaiters$1
};

/**
 Used to allow ember-testing to communicate with a specific testing
 framework.

 You can manually set it before calling `App.setupForTesting()`.

 Example:

 ```javascript
 Ember.Test.adapter = MyCustomAdapter.create()
 ```

 If you do not set it, ember-testing will default to `Ember.Test.QUnitAdapter`.

 @public
 @for Ember.Test
 @property adapter
 @type {Class} The adapter to be used.
 @default Ember.Test.QUnitAdapter
*/
Object.defineProperty(Test, 'adapter', {
  get: getAdapter,
  set: setAdapter
});

/**
 @module @ember/object
*/

/**
  To get multiple properties at once, call `getProperties`
  with an object followed by a list of strings or an array:

  ```javascript
  import { getProperties } from '@ember/object';

  getProperties(record, 'firstName', 'lastName', 'zipCode');
  // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
  ```

  is equivalent to:

  ```javascript
  import { getProperties } from '@ember/object';

  getProperties(record, ['firstName', 'lastName', 'zipCode']);
  // { firstName: 'John', lastName: 'Doe', zipCode: '10011' }
  ```

  @method getProperties
  @static
  @for @ember/object
  @param {Object} obj
  @param {String...|Array} list of keys to get
  @return {Object}
  @public
*/

function getProperties(obj, keys) {
  let ret = {};
  let propertyNames;
  let i = 1;
  if (arguments.length === 2 && Array.isArray(keys)) {
    i = 0;
    propertyNames = arguments[1];
  } else {
    propertyNames = Array.from(arguments);
  }
  for (; i < propertyNames.length; i++) {
    // SAFETY: we are just walking the list of property names, so we know the
    // index access never produces `undefined`.
    let name = propertyNames[i];
    ret[name] = get$1(obj, name);
  }
  return ret;
}

/**
 @module @ember/object
*/
/**
  Set a list of properties on an object. These properties are set inside
  a single `beginPropertyChanges` and `endPropertyChanges` batch, so
  observers will be buffered.

  ```javascript
  import EmberObject from '@ember/object';
  let anObject = EmberObject.create();

  anObject.setProperties({
    firstName: 'Stanley',
    lastName: 'Stuart',
    age: 21
  });
  ```

  @method setProperties
  @static
  @for @ember/object
  @param obj
  @param {Object} properties
  @return properties
  @public
*/

function setProperties(obj, properties) {
  if (properties === null || typeof properties !== 'object') {
    return properties;
  }
  changeProperties(() => {
    let props = Object.keys(properties);
    for (let propertyName of props) {
      // SAFETY: casting `properties` this way is safe because any object in JS
      // can be indexed this way, and the result will be `unknown`, making it
      // safe for callers.
      set(obj, propertyName, properties[propertyName]);
    }
  });
  return properties;
}

const {
  isArray: isArray$3
} = Array;
/**
 @module @ember/array
*/
/**
 Forces the passed object to be part of an array. If the object is already
 an array, it will return the object. Otherwise, it will add the object to
 an array. If object is `null` or `undefined`, it will return an empty array.

 ```javascript
 import { makeArray } from '@ember/array';
 import ArrayProxy from '@ember/array/proxy';

 makeArray();            // []
 makeArray(null);        // []
 makeArray(undefined);   // []
 makeArray('lindsay');   // ['lindsay']
 makeArray([1, 2, 42]);  // [1, 2, 42]

 let proxy = ArrayProxy.create({ content: [] });

 makeArray(proxy) === proxy;  // false
 ```

 @method makeArray
 @static
 @for @ember/array
 @param {Object} obj the object
 @return {Array}
 @private
 */

function makeArray(obj) {
  if (obj === null || obj === undefined) {
    return [];
  }
  return isArray$3(obj) ? obj : [obj];
}

/**
  @module @ember/object/core
*/

function hasSetUnknownProperty(val) {
  return typeof val === 'object' && val !== null && typeof val.setUnknownProperty === 'function';
}
function hasToStringExtension(val) {
  return typeof val === 'object' && val !== null && typeof val.toStringExtension === 'function';
}
const reopen = Mixin.prototype.reopen;
const wasApplied = new WeakSet();
const prototypeMixinMap = new WeakMap();

const destroyCalled = new Set();
function ensureDestroyCalled(instance) {
  if (!destroyCalled.has(instance)) {
    instance.destroy();
  }
}
function initialize(obj, properties) {
  let m = meta$1(obj);
  if (properties !== undefined) {
    let concatenatedProperties = obj.concatenatedProperties;
    let mergedProperties = obj.mergedProperties;
    let keyNames = Object.keys(properties);
    for (let keyName of keyNames) {
      // SAFETY: this cast as a Record is safe because all object types can be
      // indexed in JS, and we explicitly type it as returning `unknown`, so the
      // result *must* be checked below.
      let value = properties[keyName];
      let possibleDesc = descriptorForProperty(obj, keyName, m);
      let isDescriptor = possibleDesc !== undefined;
      if (!isDescriptor) {
        if (concatenatedProperties !== undefined && concatenatedProperties.length > 0 && concatenatedProperties.includes(keyName)) {
          let baseValue = obj[keyName];
          if (baseValue) {
            value = makeArray(baseValue).concat(value);
          } else {
            value = makeArray(value);
          }
        }
        if (mergedProperties !== undefined && mergedProperties.length > 0 && mergedProperties.includes(keyName)) {
          let baseValue = obj[keyName];
          value = Object.assign({}, baseValue, value);
        }
      }
      if (isDescriptor) {
        possibleDesc.set(obj, keyName, value);
      } else if (hasSetUnknownProperty(obj) && !(keyName in obj)) {
        obj.setUnknownProperty(keyName, value);
      } else {
        {
          obj[keyName] = value;
        }
      }
    }
  }
  obj.init(properties);
  m.unsetInitializing();
  let observerEvents = m.observerEvents();
  if (observerEvents !== undefined) {
    for (let i = 0; i < observerEvents.length; i++) {
      activateObserver(obj, observerEvents[i].event, observerEvents[i].sync);
    }
  }
  sendEvent(obj, 'init', undefined, undefined, m);
}

/**
  `CoreObject` is the base class for all Ember constructs. It establishes a
  class system based on Ember's Mixin system, and provides the basis for the
  Ember Object Model. `CoreObject` should generally not be used directly,
  instead you should use `EmberObject`.

  ## Usage

  You can define a class by extending from `CoreObject` using the `extend`
  method:

  ```js
  const Person = CoreObject.extend({
    name: 'Tomster',
  });
  ```

  For detailed usage, see the [Object Model](https://guides.emberjs.com/release/object-model/)
  section of the guides.

  ## Usage with Native Classes

  Native JavaScript `class` syntax can be used to extend from any `CoreObject`
  based class:

  ```js
  class Person extends CoreObject {
    init() {
      super.init(...arguments);
      this.name = 'Tomster';
    }
  }
  ```

  Some notes about `class` usage:

  * `new` syntax is not currently supported with classes that extend from
    `EmberObject` or `CoreObject`. You must continue to use the `create` method
    when making new instances of classes, even if they are defined using native
    class syntax. If you want to use `new` syntax, consider creating classes
    which do _not_ extend from `EmberObject` or `CoreObject`. Ember features,
    such as computed properties and decorators, will still work with base-less
    classes.
  * Instead of using `this._super()`, you must use standard `super` syntax in
    native classes. See the [MDN docs on classes](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Super_class_calls_with_super)
    for more details.
  * Native classes support using [constructors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes#Constructor)
    to set up newly-created instances. Ember uses these to, among other things,
    support features that need to retrieve other entities by name, like Service
    injection and `getOwner`. To ensure your custom instance setup logic takes
    place after this important work is done, avoid using the `constructor` in
    favor of `init`.
  * Properties passed to `create` will be available on the instance by the time
    `init` runs, so any code that requires these values should work at that
    time.
  * Using native classes, and switching back to the old Ember Object model is
    fully supported.

  @class CoreObject
  @public
*/

class CoreObject {
  /** @internal */
  [OWNER$1];
  constructor(owner) {
    this[OWNER$1] = owner;

    // prepare prototype...
    this.constructor.proto();
    let self;
    {
      self = this;
    }
    const destroyable = self;
    registerDestructor$1(self, ensureDestroyCalled, true);
    registerDestructor$1(self, () => destroyable.willDestroy());

    // disable chains
    let m = meta$1(self);
    m.setInitializing();
  }
  reopen(...args) {
    applyMixin(this, args);
    return this;
  }

  /**
    An overridable method called when objects are instantiated. By default,
    does nothing unless it is overridden during class definition.
     Example:
     ```javascript
    import EmberObject from '@ember/object';
     const Person = EmberObject.extend({
      init() {
        alert(`Name is ${this.get('name')}`);
      }
    });
     let steve = Person.create({
      name: 'Steve'
    });
     // alerts 'Name is Steve'.
    ```
     NOTE: If you do override `init` for a framework class like `Component`
    from `@ember/component`, be sure to call `this._super(...arguments)`
    in your `init` declaration!
    If you don't, Ember may not have an opportunity to
    do important setup work, and you'll see strange behavior in your
    application.
     @method init
    @public
  */
  init(_properties) {}

  /**
    Defines the properties that will be concatenated from the superclass
    (instead of overridden).
     By default, when you extend an Ember class a property defined in
    the subclass overrides a property with the same name that is defined
    in the superclass. However, there are some cases where it is preferable
    to build up a property's value by combining the superclass' property
    value with the subclass' value. An example of this in use within Ember
    is the `classNames` property of `Component` from `@ember/component`.
     Here is some sample code showing the difference between a concatenated
    property and a normal one:
     ```javascript
    import EmberObject from '@ember/object';
     const Bar = EmberObject.extend({
      // Configure which properties to concatenate
      concatenatedProperties: ['concatenatedProperty'],
       someNonConcatenatedProperty: ['bar'],
      concatenatedProperty: ['bar']
    });
     const FooBar = Bar.extend({
      someNonConcatenatedProperty: ['foo'],
      concatenatedProperty: ['foo']
    });
     let fooBar = FooBar.create();
    fooBar.get('someNonConcatenatedProperty'); // ['foo']
    fooBar.get('concatenatedProperty'); // ['bar', 'foo']
    ```
     This behavior extends to object creation as well. Continuing the
    above example:
     ```javascript
    let fooBar = FooBar.create({
      someNonConcatenatedProperty: ['baz'],
      concatenatedProperty: ['baz']
    })
    fooBar.get('someNonConcatenatedProperty'); // ['baz']
    fooBar.get('concatenatedProperty'); // ['bar', 'foo', 'baz']
    ```
     Adding a single property that is not an array will just add it in the array:
     ```javascript
    let fooBar = FooBar.create({
      concatenatedProperty: 'baz'
    })
    view.get('concatenatedProperty'); // ['bar', 'foo', 'baz']
    ```
     Using the `concatenatedProperties` property, we can tell Ember to mix the
    content of the properties.
     In `Component` the `classNames`, `classNameBindings` and
    `attributeBindings` properties are concatenated.
     This feature is available for you to use throughout the Ember object model,
    although typical app developers are likely to use it infrequently. Since
    it changes expectations about behavior of properties, you should properly
    document its usage in each individual concatenated property (to not
    mislead your users to think they can override the property in a subclass).
     @property concatenatedProperties
    @type Array
    @default null
    @public
  */

  /**
    Defines the properties that will be merged from the superclass
    (instead of overridden).
     By default, when you extend an Ember class a property defined in
    the subclass overrides a property with the same name that is defined
    in the superclass. However, there are some cases where it is preferable
    to build up a property's value by merging the superclass property value
    with the subclass property's value. An example of this in use within Ember
    is the `queryParams` property of routes.
     Here is some sample code showing the difference between a merged
    property and a normal one:
     ```javascript
    import EmberObject from '@ember/object';
     const Bar = EmberObject.extend({
      // Configure which properties are to be merged
      mergedProperties: ['mergedProperty'],
       someNonMergedProperty: {
        nonMerged: 'superclass value of nonMerged'
      },
      mergedProperty: {
        page: { replace: false },
        limit: { replace: true }
      }
    });
     const FooBar = Bar.extend({
      someNonMergedProperty: {
        completelyNonMerged: 'subclass value of nonMerged'
      },
      mergedProperty: {
        limit: { replace: false }
      }
    });
     let fooBar = FooBar.create();
     fooBar.get('someNonMergedProperty');
    // => { completelyNonMerged: 'subclass value of nonMerged' }
    //
    // Note the entire object, including the nonMerged property of
    // the superclass object, has been replaced
     fooBar.get('mergedProperty');
    // => {
    //   page: {replace: false},
    //   limit: {replace: false}
    // }
    //
    // Note the page remains from the superclass, and the
    // `limit` property's value of `false` has been merged from
    // the subclass.
    ```
     This behavior is not available during object `create` calls. It is only
    available at `extend` time.
     In `Route` the `queryParams` property is merged.
     This feature is available for you to use throughout the Ember object model,
    although typical app developers are likely to use it infrequently. Since
    it changes expectations about behavior of properties, you should properly
    document its usage in each individual merged property (to not
    mislead your users to think they can override the property in a subclass).
     @property mergedProperties
    @type Array
    @default null
    @public
  */

  /**
    Destroyed object property flag.
     if this property is `true` the observers and bindings were already
    removed by the effect of calling the `destroy()` method.
     @property isDestroyed
    @default false
    @public
  */
  get isDestroyed() {
    return isDestroyed(this);
  }
  set isDestroyed(_value) {
  }

  /**
    Destruction scheduled flag. The `destroy()` method has been called.
     The object stays intact until the end of the run loop at which point
    the `isDestroyed` flag is set.
     @property isDestroying
    @default false
    @public
  */
  get isDestroying() {
    return isDestroying(this);
  }
  set isDestroying(_value) {
  }

  /**
    Destroys an object by setting the `isDestroyed` flag and removing its
    metadata, which effectively destroys observers and bindings.
     If you try to set a property on a destroyed object, an exception will be
    raised.
     Note that destruction is scheduled for the end of the run loop and does not
    happen immediately.  It will set an isDestroying flag immediately.
     @method destroy
    @return {EmberObject} receiver
    @public
  */
  destroy() {
    // Used to ensure that manually calling `.destroy()` does not immediately call destroy again
    destroyCalled.add(this);
    try {
      destroy(this);
    } finally {
      destroyCalled.delete(this);
    }
    return this;
  }

  /**
    Override to implement teardown.
     @method willDestroy
    @public
  */
  willDestroy() {}

  /**
    Returns a string representation which attempts to provide more information
    than Javascript's `toString` typically does, in a generic way for all Ember
    objects.
     ```javascript
    import EmberObject from '@ember/object';
     const Person = EmberObject.extend();
    person = Person.create();
    person.toString(); //=> "<Person:ember1024>"
    ```
     If the object's class is not defined on an Ember namespace, it will
    indicate it is a subclass of the registered superclass:
     ```javascript
    const Student = Person.extend();
    let student = Student.create();
    student.toString(); //=> "<(subclass of Person):ember1025>"
    ```
     If the method `toStringExtension` is defined, its return value will be
    included in the output.
     ```javascript
    const Teacher = Person.extend({
      toStringExtension() {
        return this.get('fullName');
      }
    });
    teacher = Teacher.create();
    teacher.toString(); //=> "<Teacher:ember1026:Tom Dale>"
    ```
     @method toString
    @return {String} string representation
    @public
  */
  toString() {
    let extension = hasToStringExtension(this) ? `:${this.toStringExtension()}` : '';
    return `<${getFactoryFor(this) || '(unknown)'}:${guidFor(this)}${extension}>`;
  }

  /**
    Creates a new subclass.
     ```javascript
    import EmberObject from '@ember/object';
     const Person = EmberObject.extend({
      say(thing) {
        alert(thing);
       }
    });
    ```
     This defines a new subclass of EmberObject: `Person`. It contains one method: `say()`.
     You can also create a subclass from any existing class by calling its `extend()` method.
    For example, you might want to create a subclass of Ember's built-in `Component` class:
     ```javascript
    import Component from '@ember/component';
     const PersonComponent = Component.extend({
      tagName: 'li',
      classNameBindings: ['isAdministrator']
    });
    ```
     When defining a subclass, you can override methods but still access the
    implementation of your parent class by calling the special `_super()` method:
     ```javascript
    import EmberObject from '@ember/object';
     const Person = EmberObject.extend({
      say(thing) {
        let name = this.get('name');
        alert(`${name} says: ${thing}`);
      }
    });
     const Soldier = Person.extend({
      say(thing) {
        this._super(`${thing}, sir!`);
      },
      march(numberOfHours) {
        alert(`${this.get('name')} marches for ${numberOfHours} hours.`);
      }
    });
     let yehuda = Soldier.create({
      name: 'Yehuda Katz'
    });
     yehuda.say('Yes');  // alerts "Yehuda Katz says: Yes, sir!"
    ```
     The `create()` on line #17 creates an *instance* of the `Soldier` class.
    The `extend()` on line #8 creates a *subclass* of `Person`. Any instance
    of the `Person` class will *not* have the `march()` method.
     You can also pass `Mixin` classes to add additional properties to the subclass.
     ```javascript
    import EmberObject from '@ember/object';
    import Mixin from '@ember/object/mixin';
     const Person = EmberObject.extend({
      say(thing) {
        alert(`${this.get('name')} says: ${thing}`);
      }
    });
     const SingingMixin = Mixin.create({
      sing(thing) {
        alert(`${this.get('name')} sings: la la la ${thing}`);
      }
    });
     const BroadwayStar = Person.extend(SingingMixin, {
      dance() {
        alert(`${this.get('name')} dances: tap tap tap tap `);
      }
    });
    ```
     The `BroadwayStar` class contains three methods: `say()`, `sing()`, and `dance()`.
     @method extend
    @static
    @for @ember/object
    @param {Mixin} [mixins]* One or more Mixin classes
    @param {Object} [arguments]* Object containing values to use within the new class
    @public
  */

  static extend(...mixins) {
    let Class = class extends this {};
    reopen.apply(Class.PrototypeMixin, mixins);
    return Class;
  }

  /**
    Creates an instance of a class. Accepts either no arguments, or an object
    containing values to initialize the newly instantiated object with.
     ```javascript
    import EmberObject from '@ember/object';
     const Person = EmberObject.extend({
      helloWorld() {
        alert(`Hi, my name is ${this.get('name')}`);
      }
    });
     let tom = Person.create({
      name: 'Tom Dale'
    });
     tom.helloWorld(); // alerts "Hi, my name is Tom Dale".
    ```
     `create` will call the `init` function if defined during
    `AnyObject.extend`
     If no arguments are passed to `create`, it will not set values to the new
    instance during initialization:
     ```javascript
    let noName = Person.create();
    noName.helloWorld(); // alerts undefined
    ```
     NOTE: For performance reasons, you cannot declare methods or computed
    properties during `create`. You should instead declare methods and computed
    properties when using `extend`.
     @method create
    @for @ember/object
    @static
    @param [arguments]*
    @public
  */

  static create(...args) {
    let props = args[0];
    let instance;
    if (props !== undefined) {
      instance = new this(getOwner$2(props));
      // TODO(SAFETY): at present, we cannot actually rely on this being set,
      // because a number of acceptance tests are (incorrectly? Unclear!)
      // relying on the ability to run through this path with `factory` being
      // `undefined`. It's *possible* that actually means that the type for
      // `setFactoryFor()` should allow `undefined`, but we typed it the other
      // way for good reason! Accordingly, this *casts* `factory`, and the
      // commented-out `assert()` is here in the hope that we can enable it
      // after addressing tests *or* updating the call signature here.
      let factory = getFactoryFor(props);
      // assert(`missing factory when creating object ${instance}`, factory !== undefined);
      setFactoryFor(instance, factory);
    } else {
      instance = new this();
    }
    if (args.length <= 1) {
      initialize(instance, props);
    } else {
      initialize(instance, flattenProps.apply(this, args));
    }

    // SAFETY: The `initialize` call is responsible to merge the prototype chain
    // so that this holds.
    return instance;
  }

  /**
    Augments a constructor's prototype with additional
    properties and functions:
     ```javascript
    import EmberObject from '@ember/object';
     const MyObject = EmberObject.extend({
      name: 'an object'
    });
     o = MyObject.create();
    o.get('name'); // 'an object'
     MyObject.reopen({
      say(msg) {
        console.log(msg);
      }
    });
     o2 = MyObject.create();
    o2.say('hello'); // logs "hello"
     o.say('goodbye'); // logs "goodbye"
    ```
     To add functions and properties to the constructor itself,
    see `reopenClass`
     @method reopen
    @for @ember/object
    @static
    @public
  */
  static reopen(...args) {
    this.willReopen();
    reopen.apply(this.PrototypeMixin, args);
    return this;
  }
  static willReopen() {
    let p = this.prototype;
    if (wasApplied.has(p)) {
      wasApplied.delete(p);

      // If the base mixin already exists and was applied, create a new mixin to
      // make sure that it gets properly applied. Reusing the same mixin after
      // the first `proto` call will cause it to get skipped.
      if (prototypeMixinMap.has(this)) {
        prototypeMixinMap.set(this, Mixin.create(this.PrototypeMixin));
      }
    }
  }

  /**
    Augments a constructor's own properties and functions:
     ```javascript
    import EmberObject from '@ember/object';
     const MyObject = EmberObject.extend({
      name: 'an object'
    });
     MyObject.reopenClass({
      canBuild: false
    });
     MyObject.canBuild; // false
    o = MyObject.create();
    ```
     In other words, this creates static properties and functions for the class.
    These are only available on the class and not on any instance of that class.
     ```javascript
    import EmberObject from '@ember/object';
     const Person = EmberObject.extend({
      name: '',
      sayHello() {
        alert(`Hello. My name is ${this.get('name')}`);
      }
    });
     Person.reopenClass({
      species: 'Homo sapiens',
       createPerson(name) {
        return Person.create({ name });
      }
    });
     let tom = Person.create({
      name: 'Tom Dale'
    });
    let yehuda = Person.createPerson('Yehuda Katz');
     tom.sayHello(); // "Hello. My name is Tom Dale"
    yehuda.sayHello(); // "Hello. My name is Yehuda Katz"
    alert(Person.species); // "Homo sapiens"
    ```
     Note that `species` and `createPerson` are *not* valid on the `tom` and `yehuda`
    variables. They are only valid on `Person`.
     To add functions and properties to instances of
    a constructor by extending the constructor's prototype
    see `reopen`
     @method reopenClass
    @for @ember/object
    @static
    @public
  */
  static reopenClass(...mixins) {
    applyMixin(this, mixins);
    return this;
  }
  static detect(obj) {
    if ('function' !== typeof obj) {
      return false;
    }
    while (obj) {
      if (obj === this) {
        return true;
      }
      obj = obj.superclass;
    }
    return false;
  }
  static detectInstance(obj) {
    return obj instanceof this;
  }

  /**
    In some cases, you may want to annotate computed properties with additional
    metadata about how they function or what values they operate on. For
    example, computed property functions may close over variables that are then
    no longer available for introspection.
     You can pass a hash of these values to a computed property like this:
     ```javascript
    import { computed } from '@ember/object';
     person: computed(function() {
      let personId = this.get('personId');
      return Person.create({ id: personId });
    }).meta({ type: Person })
    ```
     Once you've done this, you can retrieve the values saved to the computed
    property from your class like this:
     ```javascript
    MyClass.metaForProperty('person');
    ```
     This will return the original hash that was passed to `meta()`.
     @static
    @method metaForProperty
    @param key {String} property name
    @private
  */
  static metaForProperty(key) {
    let proto = this.proto(); // ensure prototype is initialized
    let possibleDesc = descriptorForProperty(proto, key);
    return possibleDesc._meta || {};
  }

  /**
    Iterate over each computed property for the class, passing its name
    and any associated metadata (see `metaForProperty`) to the callback.
     @static
    @method eachComputedProperty
    @param {Function} callback
    @param {Object} binding
    @private
  */
  static eachComputedProperty(callback, binding = this) {
    this.proto(); // ensure prototype is initialized
    let empty = {};
    meta$1(this.prototype).forEachDescriptors((name, descriptor) => {
      if (descriptor.enumerable) {
        let meta = descriptor._meta || empty;
        callback.call(binding, name, meta);
      }
    });
  }
  static get PrototypeMixin() {
    let prototypeMixin = prototypeMixinMap.get(this);
    if (prototypeMixin === undefined) {
      prototypeMixin = Mixin.create();
      prototypeMixin.ownerConstructor = this;
      prototypeMixinMap.set(this, prototypeMixin);
    }
    return prototypeMixin;
  }
  static get superclass() {
    let c = Object.getPrototypeOf(this);
    return c !== Function.prototype ? c : undefined;
  }
  static proto() {
    let p = this.prototype;
    if (!wasApplied.has(p)) {
      wasApplied.add(p);
      let parent = this.superclass;
      if (parent) {
        parent.proto();
      }

      // If the prototype mixin exists, apply it. In the case of native classes,
      // it will not exist (unless the class has been reopened).
      if (prototypeMixinMap.has(this)) {
        this.PrototypeMixin.apply(p);
      }
    }
    return p;
  }
  static toString() {
    return `<${getFactoryFor(this) || '(unknown)'}:constructor>`;
  }
  static isClass = true;
  static isMethod = false;
  static _onLookup;
  static _lazyInjections;
}
function flattenProps(...props) {
  let initProperties = {};
  for (let properties of props) {
    let keyNames = Object.keys(properties);
    for (let j = 0, k = keyNames.length; j < k; j++) {
      let keyName = keyNames[j];
      let value = properties[keyName];
      initProperties[keyName] = value;
    }
  }
  return initProperties;
}

/**
@module @ember/object/observable
*/

const Observable = Mixin.create({
  get(keyName) {
    return get$1(this, keyName);
  },
  getProperties(...args) {
    return getProperties(this, ...args);
  },
  set(keyName, value) {
    return set(this, keyName, value);
  },
  setProperties(hash) {
    return setProperties(this, hash);
  },
  /**
    Begins a grouping of property changes.
     You can use this method to group property changes so that notifications
    will not be sent until the changes are finished. If you plan to make a
    large number of changes to an object at one time, you should call this
    method at the beginning of the changes to begin deferring change
    notifications. When you are done making changes, call
    `endPropertyChanges()` to deliver the deferred change notifications and end
    deferring.
     @method beginPropertyChanges
    @return {Observable}
    @private
  */
  beginPropertyChanges() {
    beginPropertyChanges();
    return this;
  },
  /**
    Ends a grouping of property changes.
     You can use this method to group property changes so that notifications
    will not be sent until the changes are finished. If you plan to make a
    large number of changes to an object at one time, you should call
    `beginPropertyChanges()` at the beginning of the changes to defer change
    notifications. When you are done making changes, call this method to
    deliver the deferred change notifications and end deferring.
     @method endPropertyChanges
    @return {Observable}
    @private
  */
  endPropertyChanges() {
    endPropertyChanges();
    return this;
  },
  notifyPropertyChange(keyName) {
    notifyPropertyChange(this, keyName);
    return this;
  },
  addObserver(key, target, method, sync) {
    addObserver(this, key, target, method, sync);
    return this;
  },
  removeObserver(key, target, method, sync) {
    removeObserver(this, key, target, method, sync);
    return this;
  },
  /**
    Returns `true` if the object currently has observers registered for a
    particular key. You can use this method to potentially defer performing
    an expensive action until someone begins observing a particular property
    on the object.
     @method hasObserverFor
    @param {String} key Key to check
    @return {Boolean}
    @private
  */
  hasObserverFor(key) {
    return hasListeners(this, `${key}:change`);
  },
  incrementProperty(keyName, increment = 1) {
    return set(this, keyName, (parseFloat(get$1(this, keyName)) || 0) + increment);
  },
  decrementProperty(keyName, decrement = 1) {
    return set(this, keyName, (get$1(this, keyName) || 0) - decrement);
  },
  toggleProperty(keyName) {
    return set(this, keyName, !get$1(this, keyName));
  },
  cacheFor(keyName) {
    let meta = peekMeta(this);
    return meta !== null ? meta.valueFor(keyName) : undefined;
  }
});

/**
@module @ember/object
*/

/**
  `EmberObject` is the main base class for all Ember objects. It is a subclass
  of `CoreObject` with the `Observable` mixin applied. For details,
  see the documentation for each of these.

  @class EmberObject
  @extends CoreObject
  @uses Observable
  @public
*/
// eslint-disable-next-line @typescript-eslint/no-empty-object-type

class EmberObject extends CoreObject.extend(Observable) {
  get _debugContainerKey() {
    let factory = getFactoryFor(this);
    return factory !== undefined && factory.fullName;
  }
}

/**
  Decorator that turns the target function into an Action which can be accessed
  directly by reference.

  ```js
  import Component from '@ember/component';
  import { tracked } from '@glimmer/tracking';
  import { action } from '@ember/object';

  export default class Tooltip extends Component {
    @tracked isShowing = false;

    @action
    toggleShowing() {
      this.isShowing = !this.isShowing;
    }
  }
  ```
  ```hbs
  <!-- template.hbs -->
  <button {{on "click" this.toggleShowing}}>Show tooltip</button>

  {{#if isShowing}}
    <div class="tooltip">
      I'm a tooltip!
    </div>
  {{/if}}
  ```

  It also binds the function directly to the instance, so it can be used in any
  context and will correctly refer to the class it came from:

  ```js
  import Component from '@ember/component';
  import { tracked } from '@glimmer/tracking';
  import { action } from '@ember/object';

  export default class Tooltip extends Component {
    constructor() {
      super(...arguments);

      // this.toggleShowing is still bound correctly when added to
      // the event listener
      document.addEventListener('click', this.toggleShowing);
    }

    @tracked isShowing = false;

    @action
    toggleShowing() {
      this.isShowing = !this.isShowing;
    }
  }
  ```

  @public
  @method action
  @for @ember/object
  @static
  @param {Function|undefined} callback The function to turn into an action,
                                       when used in classic classes
  @return {PropertyDecorator} property decorator instance
*/

const BINDINGS_MAP = new WeakMap();
function hasProto(obj) {
  return obj != null && obj.constructor !== undefined && typeof obj.constructor.proto === 'function';
}
function setupAction(target, key, actionFn) {
  if (hasProto(target)) {
    target.constructor.proto();
  }
  if (!Object.prototype.hasOwnProperty.call(target, 'actions')) {
    let parentActions = target.actions;
    // we need to assign because of the way mixins copy actions down when inheriting
    target.actions = parentActions ? Object.assign({}, parentActions) : {};
  }
  target.actions[key] = actionFn;
  return {
    get() {
      let bindings = BINDINGS_MAP.get(this);
      if (bindings === undefined) {
        bindings = new Map();
        BINDINGS_MAP.set(this, bindings);
      }
      let fn = bindings.get(actionFn);
      if (fn === undefined) {
        fn = actionFn.bind(this);
        bindings.set(actionFn, fn);
      }
      return fn;
    }
  };
}
function action(...args) {
  let actionFn;
  if (!isElementDescriptor(args)) {
    actionFn = args[0];
    let decorator = function (target, key, _desc, _meta, isClassicDecorator) {
      return setupAction(target, key, actionFn);
    };
    setClassicDecorator(decorator);
    return decorator;
  }
  let [target, key, desc] = args;
  actionFn = desc?.value;
  return setupAction(target, key, actionFn);
}

// SAFETY: TS types are weird with decorators. This should work.
setClassicDecorator(action);

// ..........................................................
// OBSERVER HELPER
//

/**
  Specify a method that observes property changes.

  ```javascript
  import EmberObject from '@ember/object';
  import { observer } from '@ember/object';

  export default EmberObject.extend({
    valueObserver: observer('value', function() {
      // Executes whenever the "value" property changes
    })
  });
  ```

  Also available as `Function.prototype.observes` if prototype extensions are
  enabled.

  @method observer
  @for @ember/object
  @param {String} propertyNames*
  @param {Function} func
  @return func
  @public
  @static
*/
function observer(...args) {
  let funcOrDef = args.pop();
  let func;
  let dependentKeys;
  let sync;
  if (typeof funcOrDef === 'function') {
    func = funcOrDef;
    dependentKeys = args;
    sync = !ENV._DEFAULT_ASYNC_OBSERVERS;
  } else {
    func = funcOrDef.fn;
    dependentKeys = funcOrDef.dependentKeys;
    sync = funcOrDef.sync;
  }
  let paths = [];
  for (let dependentKey of dependentKeys) {
    expandProperties(dependentKey, path => paths.push(path));
  }
  setObservers(func, {
    paths,
    sync
  });
  return func;
}

/**
 @module @ember/test
*/

/**
  The primary purpose of this class is to create hooks that can be implemented
  by an adapter for various test frameworks.

  @class TestAdapter
  @public
*/

const Adapter$1 = EmberObject.extend({
  /**
    This callback will be called whenever an async operation is about to start.
     Override this to call your framework's methods that handle async
    operations.
     @public
    @method asyncStart
  */
  asyncStart() {},
  /**
    This callback will be called whenever an async operation has completed.
     @public
    @method asyncEnd
  */
  asyncEnd() {},
  /**
    Override this method with your testing framework's false assertion.
    This function is called whenever an exception occurs causing the testing
    promise to fail.
     QUnit example:
     ```javascript
      exception: function(error) {
        ok(false, error);
      };
    ```
     @public
    @method exception
    @param {String} error The exception to be raised.
  */
  exception(error) {
    throw error;
  }
});

/* globals QUnit */

function isVeryOldQunit(obj) {
  return obj != null && typeof obj.stop === 'function';
}

/**
   @module ember
*/
/**
  This class implements the methods defined by TestAdapter for the
  QUnit testing framework.

  @class QUnitAdapter
  @namespace Ember.Test
  @extends TestAdapter
  @public
*/

const QUnitAdapter = Adapter$1.extend({
  init() {
    this.doneCallbacks = [];
  },
  asyncStart() {
    if (isVeryOldQunit(QUnit)) {
      // very old QUnit version
      // eslint-disable-next-line qunit/no-qunit-stop
      QUnit.stop();
    } else {
      this.doneCallbacks.push(QUnit.config.current ? QUnit.config.current.assert.async() : null);
    }
  },
  asyncEnd() {
    // checking for QUnit.stop here (even though we _need_ QUnit.start) because
    // QUnit.start() still exists in QUnit 2.x (it just throws an error when calling
    // inside a test context)
    if (isVeryOldQunit(QUnit)) {
      QUnit.start();
    } else {
      let done = this.doneCallbacks.pop();
      // This can be null if asyncStart() was called outside of a test
      if (done) {
        done();
      }
    }
  },
  exception(error) {
    QUnit.config.current.assert.ok(false, inspect(error));
  }
});

/* global self */

/**
  Sets Ember up for testing. This is useful to perform
  basic setup steps in order to unit test.

  Use `App.setupForTesting` to perform integration tests (full
  application testing).

  @method setupForTesting
  @namespace Ember
  @since 1.5.0
  @private
*/
function setupForTesting() {
  setTesting(true);
  let adapter = getAdapter();
  // if adapter is not manually set default to QUnit
  if (!adapter) {
    setAdapter(typeof self.QUnit === 'undefined' ? Adapter$1.create() : QUnitAdapter.create());
  }
}

/**
  Ember’s dependency injection system is built on the idea of an "owner": an
  object responsible for managing items which can be registered and looked up
  with the system.

  This module does not provide any concrete instances of owners. Instead, it
  defines the core type, `Owner`, which specifies the public API contract for an
  owner. The primary concrete implementations of `Owner` are `EngineInstance`,
  from `@ember/engine/instance`, and its `ApplicationInstance` subclass, from
  `@ember/application/instance`.

  Along with `Owner` itself, this module provides a number of supporting types
  related to Ember's DI system:

  - `Factory`, Ember's primary interface for something which can create class
    instances registered with the DI system.

  - `FactoryManager`, an interface for inspecting a `Factory`'s class.

  - `Resolver`, an interface defining the contract for the object responsible
    for mapping string names to the corresponding classes. For example, when you
    write `@service('session')`, a resolver is responsible to map that back to
    the `Session` service class in your codebase. Normally, this is handled for
    you automatically with `ember-resolver`, which is the main implementor of
    this interface.

  For more details on each, see their per-item docs.

  @module @ember/owner
  @public
*/

// NOTE: this documentation appears here instead of at the definition site so
// it can appear correctly in both API docs and for TS, while providing a richer
// internal representation for Ember's own usage.
/**
  Framework objects in an Ember application (components, services, routes, etc.)
  are created via a factory and dependency injection system. Each of these
  objects is the responsibility of an "owner", which handled its
  instantiation and manages its lifetime.

  `getOwner` fetches the owner object responsible for an instance. This can
  be used to lookup or resolve other class instances, or register new factories
  into the owner.

  For example, this component dynamically looks up a service based on the
  `audioType` passed as an argument:

  ```app/components/play-audio.js
  import Component from '@glimmer/component';
  import { action } from '@ember/object';
  import { getOwner } from '@ember/owner';

  // Usage:
  //
  //   <PlayAudio @audioType={{@model.audioType}} @audioFile={{@model.file}}/>
  //
  export default class extends Component {
    get audioService() {
      return getOwner(this)?.lookup(`service:${this.args.audioType}`);
    }

    @action
    onPlay() {
      this.audioService?.play(this.args.audioFile);
    }
  }
  ```

  @method getOwner
  @static
  @for @ember/owner
  @param {Object} object An object with an owner.
  @return {Object} An owner object.
  @since 2.3.0
  @public
*/
// SAFETY: the cast here is necessary, instead of using an assignment, because
// TS (not incorrectly! Nothing expressly relates them) does not see that the
// `InternalOwner` and `Owner` do actually have identical constraints on their
// relations to the `DIRegistry`.
const getOwner$1 = getOwner$2;

/*globals CustomEvent */

/**
  @module @ember/application
*/

const loadHooks = ENV.EMBER_LOAD_HOOKS || {};
const loaded = {};
let _loaded = loaded;

/**
  Detects when a specific package of Ember (e.g. 'Application')
  has fully loaded and is available for extension.

  The provided `callback` will be called with the `name` passed
  resolved from a string into the object:

  ``` javascript
  import { onLoad } from '@ember/application';

  onLoad('Ember.Application' function(hbars) {
    hbars.registerHelper(...);
  });
  ```

  @method onLoad
  @static
  @for @ember/application
  @param name {String} name of hook
  @param callback {Function} callback to be called
  @private
*/
function onLoad(name, callback) {
  let object = loaded[name];
  let hooks = loadHooks[name] ??= [];
  hooks.push(callback);
  if (object) {
    callback(object);
  }
}

/**
  Called when an Ember.js package (e.g Application) has finished
  loading. Triggers any callbacks registered for this event.

  @method runLoadHooks
  @static
  @for @ember/application
  @param name {String} name of hook
  @param object {Object} object to pass to callbacks
  @private
*/
function runLoadHooks(name, object) {
  loaded[name] = object;
  if (window$1 && typeof CustomEvent === 'function') {
    let event = new CustomEvent(name, {
      detail: object
    });
    window$1.dispatchEvent(event);
  }
  loadHooks[name]?.forEach(callback => callback(object));
}

/**
@module ember
*/

function isSimpleClick(event) {
  if (!(event instanceof MouseEvent)) {
    return false;
  }
  let modifier = event.shiftKey || event.metaKey || event.altKey || event.ctrlKey;
  let secondaryClick = event.which > 1; // IE9 may return undefined

  return !modifier && !secondaryClick;
}

/**
  @private
  @method getRootViews
  @param {Object} owner
*/
function getRootViews(owner) {
  let registry = owner.lookup('-view-registry:main');
  let rootViews = [];
  Object.keys(registry).forEach(id => {
    let view = registry[id];
    if (view.parentView === null) {
      rootViews.push(view);
    }
  });
  return rootViews;
}

/**
  @private
  @method getViewId
  @param {Ember.View} view
 */
function getViewId(view) {
  if (view.tagName !== '' && view.elementId) {
    return view.elementId;
  } else {
    return guidFor(view);
  }
}
const ELEMENT_VIEW = new WeakMap();
const VIEW_ELEMENT = new WeakMap();
function getElementView(element) {
  return ELEMENT_VIEW.get(element) || null;
}

/**
  @private
  @method getViewElement
  @param {Ember.View} view
 */
function getViewElement(view) {
  return VIEW_ELEMENT.get(view) || null;
}
function setElementView(element, view) {
  ELEMENT_VIEW.set(element, view);
}
function setViewElement(view, element) {
  VIEW_ELEMENT.set(view, element);
}

// These are not needed for GC, but for correctness. We want to be able to
// null-out these links while the objects are still live. Specifically, in
// this case, we want to prevent access to the element (and vice verse) during
// destruction.

function clearElementView(element) {
  ELEMENT_VIEW.delete(element);
}
function clearViewElement(view) {
  VIEW_ELEMENT.delete(view);
}
const CHILD_VIEW_IDS = new WeakMap();

/**
  @private
  @method getChildViews
  @param {Ember.View} view
*/
function getChildViews(view) {
  let owner = getOwner$2(view);
  let registry = owner.lookup('-view-registry:main');
  return collectChildViews(view, registry);
}
function initChildViews(view) {
  let childViews = new Set();
  CHILD_VIEW_IDS.set(view, childViews);
  return childViews;
}
function addChildView(parent, child) {
  let childViews = CHILD_VIEW_IDS.get(parent);
  if (childViews === undefined) {
    childViews = initChildViews(parent);
  }
  childViews.add(getViewId(child));
}
function collectChildViews(view, registry) {
  let views = [];
  let childViews = CHILD_VIEW_IDS.get(view);
  if (childViews !== undefined) {
    childViews.forEach(id => {
      let view = registry[id];
      if (view && !view.isDestroying && !view.isDestroyed) {
        views.push(view);
      }
    });
  }
  return views;
}

/**
  @private
  @method getViewBounds
  @param {Ember.View} view
*/
function getViewBounds(view) {
  return view.renderer.getBounds(view);
}

/**
  @private
  @method getViewRange
  @param {Ember.View} view
*/
function getViewRange(view) {
  let bounds = getViewBounds(view);
  let range = document.createRange();
  range.setStartBefore(bounds.firstNode);
  range.setEndAfter(bounds.lastNode);
  return range;
}

/**
  `getViewClientRects` provides information about the position of the border
  box edges of a view relative to the viewport.

  It is only intended to be used by development tools like the Ember Inspector
  and may not work on older browsers.

  @private
  @method getViewClientRects
  @param {Ember.View} view
*/
function getViewClientRects(view) {
  let range = getViewRange(view);
  return range.getClientRects();
}

/**
  `getViewBoundingClientRect` provides information about the position of the
  bounding border box edges of a view relative to the viewport.

  It is only intended to be used by development tools like the Ember Inspector
  and may not work on older browsers.

  @private
  @method getViewBoundingClientRect
  @param {Ember.View} view
*/
function getViewBoundingClientRect(view) {
  let range = getViewRange(view);
  return range.getBoundingClientRect();
}

/**
@module ember
*/

function ActionManager() {}

/**
  Global action id hash.

  @private
  @property registeredActions
  @type Object
*/
ActionManager.registeredActions = {};

/**
@module ember
*/

const ROOT_ELEMENT_CLASS = 'ember-application';

/**
  `Ember.EventDispatcher` handles delegating browser events to their
  corresponding `Ember.Views.` For example, when you click on a view,
  `Ember.EventDispatcher` ensures that that view's `mouseDown` method gets
  called.

  @class EventDispatcher
  @namespace Ember
  @private
  @extends EmberObject
*/
class EventDispatcher extends EmberObject {
  /**
    The set of events names (and associated handler function names) to be setup
    and dispatched by the `EventDispatcher`. Modifications to this list can be done
    at setup time, generally via the `Application.customEvents` hash.
     To add new events to be listened to:
     ```javascript
    import Application from '@ember/application';
     let App = Application.create({
      customEvents: {
        paste: 'paste'
      }
    });
    ```
     To prevent default events from being listened to:
     ```javascript
    import Application from '@ember/application';
     let App = Application.create({
      customEvents: {
        mouseenter: null,
        mouseleave: null
      }
    });
    ```
    @property events
    @type Object
    @private
  */
  events = {
    touchstart: 'touchStart',
    touchmove: 'touchMove',
    touchend: 'touchEnd',
    touchcancel: 'touchCancel',
    keydown: 'keyDown',
    keyup: 'keyUp',
    keypress: 'keyPress',
    mousedown: 'mouseDown',
    mouseup: 'mouseUp',
    contextmenu: 'contextMenu',
    click: 'click',
    dblclick: 'doubleClick',
    focusin: 'focusIn',
    focusout: 'focusOut',
    submit: 'submit',
    input: 'input',
    change: 'change',
    dragstart: 'dragStart',
    drag: 'drag',
    dragenter: 'dragEnter',
    dragleave: 'dragLeave',
    dragover: 'dragOver',
    drop: 'drop',
    dragend: 'dragEnd'
  };

  /**
    The root DOM element to which event listeners should be attached. Event
    listeners will be attached to the document unless this is overridden.
     Can be specified as a DOMElement or a selector string.
     The default body is a string since this may be evaluated before document.body
    exists in the DOM.
     @private
    @property rootElement
    @type DOMElement
    @default 'body'
  */
  rootElement = 'body';
  _eventHandlers = Object.create(null);
  _didSetup = false;
  finalEventNameMapping = null;
  _sanitizedRootElement = null;
  lazyEvents = new Map();
  _reverseEventNameMapping = null;

  /**
    Sets up event listeners for standard browser events.
     This will be called after the browser sends a `DOMContentReady` event. By
    default, it will set up all of the listeners on the document body. If you
    would like to register the listeners on a different element, set the event
    dispatcher's `root` property.
     @private
    @method setup
    @param addedEvents {Object}
  */
  setup(addedEvents, _rootElement) {
    let events = this.finalEventNameMapping = {
      ...get$1(this, 'events'),
      ...addedEvents
    };
    this._reverseEventNameMapping = Object.keys(events).reduce((result, key) => {
      let eventName = events[key];
      return eventName ? {
        ...result,
        [eventName]: key
      } : result;
    }, {});
    let lazyEvents = this.lazyEvents;
    if (_rootElement !== undefined && _rootElement !== null) {
      set(this, 'rootElement', _rootElement);
    }
    let specifiedRootElement = get$1(this, 'rootElement');
    let rootElement = typeof specifiedRootElement !== 'string' ? specifiedRootElement : document.querySelector(specifiedRootElement);
    rootElement.classList.add(ROOT_ELEMENT_CLASS);
    this._sanitizedRootElement = rootElement;

    // setup event listeners for the non-lazily setup events
    for (let event in events) {
      if (Object.prototype.hasOwnProperty.call(events, event)) {
        lazyEvents.set(event, events[event] ?? null);
      }
    }
    this._didSetup = true;
  }

  /**
    Setup event listeners for the given browser event name
     @private
    @method setupHandlerForBrowserEvent
    @param event the name of the event in the browser
  */
  setupHandlerForBrowserEvent(event) {
    this.setupHandler(this._sanitizedRootElement, event, this.finalEventNameMapping[event] ?? null);
  }

  /**
    Setup event listeners for the given Ember event name (camel case)
     @private
    @method setupHandlerForEmberEvent
    @param eventName
  */
  setupHandlerForEmberEvent(eventName) {
    let event = this._reverseEventNameMapping?.[eventName];
    if (event) {
      this.setupHandler(this._sanitizedRootElement, event, eventName);
    }
  }

  /**
    Registers an event listener on the rootElement. If the given event is
    triggered, the provided event handler will be triggered on the target view.
     If the target view does not implement the event handler, or if the handler
    returns `false`, the parent view will be called. The event will continue to
    bubble to each successive parent view until it reaches the top.
     @private
    @method setupHandler
    @param {Element} rootElement
    @param {String} event the name of the event in the browser
    @param {String} eventName the name of the method to call on the view
  */
  setupHandler(rootElement, event, eventName) {
    if (eventName === null || !this.lazyEvents.has(event)) {
      return; // nothing to do
    }
    let viewHandler = (target, event) => {
      let view = getElementView(target);
      let result = true;
      if (view) {
        // SAFETY: As currently written, this is not safe. Though it seems to always be true.
        result = view.handleEvent(eventName, event);
      }
      return result;
    };
    let actionHandler = (target, event) => {
      let actionId = target.getAttribute('data-ember-action');
      let actions;

      // In Glimmer2 this attribute is set to an empty string and an additional
      // attribute it set for each action on a given element. In this case, the
      // attributes need to be read so that a proper set of action handlers can
      // be coalesced.
      if (actionId === '') {
        actions = [];
        for (let attr of target.attributes) {
          let attrName = attr.name;
          if (attrName.indexOf('data-ember-action-') === 0) {
            let action = ActionManager.registeredActions[attr.value];
            actions.push(action);
          }
        }
      } else if (actionId) {
        // FIXME: This branch is never called in tests. Improve tests or remove
        let actionState = ActionManager.registeredActions[actionId];
        if (actionState) {
          actions = [actionState];
        }
      }

      // We have to check for actions here since in some cases, jQuery will trigger
      // an event on `removeChild` (i.e. focusout) after we've already torn down the
      // action handlers for the view.
      if (!actions) {
        // FIXME: This branch is never called in tests. Improve tests or remove
        return;
      }
      let result = true;
      for (let index = 0; index < actions.length; index++) {
        let action = actions[index];
        if (action && action.eventName === eventName) {
          // return false if any of the action handlers returns false
          result = action.handler(event) && result;
        }
      }
      return result;
    };
    let handleEvent = this._eventHandlers[event] = event => {
      let target = event.target;
      do {
        if (getElementView(target)) {
          if (viewHandler(target, event) === false) {
            event.preventDefault();
            event.stopPropagation();
            break;
          } else if (event.cancelBubble === true) {
            break;
          }
        } else if (typeof target.hasAttribute === 'function' && target.hasAttribute('data-ember-action')) {
          if (actionHandler(target, event) === false) {
            break;
          }
        }
        target = target.parentNode;
      } while (target instanceof Element);
    };
    rootElement.addEventListener(event, handleEvent);
    this.lazyEvents.delete(event);
  }
  destroy() {
    if (this._didSetup === false) {
      return;
    }
    let rootElement = this._sanitizedRootElement;
    if (!rootElement) {
      return;
    }
    for (let event in this._eventHandlers) {
      rootElement.removeEventListener(event, this._eventHandlers[event]);
    }
    rootElement.classList.remove(ROOT_ELEMENT_CLASS);
    return this._super(...arguments);
  }
  toString() {
    return '(EventDispatcher)';
  }
}

const ComponentLookup = EmberObject.extend({
  componentFor(name, owner) {
    let fullName = `component:${name}`;
    return owner.factoryFor(fullName);
  },
  layoutFor(name, owner, options) {
    let templateFullName = `template:components/${name}`;
    return owner.lookup(templateFullName, options);
  }
});

/**
@module @ember/object/evented
*/

/**
  This mixin allows for Ember objects to subscribe to and emit events.

  ```app/utils/person.js
  import EmberObject from '@ember/object';
  import Evented from '@ember/object/evented';

  export default EmberObject.extend(Evented, {
    greet() {
      // ...
      this.trigger('greet');
    }
  });
  ```

  ```javascript
  var person = Person.create();

  person.on('greet', function() {
    console.log('Our person has greeted');
  });

  person.greet();

  // outputs: 'Our person has greeted'
  ```

  You can also chain multiple event subscriptions:

  ```javascript
  person.on('greet', function() {
    console.log('Our person has greeted');
  }).one('greet', function() {
    console.log('Offer one-time special');
  }).off('event', this, forgetThis);
  ```

  @class Evented
  @public
 */

const Evented = Mixin.create({
  on(name, target, method) {
    addListener(this, name, target, method);
    return this;
  },
  one(name, target, method) {
    addListener(this, name, target, method, true);
    return this;
  },
  trigger(name, ...args) {
    sendEvent(this, name, args);
  },
  off(name, target, method) {
    removeListener(this, name, target, method);
    return this;
  },
  has(name) {
    return hasListeners(this, name);
  }
});

function getCachedValueFor(obj, key) {
  let meta = peekMeta(obj);
  if (meta) {
    return meta.valueFor(key);
  } else {
    return undefined;
  }
}

let FrameworkObject = class FrameworkObject extends EmberObject {};

/* eslint no-console:off */
/* global console */

/**
@module @ember/instrumentation
@private
*/

/**
  The purpose of the Ember Instrumentation module is
  to provide efficient, general-purpose instrumentation
  for Ember.

  Subscribe to a listener by using `subscribe`:

  ```javascript
  import { subscribe } from '@ember/instrumentation';

  subscribe("render", {
    before(name, timestamp, payload) {

    },

    after(name, timestamp, payload) {

    }
  });
  ```

  If you return a value from the `before` callback, that same
  value will be passed as a fourth parameter to the `after`
  callback.

  Instrument a block of code by using `instrument`:

  ```javascript
  import { instrument } from '@ember/instrumentation';

  instrument("render.handlebars", payload, function() {
    // rendering logic
  }, binding);
  ```

  Event names passed to `instrument` are namespaced
  by periods, from more general to more specific. Subscribers
  can listen for events by whatever level of granularity they
  are interested in.

  In the above example, the event is `render.handlebars`,
  and the subscriber listened for all events beginning with
  `render`. It would receive callbacks for events named
  `render`, `render.handlebars`, `render.container`, or
  even `render.handlebars.layout`.

  @class Instrumentation
  @static
  @private
*/
let subscribers = [];
let cache = {};
function populateListeners(name) {
  let listeners = [];
  for (let subscriber of subscribers) {
    if (subscriber.regex.test(name)) {
      listeners.push(subscriber.object);
    }
  }
  cache[name] = listeners;
  return listeners;
}
const time = (() => {
  let perf = 'undefined' !== typeof window ? window.performance || {} : {};
  let fn = perf.now || perf.mozNow || perf.webkitNow || perf.msNow || perf.oNow;
  return fn ? fn.bind(perf) : Date.now;
})();
function isCallback$1(value) {
  return typeof value === 'function';
}

/**
  Notifies event's subscribers, calls `before` and `after` hooks.

  @method instrument
  @for @ember/instrumentation
  @static
  @param {String} [name] Namespaced event name.
  @param {Object} payload
  @param {Function} callback Function that you're instrumenting.
  @param {Object} binding Context that instrument function is called with.
  @private
*/

function instrument(name, p1, p2, p3) {
  let _payload;
  let callback;
  let binding;
  if (arguments.length <= 3 && isCallback$1(p1)) {
    callback = p1;
    binding = p2;
  } else {
    _payload = p1;
    callback = p2;
    binding = p3;
  }

  // fast path
  if (subscribers.length === 0) {
    return callback.call(binding);
  }

  // avoid allocating the payload in fast path
  let payload = _payload || {};
  let finalizer = _instrumentStart(name, () => payload);
  if (finalizer === NOOP$2) {
    return callback.call(binding);
  } else {
    return withFinalizer(callback, finalizer, payload, binding);
  }
}
function flaggedInstrument(_name, _payload, callback) {
  return callback();
}
function withFinalizer(callback, finalizer, payload, binding) {
  try {
    return callback.call(binding);
  } catch (e) {
    payload.exception = e;
    throw e;
  } finally {
    finalizer();
  }
}
function NOOP$2() {}

// private for now

function _instrumentStart(name, payloadFunc, payloadArg) {
  if (subscribers.length === 0) {
    return NOOP$2;
  }
  let listeners = cache[name];
  if (!listeners) {
    listeners = populateListeners(name);
  }
  if (listeners.length === 0) {
    return NOOP$2;
  }
  let payload = payloadFunc(payloadArg);
  let STRUCTURED_PROFILE = ENV.STRUCTURED_PROFILE;
  let timeName;
  if (STRUCTURED_PROFILE) {
    timeName = `${name}: ${payload.object}`;
    console.time(timeName);
  }
  let beforeValues = [];
  let timestamp = time();
  for (let listener of listeners) {
    beforeValues.push(listener.before(name, timestamp, payload));
  }
  const constListeners = listeners;
  return function _instrumentEnd() {
    let timestamp = time();
    for (let i = 0; i < constListeners.length; i++) {
      let listener = constListeners[i];
      if (typeof listener.after === 'function') {
        listener.after(name, timestamp, payload, beforeValues[i]);
      }
    }
    if (STRUCTURED_PROFILE) {
      console.timeEnd(timeName);
    }
  };
}

/**
  Subscribes to a particular event or instrumented block of code.

  @method subscribe
  @for @ember/instrumentation
  @static

  @param {String} [pattern] Namespaced event name.
  @param {Object} [object] Before and After hooks.

  @return {Subscriber}
  @private
*/
function subscribe(pattern, object) {
  let paths = pattern.split('.');
  let regexes = [];
  for (let path of paths) {
    if (path === '*') {
      regexes.push('[^\\.]*');
    } else {
      regexes.push(path);
    }
  }
  let regex = regexes.join('\\.');
  regex = `${regex}(\\..*)?`;
  let subscriber = {
    pattern,
    regex: new RegExp(`^${regex}$`),
    object
  };
  subscribers.push(subscriber);
  cache = {};
  return subscriber;
}

/**
  Unsubscribes from a particular event or instrumented block of code.

  @method unsubscribe
  @for @ember/instrumentation
  @static

  @param {Object} [subscriber]
  @private
*/
function unsubscribe(subscriber) {
  let index = 0;
  for (let i = 0; i < subscribers.length; i++) {
    if (subscribers[i] === subscriber) {
      index = i;
    }
  }
  subscribers.splice(index, 1);
  cache = {};
}

/**
  Resets `Instrumentation` by flushing list of subscribers.

  @method reset
  @for @ember/instrumentation
  @static
  @private
*/
function reset() {
  subscribers.length = 0;
  cache = {};
}

const DEFAULT = Object.freeze({
  // appendChild is only legal while rendering the buffer.
  appendChild() {
    throw new Error("You can't use appendChild outside of the rendering process");
  },
  // Handle events from `Ember.EventDispatcher`
  handleEvent() {
    return true; // continue event propagation
  },
  rerender() {},
  destroy() {}
});
const PRE_RENDER = Object.freeze({
  ...DEFAULT
});
const HAS_ELEMENT = Object.freeze({
  ...DEFAULT,
  rerender(view) {
    view.renderer.rerender();
  },
  destroy(view) {
    view.renderer.remove(view);
  },
  // Handle events from `Ember.EventDispatcher`
  handleEvent(view, eventName, event) {
    if (view.has(eventName)) {
      // Handler should be able to re-dispatch events, so we don't
      // preventDefault or stopPropagation.
      return flaggedInstrument(`interaction.${eventName}`, {}, () => {
        return join(view, view.trigger, eventName, event);
      });
    } else {
      return true; // continue event propagation
    }
  }
});
const IN_DOM = Object.freeze({
  ...HAS_ELEMENT,
  enter(view) {
    // Register the view for event handling. This hash is used by
    // Ember.EventDispatcher to dispatch incoming events.
    view.renderer.register(view);
  }
});
const DESTROYING = Object.freeze({
  ...DEFAULT,
  appendChild() {
    throw new Error("You can't call appendChild on a view being destroyed");
  },
  rerender() {
    throw new Error("You can't call rerender on a view being destroyed");
  }
});

/*
  Describe how the specified actions should behave in the various
  states that a view can exist in. Possible states:

  * preRender: when a view is first instantiated, and after its
    element was destroyed, it is in the preRender state
  * hasElement: the DOM representation of the view is created,
    and is ready to be inserted
  * inDOM: once a view has been inserted into the DOM it is in
    the inDOM state. A view spends the vast majority of its
    existence in this state.
  * destroyed: once a view has been destroyed (using the destroy
    method), it is in this state. No further actions can be invoked
    on a destroyed view.
*/
const states = Object.freeze({
  preRender: PRE_RENDER,
  inDOM: IN_DOM,
  hasElement: HAS_ELEMENT,
  destroying: DESTROYING
});

var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all) __defProp(target, name, {
    get: all[name],
    enumerable: true
  });
};

// src/runtime.ts
var runtime_exports = {};
__export(runtime_exports, {
  c: () => decorateClass,
  f: () => decorateFieldV1,
  g: () => decorateFieldV2$1,
  i: () => initializeDeferredDecorator$1,
  m: () => decorateMethodV1,
  n: () => decorateMethodV2,
  p: () => decoratePOJO
});
var deferred$1 = /* @__PURE__ */new WeakMap();
function deferDecorator$1(proto, prop, desc) {
  let map = deferred$1.get(proto);
  if (!map) {
    map = /* @__PURE__ */new Map();
    deferred$1.set(proto, map);
  }
  map.set(prop, desc);
}
function findDeferredDecorator$1(target, prop) {
  let cursor = target.prototype;
  while (cursor) {
    let desc = deferred$1.get(cursor)?.get(prop);
    if (desc) {
      return desc;
    }
    cursor = cursor.prototype;
  }
}
function decorateFieldV1(target, prop, decorators, initializer) {
  return decorateFieldV2$1(target.prototype, prop, decorators, initializer);
}
function decorateFieldV2$1(prototype, prop, decorators, initializer) {
  let desc = {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  };
  if (initializer) {
    desc.initializer = initializer;
  }
  for (let decorator of decorators) {
    desc = decorator(prototype, prop, desc) || desc;
  }
  if (desc.initializer === void 0) {
    Object.defineProperty(prototype, prop, desc);
  } else {
    deferDecorator$1(prototype, prop, desc);
  }
}
function decorateMethodV1({
  prototype
}, prop, decorators) {
  return decorateMethodV2(prototype, prop, decorators);
}
function decorateMethodV2(prototype, prop, decorators) {
  const origDesc = Object.getOwnPropertyDescriptor(prototype, prop);
  let desc = {
    ...origDesc
  };
  for (let decorator of decorators) {
    desc = decorator(prototype, prop, desc) || desc;
  }
  if (desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(prototype) : void 0;
    desc.initializer = void 0;
  }
  Object.defineProperty(prototype, prop, desc);
}
function initializeDeferredDecorator$1(target, prop) {
  let desc = findDeferredDecorator$1(target.constructor, prop);
  if (desc) {
    Object.defineProperty(target, prop, {
      enumerable: desc.enumerable,
      configurable: desc.configurable,
      writable: desc.writable,
      value: desc.initializer ? desc.initializer.call(target) : void 0
    });
  }
}
function decorateClass(target, decorators) {
  return decorators.reduce((accum, decorator) => decorator(accum) || accum, target);
}
function decoratePOJO(pojo, decorated) {
  for (let [type, prop, decorators] of decorated) {
    if (type === "field") {
      decoratePojoField(pojo, prop, decorators);
    } else {
      decorateMethodV2(pojo, prop, decorators);
    }
  }
  return pojo;
}
function decoratePojoField(pojo, prop, decorators) {
  let desc = {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: () => Object.getOwnPropertyDescriptor(pojo, prop)?.value
  };
  for (let decorator of decorators) {
    desc = decorator(pojo, prop, desc) || desc;
  }
  if (desc.initializer) {
    desc.value = desc.initializer.call(pojo);
    delete desc.initializer;
  }
  Object.defineProperty(pojo, prop, desc);
}

class CoreView extends FrameworkObject.extend(Evented, ActionHandler) {
  isView = true;
  _superTrigger;
  _superHas;

  /**
    If the view is currently inserted into the DOM of a parent view, this
    property will point to the parent of the view.
     @property parentView
    @type Ember.View
    @default null
    @private
  */

  init(properties) {
    super.init(properties);

    // Handle methods from Evented
    // The native class inheritance will not work for mixins. To work around this,
    // we copy the existing trigger and has methods provided by the mixin and swap in the
    // new ones from our class.
    this._superTrigger = this.trigger;
    this.trigger = this._trigger;
    this._superHas = this.has;
    this.has = this._has;
    this.parentView ??= null;
    this._state = 'preRender';
    this._currentState = this._states.preRender;
  }
  static {
    decorateFieldV2$1(this.prototype, "renderer", [inject$1('renderer', '-dom')]);
  }
  #renderer = (initializeDeferredDecorator$1(this, "renderer"), void 0);
  instrumentDetails(hash) {
    hash['object'] = this.toString();
    hash['containerKey'] = this._debugContainerKey;
    hash['view'] = this;
    return hash;
  }

  /**
    Override the default event firing from `Evented` to
    also call methods with the given name.
     @method trigger
    @param name {String}
    @private
  */
  // Changed to `trigger` on init
  _trigger(name, ...args) {
    this._superTrigger(name, ...args);
    let method = this[name];
    if (typeof method === 'function') {
      return method.apply(this, args);
    }
  }

  // Changed to `has` on init
  _has(name) {
    return typeof this[name] === 'function' || this._superHas(name);
  }
  static isViewFactory = true;
}

// Declare on the prototype to have a single shared value.
CoreView.prototype._states = states;

/**
@module ember
*/
const EMPTY_ARRAY$3 = Object.freeze([]);

/**
  @class ClassNamesSupport
  @namespace Ember
  @private
*/

const ClassNamesSupport = Mixin.create({
  concatenatedProperties: ['classNames', 'classNameBindings'],
  init() {
    this._super(...arguments);
  },
  /**
    Standard CSS class names to apply to the view's outer element. This
    property automatically inherits any class names defined by the view's
    superclasses as well.
     @property classNames
    @type Array
    @default ['ember-view']
    @public
  */
  classNames: EMPTY_ARRAY$3,
  /**
    A list of properties of the view to apply as class names. If the property
    is a string value, the value of that string will be applied as a class
    name.
     ```javascript
    // Applies the 'high' class to the view element
    import Component from '@ember/component';
    Component.extend({
      classNameBindings: ['priority'],
      priority: 'high'
    });
    ```
     If the value of the property is a Boolean, the name of that property is
    added as a dasherized class name.
     ```javascript
    // Applies the 'is-urgent' class to the view element
    import Component from '@ember/component';
    Component.extend({
      classNameBindings: ['isUrgent'],
      isUrgent: true
    });
    ```
     If you would prefer to use a custom value instead of the dasherized
    property name, you can pass a binding like this:
     ```javascript
    // Applies the 'urgent' class to the view element
    import Component from '@ember/component';
    Component.extend({
      classNameBindings: ['isUrgent:urgent'],
      isUrgent: true
    });
    ```
     If you would like to specify a class that should only be added when the
    property is false, you can declare a binding like this:
     ```javascript
    // Applies the 'disabled' class to the view element
    import Component from '@ember/component';
    Component.extend({
      classNameBindings: ['isEnabled::disabled'],
      isEnabled: false
    });
    ```
     This list of properties is inherited from the component's superclasses as well.
     @property classNameBindings
    @type Array
    @default []
    @public
  */
  classNameBindings: EMPTY_ARRAY$3
});

/**
@module ember
*/

const ChildViewsSupport = Mixin.create({
  /**
    Array of child views. You should never edit this array directly.
     @property childViews
    @type Array
    @default []
    @private
  */
  childViews: nativeDescDecorator({
    configurable: false,
    enumerable: false,
    get() {
      return getChildViews(this);
    }
  }),
  appendChild(view) {
    addChildView(this, view);
  }
});

/**
@module ember
*/
const ViewStateSupport = Mixin.create({
  _transitionTo(state) {
    let priorState = this._currentState;
    let currentState = this._currentState = this._states[state];
    this._state = state;
    if (priorState && priorState.exit) {
      priorState.exit(this);
    }
    if (currentState.enter) {
      currentState.enter(this);
    }
  }
});

function K$1() {
  return this;
}

/**
 @class ViewMixin
 @namespace Ember
 @private
*/

const ViewMixin = Mixin.create({
  /**
   A list of properties of the view to apply as attributes. If the property
   is a string value, the value of that string will be applied as the value
   for an attribute of the property's name.
    The following example creates a tag like `<div priority="high" />`.
    ```app/components/my-component.js
   import Component from '@ember/component';
    export default Component.extend({
      attributeBindings: ['priority'],
      priority: 'high'
    });
   ```
    If the value of the property is a Boolean, the attribute is treated as
   an HTML Boolean attribute. It will be present if the property is `true`
   and omitted if the property is `false`.
    The following example creates markup like `<div visible />`.
    ```app/components/my-component.js
   import Component from '@ember/component';
    export default Component.extend({
      attributeBindings: ['visible'],
      visible: true
    });
   ```
    If you would prefer to use a custom value instead of the property name,
   you can create the same markup as the last example with a binding like
   this:
    ```app/components/my-component.js
   import Component from '@ember/component';
    export default Component.extend({
      attributeBindings: ['isVisible:visible'],
      isVisible: true
    });
   ```
    This list of attributes is inherited from the component's superclasses,
   as well.
    @property attributeBindings
   @type Array
   @default []
   @public
   */
  concatenatedProperties: ['attributeBindings'],
  // ..........................................................
  // TEMPLATE SUPPORT
  //

  /**
   Return the nearest ancestor that is an instance of the provided
   class or mixin.
    @method nearestOfType
   @param {Class,Mixin} klass Subclass of Ember.View (or Ember.View itself),
   or an instance of Mixin.
   @return Ember.View
   @deprecated use `yield` and contextual components for composition instead.
   @private
   */
  nearestOfType(klass) {
    let view = this.parentView;
    let isOfType = klass instanceof Mixin ? view => klass.detect(view) : view => klass.detect(view.constructor);
    while (view) {
      if (isOfType(view)) {
        return view;
      }
      view = view.parentView;
    }
    return;
  },
  /**
   Return the nearest ancestor that has a given property.
    @method nearestWithProperty
   @param {String} property A property name
   @return Ember.View
   @deprecated use `yield` and contextual components for composition instead.
   @private
   */
  nearestWithProperty(property) {
    let view = this.parentView;
    while (view) {
      if (property in view) {
        return view;
      }
      view = view.parentView;
    }
  },
  /**
   Renders the view again. This will work regardless of whether the
   view is already in the DOM or not. If the view is in the DOM, the
   rendering process will be deferred to give bindings a chance
   to synchronize.
    If children were added during the rendering process using `appendChild`,
   `rerender` will remove them, because they will be added again
   if needed by the next `render`.
    In general, if the display of your view changes, you should modify
   the DOM element directly instead of manually calling `rerender`, which can
   be slow.
    @method rerender
   @public
   */
  rerender() {
    return this._currentState.rerender(this);
  },
  // ..........................................................
  // ELEMENT SUPPORT
  //

  /**
   Returns the current DOM element for the view.
     @property element
    @type DOMElement
    @public
  */
  element: nativeDescDecorator({
    configurable: false,
    enumerable: false,
    get() {
      return this.renderer.getElement(this);
    }
  }),
  /**
   Appends the view's element to the specified parent element.
    Note that this method just schedules the view to be appended; the DOM
   element will not be appended to the given element until all bindings have
   finished synchronizing.
    This is not typically a function that you will need to call directly when
   building your application. If you do need to use `appendTo`, be sure that
   the target element you are providing is associated with an `Application`
   and does not have an ancestor element that is associated with an Ember view.
    @method appendTo
   @param {String|DOMElement} A selector, element, HTML string
   @return {Ember.View} receiver
   @private
   */
  appendTo(selector) {
    let target;
    if (hasDOM) {
      target = typeof selector === 'string' ? document.querySelector(selector) : selector;
    } else {
      target = selector;
    }

    // SAFETY: SimpleElement is supposed to be a subset of Element so this _should_ be safe.
    // However, the types are more specific in some places which necessitates the `as`.
    this.renderer.appendTo(this, target);
    return this;
  },
  /**
   Appends the view's element to the document body. If the view does
   not have an HTML representation yet
   the element will be generated automatically.
    If your application uses the `rootElement` property, you must append
   the view within that element. Rendering views outside of the `rootElement`
   is not supported.
    Note that this method just schedules the view to be appended; the DOM
   element will not be appended to the document body until all bindings have
   finished synchronizing.
    @method append
   @return {Ember.View} receiver
   @private
   */
  append() {
    return this.appendTo(document.body);
  },
  /**
   The HTML `id` of the view's element in the DOM. You can provide this
   value yourself but it must be unique (just as in HTML):
    ```handlebars
   {{my-component elementId="a-really-cool-id"}}
   ```
    If not manually set a default value will be provided by the framework.
    Once rendered an element's `elementId` is considered immutable and you
   should never change it. If you need to compute a dynamic value for the
   `elementId`, you should do this when the component or element is being
   instantiated:
    ```app/components/my-component.js
   import Component from '@ember/component';
    export default Component.extend({
      init() {
        this._super(...arguments);
        let index = this.get('index');
        this.set('elementId', 'component-id' + index);
      }
    });
   ```
    @property elementId
   @type String
   @public
   */
  elementId: null,
  /**
   Called when a view is going to insert an element into the DOM.
    @event willInsertElement
   @public
   */
  willInsertElement: K$1,
  /**
   Called when the element of the view has been inserted into the DOM.
   Override this function to do any set up that requires an element
   in the document body.
    When a view has children, didInsertElement will be called on the
   child view(s) first and on itself afterwards.
    @event didInsertElement
   @public
   */
  didInsertElement: K$1,
  /**
   Called when the view is about to rerender, but before anything has
   been torn down. This is a good opportunity to tear down any manual
   observers you have installed based on the DOM state
    @event willClearRender
   @public
   */
  willClearRender: K$1,
  /**
   You must call `destroy` on a view to destroy the view (and all of its
   child views). This will remove the view from any parent node, then make
   sure that the DOM element managed by the view can be released by the
   memory manager.
    @method destroy
   @private
   */
  destroy() {
    this._super(...arguments);
    this._currentState.destroy(this);
  },
  /**
   Called when the element of the view is going to be destroyed. Override
   this function to do any teardown that requires an element, like removing
   event listeners.
    Please note: any property changes made during this event will have no
   effect on object observers.
    @event willDestroyElement
   @public
   */
  willDestroyElement: K$1,
  /**
   Called after the element of the view is destroyed.
    @event willDestroyElement
   @public
   */
  didDestroyElement: K$1,
  /**
   Called when the parentView property has changed.
    @event parentViewDidChange
   @private
   */
  parentViewDidChange: K$1,
  // ..........................................................
  // STANDARD RENDER PROPERTIES
  //

  /**
   Tag name for the view's outer element. The tag name is only used when an
   element is first created. If you change the `tagName` for an element, you
   must destroy and recreate the view element.
    By default, the render buffer will use a `<div>` tag for views.
    If the tagName is `''`, the view will be tagless, with no outer element.
   Component properties that depend on the presence of an outer element, such
   as `classNameBindings` and `attributeBindings`, do not work with tagless
   components. Tagless components cannot implement methods to handle events,
   and their `element` property has a `null` value.
    @property tagName
   @type String
   @default null
   @public
   */

  // We leave this null by default so we can tell the difference between
  // the default case and a user-specified tag.
  tagName: null,
  // .......................................................
  // CORE DISPLAY METHODS
  //

  /**
   Setup a view, but do not finish waking it up.
    * configure `childViews`
   * register the view with the global views hash, which is used for event
   dispatch
    @method init
   @private
   */
  init() {
    this._super(...arguments);
    if (!this.elementId && this.tagName !== '') {
      this.elementId = guidFor(this);
    }
  },
  // .......................................................
  // EVENT HANDLING
  //

  /**
   Handle events from `EventDispatcher`
    @method handleEvent
   @param eventName {String}
   @param evt {Event}
   @private
   */
  handleEvent(eventName, evt) {
    return this._currentState.handleEvent(this, eventName, evt);
  }
});

/**
 @module ember
*/
const ActionSupport = Mixin.create({
  send(actionName, ...args) {
    let action = this.actions && this.actions[actionName];
    if (action) {
      let shouldBubble = action.apply(this, args) === true;
      if (!shouldBubble) {
        return;
      }
    }
    let target = get$1(this, 'target');
    if (target) {
      target.send(...arguments);
    }
  }
});

function arrayContentWillChange(array, startIdx, removeAmt, addAmt) {
  // if no args are passed assume everything changes
  if (startIdx === undefined) {
    startIdx = 0;
    removeAmt = addAmt = -1;
  } else {
    if (removeAmt === undefined) {
      removeAmt = -1;
    }
    if (addAmt === undefined) {
      addAmt = -1;
    }
  }
  sendEvent(array, '@array:before', [array, startIdx, removeAmt, addAmt]);
  return array;
}
function arrayContentDidChange(array, startIdx, removeAmt, addAmt, notify = true) {
  // if no args are passed assume everything changes
  if (startIdx === undefined) {
    startIdx = 0;
    removeAmt = addAmt = -1;
  } else {
    if (removeAmt === undefined) {
      removeAmt = -1;
    }
    if (addAmt === undefined) {
      addAmt = -1;
    }
  }
  let meta = peekMeta(array);
  if (notify) {
    if (addAmt < 0 || removeAmt < 0 || addAmt - removeAmt !== 0) {
      notifyPropertyChange(array, 'length', meta);
    }
    notifyPropertyChange(array, '[]', meta);
  }
  sendEvent(array, '@array:change', [array, startIdx, removeAmt, addAmt]);
  if (meta !== null) {
    let length = array.length;
    let addedAmount = addAmt === -1 ? 0 : addAmt;
    let removedAmount = removeAmt === -1 ? 0 : removeAmt;
    let delta = addedAmount - removedAmount;
    let previousLength = length - delta;
    let normalStartIdx = startIdx < 0 ? previousLength + startIdx : startIdx;
    if (meta.revisionFor('firstObject') !== undefined && normalStartIdx === 0) {
      notifyPropertyChange(array, 'firstObject', meta);
    }
    if (meta.revisionFor('lastObject') !== undefined) {
      let previousLastIndex = previousLength - 1;
      let lastAffectedIndex = normalStartIdx + removedAmount;
      if (previousLastIndex < lastAffectedIndex) {
        notifyPropertyChange(array, 'lastObject', meta);
      }
    }
  }
  return array;
}
const EMPTY_ARRAY$2 = Object.freeze([]);

// Ideally, we'd use MutableArray.detect but for unknown reasons this causes
// the node tests to fail strangely.
function isMutableArray(obj) {
  return obj != null && typeof obj.replace === 'function';
}
function replace(array, start, deleteCount, items = EMPTY_ARRAY$2) {
  if (isMutableArray(array)) {
    array.replace(start, deleteCount, items);
  } else {
    replaceInNativeArray(array, start, deleteCount, items);
  }
}
const CHUNK_SIZE = 60000;

// To avoid overflowing the stack, we splice up to CHUNK_SIZE items at a time.
// See https://code.google.com/p/chromium/issues/detail?id=56588 for more details.
function replaceInNativeArray(array, start, deleteCount, items) {
  arrayContentWillChange(array, start, deleteCount, items.length);
  if (items.length <= CHUNK_SIZE) {
    array.splice(start, deleteCount, ...items);
  } else {
    array.splice(start, deleteCount);
    for (let i = 0; i < items.length; i += CHUNK_SIZE) {
      let chunk = items.slice(i, i + CHUNK_SIZE);
      array.splice(start + i, 0, ...chunk);
    }
  }
  arrayContentDidChange(array, start, deleteCount, items.length);
}
function arrayObserversHelper(obj, target, opts, operation) {
  let {
    willChange,
    didChange
  } = opts;
  operation(obj, '@array:before', target, willChange);
  operation(obj, '@array:change', target, didChange);

  /*
   * Array proxies have a `_revalidate` method which must be called to set
   * up their internal array observation systems.
   */
  obj._revalidate?.();
  return obj;
}
function addArrayObserver(array, target, opts) {
  return arrayObserversHelper(array, target, opts, addListener);
}
function removeArrayObserver(array, target, opts) {
  return arrayObserversHelper(array, target, opts, removeListener);
}

// ........................................
// TYPING & ARRAY MESSAGING
//
const TYPE_MAP = {
  '[object Boolean]': 'boolean',
  '[object Number]': 'number',
  '[object String]': 'string',
  '[object Function]': 'function',
  '[object AsyncFunction]': 'function',
  '[object Array]': 'array',
  '[object Date]': 'date',
  '[object RegExp]': 'regexp',
  '[object Object]': 'object',
  '[object FileList]': 'filelist'
};
const {
  toString
} = Object.prototype;

/**
 @module @ember/utils
*/
/**
  Returns a consistent type for the passed object.

  Use this instead of the built-in `typeof` to get the type of an item.
  It will return the same result across all browsers and includes a bit
  more detail. Here is what will be returned:

      | Return Value  | Meaning                                              |
      |---------------|------------------------------------------------------|
      | 'string'      | String primitive or String object.                   |
      | 'number'      | Number primitive or Number object.                   |
      | 'boolean'     | Boolean primitive or Boolean object.                 |
      | 'null'        | Null value                                           |
      | 'undefined'   | Undefined value                                      |
      | 'function'    | A function                                           |
      | 'array'       | An instance of Array                                 |
      | 'regexp'      | An instance of RegExp                                |
      | 'date'        | An instance of Date                                  |
      | 'filelist'    | An instance of FileList                              |
      | 'class'       | An Ember class (created using EmberObject.extend())  |
      | 'instance'    | An Ember object instance                             |
      | 'error'       | An instance of the Error object                      |
      | 'object'      | A JavaScript object not inheriting from EmberObject  |

  Examples:

  ```javascript
  import { A } from '@ember/array';
  import { typeOf } from '@ember/utils';
  import EmberObject from '@ember/object';

  typeOf();                       // 'undefined'
  typeOf(null);                   // 'null'
  typeOf(undefined);              // 'undefined'
  typeOf('michael');              // 'string'
  typeOf(new String('michael'));  // 'string'
  typeOf(101);                    // 'number'
  typeOf(new Number(101));        // 'number'
  typeOf(true);                   // 'boolean'
  typeOf(new Boolean(true));      // 'boolean'
  typeOf(A);                      // 'function'
  typeOf(A());                    // 'array'
  typeOf([1, 2, 90]);             // 'array'
  typeOf(/abc/);                  // 'regexp'
  typeOf(new Date());             // 'date'
  typeOf(event.target.files);     // 'filelist'
  typeOf(EmberObject.extend());   // 'class'
  typeOf(EmberObject.create());   // 'instance'
  typeOf(new Error('teamocil'));  // 'error'

  // 'normal' JavaScript object
  typeOf({ a: 'b' });             // 'object'
  ```

  @method typeOf
  @for @ember/utils
  @param item the item to check
  @return {String} the type
  @public
  @static
*/
function typeOf(item) {
  if (item === null) {
    return 'null';
  }
  if (item === undefined) {
    return 'undefined';
  }
  let ret = TYPE_MAP[toString.call(item)] || 'object';
  if (ret === 'function') {
    if (CoreObject.detect(item)) {
      ret = 'class';
    }
  } else if (ret === 'object') {
    if (item instanceof Error) {
      ret = 'error';
    } else if (item instanceof CoreObject) {
      ret = 'instance';
    } else if (item instanceof Date) {
      ret = 'date';
    }
  }
  return ret;
}

const TYPE_ORDER = {
  undefined: 0,
  null: 1,
  boolean: 2,
  number: 3,
  string: 4,
  array: 5,
  object: 6,
  instance: 7,
  function: 8,
  class: 9,
  date: 10,
  regexp: 11,
  filelist: 12,
  error: 13
};
//
// the spaceship operator
//
//                      `. ___
//                     __,' __`.                _..----....____
//         __...--.'``;.   ,.   ;``--..__     .'    ,-._    _.-'
//   _..-''-------'   `'   `'   `'     O ``-''._   (,;') _,'
// ,'________________                          \`-._`-','
//  `._              ```````````------...___   '-.._'-:
//     ```--.._      ,.                     ````--...__\-.
//             `.--. `-` "INFINITY IS LESS     ____    |  |`
//               `. `.   THAN BEYOND"        ,'`````.  ;  ;`
//                 `._`.        __________   `.      \'__/`
//                    `-:._____/______/___/____`.     \  `
//                                |       `._    `.    \
//                                `._________`-.   `.   `.___
//                                              SSt  `------'`
function spaceship(a, b) {
  // SAFETY: `Math.sign` always returns `-1` for negative, `0` for zero, and `1`
  // for positive numbers. (The extra precision is useful for the way we use
  // this in the context of `compare`.)
  return Math.sign(a - b);
}

/**
 @module @ember/utils
*/

/**
 Compares two javascript values and returns:

  - -1 if the first is smaller than the second,
  - 0 if both are equal,
  - 1 if the first is greater than the second.

  ```javascript
  import { compare } from '@ember/utils';

  compare('hello', 'hello');  // 0
  compare('abc', 'dfg');      // -1
  compare(2, 1);              // 1
  ```

 If the types of the two objects are different precedence occurs in the
 following order, with types earlier in the list considered `<` types
 later in the list:

  - undefined
  - null
  - boolean
  - number
  - string
  - array
  - object
  - instance
  - function
  - class
  - date

  ```javascript
  import { compare } from '@ember/utils';

  compare('hello', 50);       // 1
  compare(50, 'hello');       // -1
  ```

 @method compare
 @for @ember/utils
 @static
 @param {Object} v First value to compare
 @param {Object} w Second value to compare
 @return {Number} -1 if v < w, 0 if v = w and 1 if v > w.
 @public
*/
function compare(v, w) {
  if (v === w) {
    return 0;
  }
  let type1 = typeOf(v);
  let type2 = typeOf(w);
  if (type1 === 'instance' && isComparable(v) && v.constructor.compare) {
    return v.constructor.compare(v, w);
  }
  if (type2 === 'instance' && isComparable(w) && w.constructor.compare) {
    // SAFETY: Multiplying by a negative just changes the sign
    return w.constructor.compare(w, v) * -1;
  }
  let res = spaceship(TYPE_ORDER[type1], TYPE_ORDER[type2]);
  if (res !== 0) {
    return res;
  }

  // types are equal - so we have to check values now
  switch (type1) {
    case 'boolean':
      return spaceship(Number(v), Number(w));
    case 'number':
      return spaceship(v, w);
    case 'string':
      return spaceship(v.localeCompare(w), 0);
    case 'array':
      {
        let vLen = v.length;
        let wLen = w.length;
        let len = Math.min(vLen, wLen);
        for (let i = 0; i < len; i++) {
          let r = compare(v[i], w[i]);
          if (r !== 0) {
            return r;
          }
        }

        // all elements are equal now
        // shorter array should be ordered first
        return spaceship(vLen, wLen);
      }
    case 'instance':
      if (isComparable(v) && v.compare) {
        return v.compare(v, w);
      }
      return 0;
    case 'date':
      return spaceship(v.getTime(), w.getTime());
    default:
      return 0;
  }
}
function isComparable(value) {
  return Comparable.detect(value);
}

/**
@module @ember/array
*/

const EMPTY_ARRAY$1 = Object.freeze([]);
const identityFunction = item => item;
function uniqBy(array, keyOrFunc = identityFunction) {
  let ret = A();
  let seen = new Set();
  let getter = typeof keyOrFunc === 'function' ? keyOrFunc : item => get$1(item, keyOrFunc);
  array.forEach(item => {
    let val = getter(item);
    if (!seen.has(val)) {
      seen.add(val);
      ret.push(item);
    }
  });
  return ret;
}
function iter(...args) {
  let valueProvided = args.length === 2;
  let [key, value] = args;
  return valueProvided ? item => value === get$1(item, key) : item => Boolean(get$1(item, key));
}
function findIndex(array, predicate, startAt) {
  let len = array.length;
  for (let index = startAt; index < len; index++) {
    // SAFETY: Because we're checking the index this value should always be set.
    let item = objectAt(array, index);
    if (predicate(item, index, array)) {
      return index;
    }
  }
  return -1;
}
function find(array, callback, target = null) {
  let predicate = callback.bind(target);
  let index = findIndex(array, predicate, 0);
  return index === -1 ? undefined : objectAt(array, index);
}
function any(array, callback, target = null) {
  let predicate = callback.bind(target);
  return findIndex(array, predicate, 0) !== -1;
}
function every(array, callback, target = null) {
  let cb = callback.bind(target);
  let predicate = (item, index, array) => !cb(item, index, array);
  return findIndex(array, predicate, 0) === -1;
}
function indexOf(array, val, startAt = 0, withNaNCheck) {
  let len = array.length;
  if (startAt < 0) {
    startAt += len;
  }

  // SameValueZero comparison (NaN !== NaN)
  let predicate = withNaNCheck && val !== val ? item => item !== item : item => item === val;
  return findIndex(array, predicate, startAt);
}
function removeAt(array, index, len) {
  replace(array, index, len ?? 1, EMPTY_ARRAY$1);
  return array;
}
function insertAt(array, index, item) {
  replace(array, index, 0, [item]);
  return item;
}

/**
  Returns true if the passed object is an array or Array-like.

  Objects are considered Array-like if any of the following are true:

    - the object is a native Array
    - the object has an objectAt property
    - the object is an Object, and has a length property

  Unlike `typeOf` this method returns true even if the passed object is
  not formally an array but appears to be array-like (i.e. implements `Array`)

  ```javascript
  import { isArray } from '@ember/array';
  import ArrayProxy from '@ember/array/proxy';

  isArray();                                      // false
  isArray([]);                                    // true
  isArray(ArrayProxy.create({ content: [] }));    // true
  ```

  @method isArray
  @static
  @for @ember/array
  @param {Object} obj The object to test
  @return {Boolean} true if the passed object is an array or Array-like
  @public
*/
function isArray$2(obj) {

  // SAFETY: Property read checks are safe if it's an object
  if (!obj || obj.setInterval) {
    return false;
  }
  if (Array.isArray(obj) || EmberArray.detect(obj)) {
    return true;
  }
  let type = typeOf(obj);
  if ('array' === type) {
    return true;
  }

  // SAFETY: Property read checks are safe if it's an object
  let length = obj.length;
  if (typeof length === 'number' && length === length && 'object' === type) {
    return true;
  }
  return false;
}

/*
  This allows us to define computed properties that are not enumerable.
  The primary reason this is important is that when `NativeArray` is
  applied to `Array.prototype` we need to ensure that we do not add _any_
  new enumerable properties.
*/
function nonEnumerableComputed(callback) {
  let property = computed(callback);
  property.enumerable = false;
  return property;
}
function mapBy(key) {
  return this.map(next => get$1(next, key));
}

// ..........................................................
// ARRAY
//
/**
  This mixin implements Observer-friendly Array-like behavior. It is not a
  concrete implementation, but it can be used up by other classes that want
  to appear like arrays.

  For example, ArrayProxy is a concrete class that can be instantiated to
  implement array-like behavior. This class uses the Array Mixin by way of
  the MutableArray mixin, which allows observable changes to be made to the
  underlying array.

  This mixin defines methods specifically for collections that provide
  index-ordered access to their contents. When you are designing code that
  needs to accept any kind of Array-like object, you should use these methods
  instead of Array primitives because these will properly notify observers of
  changes to the array.

  Although these methods are efficient, they do add a layer of indirection to
  your application so it is a good idea to use them only when you need the
  flexibility of using both true JavaScript arrays and "virtual" arrays such
  as controllers and collections.

  You can use the methods defined in this module to access and modify array
  contents in an observable-friendly way. You can also be notified whenever
  the membership of an array changes by using `.observes('myArray.[]')`.

  To support `EmberArray` in your own class, you must override two
  primitives to use it: `length()` and `objectAt()`.

  @class EmberArray
  @uses Enumerable
  @since Ember 0.9.0
  @public
*/

const EmberArray = Mixin.create(Enumerable, {
  init() {
    this._super(...arguments);
    setEmberArray(this);
  },
  objectsAt(indexes) {
    return indexes.map(idx => objectAt(this, idx));
  },
  '[]': nonEnumerableComputed({
    get() {
      return this;
    },
    set(_key, value) {
      this.replace(0, this.length, value);
      return this;
    }
  }),
  firstObject: nonEnumerableComputed(function () {
    return objectAt(this, 0);
  }).readOnly(),
  lastObject: nonEnumerableComputed(function () {
    return objectAt(this, this.length - 1);
  }).readOnly(),
  // Add any extra methods to EmberArray that are native to the built-in Array.
  slice(beginIndex = 0, endIndex) {
    let ret = A();
    let length = this.length;
    if (beginIndex < 0) {
      beginIndex = length + beginIndex;
    }
    let validatedEndIndex;
    if (endIndex === undefined || endIndex > length) {
      validatedEndIndex = length;
    } else if (endIndex < 0) {
      validatedEndIndex = length + endIndex;
    } else {
      validatedEndIndex = endIndex;
    }
    while (beginIndex < validatedEndIndex) {
      ret[ret.length] = objectAt(this, beginIndex++);
    }
    return ret;
  },
  indexOf(object, startAt) {
    return indexOf(this, object, startAt, false);
  },
  lastIndexOf(object, startAt) {
    let len = this.length;
    if (startAt === undefined || startAt >= len) {
      startAt = len - 1;
    }
    if (startAt < 0) {
      startAt += len;
    }
    for (let idx = startAt; idx >= 0; idx--) {
      if (objectAt(this, idx) === object) {
        return idx;
      }
    }
    return -1;
  },
  forEach(callback, target = null) {
    let length = this.length;
    for (let index = 0; index < length; index++) {
      let item = this.objectAt(index);
      callback.call(target, item, index, this);
    }
    return this;
  },
  getEach: mapBy,
  setEach(key, value) {
    return this.forEach(item => set(item, key, value));
  },
  map(callback, target = null) {
    let ret = A();
    this.forEach((x, idx, i) => ret[idx] = callback.call(target, x, idx, i));
    return ret;
  },
  mapBy,
  filter(callback, target = null) {
    let ret = A();
    this.forEach((x, idx, i) => {
      if (callback.call(target, x, idx, i)) {
        ret.push(x);
      }
    });
    return ret;
  },
  reject(callback, target = null) {
    return this.filter(function () {
      // @ts-expect-error TS doesn't like us using arguments like this
      return !callback.apply(target, arguments);
    });
  },
  filterBy() {
    // @ts-expect-error TS doesn't like the ...arguments spread here.
    return this.filter(iter(...arguments));
  },
  rejectBy() {
    // @ts-expect-error TS doesn't like the ...arguments spread here.
    return this.reject(iter(...arguments));
  },
  find(callback, target = null) {
    return find(this, callback, target);
  },
  findBy() {
    // @ts-expect-error TS doesn't like the ...arguments spread here.
    let callback = iter(...arguments);
    return find(this, callback);
  },
  every(callback, target = null) {
    return every(this, callback, target);
  },
  isEvery() {
    // @ts-expect-error TS doesn't like the ...arguments spread here.
    let callback = iter(...arguments);
    return every(this, callback);
  },
  any(callback, target = null) {
    return any(this, callback, target);
  },
  isAny() {
    // @ts-expect-error TS doesn't like us using arguments like this
    let callback = iter(...arguments);
    return any(this, callback);
  },
  // FIXME: When called without initialValue, behavior does not match native behavior
  reduce(callback, initialValue) {
    let ret = initialValue;
    this.forEach(function (item, i) {
      ret = callback(ret, item, i, this);
    }, this);
    return ret;
  },
  invoke(methodName, ...args) {
    let ret = A();

    // SAFETY: This is not entirely safe and the code will not work with Ember proxies
    this.forEach(item => ret.push(item[methodName]?.(...args)));
    return ret;
  },
  toArray() {
    return this.map(item => item);
  },
  compact() {
    return this.filter(value => value != null);
  },
  includes(object, startAt) {
    return indexOf(this, object, startAt, true) !== -1;
  },
  sortBy() {
    let sortKeys = arguments;
    return this.toArray().sort((a, b) => {
      for (let i = 0; i < sortKeys.length; i++) {
        let key = sortKeys[i];
        let propA = get$1(a, key);
        let propB = get$1(b, key);
        // return 1 or -1 else continue to the next sortKey
        let compareValue = compare(propA, propB);
        if (compareValue) {
          return compareValue;
        }
      }
      return 0;
    });
  },
  uniq() {
    return uniqBy(this);
  },
  uniqBy(key) {
    return uniqBy(this, key);
  },
  without(value) {
    if (!this.includes(value)) {
      return this; // nothing to do
    }

    // SameValueZero comparison (NaN !== NaN)
    let predicate = value === value ? item => item !== value : item => item === item;
    return this.filter(predicate);
  }
});

/**
  This mixin defines the API for modifying array-like objects. These methods
  can be applied only to a collection that keeps its items in an ordered set.
  It builds upon the Array mixin and adds methods to modify the array.
  One concrete implementations of this class include ArrayProxy.

  It is important to use the methods in this class to modify arrays so that
  changes are observable. This allows the binding system in Ember to function
  correctly.


  Note that an Array can change even if it does not implement this mixin.
  For example, one might implement a SparseArray that cannot be directly
  modified, but if its underlying enumerable changes, it will change also.

  @class MutableArray
  @uses EmberArray
  @uses MutableEnumerable
  @public
*/

const MutableArray = Mixin.create(EmberArray, MutableEnumerable, {
  clear() {
    let len = this.length;
    if (len === 0) {
      return this;
    }
    this.replace(0, len, EMPTY_ARRAY$1);
    return this;
  },
  insertAt(idx, object) {
    insertAt(this, idx, object);
    return this;
  },
  removeAt(start, len) {
    return removeAt(this, start, len);
  },
  pushObject(obj) {
    return insertAt(this, this.length, obj);
  },
  pushObjects(objects) {
    this.replace(this.length, 0, objects);
    return this;
  },
  popObject() {
    let len = this.length;
    if (len === 0) {
      return null;
    }
    let ret = objectAt(this, len - 1);
    this.removeAt(len - 1, 1);
    return ret;
  },
  shiftObject() {
    if (this.length === 0) {
      return null;
    }
    let ret = objectAt(this, 0);
    this.removeAt(0);
    return ret;
  },
  unshiftObject(obj) {
    return insertAt(this, 0, obj);
  },
  unshiftObjects(objects) {
    this.replace(0, 0, objects);
    return this;
  },
  reverseObjects() {
    let len = this.length;
    if (len === 0) {
      return this;
    }
    let objects = this.toArray().reverse();
    this.replace(0, len, objects);
    return this;
  },
  setObjects(objects) {
    if (objects.length === 0) {
      return this.clear();
    }
    let len = this.length;
    this.replace(0, len, objects);
    return this;
  },
  removeObject(obj) {
    let loc = this.length || 0;
    while (--loc >= 0) {
      let curObject = objectAt(this, loc);
      if (curObject === obj) {
        this.removeAt(loc);
      }
    }
    return this;
  },
  removeObjects(objects) {
    beginPropertyChanges();
    for (let i = objects.length - 1; i >= 0; i--) {
      // SAFETY: Due to the loop structure we know this will always exist.
      this.removeObject(objects[i]);
    }
    endPropertyChanges();
    return this;
  },
  addObject(obj) {
    let included = this.includes(obj);
    if (!included) {
      this.pushObject(obj);
    }
    return this;
  },
  addObjects(objects) {
    beginPropertyChanges();
    objects.forEach(obj => this.addObject(obj));
    endPropertyChanges();
    return this;
  }
});

/**
  Creates an `Ember.NativeArray` from an Array-like object.
  Does not modify the original object's contents.

  Example

  ```app/components/my-component.js
  import Component from '@ember/component';
  import { A } from '@ember/array';

  export default Component.extend({
    tagName: 'ul',
    classNames: ['pagination'],

    init() {
      this._super(...arguments);

      if (!this.get('content')) {
        this.set('content', A());
        this.set('otherContent', A([1,2,3]));
      }
    }
  });
  ```

  @method A
  @static
  @for @ember/array
  @return {Ember.NativeArray}
  @public
*/

// Add Ember.Array to Array.prototype. Remove methods with native
// implementations and supply some more optimized versions of generic methods
// because they are so common.
/**
@module ember
*/

/**
 * The final definition of NativeArray removes all native methods. This is the list of removed methods
 * when run in Chrome 106.
 */

/**
 * These additional items must be redefined since `Omit` causes methods that return `this` to return the
 * type at the time of the Omit.
 */

// This is the same as MutableArray, but removes the actual native methods that exist on Array.prototype.

/**
  The NativeArray mixin contains the properties needed to make the native
  Array support MutableArray and all of its dependent APIs.

  @class Ember.NativeArray
  @uses MutableArray
  @uses Observable
  @public
*/

let NativeArray = Mixin.create(MutableArray, Observable, {
  objectAt(idx) {
    return this[idx];
  },
  // primitive for array support.
  replace(start, deleteCount, items = EMPTY_ARRAY$1) {
    replaceInNativeArray(this, start, deleteCount, items);
    return this;
  }
});

// Remove any methods implemented natively so we don't override them
const ignore = ['length'];
NativeArray.keys().forEach(methodName => {
  // SAFETY: It's safe to read unknown properties from an object
  if (Array.prototype[methodName]) {
    ignore.push(methodName);
  }
});
NativeArray = NativeArray.without(...ignore);
let A;
A = function (arr) {
  if (isEmberArray(arr)) {
    // SAFETY: If it's a true native array and it is also an EmberArray then it should be an Ember NativeArray
    return arr;
  } else {
    // SAFETY: This will return an NativeArray but TS can't infer that.
    return NativeArray.apply(arr ?? []);
  }
};

const MODEL = symbol('MODEL');

/**
@module @ember/controller
*/

/**
  @class ControllerMixin
  @namespace Ember
  @uses Ember.ActionHandler
  @private
*/

const ControllerMixin = Mixin.create(ActionHandler, {
  /* ducktype as a controller */
  isController: true,
  concatenatedProperties: ['queryParams'],
  target: null,
  store: null,
  init() {
    this._super(...arguments);
    let owner = getOwner$2(this);
    if (owner) {
      this.namespace = owner.lookup('application:main');
      this.target = owner.lookup('router:main');
    }
  },
  model: computed({
    get() {
      return this[MODEL];
    },
    set(_key, value) {
      return this[MODEL] = value;
    }
  }),
  queryParams: null,
  /**
   This property is updated to various different callback functions depending on
   the current "state" of the backing route. It is used by
   `Controller.prototype._qpChanged`.
    The methods backing each state can be found in the `Route.prototype._qp` computed
   property return value (the `.states` property). The current values are listed here for
   the sanity of future travelers:
    * `inactive` - This state is used when this controller instance is not part of the active
     route hierarchy. Set in `Route.prototype._reset` (a `router.js` microlib hook) and
     `Route.prototype.actions.finalizeQueryParamChange`.
   * `active` - This state is used when this controller instance is part of the active
     route hierarchy. Set in `Route.prototype.actions.finalizeQueryParamChange`.
   * `allowOverrides` - This state is used in `Route.prototype.setup` (`route.js` microlib hook).
     @method _qpDelegate
    @private
  */
  _qpDelegate: null,
  // set by route

  /**
   During `Route#setup` observers are created to invoke this method
   when any of the query params declared in `Controller#queryParams` property
   are changed.
    When invoked this method uses the currently active query param update delegate
   (see `Controller.prototype._qpDelegate` for details) and invokes it with
   the QP key/value being changed.
     @method _qpChanged
    @private
  */
  _qpChanged(controller, _prop) {
    let dotIndex = _prop.indexOf('.[]');
    let prop = dotIndex === -1 ? _prop : _prop.slice(0, dotIndex);
    let delegate = controller._qpDelegate;
    let value = get$1(controller, prop);
    delegate(prop, value);
  }
});

// NOTE: This doesn't actually extend EmberObject.
/**
  @class Controller
  @extends EmberObject
  @uses Ember.ControllerMixin
  @public
*/

class Controller extends FrameworkObject.extend(ControllerMixin) {}

/**
  Creates a property that lazily looks up another controller in the container.
  Can only be used when defining another controller.

  Example:

  ```app/controllers/post.js
  import Controller, {
    inject as controller
  } from '@ember/controller';

  export default class PostController extends Controller {
    @controller posts;
  }
  ```

  Classic Class Example:

  ```app/controllers/post.js
  import Controller, {
    inject as controller
  } from '@ember/controller';

  export default Controller.extend({
    posts: controller()
  });
  ```

  This example will create a `posts` property on the `post` controller that
  looks up the `posts` controller in the container, making it easy to reference
  other controllers.

  @method inject
  @static
  @for @ember/controller
  @since 1.10.0
  @param {String} name (optional) name of the controller to inject, defaults to
         the property's name
  @return {ComputedDecorator} injection decorator instance
  @public
*/

function inject(...args) {
  return inject$1('controller', ...args);
}

/**
@module @ember/engine
*/

const ENGINE_PARENT = Symbol('ENGINE_PARENT');

/**
  `getEngineParent` retrieves an engine instance's parent instance.

  @method getEngineParent
  @param {EngineInstance} engine An engine instance.
  @return {EngineInstance} The parent engine instance.
  @for @ember/engine
  @static
  @private
*/
function getEngineParent(engine) {
  return engine[ENGINE_PARENT];
}

/**
  `setEngineParent` sets an engine instance's parent instance.

  @method setEngineParent
  @param {EngineInstance} engine An engine instance.
  @param {EngineInstance} parent The parent engine instance.
  @private
*/
function setEngineParent(engine, parent) {
  engine[ENGINE_PARENT] = parent;
}

/**
@module @ember/engine
*/

class EngineInstance extends EmberObject.extend(RegistryProxyMixin, ContainerProxyMixin) {
  /**
   @private
   @method setupRegistry
   @param {Registry} registry
   @param {BootOptions} options
   */
  // This is effectively an "abstract" method: it defines the contract a
  // subclass (e.g. `ApplicationInstance`) must follow to implement this
  // behavior, but an `EngineInstance` has no behavior of its own here.
  static setupRegistry(_registry, _options) {}

  /**
    The base `Engine` for which this is an instance.
     @property {Engine} engine
    @private
  */

  [ENGINE_PARENT];
  _booted = false;
  init(properties) {
    super.init(properties);

    // Ensure the guid gets setup for this instance
    guidFor(this);
    this.base ??= this.application;

    // Create a per-instance registry that will use the application's registry
    // as a fallback for resolving registrations.
    let registry = this.__registry__ = new Registry({
      fallback: this.base.__registry__
    });

    // Create a per-instance container from the instance's registry
    this.__container__ = registry.container({
      owner: this
    });
    this._booted = false;
  }
  _bootPromise = null;

  /**
    Initialize the `EngineInstance` and return a promise that resolves
    with the instance itself when the boot process is complete.
     The primary task here is to run any registered instance initializers.
     See the documentation on `BootOptions` for the options it takes.
     @public
    @method boot
    @param options {Object}
    @return {Promise<EngineInstance,Error>}
  */
  boot(options) {
    if (this._bootPromise) {
      return this._bootPromise;
    }
    this._bootPromise = new RSVP$1.Promise(resolve => {
      resolve(this._bootSync(options));
    });
    return this._bootPromise;
  }

  /**
    Unfortunately, a lot of existing code assumes booting an instance is
    synchronous – specifically, a lot of tests assume the last call to
    `app.advanceReadiness()` or `app.reset()` will result in a new instance
    being fully-booted when the current runloop completes.
     We would like new code (like the `visit` API) to stop making this
    assumption, so we created the asynchronous version above that returns a
    promise. But until we have migrated all the code, we would have to expose
    this method for use *internally* in places where we need to boot an instance
    synchronously.
     @private
  */
  _bootSync(options) {
    if (this._booted) {
      return this;
    }
    this.cloneParentDependencies();
    this.setupRegistry(options);
    this.base.runInstanceInitializers(this);
    this._booted = true;
    return this;
  }
  setupRegistry(options = this.__container__.lookup('-environment:main')) {
    this.constructor.setupRegistry(this.__registry__, options);
  }

  /**
   Unregister a factory.
    Overrides `RegistryProxy#unregister` in order to clear any cached instances
   of the unregistered factory.
    @public
   @method unregister
   @param {String} fullName
   */
  unregister(fullName) {
    this.__container__.reset(fullName);

    // We overwrote this method from RegistryProxyMixin.
    this.__registry__.unregister(fullName);
  }

  /**
    Build a new `EngineInstance` that's a child of this instance.
     Engines must be registered by name with their parent engine
    (or application).
     @private
    @method buildChildEngineInstance
    @param name {String} the registered name of the engine.
    @param options {Object} options provided to the engine instance.
    @return {EngineInstance,Error}
  */
  buildChildEngineInstance(name, options = {}) {
    let ChildEngine = this.lookup(`engine:${name}`);
    if (!ChildEngine) {
      throw new Error(`You attempted to mount the engine '${name}', but it is not registered with its parent.`);
    }
    let engineInstance = ChildEngine.buildInstance(options);
    setEngineParent(engineInstance, this);
    return engineInstance;
  }

  /**
    Clone dependencies shared between an engine instance and its parent.
     @private
    @method cloneParentDependencies
  */
  cloneParentDependencies() {
    const parent = getEngineParent(this);
    let registrations = ['route:basic', 'service:-routing'];
    registrations.forEach(key => {
      let registration = parent.resolveRegistration(key);
      this.register(key, registration);
    });
    let env = parent.lookup('-environment:main');
    this.register('-environment:main', env, {
      instantiate: false
    });

    // The type annotation forces TS to (a) validate that these match and (b)
    // *notice* that they match, e.g. below on the `singletons.push()`.
    let singletons = ['router:main', privatize`-bucket-cache:main`, '-view-registry:main', `renderer:-dom`, 'service:-document'];
    if (env['isInteractive']) {
      singletons.push('event_dispatcher:main');
    }
    singletons.forEach(key => {
      // SAFETY: We already expect this to be a singleton
      let singleton = parent.lookup(key);
      this.register(key, singleton, {
        instantiate: false
      });
    });
  }
}

let wrapGetterSetter = function (target, key, desc) {
  let {
    get: originalGet
  } = desc;
  if (originalGet !== undefined) {
    desc.get = function () {
      let propertyTag = tagFor(this, key);
      let ret;
      let tag = track(() => {
        ret = originalGet.call(this);
      });
      UPDATE_TAG(propertyTag, tag);
      consumeTag(tag);
      return ret;
    };
  }
  return desc;
};

/**
  `@dependentKeyCompat` is decorator that can be used on _native getters_ that
  use tracked properties. It exposes the getter to Ember's classic computed
  property and observer systems, so they can watch it for changes. It can be
  used in both native and classic classes.

  Native Example:

  ```js
  import { tracked } from '@glimmer/tracking';
  import { dependentKeyCompat } from '@ember/object/compat';
  import { computed, set } from '@ember/object';

  class Person {
    @tracked firstName;
    @tracked lastName;

    @dependentKeyCompat
    get fullName() {
      return `${this.firstName} ${this.lastName}`;
    }
  }

  class Profile {
    constructor(person) {
      set(this, 'person', person);
    }

    @computed('person.fullName')
    get helloMessage() {
      return `Hello, ${this.person.fullName}!`;
    }
  }
  ```

  Classic Example:

  ```js
  import { tracked } from '@glimmer/tracking';
  import { dependentKeyCompat } from '@ember/object/compat';
  import EmberObject, { computed, observer, set } from '@ember/object';

  const Person = EmberObject.extend({
    firstName: tracked(),
    lastName: tracked(),

    fullName: dependentKeyCompat(function() {
      return `${this.firstName} ${this.lastName}`;
    }),
  });

  const Profile = EmberObject.extend({
    person: null,

    helloMessage: computed('person.fullName', function() {
      return `Hello, ${this.person.fullName}!`;
    }),

    onNameUpdated: observer('person.fullName', function() {
      console.log('person name updated!');
    }),
  });
  ```

  `dependentKeyCompat()` can receive a getter function or an object containing
  `get`/`set` methods when used in classic classes, like computed properties.

  In general, only properties which you _expect_ to be watched by older,
  untracked clases should be marked as dependency compatible. The decorator is
  meant as an interop layer for parts of Ember's older classic APIs, and should
  not be applied to every possible getter/setter in classes. The number of
  dependency compatible getters should be _minimized_ wherever possible. New
  application code should not need to use `@dependentKeyCompat`, since it is
  only for interoperation with older code.

  @public
  @method dependentKeyCompat
  @for @ember/object/compat
  @static
  @param {PropertyDescriptor|undefined} desc A property descriptor containing
                                             the getter and setter (when used in
                                             classic classes)
  @return {PropertyDecorator} property decorator instance
 */

function dependentKeyCompat(...args) {
  if (isElementDescriptor(args)) {
    let [target, key, desc] = args;
    return wrapGetterSetter(target, key, desc);
  } else {
    const desc = args[0];
    let decorator = function (target, key, _desc, _meta, isClassicDecorator) {
      return wrapGetterSetter(target, key, desc);
    };
    setClassicDecorator(decorator);
    return decorator;
  }
}
setClassicDecorator(dependentKeyCompat);

var createObject = Object.create;
function createMap() {
  var map = createObject(null);
  map["__"] = undefined;
  delete map["__"];
  return map;
}
var Target = function Target(path, matcher, delegate) {
  this.path = path;
  this.matcher = matcher;
  this.delegate = delegate;
};
Target.prototype.to = function to(target, callback) {
  var delegate = this.delegate;
  if (delegate && delegate.willAddRoute) {
    target = delegate.willAddRoute(this.matcher.target, target);
  }
  this.matcher.add(this.path, target);
  if (callback) {
    if (callback.length === 0) {
      throw new Error("You must have an argument in the function passed to `to`");
    }
    this.matcher.addChild(this.path, target, callback, this.delegate);
  }
};
var Matcher = function Matcher(target) {
  this.routes = createMap();
  this.children = createMap();
  this.target = target;
};
Matcher.prototype.add = function add(path, target) {
  this.routes[path] = target;
};
Matcher.prototype.addChild = function addChild(path, target, callback, delegate) {
  var matcher = new Matcher(target);
  this.children[path] = matcher;
  var match = generateMatch(path, matcher, delegate);
  if (delegate && delegate.contextEntered) {
    delegate.contextEntered(target, match);
  }
  callback(match);
};
function generateMatch(startingPath, matcher, delegate) {
  function match(path, callback) {
    var fullPath = startingPath + path;
    if (callback) {
      callback(generateMatch(fullPath, matcher, delegate));
    } else {
      return new Target(fullPath, matcher, delegate);
    }
  }
  return match;
}
function addRoute(routeArray, path, handler) {
  var len = 0;
  for (var i = 0; i < routeArray.length; i++) {
    len += routeArray[i].path.length;
  }
  path = path.substr(len);
  var route = {
    path: path,
    handler: handler
  };
  routeArray.push(route);
}
function eachRoute(baseRoute, matcher, callback, binding) {
  var routes = matcher.routes;
  var paths = Object.keys(routes);
  for (var i = 0; i < paths.length; i++) {
    var path = paths[i];
    var routeArray = baseRoute.slice();
    addRoute(routeArray, path, routes[path]);
    var nested = matcher.children[path];
    if (nested) {
      eachRoute(routeArray, nested, callback, binding);
    } else {
      callback.call(binding, routeArray);
    }
  }
}
var map = function (callback, addRouteCallback) {
  var matcher = new Matcher();
  callback(generateMatch("", matcher, this.delegate));
  eachRoute([], matcher, function (routes) {
    if (addRouteCallback) {
      addRouteCallback(this, routes);
    } else {
      this.add(routes);
    }
  }, this);
};

// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded
// values that are not reserved (i.e., unicode characters, emoji, etc). The reserved
// chars are "/" and "%".
// Safe to call multiple times on the same path.
// Normalizes percent-encoded values in `path` to upper-case and decodes percent-encoded
function normalizePath(path) {
  return path.split("/").map(normalizeSegment).join("/");
}
// We want to ensure the characters "%" and "/" remain in percent-encoded
// form when normalizing paths, so replace them with their encoded form after
// decoding the rest of the path
var SEGMENT_RESERVED_CHARS = /%|\//g;
function normalizeSegment(segment) {
  if (segment.length < 3 || segment.indexOf("%") === -1) {
    return segment;
  }
  return decodeURIComponent(segment).replace(SEGMENT_RESERVED_CHARS, encodeURIComponent);
}
// We do not want to encode these characters when generating dynamic path segments
// See https://tools.ietf.org/html/rfc3986#section-3.3
// sub-delims: "!", "$", "&", "'", "(", ")", "*", "+", ",", ";", "="
// others allowed by RFC 3986: ":", "@"
//
// First encode the entire path segment, then decode any of the encoded special chars.
//
// The chars "!", "'", "(", ")", "*" do not get changed by `encodeURIComponent`,
// so the possible encoded chars are:
// ['%24', '%26', '%2B', '%2C', '%3B', '%3D', '%3A', '%40'].
var PATH_SEGMENT_ENCODINGS = /%(?:2(?:4|6|B|C)|3(?:B|D|A)|40)/g;
function encodePathSegment(str) {
  return encodeURIComponent(str).replace(PATH_SEGMENT_ENCODINGS, decodeURIComponent);
}
var escapeRegex = /(\/|\.|\*|\+|\?|\||\(|\)|\[|\]|\{|\}|\\)/g;
var isArray$1 = Array.isArray;
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
function getParam(params, key) {
  if (typeof params !== "object" || params === null) {
    throw new Error("You must pass an object as the second argument to `generate`.");
  }
  if (!hasOwnProperty$1.call(params, key)) {
    throw new Error("You must provide param `" + key + "` to `generate`.");
  }
  var value = params[key];
  var str = typeof value === "string" ? value : "" + value;
  if (str.length === 0) {
    throw new Error("You must provide a param `" + key + "`.");
  }
  return str;
}
var eachChar = [];
eachChar[0 /* Static */] = function (segment, currentState) {
  var state = currentState;
  var value = segment.value;
  for (var i = 0; i < value.length; i++) {
    var ch = value.charCodeAt(i);
    state = state.put(ch, false, false);
  }
  return state;
};
eachChar[1 /* Dynamic */] = function (_, currentState) {
  return currentState.put(47 /* SLASH */, true, true);
};
eachChar[2 /* Star */] = function (_, currentState) {
  return currentState.put(-1 /* ANY */, false, true);
};
eachChar[4 /* Epsilon */] = function (_, currentState) {
  return currentState;
};
var regex = [];
regex[0 /* Static */] = function (segment) {
  return segment.value.replace(escapeRegex, "\\$1");
};
regex[1 /* Dynamic */] = function () {
  return "([^/]+)";
};
regex[2 /* Star */] = function () {
  return "(.+)";
};
regex[4 /* Epsilon */] = function () {
  return "";
};
var generate = [];
generate[0 /* Static */] = function (segment) {
  return segment.value;
};
generate[1 /* Dynamic */] = function (segment, params) {
  var value = getParam(params, segment.value);
  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {
    return encodePathSegment(value);
  } else {
    return value;
  }
};
generate[2 /* Star */] = function (segment, params) {
  return getParam(params, segment.value);
};
generate[4 /* Epsilon */] = function () {
  return "";
};
var EmptyObject = Object.freeze({});
var EmptyArray = Object.freeze([]);
// The `names` will be populated with the paramter name for each dynamic/star
// segment. `shouldDecodes` will be populated with a boolean for each dyanamic/star
// segment, indicating whether it should be decoded during recognition.
function parse(segments, route, types) {
  // normalize route as not starting with a "/". Recognition will
  // also normalize.
  if (route.length > 0 && route.charCodeAt(0) === 47 /* SLASH */) {
    route = route.substr(1);
  }
  var parts = route.split("/");
  var names = undefined;
  var shouldDecodes = undefined;
  for (var i = 0; i < parts.length; i++) {
    var part = parts[i];
    var flags = 0;
    var type = 0;
    if (part === "") {
      type = 4 /* Epsilon */;
    } else if (part.charCodeAt(0) === 58 /* COLON */) {
      type = 1 /* Dynamic */;
    } else if (part.charCodeAt(0) === 42 /* STAR */) {
      type = 2 /* Star */;
    } else {
      type = 0 /* Static */;
    }
    flags = 2 << type;
    if (flags & 12 /* Named */) {
      part = part.slice(1);
      names = names || [];
      names.push(part);
      shouldDecodes = shouldDecodes || [];
      shouldDecodes.push((flags & 4 /* Decoded */) !== 0);
    }
    if (flags & 14 /* Counted */) {
      types[type]++;
    }
    segments.push({
      type: type,
      value: normalizeSegment(part)
    });
  }
  return {
    names: names || EmptyArray,
    shouldDecodes: shouldDecodes || EmptyArray
  };
}
function isEqualCharSpec(spec, char, negate) {
  return spec.char === char && spec.negate === negate;
}
// A State has a character specification and (`charSpec`) and a list of possible
// subsequent states (`nextStates`).
//
// If a State is an accepting state, it will also have several additional
// properties:
//
// * `regex`: A regular expression that is used to extract parameters from paths
//   that reached this accepting state.
// * `handlers`: Information on how to convert the list of captures into calls
//   to registered handlers with the specified parameters
// * `types`: How many static, dynamic or star segments in this route. Used to
//   decide which route to use if multiple registered routes match a path.
//
// Currently, State is implemented naively by looping over `nextStates` and
// comparing a character specification against a character. A more efficient
// implementation would use a hash of keys pointing at one or more next states.
var State = function State(states, id, char, negate, repeat) {
  this.states = states;
  this.id = id;
  this.char = char;
  this.negate = negate;
  this.nextStates = repeat ? id : null;
  this.pattern = "";
  this._regex = undefined;
  this.handlers = undefined;
  this.types = undefined;
};
State.prototype.regex = function regex$1() {
  if (!this._regex) {
    this._regex = new RegExp(this.pattern);
  }
  return this._regex;
};
State.prototype.get = function get(char, negate) {
  var this$1$1 = this;
  var nextStates = this.nextStates;
  if (nextStates === null) {
    return;
  }
  if (isArray$1(nextStates)) {
    for (var i = 0; i < nextStates.length; i++) {
      var child = this$1$1.states[nextStates[i]];
      if (isEqualCharSpec(child, char, negate)) {
        return child;
      }
    }
  } else {
    var child$1 = this.states[nextStates];
    if (isEqualCharSpec(child$1, char, negate)) {
      return child$1;
    }
  }
};
State.prototype.put = function put(char, negate, repeat) {
  var state;
  // If the character specification already exists in a child of the current
  // state, just return that state.
  if (state = this.get(char, negate)) {
    return state;
  }
  // Make a new state for the character spec
  var states = this.states;
  state = new State(states, states.length, char, negate, repeat);
  states[states.length] = state;
  // Insert the new state as a child of the current state
  if (this.nextStates == null) {
    this.nextStates = state.id;
  } else if (isArray$1(this.nextStates)) {
    this.nextStates.push(state.id);
  } else {
    this.nextStates = [this.nextStates, state.id];
  }
  // Return the new state
  return state;
};
// Find a list of child states matching the next character
State.prototype.match = function match(ch) {
  var this$1$1 = this;
  var nextStates = this.nextStates;
  if (!nextStates) {
    return [];
  }
  var returned = [];
  if (isArray$1(nextStates)) {
    for (var i = 0; i < nextStates.length; i++) {
      var child = this$1$1.states[nextStates[i]];
      if (isMatch(child, ch)) {
        returned.push(child);
      }
    }
  } else {
    var child$1 = this.states[nextStates];
    if (isMatch(child$1, ch)) {
      returned.push(child$1);
    }
  }
  return returned;
};
function isMatch(spec, char) {
  return spec.negate ? spec.char !== char && spec.char !== -1 /* ANY */ : spec.char === char || spec.char === -1 /* ANY */;
}
// This is a somewhat naive strategy, but should work in a lot of cases
// A better strategy would properly resolve /posts/:id/new and /posts/edit/:id.
//
// This strategy generally prefers more static and less dynamic matching.
// Specifically, it
//
//  * prefers fewer stars to more, then
//  * prefers using stars for less of the match to more, then
//  * prefers fewer dynamic segments to more, then
//  * prefers more static segments to more
function sortSolutions(states) {
  return states.sort(function (a, b) {
    var ref = a.types || [0, 0, 0];
    var astatics = ref[0];
    var adynamics = ref[1];
    var astars = ref[2];
    var ref$1 = b.types || [0, 0, 0];
    var bstatics = ref$1[0];
    var bdynamics = ref$1[1];
    var bstars = ref$1[2];
    if (astars !== bstars) {
      return astars - bstars;
    }
    if (astars) {
      if (astatics !== bstatics) {
        return bstatics - astatics;
      }
      if (adynamics !== bdynamics) {
        return bdynamics - adynamics;
      }
    }
    if (adynamics !== bdynamics) {
      return adynamics - bdynamics;
    }
    if (astatics !== bstatics) {
      return bstatics - astatics;
    }
    return 0;
  });
}
function recognizeChar(states, ch) {
  var nextStates = [];
  for (var i = 0, l = states.length; i < l; i++) {
    var state = states[i];
    nextStates = nextStates.concat(state.match(ch));
  }
  return nextStates;
}
var RecognizeResults = function RecognizeResults(queryParams) {
  this.length = 0;
  this.queryParams = queryParams || {};
};
RecognizeResults.prototype.splice = Array.prototype.splice;
RecognizeResults.prototype.slice = Array.prototype.slice;
RecognizeResults.prototype.push = Array.prototype.push;
function findHandler(state, originalPath, queryParams) {
  var handlers = state.handlers;
  var regex = state.regex();
  if (!regex || !handlers) {
    throw new Error("state not initialized");
  }
  var captures = originalPath.match(regex);
  var currentCapture = 1;
  var result = new RecognizeResults(queryParams);
  result.length = handlers.length;
  for (var i = 0; i < handlers.length; i++) {
    var handler = handlers[i];
    var names = handler.names;
    var shouldDecodes = handler.shouldDecodes;
    var params = EmptyObject;
    var isDynamic = false;
    if (names !== EmptyArray && shouldDecodes !== EmptyArray) {
      for (var j = 0; j < names.length; j++) {
        isDynamic = true;
        var name = names[j];
        var capture = captures && captures[currentCapture++];
        if (params === EmptyObject) {
          params = {};
        }
        if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS && shouldDecodes[j]) {
          params[name] = capture && decodeURIComponent(capture);
        } else {
          params[name] = capture;
        }
      }
    }
    result[i] = {
      handler: handler.handler,
      params: params,
      isDynamic: isDynamic
    };
  }
  return result;
}
function decodeQueryParamPart(part) {
  // http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4.1
  part = part.replace(/\+/gm, "%20");
  var result;
  try {
    result = decodeURIComponent(part);
  } catch (error) {
    result = "";
  }
  return result;
}
var RouteRecognizer = function RouteRecognizer() {
  this.names = createMap();
  var states = [];
  var state = new State(states, 0, -1 /* ANY */, true, false);
  states[0] = state;
  this.states = states;
  this.rootState = state;
};
RouteRecognizer.prototype.add = function add(routes, options) {
  var currentState = this.rootState;
  var pattern = "^";
  var types = [0, 0, 0];
  var handlers = new Array(routes.length);
  var allSegments = [];
  var isEmpty = true;
  var j = 0;
  for (var i = 0; i < routes.length; i++) {
    var route = routes[i];
    var ref = parse(allSegments, route.path, types);
    var names = ref.names;
    var shouldDecodes = ref.shouldDecodes;
    // preserve j so it points to the start of newly added segments
    for (; j < allSegments.length; j++) {
      var segment = allSegments[j];
      if (segment.type === 4 /* Epsilon */) {
        continue;
      }
      isEmpty = false;
      // Add a "/" for the new segment
      currentState = currentState.put(47 /* SLASH */, false, false);
      pattern += "/";
      // Add a representation of the segment to the NFA and regex
      currentState = eachChar[segment.type](segment, currentState);
      pattern += regex[segment.type](segment);
    }
    handlers[i] = {
      handler: route.handler,
      names: names,
      shouldDecodes: shouldDecodes
    };
  }
  if (isEmpty) {
    currentState = currentState.put(47 /* SLASH */, false, false);
    pattern += "/";
  }
  currentState.handlers = handlers;
  currentState.pattern = pattern + "$";
  currentState.types = types;
  var name;
  if (typeof options === "object" && options !== null && options.as) {
    name = options.as;
  }
  if (name) {
    // if (this.names[name]) {
    //   throw new Error("You may not add a duplicate route named `" + name + "`.");
    // }
    this.names[name] = {
      segments: allSegments,
      handlers: handlers
    };
  }
};
RouteRecognizer.prototype.handlersFor = function handlersFor(name) {
  var route = this.names[name];
  if (!route) {
    throw new Error("There is no route named " + name);
  }
  var result = new Array(route.handlers.length);
  for (var i = 0; i < route.handlers.length; i++) {
    var handler = route.handlers[i];
    result[i] = handler;
  }
  return result;
};
RouteRecognizer.prototype.hasRoute = function hasRoute(name) {
  return !!this.names[name];
};
RouteRecognizer.prototype.generate = function generate$1(name, params) {
  var route = this.names[name];
  var output = "";
  if (!route) {
    throw new Error("There is no route named " + name);
  }
  var segments = route.segments;
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment.type === 4 /* Epsilon */) {
      continue;
    }
    output += "/";
    output += generate[segment.type](segment, params);
  }
  if (output.charAt(0) !== "/") {
    output = "/" + output;
  }
  if (params && params.queryParams) {
    output += this.generateQueryString(params.queryParams);
  }
  return output;
};
RouteRecognizer.prototype.generateQueryString = function generateQueryString(params) {
  var pairs = [];
  var keys = Object.keys(params);
  keys.sort();
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var value = params[key];
    if (value == null) {
      continue;
    }
    var pair = encodeURIComponent(key);
    if (isArray$1(value)) {
      for (var j = 0; j < value.length; j++) {
        var arrayPair = key + "[]" + "=" + encodeURIComponent(value[j]);
        pairs.push(arrayPair);
      }
    } else {
      pair += "=" + encodeURIComponent(value);
      pairs.push(pair);
    }
  }
  if (pairs.length === 0) {
    return "";
  }
  return "?" + pairs.join("&");
};
RouteRecognizer.prototype.parseQueryString = function parseQueryString(queryString) {
  var pairs = queryString.split("&");
  var queryParams = {};
  for (var i = 0; i < pairs.length; i++) {
    var pair = pairs[i].split("="),
      key = decodeQueryParamPart(pair[0]),
      keyLength = key.length,
      isArray = false,
      value = void 0;
    if (pair.length === 1) {
      value = "true";
    } else {
      // Handle arrays
      if (keyLength > 2 && key.slice(keyLength - 2) === "[]") {
        isArray = true;
        key = key.slice(0, keyLength - 2);
        if (!queryParams[key]) {
          queryParams[key] = [];
        }
      }
      value = pair[1] ? decodeQueryParamPart(pair[1]) : "";
    }
    if (isArray) {
      queryParams[key].push(value);
    } else {
      queryParams[key] = value;
    }
  }
  return queryParams;
};
RouteRecognizer.prototype.recognize = function recognize(path) {
  var results;
  var states = [this.rootState];
  var queryParams = {};
  var isSlashDropped = false;
  var hashStart = path.indexOf("#");
  if (hashStart !== -1) {
    path = path.substr(0, hashStart);
  }
  var queryStart = path.indexOf("?");
  if (queryStart !== -1) {
    var queryString = path.substr(queryStart + 1, path.length);
    path = path.substr(0, queryStart);
    queryParams = this.parseQueryString(queryString);
  }
  if (path.charAt(0) !== "/") {
    path = "/" + path;
  }
  var originalPath = path;
  if (RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS) {
    path = normalizePath(path);
  } else {
    path = decodeURI(path);
    originalPath = decodeURI(originalPath);
  }
  var pathLen = path.length;
  if (pathLen > 1 && path.charAt(pathLen - 1) === "/") {
    path = path.substr(0, pathLen - 1);
    originalPath = originalPath.substr(0, originalPath.length - 1);
    isSlashDropped = true;
  }
  for (var i = 0; i < path.length; i++) {
    states = recognizeChar(states, path.charCodeAt(i));
    if (!states.length) {
      break;
    }
  }
  var solutions = [];
  for (var i$1 = 0; i$1 < states.length; i$1++) {
    if (states[i$1].handlers) {
      solutions.push(states[i$1]);
    }
  }
  states = sortSolutions(solutions);
  var state = solutions[0];
  if (state && state.handlers) {
    // if a trailing slash was dropped and a star segment is the last segment
    // specified, put the trailing slash back
    if (isSlashDropped && state.pattern && state.pattern.slice(-5) === "(.+)$") {
      originalPath = originalPath + "/";
    }
    results = findHandler(state, originalPath, queryParams);
  }
  return results;
};
RouteRecognizer.VERSION = "0.3.4";
// Set to false to opt-out of encoding and decoding path segments.
// See https://github.com/tildeio/route-recognizer/pull/55
RouteRecognizer.ENCODE_AND_DECODE_PATH_SEGMENTS = true;
RouteRecognizer.Normalizer = {
  normalizeSegment: normalizeSegment,
  normalizePath: normalizePath,
  encodePathSegment: encodePathSegment
};
RouteRecognizer.prototype.map = map;

function buildTransitionAborted() {
  let error = new Error('TransitionAborted');
  error.name = 'TransitionAborted';
  error.code = 'TRANSITION_ABORTED';
  return error;
}
function isTransitionAborted(maybeError) {
  return typeof maybeError === 'object' && maybeError !== null && maybeError.code === 'TRANSITION_ABORTED';
}
function isAbortable(maybeAbortable) {
  return typeof maybeAbortable === 'object' && maybeAbortable !== null && typeof maybeAbortable.isAborted === 'boolean';
}
function throwIfAborted(maybe) {
  if (isAbortable(maybe) && maybe.isAborted) {
    throw buildTransitionAborted();
  }
}
const slice$1 = Array.prototype.slice;
const hasOwnProperty = Object.prototype.hasOwnProperty;
/**
  Determines if an object is Promise by checking if it is "thenable".
**/
function isPromise(p) {
  return p !== null && typeof p === 'object' && typeof p.then === 'function';
}
function merge(hash, other) {
  for (let prop in other) {
    if (hasOwnProperty.call(other, prop)) {
      hash[prop] = other[prop];
    }
  }
}
/**
  @private

  Extracts query params from the end of an array
**/
function extractQueryParams(array) {
  let len = array && array.length,
    head,
    queryParams;
  if (len && len > 0) {
    let obj = array[len - 1];
    if (isQueryParamsContainer(obj)) {
      queryParams = obj.queryParams;
      head = slice$1.call(array, 0, len - 1);
      return [head, queryParams];
    }
  }
  // SAFETY: We confirmed that the last item isn't a QP container
  return [array, null];
}
// TODO: Actually check that Dict is QueryParams
function isQueryParamsContainer(obj) {
  if (obj && typeof obj === 'object') {
    let cast = obj;
    return 'queryParams' in cast && Object.keys(cast.queryParams).every(k => typeof k === 'string');
  }
  return false;
}
/**
  @private

  Coerces query param properties and array elements into strings.
**/
function coerceQueryParamsToString(queryParams) {
  for (let key in queryParams) {
    let val = queryParams[key];
    if (typeof val === 'number') {
      queryParams[key] = '' + val;
    } else if (Array.isArray(val)) {
      for (let i = 0, l = val.length; i < l; i++) {
        val[i] = '' + val[i];
      }
    }
  }
}
/**
  @private
 */
function log$1(router, ...args) {
  if (!router.log) {
    return;
  }
  if (args.length === 2) {
    let [sequence, msg] = args;
    router.log('Transition #' + sequence + ': ' + msg);
  } else {
    let [msg] = args;
    router.log(msg);
  }
}
function isParam(object) {
  return typeof object === 'string' || object instanceof String || typeof object === 'number' || object instanceof Number;
}
function forEach(array, callback) {
  for (let i = 0, l = array.length; i < l && callback(array[i]) !== false; i++) {
    // empty intentionally
  }
}
function getChangelist(oldObject, newObject) {
  let key;
  let results = {
    all: {},
    changed: {},
    removed: {}
  };
  merge(results.all, newObject);
  let didChange = false;
  coerceQueryParamsToString(oldObject);
  coerceQueryParamsToString(newObject);
  // Calculate removals
  for (key in oldObject) {
    if (hasOwnProperty.call(oldObject, key)) {
      if (!hasOwnProperty.call(newObject, key)) {
        didChange = true;
        results.removed[key] = oldObject[key];
      }
    }
  }
  // Calculate changes
  for (key in newObject) {
    if (hasOwnProperty.call(newObject, key)) {
      let oldElement = oldObject[key];
      let newElement = newObject[key];
      if (isArray(oldElement) && isArray(newElement)) {
        if (oldElement.length !== newElement.length) {
          results.changed[key] = newObject[key];
          didChange = true;
        } else {
          for (let i = 0, l = oldElement.length; i < l; i++) {
            if (oldElement[i] !== newElement[i]) {
              results.changed[key] = newObject[key];
              didChange = true;
            }
          }
        }
      } else if (oldObject[key] !== newObject[key]) {
        results.changed[key] = newObject[key];
        didChange = true;
      }
    }
  }
  return didChange ? results : undefined;
}
function isArray(obj) {
  return Array.isArray(obj);
}
function promiseLabel(label) {
  return 'Router: ' + label;
}
const STATE_SYMBOL = `__STATE__-2619860001345920-3322w3`;
const PARAMS_SYMBOL = `__PARAMS__-261986232992830203-23323`;
const QUERY_PARAMS_SYMBOL = `__QPS__-2619863929824844-32323`;
const REDIRECT_DESTINATION_SYMBOL = `__RDS__-2619863929824844-32323`;
/**
  A Transition is a thenable (a promise-like object) that represents
  an attempt to transition to another route. It can be aborted, either
  explicitly via `abort` or by attempting another transition while a
  previous one is still underway. An aborted transition can also
  be `retry()`d later.

  @class Transition
  @constructor
  @param {Object} router
  @param {Object} intent
  @param {Object} state
  @param {Object} error
  @private
 */
class Transition {
  constructor(router, intent, state, error = undefined, previousTransition = undefined) {
    this.from = null;
    this.to = undefined;
    this.isAborted = false;
    this.isActive = true;
    this.urlMethod = 'update';
    this.resolveIndex = 0;
    this.queryParamsOnly = false;
    this.isTransition = true;
    this.isCausedByAbortingTransition = false;
    this.isCausedByInitialTransition = false;
    this.isCausedByAbortingReplaceTransition = false;
    this._visibleQueryParams = {};
    this.isIntermediate = false;
    this[STATE_SYMBOL] = state || router.state;
    this.intent = intent;
    this.router = router;
    this.data = intent && intent.data || {};
    this.resolvedModels = {};
    this[QUERY_PARAMS_SYMBOL] = {};
    this.promise = undefined;
    this.error = undefined;
    this[PARAMS_SYMBOL] = {};
    this.routeInfos = [];
    this.targetName = undefined;
    this.pivotHandler = undefined;
    this.sequence = -1;
    if (error) {
      this.promise = Promise$1.reject(error);
      this.error = error;
      return;
    }
    // if you're doing multiple redirects, need the new transition to know if it
    // is actually part of the first transition or not. Any further redirects
    // in the initial transition also need to know if they are part of the
    // initial transition
    this.isCausedByAbortingTransition = !!previousTransition;
    this.isCausedByInitialTransition = !!previousTransition && (previousTransition.isCausedByInitialTransition || previousTransition.sequence === 0);
    // Every transition in the chain is a replace
    this.isCausedByAbortingReplaceTransition = !!previousTransition && previousTransition.urlMethod === 'replace' && (!previousTransition.isCausedByAbortingTransition || previousTransition.isCausedByAbortingReplaceTransition);
    if (state) {
      this[PARAMS_SYMBOL] = state.params;
      this[QUERY_PARAMS_SYMBOL] = state.queryParams;
      this.routeInfos = state.routeInfos;
      let len = state.routeInfos.length;
      if (len) {
        this.targetName = state.routeInfos[len - 1].name;
      }
      for (let i = 0; i < len; ++i) {
        let handlerInfo = state.routeInfos[i];
        // TODO: this all seems hacky
        if (!handlerInfo.isResolved) {
          break;
        }
        this.pivotHandler = handlerInfo.route;
      }
      this.sequence = router.currentSequence++;
      this.promise = state.resolve(this).catch(result => {
        let error = this.router.transitionDidError(result, this);
        throw error;
      }, promiseLabel('Handle Abort'));
    } else {
      this.promise = Promise$1.resolve(this[STATE_SYMBOL]);
      this[PARAMS_SYMBOL] = {};
    }
  }
  /**
    The Transition's internal promise. Calling `.then` on this property
    is that same as calling `.then` on the Transition object itself, but
    this property is exposed for when you want to pass around a
    Transition's promise, but not the Transition object itself, since
    Transition object can be externally `abort`ed, while the promise
    cannot.
       @property promise
    @type {Object}
    @public
   */
  /**
    Custom state can be stored on a Transition's `data` object.
    This can be useful for decorating a Transition within an earlier
    hook and shared with a later hook. Properties set on `data` will
    be copied to new transitions generated by calling `retry` on this
    transition.
       @property data
    @type {Object}
    @public
   */
  /**
    A standard promise hook that resolves if the transition
    succeeds and rejects if it fails/redirects/aborts.
       Forwards to the internal `promise` property which you can
    use in situations where you want to pass around a thenable,
    but not the Transition itself.
       @method then
    @param {Function} onFulfilled
    @param {Function} onRejected
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
    @public
   */
  then(onFulfilled, onRejected, label) {
    return this.promise.then(onFulfilled, onRejected, label);
  }
  /**
       Forwards to the internal `promise` property which you can
    use in situations where you want to pass around a thennable,
    but not the Transition itself.
       @method catch
    @param {Function} onRejection
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
    @public
   */
  catch(onRejection, label) {
    return this.promise.catch(onRejection, label);
  }
  /**
       Forwards to the internal `promise` property which you can
    use in situations where you want to pass around a thenable,
    but not the Transition itself.
       @method finally
    @param {Function} callback
    @param {String} label optional string for labeling the promise.
    Useful for tooling.
    @return {Promise}
    @public
   */
  finally(callback, label) {
    return this.promise.finally(callback, label);
  }
  /**
    Aborts the Transition. Note you can also implicitly abort a transition
    by initiating another transition while a previous one is underway.
       @method abort
    @return {Transition} this transition
    @public
   */
  abort() {
    this.rollback();
    let transition = new Transition(this.router, undefined, undefined, undefined);
    transition.to = this.from;
    transition.from = this.from;
    transition.isAborted = true;
    this.router.routeWillChange(transition);
    this.router.routeDidChange(transition);
    return this;
  }
  rollback() {
    if (!this.isAborted) {
      log$1(this.router, this.sequence, this.targetName + ': transition was aborted');
      if (this.intent !== undefined && this.intent !== null) {
        this.intent.preTransitionState = this.router.state;
      }
      this.isAborted = true;
      this.isActive = false;
      this.router.activeTransition = undefined;
    }
  }
  redirect(newTransition) {
    this[REDIRECT_DESTINATION_SYMBOL] = newTransition;
    this.rollback();
    this.router.routeWillChange(newTransition);
  }
  /**
       Retries a previously-aborted transition (making sure to abort the
    transition if it's still active). Returns a new transition that
    represents the new attempt to transition.
       @method retry
    @return {Transition} new transition
    @public
   */
  retry() {
    // TODO: add tests for merged state retry()s
    this.abort();
    let newTransition = this.router.transitionByIntent(this.intent, false);
    // inheriting a `null` urlMethod is not valid
    // the urlMethod is only set to `null` when
    // the transition is initiated *after* the url
    // has been updated (i.e. `router.handleURL`)
    //
    // in that scenario, the url method cannot be
    // inherited for a new transition because then
    // the url would not update even though it should
    if (this.urlMethod !== null) {
      newTransition.method(this.urlMethod);
    }
    return newTransition;
  }
  /**
       Sets the URL-changing method to be employed at the end of a
    successful transition. By default, a new Transition will just
    use `updateURL`, but passing 'replace' to this method will
    cause the URL to update using 'replaceWith' instead. Omitting
    a parameter will disable the URL change, allowing for transitions
    that don't update the URL at completion (this is also used for
    handleURL, since the URL has already changed before the
    transition took place).
       @method method
    @param {String} method the type of URL-changing method to use
      at the end of a transition. Accepted values are 'replace',
      falsy values, or any other non-falsy value (which is
      interpreted as an updateURL transition).
       @return {Transition} this transition
    @public
   */
  method(method) {
    this.urlMethod = method;
    return this;
  }
  // Alias 'trigger' as 'send'
  send(ignoreFailure = false, _name, err, transition, handler) {
    this.trigger(ignoreFailure, _name, err, transition, handler);
  }
  /**
       Fires an event on the current list of resolved/resolving
    handlers within this transition. Useful for firing events
    on route hierarchies that haven't fully been entered yet.
       Note: This method is also aliased as `send`
       @method trigger
    @param {Boolean} [ignoreFailure=false] a boolean specifying whether unhandled events throw an error
    @param {String} name the name of the event to fire
    @public
   */
  trigger(ignoreFailure = false, name, ...args) {
    // TODO: Deprecate the current signature
    if (typeof ignoreFailure === 'string') {
      name = ignoreFailure;
      ignoreFailure = false;
    }
    this.router.triggerEvent(this[STATE_SYMBOL].routeInfos.slice(0, this.resolveIndex + 1), ignoreFailure, name, args);
  }
  /**
    Transitions are aborted and their promises rejected
    when redirects occur; this method returns a promise
    that will follow any redirects that occur and fulfill
    with the value fulfilled by any redirecting transitions
    that occur.
       @method followRedirects
    @return {Promise} a promise that fulfills with the same
      value that the final redirecting transition fulfills with
    @public
   */
  followRedirects() {
    return this.promise.catch(reason => {
      if (this[REDIRECT_DESTINATION_SYMBOL]) {
        return this[REDIRECT_DESTINATION_SYMBOL].followRedirects();
      }
      return Promise$1.reject(reason);
    });
  }
  toString() {
    return 'Transition (sequence ' + this.sequence + ')';
  }
  /**
    @private
   */
  log(message) {
    log$1(this.router, this.sequence, message);
  }
}
/**
  @private

  Logs and returns an instance of TransitionAborted.
 */
function logAbort(transition) {
  log$1(transition.router, transition.sequence, 'detected abort.');
  return buildTransitionAborted();
}
function isTransition(obj) {
  return typeof obj === 'object' && obj instanceof Transition && obj.isTransition;
}
function prepareResult(obj) {
  if (isTransition(obj)) {
    return null;
  }
  return obj;
}
const UnrecognizedURLError = function () {
  UnrecognizedURLError.prototype = Object.create(Error.prototype);
  UnrecognizedURLError.prototype.constructor = UnrecognizedURLError;
  function UnrecognizedURLError(message) {
    let error = Error.call(this, message);
    this.name = 'UnrecognizedURLError';
    this.message = message || 'UnrecognizedURL';
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, UnrecognizedURLError);
    } else {
      this.stack = error.stack;
    }
  }
  return UnrecognizedURLError;
}();

function generateControllerFactory(owner, controllerName) {
  /* eslint-enable @typescript-eslint/no-empty-object-type */
  let factoryManager = owner.factoryFor('controller:basic');
  // `assert()` below after altering *tests*. It is left in this state for the
  // moment in the interest of keeping type-only changes separate from changes
  // to the runtime behavior of the system, even for tests.
  let Factory = factoryManager.class;
  // assert(
  //   '[BUG] factory for `controller:main` is unexpectedly not a Controller',
  //   ((factory): factory is typeof Controller => factory === Controller)(Factory)
  // );

  Factory = Factory.extend({
    toString() {
      return `(generated ${controllerName} controller)`;
    }
  });
  let fullName = `controller:${controllerName}`;
  owner.register(fullName, Factory);

  // eslint-disable-next-line @typescript-eslint/no-empty-object-type
  return owner.factoryFor(fullName);
}

/**
  Generates and instantiates a controller extending from `controller:basic`
  if present, or `Controller` if not.

  @for Ember
  @method generateController
  @private
  @since 1.3.0
*/
function generateController(owner, controllerName) {
  generateControllerFactory(owner, controllerName);
  let fullName = `controller:${controllerName}`;
  let instance = owner.lookup(fullName);
  return instance;
}

const ALL_PERIODS_REGEX = /\./g;
function extractRouteArgs(args) {
  // SAFETY: This should just be the same thing
  args = args.slice();
  let possibleOptions = args[args.length - 1];
  let queryParams;
  if (isRouteOptions(possibleOptions)) {
    args.pop(); // Remove options
    queryParams = possibleOptions.queryParams;
  } else {
    queryParams = {};
  }
  let routeName;
  if (typeof args[0] === 'string') {
    routeName = args.shift();
  }

  // SAFTEY: We removed the name and options if they existed, only models left.
  let models = args;
  return {
    routeName,
    models,
    queryParams
  };
}
function getActiveTargetName(router) {
  let routeInfos = router.activeTransition ? router.activeTransition[STATE_SYMBOL].routeInfos : router.state.routeInfos;
  let lastRouteInfo = routeInfos[routeInfos.length - 1];
  return lastRouteInfo.name;
}
function stashParamNames(router, routeInfos) {
  if (routeInfos['_namesStashed']) {
    return;
  }

  // This helper exists because router.js/route-recognizer.js awkwardly
  // keeps separate a routeInfo's list of parameter names depending
  // on whether a URL transition or named transition is happening.
  // Hopefully we can remove this in the future.
  let routeInfo = routeInfos[routeInfos.length - 1];
  let targetRouteName = routeInfo.name;
  let recogHandlers = router._routerMicrolib.recognizer.handlersFor(targetRouteName);
  let dynamicParent;
  for (let i = 0; i < routeInfos.length; ++i) {
    let routeInfo = routeInfos[i];
    let names = recogHandlers[i].names;
    if (names.length) {
      dynamicParent = routeInfo;
    }
    routeInfo['_names'] = names;
    let route = routeInfo.route;
    route._stashNames(routeInfo, dynamicParent);
  }
  routeInfos['_namesStashed'] = true;
}
function _calculateCacheValuePrefix(prefix, part) {
  // calculates the dot separated sections from prefix that are also
  // at the start of part - which gives us the route name

  // given : prefix = site.article.comments, part = site.article.id
  //      - returns: site.article (use get(values[site.article], 'id') to get the dynamic part - used below)

  // given : prefix = site.article, part = site.article.id
  //      - returns: site.article. (use get(values[site.article], 'id') to get the dynamic part - used below)

  let prefixParts = prefix.split('.');
  let currPrefix = '';
  for (let i = 0; i < prefixParts.length; i++) {
    let currPart = prefixParts.slice(0, i + 1).join('.');
    if (part.indexOf(currPart) !== 0) {
      break;
    }
    currPrefix = currPart;
  }
  return currPrefix;
}

/*
  Stolen from Controller
*/
// eslint-disable-next-line @typescript-eslint/no-empty-object-type
function calculateCacheKey(prefix, parts = [], values) {
  let suffixes = '';
  for (let part of parts) {
    let cacheValuePrefix = _calculateCacheValuePrefix(prefix, part);
    let value;
    if (values) {
      if (cacheValuePrefix && cacheValuePrefix in values) {
        let partRemovedPrefix = part.indexOf(cacheValuePrefix) === 0 ? part.substring(cacheValuePrefix.length + 1) : part;
        value = get$1(values[cacheValuePrefix], partRemovedPrefix);
      } else {
        value = get$1(values, part);
      }
    }
    suffixes += `::${part}:${value}`;
  }
  return prefix + suffixes.replace(ALL_PERIODS_REGEX, '-');
}

/*
  Controller-defined query parameters can come in three shapes:

  Array
    queryParams: ['foo', 'bar']
  Array of simple objects where value is an alias
    queryParams: [
      {
        'foo': 'rename_foo_to_this'
      },
      {
        'bar': 'call_bar_this_instead'
      }
    ]
  Array of fully defined objects
    queryParams: [
      {
        'foo': {
          as: 'rename_foo_to_this'
        },
      }
      {
        'bar': {
          as: 'call_bar_this_instead',
          scope: 'controller'
        }
      }
    ]

  This helper normalizes all three possible styles into the
  'Array of fully defined objects' style.
*/
function normalizeControllerQueryParams(queryParams) {
  let qpMap = {};
  for (let queryParam of queryParams) {
    accumulateQueryParamDescriptors(queryParam, qpMap);
  }
  return qpMap;
}
function accumulateQueryParamDescriptors(_desc, accum) {
  let desc = typeof _desc === 'string' ? {
    [_desc]: {
      as: null
    }
  } : _desc;
  for (let key in desc) {
    if (!Object.prototype.hasOwnProperty.call(desc, key)) {
      return;
    }
    let _singleDesc = desc[key];
    let singleDesc = typeof _singleDesc === 'string' ? {
      as: _singleDesc
    } : _singleDesc;
    let partialVal = accum[key] || {
      as: null,
      scope: 'model'
    };
    let val = {
      ...partialVal,
      ...singleDesc
    };
    accum[key] = val;
  }
}

/*
  Check if a routeName resembles a url instead

  @private
*/
function resemblesURL(str) {
  return typeof str === 'string' && (str === '' || str[0] === '/');
}

/*
  Returns an arguments array where the route name arg is prefixed based on the mount point

  @private
*/
function prefixRouteNameArg(route, args) {
  let routeName;
  let owner = getOwner$2(route);
  let prefix = owner.mountPoint;

  // only alter the routeName if it's actually referencing a route.
  if (owner.routable && typeof args[0] === 'string') {
    routeName = args[0];
    if (resemblesURL(routeName)) {
      throw new Error('Programmatic transitions by URL cannot be used within an Engine. Please use the route name instead.');
    } else {
      routeName = `${prefix}.${routeName}`;
      args[0] = routeName;
    }
  }
  return args;
}
function shallowEqual(a, b) {
  let aCount = 0;
  let bCount = 0;
  for (let kA in a) {
    if (Object.prototype.hasOwnProperty.call(a, kA)) {
      if (a[kA] !== b[kA]) {
        return false;
      }
      aCount++;
    }
  }
  for (let kB in b) {
    if (Object.prototype.hasOwnProperty.call(b, kB)) {
      bCount++;
    }
  }
  return aCount === bCount;
}
function isRouteOptions(value) {
  if (value && typeof value === 'object') {
    let qps = value.queryParams;
    if (qps && typeof qps === 'object') {
      return Object.keys(qps).every(k => typeof k === 'string');
    }
  }
  return false;
}

const RENDER = Symbol('render');
const RENDER_STATE = Symbol('render-state');

/**
@module @ember/routing/route
*/

/**
  The `Route` class is used to define individual routes. Refer to
  the [routing guide](https://guides.emberjs.com/release/routing/) for documentation.

  @class Route
  @extends EmberObject
  @uses ActionHandler
  @uses Evented
  @since 1.0.0
  @public
*/

class Route extends EmberObject.extend(ActionHandler, Evented) {
  static isRouteFactory = true;

  // These properties will end up appearing in the public interface because we
  // `implements IRoute` from `router.js`, which has them as part of *its*
  // public contract. We mark them as `@internal` so they at least signal to
  // people subclassing `Route` that they should not use them.
  /** @internal */
  context = {};
  /** @internal */

  /** @internal */
  _bucketCache;
  /** @internal */
  _internalName;
  _names;
  _router;
  constructor(owner) {
    super(owner);
    if (owner) {
      let router = owner.lookup('router:main');
      let bucketCache = owner.lookup(privatize`-bucket-cache:main`);
      this._router = router;
      this._bucketCache = bucketCache;
      this._topLevelViewTemplate = owner.lookup('template:-outlet');
      this._environment = owner.lookup('-environment:main');
    }
  }

  /**
    A hook you can implement to convert the route's model into parameters
    for the URL.
     ```app/router.js
    // ...
     Router.map(function() {
      this.route('post', { path: '/posts/:post_id' });
    });
     ```
     ```app/routes/post.js
    import Route from '@ember/routing/route';
     export default class PostRoute extends Route {
      model({ post_id }) {
        // the server returns `{ id: 12 }`
        return fetch(`/posts/${post_id}`;
      }
       serialize(model) {
        // this will make the URL `/posts/12`
        return { post_id: model.id };
      }
    }
    ```
     The default `serialize` method will insert the model's `id` into the
    route's dynamic segment (in this case, `:post_id`) if the segment contains '_id'.
    If the route has multiple dynamic segments or does not contain '_id', `serialize`
    will return `getProperties(model, params)`
     This method is called when `transitionTo` is called with a context
    in order to populate the URL.
     @method serialize
    @param {Object} model the routes model
    @param {Array} params an Array of parameter names for the current
      route (in the example, `['post_id']`.
    @return {Object} the serialized parameters
    @since 1.0.0
    @public
  */
  serialize(model, params) {
    if (params.length < 1 || !model) {
      return;
    }
    let object = {};
    if (params.length === 1) {
      let [name] = params;
      if (typeof model === 'object' && name in model) {
        object[name] = get$1(model, name);
      } else if (/_id$/.test(name)) {
        object[name] = get$1(model, 'id');
      } else if (isProxy(model)) {
        object[name] = get$1(model, name);
      }
    } else {
      object = getProperties(model, params);
    }
    return object;
  }

  /**
    Configuration hash for this route's queryParams. The possible
    configuration options and their defaults are as follows
    (assuming a query param whose controller property is `page`):
     ```javascript
    queryParams = {
      page: {
        // By default, controller query param properties don't
        // cause a full transition when they are changed, but
        // rather only cause the URL to update. Setting
        // `refreshModel` to true will cause an "in-place"
        // transition to occur, whereby the model hooks for
        // this route (and any child routes) will re-fire, allowing
        // you to reload models (e.g., from the server) using the
        // updated query param values.
        refreshModel: false,
         // By default, changes to controller query param properties
        // cause the URL to update via `pushState`, which means an
        // item will be added to the browser's history, allowing
        // you to use the back button to restore the app to the
        // previous state before the query param property was changed.
        // Setting `replace` to true will use `replaceState` (or its
        // hash location equivalent), which causes no browser history
        // item to be added. This options name and default value are
        // the same as the `link-to` helper's `replace` option.
        replace: false,
         // By default, the query param URL key is the same name as
        // the controller property name. Use `as` to specify a
        // different URL key.
        as: 'page'
      }
    };
    ```
     @property queryParams
    @for Route
    @type Object
    @since 1.6.0
    @public
  */
  // Set in reopen so it can be overriden with extend

  /**
    The name of the template to use by default when rendering this route's
    template.
     ```app/routes/posts/list.js
    import Route from '@ember/routing/route';
     export default class PostsListRoute extends Route {
      templateName = 'posts/list';
    }
    ```
     ```app/routes/posts/index.js
    import PostsListRoute from '../posts/list';
     export default class PostsIndexRoute extends PostsListRoute {};
    ```
     ```app/routes/posts/archived.js
    import PostsListRoute from '../posts/list';
     export default class PostsArchivedRoute extends PostsListRoute {};
    ```
     @property templateName
    @type String
    @default null
    @since 1.4.0
    @public
  */
  // Set in reopen so it can be overriden with extend

  /**
    The name of the controller to associate with this route.
     By default, Ember will lookup a route's controller that matches the name
    of the route (i.e. `posts.new`). However,
    if you would like to define a specific controller to use, you can do so
    using this property.
     This is useful in many ways, as the controller specified will be:
     * passed to the `setupController` method.
    * used as the controller for the template being rendered by the route.
    * returned from a call to `controllerFor` for the route.
     @property controllerName
    @type String
    @default null
    @since 1.4.0
    @public
  */
  // Set in reopen so it can be overriden with extend

  /**
    The controller associated with this route.
     Example
     ```app/routes/form.js
    import Route from '@ember/routing/route';
    import { action } from '@ember/object';
     export default class FormRoute extends Route {
      @action
      willTransition(transition) {
        if (this.controller.get('userHasEnteredData') &&
            !confirm('Are you sure you want to abandon progress?')) {
          transition.abort();
        } else {
          // Bubble the `willTransition` action so that
          // parent routes can decide whether or not to abort.
          return true;
        }
      }
    }
    ```
     @property controller
    @type Controller
    @since 1.6.0
    @public
  */

  /**
    The name of the route, dot-delimited.
     For example, a route found at `app/routes/posts/post.js` will have
    a `routeName` of `posts.post`.
     @property routeName
    @for Route
    @type String
    @since 1.0.0
    @public
  */

  /**
    The name of the route, dot-delimited, including the engine prefix
    if applicable.
     For example, a route found at `addon/routes/posts/post.js` within an
    engine named `admin` will have a `fullRouteName` of `admin.posts.post`.
     @property fullRouteName
    @for Route
    @type String
    @since 2.10.0
    @public
  */

  /**
    Sets the name for this route, including a fully resolved name for routes
    inside engines.
     @private
    @method _setRouteName
    @param {String} name
  */
  _setRouteName(name) {
    this.routeName = name;
    let owner = getOwner$2(this);
    this.fullRouteName = getEngineRouteName(owner, name);
  }

  /**
    @private
     @method _stashNames
  */
  _stashNames(routeInfo, dynamicParent) {
    if (this._names) {
      return;
    }
    let names = this._names = routeInfo['_names'];
    if (!names.length) {
      routeInfo = dynamicParent;
      names = routeInfo && routeInfo['_names'] || [];
    }

    // SAFETY: Since `_qp` is protected we can't infer the type
    let qps = get$1(this, '_qp').qps;
    let namePaths = new Array(names.length);
    for (let a = 0; a < names.length; ++a) {
      namePaths[a] = `${routeInfo.name}.${names[a]}`;
    }
    for (let qp of qps) {
      if (qp.scope === 'model') {
        qp.parts = namePaths;
      }
    }
  }

  /**
    @private
     @property _activeQPChanged
  */
  _activeQPChanged(qp, value) {
    this._router._activeQPChanged(qp.scopedPropertyName, value);
  }

  /**
    @private
    @method _updatingQPChanged
  */
  _updatingQPChanged(qp) {
    this._router._updatingQPChanged(qp.urlKey);
  }

  /**
    Returns a hash containing the parameters of an ancestor route.
     You may notice that `this.paramsFor` sometimes works when referring to a
    child route, but this behavior should not be relied upon as only ancestor
    routes are certain to be loaded in time.
     Example
     ```app/router.js
    // ...
     Router.map(function() {
      this.route('member', { path: ':name' }, function() {
        this.route('interest', { path: ':interest' });
      });
    });
    ```
     ```app/routes/member.js
    import Route from '@ember/routing/route';
     export default class MemberRoute extends Route {
      queryParams = {
        memberQp: { refreshModel: true }
      }
    }
    ```
     ```app/routes/member/interest.js
    import Route from '@ember/routing/route';
     export default class MemberInterestRoute extends Route {
      queryParams = {
        interestQp: { refreshModel: true }
      }
       model() {
        return this.paramsFor('member');
      }
    }
    ```
     If we visit `/turing/maths?memberQp=member&interestQp=interest` the model for
    the `member.interest` route is a hash with:
     * `name`: `turing`
    * `memberQp`: `member`
     @method paramsFor
    @param {String} name
    @return {Object} hash containing the parameters of the route `name`
    @since 1.4.0
    @public
  */
  paramsFor(name) {
    let owner = getOwner$2(this);
    let route = owner.lookup(`route:${name}`);
    if (route === undefined) {
      return {};
    }
    let transition = this._router._routerMicrolib.activeTransition;
    let state = transition ? transition[STATE_SYMBOL] : this._router._routerMicrolib.state;
    let fullName = route.fullRouteName;
    let params = {
      ...state.params[fullName]
    };
    let queryParams = getQueryParamsFor(route, state);
    return Object.entries(queryParams).reduce((params, [key, value]) => {
      params[key] = value;
      return params;
    }, params);
  }

  /**
    Serializes the query parameter key
     @method serializeQueryParamKey
    @param {String} controllerPropertyName
    @private
  */
  serializeQueryParamKey(controllerPropertyName) {
    return controllerPropertyName;
  }

  /**
    Serializes value of the query parameter based on defaultValueType
     @method serializeQueryParam
    @param {Object} value
    @param {String} urlKey
    @param {String} defaultValueType
    @private
  */
  serializeQueryParam(value, _urlKey, defaultValueType) {
    // urlKey isn't used here, but anyone overriding
    // can use it to provide serialization specific
    // to a certain query param.
    return this._router._serializeQueryParam(value, defaultValueType);
  }

  /**
    Deserializes value of the query parameter based on defaultValueType
     @method deserializeQueryParam
    @param {Object} value
    @param {String} urlKey
    @param {String} defaultValueType
    @private
  */
  deserializeQueryParam(value, _urlKey, defaultValueType) {
    // urlKey isn't used here, but anyone overriding
    // can use it to provide deserialization specific
    // to a certain query param.
    return this._router._deserializeQueryParam(value, defaultValueType);
  }

  /**
    @private
     @property _optionsForQueryParam
  */
  // eslint-disable-next-line @typescript-eslint/no-empty-object-type
  _optionsForQueryParam(qp) {
    const queryParams = get$1(this, 'queryParams');
    return get$1(queryParams, qp.urlKey) || get$1(queryParams, qp.prop) || queryParams[qp.urlKey] || queryParams[qp.prop] || {};
  }

  /**
    A hook you can use to reset controller values either when the model
    changes or the route is exiting.
     ```app/routes/articles.js
    import Route from '@ember/routing/route';
     export default class ArticlesRoute extends Route {
      resetController(controller, isExiting, transition) {
        if (isExiting && transition.targetName !== 'error') {
          controller.set('page', 1);
        }
      }
    }
    ```
     @method resetController
    @param {Controller} controller instance
    @param {Boolean} isExiting
    @param {Object} transition
    @since 1.7.0
    @public
  */
  resetController(_controller, _isExiting, _transition) {
    // We document that subclasses do not have to return *anything* and in fact
    // do not even have to call super, so whiel we *do* return `this`, we need
    // to be explicit in the types that our return type is *effectively* `void`.
    return this;
  }

  /**
    @private
     @method exit
  */
  exit(transition) {
    this.deactivate(transition);
    this.trigger('deactivate', transition);
    this.teardownViews();
  }

  /**
    @private
     @method _internalReset
    @since 3.6.0
  */
  _internalReset(isExiting, transition) {
    let controller = this.controller;
    // SAFETY: Since `_qp` is protected we can't infer the type
    controller['_qpDelegate'] = get$1(this, '_qp').states.inactive;
    this.resetController(controller, isExiting, transition);
  }

  /**
    @private
     @method enter
  */
  enter(transition) {
    this[RENDER_STATE] = undefined;
    this.activate(transition);
    this.trigger('activate', transition);
  }

  /**
    This event is triggered when the router enters the route. It is
    not executed when the model for the route changes.
     ```app/routes/application.js
    import { on } from '@ember/object/evented';
    import Route from '@ember/routing/route';
     export default Route.extend({
      collectAnalytics: on('activate', function(){
        collectAnalytics();
      })
    });
    ```
     @event activate
    @since 1.9.0
    @public
  */

  /**
    This event is triggered when the router completely exits this
    route. It is not executed when the model for the route changes.
     ```app/routes/index.js
    import { on } from '@ember/object/evented';
    import Route from '@ember/routing/route';
     export default Route.extend({
      trackPageLeaveAnalytics: on('deactivate', function(){
        trackPageLeaveAnalytics();
      })
    });
    ```
     @event deactivate
    @since 1.9.0
    @public
  */

  /**
    This hook is executed when the router completely exits this route. It is
    not executed when the model for the route changes.
     @method deactivate
    @param {Transition} transition
    @since 1.0.0
    @public
  */
  deactivate(_transition) {}

  /**
    This hook is executed when the router enters the route. It is not executed
    when the model for the route changes.
     @method activate
    @param {Transition} transition
    @since 1.0.0
    @public
  */
  activate(_transition) {}

  /**
    Perform a synchronous transition into another route without attempting
    to resolve promises, update the URL, or abort any currently active
    asynchronous transitions (i.e. regular transitions caused by
    `transitionTo` or URL changes).
     This method is handy for performing intermediate transitions on the
    way to a final destination route, and is called internally by the
    default implementations of the `error` and `loading` handlers.
     @method intermediateTransitionTo
    @param {String} name the name of the route
    @param {...Object} models the model(s) to be used while transitioning
    to the route.
    @since 1.2.0
    @public
   */
  intermediateTransitionTo(...args) {
    let [name, ...preparedArgs] = prefixRouteNameArg(this, args);
    this._router.intermediateTransitionTo(name, ...preparedArgs);
  }

  /**
    Refresh the model on this route and any child routes, firing the
    `beforeModel`, `model`, and `afterModel` hooks in a similar fashion
    to how routes are entered when transitioning in from other route.
    The current route params (e.g. `article_id`) will be passed in
    to the respective model hooks, and if a different model is returned,
    `setupController` and associated route hooks will re-fire as well.
     An example usage of this method is re-querying the server for the
    latest information using the same parameters as when the route
    was first entered.
     Note that this will cause `model` hooks to fire even on routes
    that were provided a model object when the route was initially
    entered.
     @method refresh
    @return {Transition} the transition object associated with this
      attempted transition
    @since 1.4.0
    @public
   */
  refresh() {
    return this._router._routerMicrolib.refresh(this);
  }

  /**
    This hook is the entry point for router.js
     @private
    @method setup
  */
  setup(context, transition) {
    let controllerName = this.controllerName || this.routeName;
    let definedController = this.controllerFor(controllerName, true);
    let controller = definedController ?? this.generateController(controllerName);

    // SAFETY: Since `_qp` is protected we can't infer the type
    let queryParams = get$1(this, '_qp');

    // Assign the route's controller so that it can more easily be
    // referenced in action handlers. Side effects. Side effects everywhere.
    if (!this.controller) {
      let propNames = queryParams.propertyNames;
      addQueryParamsObservers(controller, propNames);
      this.controller = controller;
    }
    let states = queryParams.states;
    controller._qpDelegate = states.allowOverrides;
    if (transition) {
      // Update the model dep values used to calculate cache keys.
      stashParamNames(this._router, transition[STATE_SYMBOL].routeInfos);
      let cache = this._bucketCache;
      let params = transition[PARAMS_SYMBOL];
      let allParams = queryParams.propertyNames;
      allParams.forEach(prop => {
        let aQp = queryParams.map[prop];
        aQp.values = params;
        let cacheKey = calculateCacheKey(aQp.route.fullRouteName, aQp.parts, aQp.values);
        let value = cache.lookup(cacheKey, prop, aQp.undecoratedDefaultValue);
        set(controller, prop, value);
      });
      let qpValues = getQueryParamsFor(this, transition[STATE_SYMBOL]);
      setProperties(controller, qpValues);
    }
    this.setupController(controller, context, transition);
    if (this._environment.options.shouldRender) {
      this[RENDER]();
    }

    // Setup can cause changes to QPs which need to be propogated immediately in
    // some situations. Eventually, we should work on making these async somehow.
    flushAsyncObservers(false);
  }

  /*
    Called when a query parameter for this route changes, regardless of whether the route
    is currently part of the active route hierarchy. This will update the query parameter's
    value in the cache so if this route becomes active, the cache value has been updated.
  */
  _qpChanged(prop, value, qp) {
    if (!qp) {
      return;
    }

    // Update model-dep cache
    let cache = this._bucketCache;
    let cacheKey = calculateCacheKey(qp.route.fullRouteName, qp.parts, qp.values);
    cache.stash(cacheKey, prop, value);
  }

  /**
    This hook is the first of the route entry validation hooks
    called when an attempt is made to transition into a route
    or one of its children. It is called before `model` and
    `afterModel`, and is appropriate for cases when:
     1) A decision can be made to redirect elsewhere without
       needing to resolve the model first.
    2) Any async operations need to occur first before the
       model is attempted to be resolved.
     This hook is provided the current `transition` attempt
    as a parameter, which can be used to `.abort()` the transition,
    save it for a later `.retry()`, or retrieve values set
    on it from a previous hook. You can also just call
    `router.transitionTo` to another route to implicitly
    abort the `transition`.
     You can return a promise from this hook to pause the
    transition until the promise resolves (or rejects). This could
    be useful, for instance, for retrieving async code from
    the server that is required to enter a route.
     @method beforeModel
    @param {Transition} transition
    @return {any | Promise<any>} if the value returned from this hook is
      a promise, the transition will pause until the transition
      resolves. Otherwise, non-promise return values are not
      utilized in any way.
    @since 1.0.0
    @public
  */

  beforeModel(_transition) {}

  /**
    This hook is called after this route's model has resolved.
    It follows identical async/promise semantics to `beforeModel`
    but is provided the route's resolved model in addition to
    the `transition`, and is therefore suited to performing
    logic that can only take place after the model has already
    resolved.
     ```app/routes/posts.js
    import Route from '@ember/routing/route';
    import { service } from '@ember/service';
     export default class PostsRoute extends Route {
      @service router;
       afterModel(posts, transition) {
        if (posts.get('length') === 1) {
          this.router.transitionTo('post.show', posts.get('firstObject'));
        }
      }
    }
    ```
     Refer to documentation for `beforeModel` for a description
    of transition-pausing semantics when a promise is returned
    from this hook.
     @method afterModel
    @param {Object} resolvedModel the value returned from `model`,
      or its resolved value if it was a promise
    @param {Transition} transition
    @return {any | Promise<any>} if the value returned from this hook is
      a promise, the transition will pause until the transition
      resolves. Otherwise, non-promise return values are not
      utilized in any way.
    @since 1.0.0
    @public
   */

  afterModel(_resolvedModel, _transition) {}

  /**
    A hook you can implement to optionally redirect to another route.
     Calling `this.router.transitionTo` from inside of the `redirect` hook will
    abort the current transition (into the route that has implemented `redirect`).
     `redirect` and `afterModel` behave very similarly and are
    called almost at the same time, but they have an important
    distinction when calling `this.router.transitionTo` to a child route
    of the current route. From `afterModel`, this new transition
    invalidates the current transition, causing `beforeModel`,
    `model`, and `afterModel` hooks to be called again. But the
    same transition started from `redirect` does _not_ invalidate
    the current transition. In other words, by the time the `redirect`
    hook has been called, both the resolved model and the attempted
    entry into this route are considered fully validated.
     @method redirect
    @param {Object} model the model for this route
    @param {Transition} transition the transition object associated with the current transition
    @since 1.0.0
    @public
  */
  redirect(_model, _transition) {}

  /**
    Called when the context is changed by router.js.
     @private
    @method contextDidChange
  */
  contextDidChange() {
    this.currentModel = this.context;
  }

  /**
    A hook you can implement to convert the URL into the model for
    this route.
     ```app/router.js
    // ...
     Router.map(function() {
      this.route('post', { path: '/posts/:post_id' });
    });
     export default Router;
    ```
     Note that for routes with dynamic segments, this hook is not always
    executed. If the route is entered through a transition (e.g. when
    using the `link-to` Handlebars helper or the `transitionTo` method
    of routes), and a model context is already provided this hook
    is not called.
     A model context does not include a primitive string or number,
    which does cause the model hook to be called.
     Routes without dynamic segments will always execute the model hook.
     ```javascript
    // no dynamic segment, model hook always called
    this.router.transitionTo('posts');
     // model passed in, so model hook not called
    thePost = store.findRecord('post', 1);
    this.router.transitionTo('post', thePost);
     // integer passed in, model hook is called
    this.router.transitionTo('post', 1);
     // model id passed in, model hook is called
    // useful for forcing the hook to execute
    thePost = store.findRecord('post', 1);
    this.router.transitionTo('post', thePost.id);
    ```
     This hook follows the asynchronous/promise semantics
    described in the documentation for `beforeModel`. In particular,
    if a promise returned from `model` fails, the error will be
    handled by the `error` hook on `Route`.
     Note that the legacy behavior of automatically defining a model
    hook when a dynamic segment ending in `_id` is present is
    [deprecated](https://deprecations.emberjs.com/v5.x#toc_deprecate-implicit-route-model).
    You should explicitly define a model hook whenever any segments are
    present.
     Example
     ```app/routes/post.js
    import Route from '@ember/routing/route';
    import { service } from '@ember/service';
     export default class PostRoute extends Route {
      @service store;
       model(params) {
        return this.store.findRecord('post', params.post_id);
      }
    }
    ```
     @method model
    @param {Object} params the parameters extracted from the URL
    @param {Transition} transition
    @return {any | Promise<any>} the model for this route. If
      a promise is returned, the transition will pause until
      the promise resolves, and the resolved value of the promise
      will be used as the model for this route.
    @since 1.0.0
    @public
  */
  model(params, transition) {
    let name, sawParams;
    // SAFETY: Since `_qp` is protected we can't infer the type
    let queryParams = get$1(this, '_qp').map;
    for (let prop in params) {
      if (prop === 'queryParams' || queryParams && prop in queryParams) {
        continue;
      }
      let match = prop.match(/^(.*)_id$/);
      if (match !== null) {
        name = match[1];
      }
      sawParams = true;
    }
    if (!name) {
      if (sawParams) {
        // SAFETY: This should be equivalent
        return Object.assign({}, params);
      } else {
        if (transition.resolveIndex < 1) {
          return;
        }
        // SAFETY: This should be correct, but TS is unable to infer this.
        return transition[STATE_SYMBOL].routeInfos[transition.resolveIndex - 1].context;
      }
    }
    return undefined;
  }

  /**
    @private
    @method deserialize
    @param {Object} params the parameters extracted from the URL
    @param {Transition} transition
    @return {any | Promise<any>} the model for this route.
     Router.js hook.
   */
  deserialize(_params, transition) {
    return this.model(this._paramsFor(this.routeName, _params), transition);
  }

  /**
    A hook you can use to setup the controller for the current route.
     This method is called with the controller for the current route and the
    model supplied by the `model` hook.
     By default, the `setupController` hook sets the `model` property of
    the controller to the specified `model` when it is not `undefined`.
     If you implement the `setupController` hook in your Route, it will
    prevent this default behavior. If you want to preserve that behavior
    when implementing your `setupController` function, make sure to call
    `super`:
     ```app/routes/photos.js
    import Route from '@ember/routing/route';
    import { service } from '@ember/service';
     export default class PhotosRoute extends Route {
      @service store;
       model() {
        return this.store.findAll('photo');
      }
       setupController(controller, model) {
        super.setupController(controller, model);
         this.controllerFor('application').set('showingPhotos', true);
      }
    }
    ```
     The provided controller will be one resolved based on the name
    of this route.
     If no explicit controller is defined, Ember will automatically create one.
     As an example, consider the router:
     ```app/router.js
    // ...
     Router.map(function() {
      this.route('post', { path: '/posts/:post_id' });
    });
     export default Router;
    ```
     If you have defined a file for the post controller,
    the framework will use it.
    If it is not defined, a basic `Controller` instance would be used.
     @example Behavior of a basic Controller
     ```app/routes/post.js
    import Route from '@ember/routing/route';
     export default class PostRoute extends Route {
      setupController(controller, model) {
        controller.set('model', model);
      }
    });
    ```
     @method setupController
    @param {Controller} controller instance
    @param {Object} model
    @param {Transition} [transition]
    @since 1.0.0
    @public
  */
  setupController(controller, context, _transition) {
    if (controller && context !== undefined) {
      set(controller, 'model', context);
    }
  }

  /**
    Returns the controller of the current route, or a parent (or any ancestor)
    route in a route hierarchy.
     The controller instance must already have been created, either through entering the
    associated route or using `generateController`.
     ```app/routes/post.js
    import Route from '@ember/routing/route';
     export default class PostRoute extends Route {
      setupController(controller, post) {
        super.setupController(controller, post);
         this.controllerFor('posts').set('currentPost', post);
      }
    }
    ```
     @method controllerFor
    @param {String} name the name of the route or controller
    @return {Controller | undefined}
    @since 1.0.0
    @public
  */

  controllerFor(name, _skipAssert = false) {
    let owner = getOwner$2(this);
    let route = owner.lookup(`route:${name}`);
    if (route && route.controllerName) {
      name = route.controllerName;
    }
    let controller = owner.lookup(`controller:${name}`);
    return controller;
  }

  /**
    Generates a controller for a route.
     Example
     ```app/routes/post.js
    import Route from '@ember/routing/route';
     export default class Post extends Route {
      setupController(controller, post) {
        super.setupController(controller, post);
         this.generateController('posts');
      }
    }
    ```
     @method generateController
    @param {String} name the name of the controller
    @private
  */
  generateController(name) {
    let owner = getOwner$2(this);
    return generateController(owner, name);
  }

  /**
    Returns the resolved model of a parent (or any ancestor) route
    in a route hierarchy.  During a transition, all routes
    must resolve a model object, and if a route
    needs access to a parent route's model in order to
    resolve a model (or just reuse the model from a parent),
    it can call `this.modelFor(theNameOfParentRoute)` to
    retrieve it. If the ancestor route's model was a promise,
    its resolved result is returned.
     Example
     ```app/router.js
    // ...
     Router.map(function() {
      this.route('post', { path: '/posts/:post_id' }, function() {
        this.route('comments');
      });
    });
     export default Router;
    ```
     ```app/routes/post/comments.js
    import Route from '@ember/routing/route';
     export default class PostCommentsRoute extends Route {
      model() {
        let post = this.modelFor('post');
         return post.comments;
      }
    }
    ```
     @method modelFor
    @param {String} name the name of the route
    @return {Object} the model object
    @since 1.0.0
    @public
  */
  modelFor(_name) {
    let name;
    let owner = getOwner$2(this);
    let transition = this._router && this._router._routerMicrolib ? this._router._routerMicrolib.activeTransition : undefined;

    // Only change the route name when there is an active transition.
    // Otherwise, use the passed in route name.
    if (owner.routable && transition !== undefined) {
      name = getEngineRouteName(owner, _name);
    } else {
      name = _name;
    }
    let route = owner.lookup(`route:${name}`);
    // If we are mid-transition, we want to try and look up
    // resolved parent contexts on the current transitionEvent.
    if (transition !== undefined && transition !== null) {
      let modelLookupName = route && route.routeName || name;
      if (Object.prototype.hasOwnProperty.call(transition.resolvedModels, modelLookupName)) {
        return transition.resolvedModels[modelLookupName];
      }
    }
    return route?.currentModel;
  }
  [RENDER_STATE] = undefined;

  /**
    `this[RENDER]` is used to set up the rendering option for the outlet state.
    @method this[RENDER]
    @private
   */
  [RENDER]() {
    this[RENDER_STATE] = buildRenderState(this);
    once(this._router, '_setOutlets');
  }
  willDestroy() {
    this.teardownViews();
  }

  /**
    @private
     @method teardownViews
  */
  teardownViews() {
    if (this[RENDER_STATE]) {
      this[RENDER_STATE] = undefined;
      once(this._router, '_setOutlets');
    }
  }

  /**
    Allows you to produce custom metadata for the route.
    The return value of this method will be attached to
    its corresponding RouteInfoWithAttributes object.
     Example
     ```app/routes/posts/index.js
    import Route from '@ember/routing/route';
     export default class PostsIndexRoute extends Route {
      buildRouteInfoMetadata() {
        return { title: 'Posts Page' }
      }
    }
    ```
     ```app/routes/application.js
    import Route from '@ember/routing/route';
    import { service } from '@ember/service';
     export default class ApplicationRoute extends Route {
      @service router
       constructor() {
        super(...arguments);
         this.router.on('routeDidChange', transition => {
          document.title = transition.to.metadata.title;
          // would update document's title to "Posts Page"
        });
      }
    }
    ```
    @method buildRouteInfoMetadata
    @return any
    @since 3.10.0
    @public
   */

  buildRouteInfoMetadata() {}
  _paramsFor(routeName, params) {
    let transition = this._router._routerMicrolib.activeTransition;
    if (transition !== undefined) {
      return this.paramsFor(routeName);
    }
    return params;
  }

  /** @deprecated Manually define your own store, such as with `@service store` */
  get _store() {
    const owner = getOwner$2(this);
    this.routeName;
    return {
      find(name, value) {
        let modelClass = owner.factoryFor(`model:${name}`);
        if (!modelClass) {
          return;
        }
        modelClass = modelClass.class;
        return modelClass.find(value);
      }
    };
  }

  /**
    @private
    @property _qp
    */
  static {
    decorateMethodV2(this.prototype, "_store", [computed]);
  }
  get _qp() {
    let combinedQueryParameterConfiguration = {};
    let controllerName = this.controllerName || this.routeName;
    let owner = getOwner$2(this);
    let controller = owner.lookup(`controller:${controllerName}`);
    let queryParameterConfiguraton = get$1(this, 'queryParams');
    let hasRouterDefinedQueryParams = Object.keys(queryParameterConfiguraton).length > 0;
    if (controller) {
      // this route find its query params and normalize their object shape them
      // merge in the query params for the route. As a mergedProperty,
      // Route#queryParams is always at least `{}`
      let controllerDefinedQueryParameterConfiguration = get$1(controller, 'queryParams') || [];
      let normalizedControllerQueryParameterConfiguration = normalizeControllerQueryParams(controllerDefinedQueryParameterConfiguration);
      combinedQueryParameterConfiguration = mergeEachQueryParams(normalizedControllerQueryParameterConfiguration, queryParameterConfiguraton);
    } else if (hasRouterDefinedQueryParams) {
      // the developer has not defined a controller but *has* supplied route query params.
      // Generate a class for them so we can later insert default values
      controller = generateController(owner, controllerName);
      combinedQueryParameterConfiguration = queryParameterConfiguraton;
    }
    let qps = [];
    let map = {};
    let propertyNames = [];
    for (let propName in combinedQueryParameterConfiguration) {
      if (!Object.prototype.hasOwnProperty.call(combinedQueryParameterConfiguration, propName)) {
        continue;
      }

      // to support the dubious feature of using unknownProperty
      // on queryParams configuration
      if (propName === 'unknownProperty' || propName === '_super') {
        // possible todo: issue deprecation warning?
        continue;
      }
      let desc = combinedQueryParameterConfiguration[propName];
      let scope = desc.scope || 'model';
      let parts = undefined;
      if (scope === 'controller') {
        parts = [];
      }
      let urlKey = desc.as || this.serializeQueryParamKey(propName);
      let defaultValue = get$1(controller, propName);
      defaultValue = copyDefaultValue(defaultValue);
      let type = desc.type || typeOf(defaultValue);
      let defaultValueSerialized = this.serializeQueryParam(defaultValue, urlKey, type);
      let scopedPropertyName = `${controllerName}:${propName}`;
      let qp = {
        undecoratedDefaultValue: get$1(controller, propName),
        defaultValue,
        serializedDefaultValue: defaultValueSerialized,
        serializedValue: defaultValueSerialized,
        type,
        urlKey,
        prop: propName,
        scopedPropertyName,
        controllerName,
        route: this,
        parts,
        // provided later when stashNames is called if 'model' scope
        values: null,
        // provided later when setup is called. no idea why.
        scope
      };
      map[propName] = map[urlKey] = map[scopedPropertyName] = qp;
      qps.push(qp);
      propertyNames.push(propName);
    }
    return {
      qps,
      map,
      propertyNames,
      states: {
        /*
          Called when a query parameter changes in the URL, this route cares
          about that query parameter, but the route is not currently
          in the active route hierarchy.
        */
        inactive: (prop, value) => {
          let qp = map[prop];
          this._qpChanged(prop, value, qp);
        },
        /*
          Called when a query parameter changes in the URL, this route cares
          about that query parameter, and the route is currently
          in the active route hierarchy.
        */
        active: (prop, value) => {
          let qp = map[prop];
          this._qpChanged(prop, value, qp);
          return this._activeQPChanged(qp, value);
        },
        /*
          Called when a value of a query parameter this route handles changes in a controller
          and the route is currently in the active route hierarchy.
        */
        allowOverrides: (prop, value) => {
          let qp = map[prop];
          this._qpChanged(prop, value, qp);
          return this._updatingQPChanged(qp);
        }
      }
    };
  }

  // Set in reopen
  static {
    decorateMethodV2(this.prototype, "_qp", [computed]);
  }
  /**
    Sends an action to the router, which will delegate it to the currently
    active route hierarchy per the bubbling rules explained under `actions`.
     Example
     ```app/router.js
    // ...
     Router.map(function() {
      this.route('index');
    });
     export default Router;
    ```
     ```app/routes/application.js
    import Route from '@ember/routing/route';
    import { action } from '@ember/object';
     export default class ApplicationRoute extends Route {
      @action
      track(arg) {
        console.log(arg, 'was clicked');
      }
    }
    ```
     ```app/routes/index.js
    import Route from '@ember/routing/route';
    import { action } from '@ember/object';
     export default class IndexRoute extends Route {
      @action
      trackIfDebug(arg) {
        if (debug) {
          this.send('track', arg);
        }
      }
    }
    ```
     @method send
    @param {String} name the name of the action to trigger
    @param {...*} args
    @since 1.0.0
    @public
  */
  // Set with reopen to override parent behavior
}
function getRenderState(route) {
  return route[RENDER_STATE];
}
function buildRenderState(route) {
  let owner = getOwner$2(route);
  let name = route.routeName;
  let controller = owner.lookup(`controller:${route.controllerName || name}`);
  let model = route.currentModel;
  let templateFactoryOrComponent = owner.lookup(`template:${route.templateName || name}`);

  // Now we support either a component or a template to be returned by this
  // resolver call, but if it's a `TemplateFactory`, we need to instantiate
  // it into a `Template`, since that's what `RenderState` wants. We can't
  // easily change it, it's intimate API used by @ember/test-helpers and the
  // like. We could compatibly allow `Template` | `TemplateFactory`, and that's
  // what it used to do but we _just_ went through deprecations to get that
  // removed. It's also not ideal since once you mix the two types, they are
  // not exactly easy to tell apart.
  //
  // It may also be tempting to just normalize `Template` into `RouteTemplate`
  // here, and we could. However, this is not the only entrypoint where this
  // `RenderState` is made – @ember/test-helpers punches through an impressive
  // amount of private API to set it directly, and this feature would also be
  // useful for them. So, even if we had normalized here, we'd still have to
  // check and do that again during render anyway.
  let template;
  if (templateFactoryOrComponent) {
    if (hasInternalComponentManager(templateFactoryOrComponent)) {
      template = templateFactoryOrComponent;
    } else {
      template = templateFactoryOrComponent(owner);
    }
  } else {
    // default `{{outlet}}`
    template = route._topLevelViewTemplate(owner);
  }
  let render = {
    owner,
    name,
    controller,
    model,
    template
  };
  return render;
}
function getFullQueryParams(router, state) {
  if (state.fullQueryParams) {
    return state.fullQueryParams;
  }
  let haveAllRouteInfosResolved = state.routeInfos.every(routeInfo => routeInfo.route);
  let fullQueryParamsState = {
    ...state.queryParams
  };
  router._deserializeQueryParams(state.routeInfos, fullQueryParamsState);

  // only cache query params state if all routeinfos have resolved; it's possible
  // for lazy routes to not have resolved when `getFullQueryParams` is called, so
  // we wait until all routes have resolved prior to caching query params state
  if (haveAllRouteInfosResolved) {
    state.fullQueryParams = fullQueryParamsState;
  }
  return fullQueryParamsState;
}
function getQueryParamsFor(route, state) {
  state.queryParamsFor = state.queryParamsFor || {};
  let name = route.fullRouteName;
  let existing = state.queryParamsFor[name];
  if (existing) {
    return existing;
  }
  let fullQueryParams = getFullQueryParams(route._router, state);
  let params = state.queryParamsFor[name] = {};

  // Copy over all the query params for this route/controller into params hash.
  // SAFETY: Since `_qp` is protected we can't infer the type
  let qps = get$1(route, '_qp').qps;
  for (let qp of qps) {
    // Put deserialized qp on params hash.
    let qpValueWasPassedIn = qp.prop in fullQueryParams;
    params[qp.prop] = qpValueWasPassedIn ? fullQueryParams[qp.prop] : copyDefaultValue(qp.defaultValue);
  }
  return params;
}

// FIXME: This should probably actually return a `NativeArray` if the passed in value is an Array.
function copyDefaultValue(value) {
  if (Array.isArray(value)) {
    // SAFETY: We lost the type data about the array if we don't cast.
    return A(value.slice());
  }
  return value;
}

/*
  Merges all query parameters from a controller with those from
  a route, returning a new object and avoiding any mutations to
  the existing objects.
*/
function mergeEachQueryParams(controllerQP, routeQP) {
  let qps = {};
  let keysAlreadyMergedOrSkippable = {
    defaultValue: true,
    type: true,
    scope: true,
    as: true
  };

  // first loop over all controller qps, merging them with any matching route qps
  // into a new empty object to avoid mutating.
  for (let cqpName in controllerQP) {
    if (!Object.prototype.hasOwnProperty.call(controllerQP, cqpName)) {
      continue;
    }
    qps[cqpName] = {
      ...controllerQP[cqpName],
      ...routeQP[cqpName]
    };

    // allows us to skip this QP when we check route QPs.
    keysAlreadyMergedOrSkippable[cqpName] = true;
  }

  // loop over all route qps, skipping those that were merged in the first pass
  // because they also appear in controller qps
  for (let rqpName in routeQP) {
    if (!Object.prototype.hasOwnProperty.call(routeQP, rqpName) || keysAlreadyMergedOrSkippable[rqpName]) {
      continue;
    }
    qps[rqpName] = {
      ...routeQP[rqpName],
      ...controllerQP[rqpName]
    };
  }
  return qps;
}
function addQueryParamsObservers(controller, propNames) {
  propNames.forEach(prop => {
    if (descriptorForProperty(controller, prop) === undefined) {
      let desc = lookupDescriptor(controller, prop);
      if (desc !== null && (typeof desc.get === 'function' || typeof desc.set === 'function')) {
        defineProperty(controller, prop, dependentKeyCompat({
          get: desc.get,
          set: desc.set
        }));
      }
    }
    addObserver(controller, `${prop}.[]`, controller, controller._qpChanged, false);
  });
}
function getEngineRouteName(engine, routeName) {
  if (engine.routable) {
    let prefix = engine.mountPoint;
    if (routeName === 'application') {
      return prefix;
    } else {
      return `${prefix}.${routeName}`;
    }
  }
  return routeName;
}
const defaultSerialize = Route.prototype.serialize;
function hasDefaultSerialize(route) {
  return route.serialize === defaultSerialize;
}

// Set these here so they can be overridden with extend
Route.reopen({
  mergedProperties: ['queryParams'],
  queryParams: {},
  templateName: null,
  controllerName: null,
  send(...args) {
    if (this._router && this._router._routerMicrolib || !isTesting()) {
      this._router.send(...args);
    } else {
      let name = args.shift();
      let action = this.actions[name];
      if (action) {
        return action.apply(this, args);
      }
    }
  },
  /**
    The controller associated with this route.
     Example
     ```app/routes/form.js
    import Route from '@ember/routing/route';
    import { action } from '@ember/object';
     export default class FormRoute extends Route {
      @action
      willTransition(transition) {
        if (this.controller.get('userHasEnteredData') &&
            !confirm('Are you sure you want to abandon progress?')) {
          transition.abort();
        } else {
          // Bubble the `willTransition` action so that
          // parent routes can decide whether or not to abort.
          return true;
        }
      }
    }
    ```
     @property controller
    @type Controller
    @since 1.6.0
    @public
  */

  actions: {
    /**
    This action is called when one or more query params have changed. Bubbles.
     @method queryParamsDidChange
    @param changed {Object} Keys are names of query params that have changed.
    @param totalPresent {Object} Keys are names of query params that are currently set.
    @param removed {Object} Keys are names of query params that have been removed.
    @returns {boolean}
    @private
    */
    // eslint-disable-next-line @typescript-eslint/no-empty-object-type
    queryParamsDidChange(changed, _totalPresent, removed) {
      // SAFETY: Since `_qp` is protected we can't infer the type
      let qpMap = get$1(this, '_qp').map;
      let totalChanged = Object.keys(changed).concat(Object.keys(removed));
      for (let change of totalChanged) {
        let qp = qpMap[change];
        if (qp) {
          let options = this._optionsForQueryParam(qp);
          if (get$1(options, 'refreshModel') && this._router.currentState) {
            this.refresh();
            break;
          }
        }
      }
      return true;
    },
    finalizeQueryParamChange(params,
    // eslint-disable-next-line @typescript-eslint/no-empty-object-type
    finalParams, transition) {
      if (this.fullRouteName !== 'application') {
        return true;
      }

      // Transition object is absent for intermediate transitions.
      if (!transition) {
        return;
      }
      let routeInfos = transition[STATE_SYMBOL].routeInfos;
      let router = this._router;
      let qpMeta = router._queryParamsFor(routeInfos);
      let changes = router._qpUpdates;
      let qpUpdated = false;
      let replaceUrl;
      stashParamNames(router, routeInfos);
      for (let qp of qpMeta.qps) {
        let route = qp.route;
        let controller = route.controller;
        let presentKey = qp.urlKey in params && qp.urlKey;

        // Do a reverse lookup to see if the changed query
        // param URL key corresponds to a QP property on
        // this controller.
        let value;
        let svalue;
        if (changes.has(qp.urlKey)) {
          // Value updated in/before setupController
          value = get$1(controller, qp.prop);
          svalue = route.serializeQueryParam(value, qp.urlKey, qp.type);
        } else {
          if (presentKey) {
            svalue = params[presentKey];
            if (svalue !== undefined) {
              value = route.deserializeQueryParam(svalue, qp.urlKey, qp.type);
            }
          } else {
            // No QP provided; use default value.
            svalue = qp.serializedDefaultValue;
            value = copyDefaultValue(qp.defaultValue);
          }
        }

        // SAFETY: Since `_qp` is protected we can't infer the type
        controller._qpDelegate = get$1(route, '_qp').states.inactive;
        let thisQueryParamChanged = svalue !== qp.serializedValue;
        if (thisQueryParamChanged) {
          if (transition.queryParamsOnly && replaceUrl !== false) {
            let options = route._optionsForQueryParam(qp);
            let replaceConfigValue = get$1(options, 'replace');
            if (replaceConfigValue) {
              replaceUrl = true;
            } else if (replaceConfigValue === false) {
              // Explicit pushState wins over any other replaceStates.
              replaceUrl = false;
            }
          }
          set(controller, qp.prop, value);
          qpUpdated = true;
        }

        // Stash current serialized value of controller.
        qp.serializedValue = svalue;
        let thisQueryParamHasDefaultValue = qp.serializedDefaultValue === svalue;
        if (!thisQueryParamHasDefaultValue) {
          finalParams.push({
            value: svalue,
            visible: true,
            key: presentKey || qp.urlKey
          });
        }
      }

      // Some QPs have been updated, and those changes need to be propogated
      // immediately. Eventually, we should work on making this async somehow.
      if (qpUpdated === true) {
        flushAsyncObservers(false);
      }
      if (replaceUrl) {
        transition.method('replace');
      }
      qpMeta.qps.forEach(qp => {
        // SAFETY: Since `_qp` is protected we can't infer the type
        let routeQpMeta = get$1(qp.route, '_qp');
        let finalizedController = qp.route.controller;
        finalizedController['_qpDelegate'] = get$1(routeQpMeta, 'states.active');
      });
      router._qpUpdates.clear();
      return;
    }
  }
});

/**
  A two-tiered cache with support for fallback values when doing lookups.
  Uses "buckets" and then "keys" to cache values.

  @private
  @class BucketCache
*/
class BucketCache {
  cache;
  constructor() {
    this.cache = new Map();
  }
  has(bucketKey) {
    return this.cache.has(bucketKey);
  }
  stash(bucketKey, key, value) {
    let bucket = this.cache.get(bucketKey);
    if (bucket === undefined) {
      bucket = new Map();
      this.cache.set(bucketKey, bucket);
    }
    bucket.set(key, value);
  }
  lookup(bucketKey, prop, defaultValue) {
    if (!this.has(bucketKey)) {
      return defaultValue;
    }
    let bucket = this.cache.get(bucketKey);
    if (bucket.has(prop)) {
      return bucket.get(prop);
    } else {
      return defaultValue;
    }
  }
}

let uuid = 0;
function isCallback(value) {
  return typeof value === 'function';
}
class DSLImpl {
  parent;
  // eslint-disable-next-line @typescript-eslint/no-wrapper-object-types
  matches;
  enableLoadingSubstates;
  explicitIndex = false;
  options;
  constructor(name = null, options) {
    this.parent = name;
    this.enableLoadingSubstates = Boolean(options && options.enableLoadingSubstates);
    this.matches = [];
    this.options = options;
  }
  route(name, _options, _callback) {
    let options;
    let callback = null;
    let dummyErrorRoute = `/_unused_dummy_error_path_route_${name}/:error`;
    if (isCallback(_options)) {
      options = {};
      callback = _options;
    } else if (isCallback(_callback)) {
      options = _options;
      callback = _callback;
    } else {
      options = _options || {};
    }
    if (this.enableLoadingSubstates) {
      createRoute(this, `${name}_loading`, {
        resetNamespace: options.resetNamespace
      });
      createRoute(this, `${name}_error`, {
        resetNamespace: options.resetNamespace,
        path: dummyErrorRoute
      });
    }
    if (callback) {
      let fullName = getFullName(this, name, options.resetNamespace);
      let dsl = new DSLImpl(fullName, this.options);
      createRoute(dsl, 'loading');
      createRoute(dsl, 'error', {
        path: dummyErrorRoute
      });
      callback.call(dsl);
      createRoute(this, name, options, dsl.generate());
    } else {
      createRoute(this, name, options);
    }
  }
  push(url, name, callback,
  // eslint-disable-next-line @typescript-eslint/no-empty-object-type
  serialize) {
    let parts = name.split('.');
    if (this.options.engineInfo) {
      let localFullName = name.slice(this.options.engineInfo.fullName.length + 1);
      let routeInfo = Object.assign({
        localFullName
      }, this.options.engineInfo);
      if (serialize) {
        routeInfo.serializeMethod = serialize;
      }
      this.options.addRouteForEngine(name, routeInfo);
    } else if (serialize) {
      throw new Error(`Defining a route serializer on route '${name}' outside an Engine is not allowed.`);
    }
    if (url === '' || url === '/' || parts[parts.length - 1] === 'index') {
      this.explicitIndex = true;
    }
    this.matches.push(url, name, callback);
  }
  generate() {
    let dslMatches = this.matches;
    if (!this.explicitIndex) {
      this.route('index', {
        path: '/'
      });
    }
    return match => {
      for (let i = 0; i < dslMatches.length; i += 3) {
        match(dslMatches[i]).to(dslMatches[i + 1], dslMatches[i + 2]);
      }
    };
  }
  mount(_name, options = {}) {
    let engineRouteMap = this.options.resolveRouteMap(_name);
    let name = _name;
    if (options.as) {
      name = options.as;
    }
    let fullName = getFullName(this, name, options.resetNamespace);
    let engineInfo = {
      name: _name,
      instanceId: uuid++,
      mountPoint: fullName,
      fullName
    };
    let path = options.path;
    if (typeof path !== 'string') {
      path = `/${name}`;
    }
    let callback;
    let dummyErrorRoute = `/_unused_dummy_error_path_route_${name}/:error`;
    if (engineRouteMap) {
      let shouldResetEngineInfo = false;
      let oldEngineInfo = this.options.engineInfo;
      if (oldEngineInfo) {
        shouldResetEngineInfo = true;
        this.options.engineInfo = engineInfo;
      }
      let optionsForChild = Object.assign({
        engineInfo
      }, this.options);
      let childDSL = new DSLImpl(fullName, optionsForChild);
      createRoute(childDSL, 'loading');
      createRoute(childDSL, 'error', {
        path: dummyErrorRoute
      });
      engineRouteMap.class.call(childDSL);
      callback = childDSL.generate();
      if (shouldResetEngineInfo) {
        this.options.engineInfo = oldEngineInfo;
      }
    }
    let localFullName = 'application';
    let routeInfo = Object.assign({
      localFullName
    }, engineInfo);
    if (this.enableLoadingSubstates) {
      // These values are important to register the loading routes under their
      // proper names for the Router and within the Engine's registry.
      let substateName = `${name}_loading`;
      let localFullName = `application_loading`;
      let routeInfo = Object.assign({
        localFullName
      }, engineInfo);
      createRoute(this, substateName, {
        resetNamespace: options.resetNamespace
      });
      this.options.addRouteForEngine(substateName, routeInfo);
      substateName = `${name}_error`;
      localFullName = `application_error`;
      routeInfo = Object.assign({
        localFullName
      }, engineInfo);
      createRoute(this, substateName, {
        resetNamespace: options.resetNamespace,
        path: dummyErrorRoute
      });
      this.options.addRouteForEngine(substateName, routeInfo);
    }
    this.options.addRouteForEngine(fullName, routeInfo);
    this.push(path, fullName, callback);
  }
}
function canNest(dsl) {
  return dsl.parent !== 'application';
}
function getFullName(dsl, name, resetNamespace) {
  if (canNest(dsl) && resetNamespace !== true) {
    return `${dsl.parent}.${name}`;
  } else {
    return name;
  }
}
function createRoute(dsl, name, options = {}, callback) {
  let fullName = getFullName(dsl, name, options.resetNamespace);
  if (typeof options.path !== 'string') {
    options.path = `/${name}`;
  }
  dsl.push(options.path, fullName, callback, options.serialize);
}

class RouterState {
  router;
  emberRouter;
  routerJsState;
  constructor(emberRouter, router, routerJsState) {
    this.emberRouter = emberRouter;
    this.router = router;
    this.routerJsState = routerJsState;
  }
  isActiveIntent(routeName, models, queryParams) {
    let state = this.routerJsState;
    if (!this.router.isActiveIntent(routeName, models, undefined, state)) {
      return false;
    }
    if (queryParams !== undefined && Object.keys(queryParams).length > 0) {
      let visibleQueryParams = Object.assign({}, queryParams);
      this.emberRouter._prepareQueryParams(routeName, models, visibleQueryParams);
      return shallowEqual(visibleQueryParams, state.queryParams);
    }
    return true;
  }
}

let ROUTE_INFOS = new WeakMap();
function toReadOnlyRouteInfo(routeInfos, queryParams = {}, options = {
  includeAttributes: false,
  localizeMapUpdates: false
}) {
  const LOCAL_ROUTE_INFOS = new WeakMap();
  return routeInfos.map((info, i) => {
    let {
      name,
      params,
      paramNames,
      context,
      route
    } = info;
    // SAFETY: This should be safe since it is just for use as a key
    let key = info;
    if (ROUTE_INFOS.has(key) && options.includeAttributes) {
      let routeInfo = ROUTE_INFOS.get(key);
      routeInfo = attachMetadata(route, routeInfo);
      let routeInfoWithAttribute = createRouteInfoWithAttributes(routeInfo, context);
      LOCAL_ROUTE_INFOS.set(key, routeInfo);
      if (!options.localizeMapUpdates) {
        ROUTE_INFOS.set(key, routeInfoWithAttribute);
      }
      return routeInfoWithAttribute;
    }
    const routeInfosRef = options.localizeMapUpdates ? LOCAL_ROUTE_INFOS : ROUTE_INFOS;
    let routeInfo = {
      find(predicate, thisArg) {
        let publicInfo;
        let arr = [];
        if (predicate.length === 3) {
          arr = routeInfos.map(
          // SAFETY: This should be safe since it is just for use as a key
          info => routeInfosRef.get(info));
        }
        for (let i = 0; routeInfos.length > i; i++) {
          // SAFETY: This should be safe since it is just for use as a key
          publicInfo = routeInfosRef.get(routeInfos[i]);
          if (predicate.call(thisArg, publicInfo, i, arr)) {
            return publicInfo;
          }
        }
        return undefined;
      },
      get name() {
        return name;
      },
      get paramNames() {
        return paramNames;
      },
      get metadata() {
        return buildRouteInfoMetadata(info.route);
      },
      get parent() {
        let parent = routeInfos[i - 1];
        if (parent === undefined) {
          return null;
        }
        // SAFETY: This should be safe since it is just for use as a key
        return routeInfosRef.get(parent);
      },
      get child() {
        let child = routeInfos[i + 1];
        if (child === undefined) {
          return null;
        }
        // SAFETY: This should be safe since it is just for use as a key
        return routeInfosRef.get(child);
      },
      get localName() {
        let parts = this.name.split('.');
        return parts[parts.length - 1];
      },
      get params() {
        return params;
      },
      get queryParams() {
        return queryParams;
      }
    };
    if (options.includeAttributes) {
      routeInfo = createRouteInfoWithAttributes(routeInfo, context);
    }
    // SAFETY: This should be safe since it is just for use as a key
    LOCAL_ROUTE_INFOS.set(info, routeInfo);
    if (!options.localizeMapUpdates) {
      // SAFETY: This should be safe since it is just for use as a key
      ROUTE_INFOS.set(info, routeInfo);
    }
    return routeInfo;
  });
}
function createRouteInfoWithAttributes(routeInfo, context) {
  let attributes = {
    get attributes() {
      return context;
    }
  };
  if (!Object.isExtensible(routeInfo) || routeInfo.hasOwnProperty('attributes')) {
    return Object.freeze(Object.assign({}, routeInfo, attributes));
  }
  return Object.assign(routeInfo, attributes);
}
function buildRouteInfoMetadata(route) {
  if (route !== undefined && route !== null && route.buildRouteInfoMetadata !== undefined) {
    return route.buildRouteInfoMetadata();
  }
  return null;
}
function attachMetadata(route, routeInfo) {
  let metadata = {
    get metadata() {
      return buildRouteInfoMetadata(route);
    }
  };
  if (!Object.isExtensible(routeInfo) || routeInfo.hasOwnProperty('metadata')) {
    return Object.freeze(Object.assign({}, routeInfo, metadata));
  }
  return Object.assign(routeInfo, metadata);
}
class InternalRouteInfo {
  constructor(router, name, paramNames, route) {
    this._routePromise = undefined;
    this._route = null;
    this.params = {};
    this.isResolved = false;
    this.name = name;
    this.paramNames = paramNames;
    this.router = router;
    if (route) {
      this._processRoute(route);
    }
  }
  getModel(_transition) {
    return Promise$1.resolve(this.context);
  }
  serialize(_context) {
    return this.params || {};
  }
  resolve(transition) {
    return Promise$1.resolve(this.routePromise).then(route => {
      throwIfAborted(transition);
      return route;
    }).then(() => this.runBeforeModelHook(transition)).then(() => throwIfAborted(transition)).then(() => this.getModel(transition)).then(resolvedModel => {
      throwIfAborted(transition);
      return resolvedModel;
    }).then(resolvedModel => this.runAfterModelHook(transition, resolvedModel)).then(resolvedModel => this.becomeResolved(transition, resolvedModel));
  }
  becomeResolved(transition, resolvedContext) {
    let params = this.serialize(resolvedContext);
    if (transition) {
      this.stashResolvedModel(transition, resolvedContext);
      transition[PARAMS_SYMBOL] = transition[PARAMS_SYMBOL] || {};
      transition[PARAMS_SYMBOL][this.name] = params;
    }
    let context;
    let contextsMatch = resolvedContext === this.context;
    if ('context' in this || !contextsMatch) {
      context = resolvedContext;
    }
    // SAFETY: Since this is just for lookup, it should be safe
    let cached = ROUTE_INFOS.get(this);
    let resolved = new ResolvedRouteInfo(this.router, this.name, this.paramNames, params, this.route, context);
    if (cached !== undefined) {
      // SAFETY: This is potentially a bit risker, but for what we're doing, it should be ok.
      ROUTE_INFOS.set(resolved, cached);
    }
    return resolved;
  }
  shouldSupersede(routeInfo) {
    // Prefer this newer routeInfo over `other` if:
    // 1) The other one doesn't exist
    // 2) The names don't match
    // 3) This route has a context that doesn't match
    //    the other one (or the other one doesn't have one).
    // 4) This route has parameters that don't match the other.
    if (!routeInfo) {
      return true;
    }
    let contextsMatch = routeInfo.context === this.context;
    return routeInfo.name !== this.name || 'context' in this && !contextsMatch || this.hasOwnProperty('params') && !paramsMatch(this.params, routeInfo.params);
  }
  get route() {
    // _route could be set to either a route object or undefined, so we
    // compare against null to know when it's been set
    if (this._route !== null) {
      return this._route;
    }
    return this.fetchRoute();
  }
  set route(route) {
    this._route = route;
  }
  get routePromise() {
    if (this._routePromise) {
      return this._routePromise;
    }
    this.fetchRoute();
    return this._routePromise;
  }
  set routePromise(routePromise) {
    this._routePromise = routePromise;
  }
  log(transition, message) {
    if (transition.log) {
      transition.log(this.name + ': ' + message);
    }
  }
  updateRoute(route) {
    route._internalName = this.name;
    return this.route = route;
  }
  runBeforeModelHook(transition) {
    if (transition.trigger) {
      transition.trigger(true, 'willResolveModel', transition, this.route);
    }
    let result;
    if (this.route) {
      if (this.route.beforeModel !== undefined) {
        result = this.route.beforeModel(transition);
      }
    }
    if (isTransition(result)) {
      result = null;
    }
    return Promise$1.resolve(result);
  }
  runAfterModelHook(transition, resolvedModel) {
    // Stash the resolved model on the payload.
    // This makes it possible for users to swap out
    // the resolved model in afterModel.
    let name = this.name;
    this.stashResolvedModel(transition, resolvedModel);
    let result;
    if (this.route !== undefined) {
      if (this.route.afterModel !== undefined) {
        result = this.route.afterModel(resolvedModel, transition);
      }
    }
    result = prepareResult(result);
    return Promise$1.resolve(result).then(() => {
      // Ignore the fulfilled value returned from afterModel.
      // Return the value stashed in resolvedModels, which
      // might have been swapped out in afterModel.
      // SAFTEY: We expect this to be of type T, though typing it as such is challenging.
      return transition.resolvedModels[name];
    });
  }
  stashResolvedModel(transition, resolvedModel) {
    transition.resolvedModels = transition.resolvedModels || {};
    // SAFETY: It's unfortunate that we have to do this cast. It should be safe though.
    transition.resolvedModels[this.name] = resolvedModel;
  }
  fetchRoute() {
    let route = this.router.getRoute(this.name);
    return this._processRoute(route);
  }
  _processRoute(route) {
    // Setup a routePromise so that we can wait for asynchronously loaded routes
    this.routePromise = Promise$1.resolve(route);
    // Wait until the 'route' property has been updated when chaining to a route
    // that is a promise
    if (isPromise(route)) {
      this.routePromise = this.routePromise.then(r => {
        return this.updateRoute(r);
      });
      // set to undefined to avoid recursive loop in the route getter
      return this.route = undefined;
    } else if (route) {
      return this.updateRoute(route);
    }
    return undefined;
  }
}
class ResolvedRouteInfo extends InternalRouteInfo {
  constructor(router, name, paramNames, params, route, context) {
    super(router, name, paramNames, route);
    this.params = params;
    this.isResolved = true;
    this.context = context;
  }
  resolve(transition) {
    // A ResolvedRouteInfo just resolved with itself.
    if (transition && transition.resolvedModels) {
      transition.resolvedModels[this.name] = this.context;
    }
    return Promise$1.resolve(this);
  }
}
class UnresolvedRouteInfoByParam extends InternalRouteInfo {
  constructor(router, name, paramNames, params, route) {
    super(router, name, paramNames, route);
    this.params = {};
    if (params) {
      this.params = params;
    }
  }
  getModel(transition) {
    let fullParams = this.params;
    if (transition && transition[QUERY_PARAMS_SYMBOL]) {
      fullParams = {};
      merge(fullParams, this.params);
      fullParams.queryParams = transition[QUERY_PARAMS_SYMBOL];
    }
    let route = this.route;
    let result;
    // FIXME: Review these casts
    if (route.deserialize) {
      result = route.deserialize(fullParams, transition);
    } else if (route.model) {
      result = route.model(fullParams, transition);
    }
    if (result && isTransition(result)) {
      result = undefined;
    }
    return Promise$1.resolve(result);
  }
}
class UnresolvedRouteInfoByObject extends InternalRouteInfo {
  constructor(router, name, paramNames, context) {
    super(router, name, paramNames);
    this.context = context;
    this.serializer = this.router.getSerializer(name);
  }
  getModel(transition) {
    if (this.router.log !== undefined) {
      this.router.log(this.name + ': resolving provided model');
    }
    return super.getModel(transition);
  }
  /**
    @private
       Serializes a route using its custom `serialize` method or
    by a default that looks up the expected property name from
    the dynamic segment.
       @param {Object} model the model to be serialized for this route
  */
  serialize(model) {
    let {
      paramNames,
      context
    } = this;
    if (!model) {
      // SAFETY: By the time we serialize, we expect to be resolved.
      // This may not be an entirely safe assumption though no tests fail.
      model = context;
    }
    let object = {};
    if (isParam(model)) {
      object[paramNames[0]] = model;
      return object;
    }
    // Use custom serialize if it exists.
    if (this.serializer) {
      // invoke this.serializer unbound (getSerializer returns a stateless function)
      return this.serializer.call(null, model, paramNames);
    } else if (this.route !== undefined) {
      if (this.route.serialize) {
        return this.route.serialize(model, paramNames);
      }
    }
    if (paramNames.length !== 1) {
      return;
    }
    let name = paramNames[0];
    if (/_id$/.test(name)) {
      // SAFETY: Model is supposed to extend IModel already
      object[name] = model.id;
    } else {
      object[name] = model;
    }
    return object;
  }
}
function paramsMatch(a, b) {
  if (a === b) {
    // Both are identical, may both be undefined
    return true;
  }
  if (!a || !b) {
    // Only one is undefined, already checked they aren't identical
    return false;
  }
  // Note: this assumes that both params have the same
  // number of keys, but since we're comparing the
  // same routes, they should.
  for (let k in a) {
    if (a.hasOwnProperty(k) && a[k] !== b[k]) {
      return false;
    }
  }
  return true;
}
class TransitionIntent {
  constructor(router, data = {}) {
    this.router = router;
    this.data = data;
  }
}
function handleError(currentState, transition, error) {
  // This is the only possible
  // reject value of TransitionState#resolve
  let routeInfos = currentState.routeInfos;
  let errorHandlerIndex = transition.resolveIndex >= routeInfos.length ? routeInfos.length - 1 : transition.resolveIndex;
  let wasAborted = transition.isAborted;
  throw new TransitionError(error, currentState.routeInfos[errorHandlerIndex].route, wasAborted, currentState);
}
function resolveOneRouteInfo(currentState, transition) {
  if (transition.resolveIndex === currentState.routeInfos.length) {
    // This is is the only possible
    // fulfill value of TransitionState#resolve
    return;
  }
  let routeInfo = currentState.routeInfos[transition.resolveIndex];
  let callback = proceed.bind(null, currentState, transition);
  return routeInfo.resolve(transition).then(callback, null, currentState.promiseLabel('Proceed'));
}
function proceed(currentState, transition, resolvedRouteInfo) {
  let wasAlreadyResolved = currentState.routeInfos[transition.resolveIndex].isResolved;
  // Swap the previously unresolved routeInfo with
  // the resolved routeInfo
  currentState.routeInfos[transition.resolveIndex++] = resolvedRouteInfo;
  if (!wasAlreadyResolved) {
    // Call the redirect hook. The reason we call it here
    // vs. afterModel is so that redirects into child
    // routes don't re-run the model hooks for this
    // already-resolved route.
    let {
      route
    } = resolvedRouteInfo;
    if (route !== undefined) {
      if (route.redirect) {
        route.redirect(resolvedRouteInfo.context, transition);
      }
    }
  }
  // Proceed after ensuring that the redirect hook
  // didn't abort this transition by transitioning elsewhere.
  throwIfAborted(transition);
  return resolveOneRouteInfo(currentState, transition);
}
class TransitionState {
  constructor() {
    this.routeInfos = [];
    this.queryParams = {};
    this.params = {};
  }
  promiseLabel(label) {
    let targetName = '';
    forEach(this.routeInfos, function (routeInfo) {
      if (targetName !== '') {
        targetName += '.';
      }
      targetName += routeInfo.name;
      return true;
    });
    return promiseLabel("'" + targetName + "': " + label);
  }
  resolve(transition) {
    // First, calculate params for this state. This is useful
    // information to provide to the various route hooks.
    let params = this.params;
    forEach(this.routeInfos, routeInfo => {
      params[routeInfo.name] = routeInfo.params || {};
      return true;
    });
    transition.resolveIndex = 0;
    let callback = resolveOneRouteInfo.bind(null, this, transition);
    let errorHandler = handleError.bind(null, this, transition);
    // The prelude RSVP.resolve() async moves us into the promise land.
    return Promise$1.resolve(null, this.promiseLabel('Start transition')).then(callback, null, this.promiseLabel('Resolve route')).catch(errorHandler, this.promiseLabel('Handle error')).then(() => this);
  }
}
class TransitionError {
  constructor(error, route, wasAborted, state) {
    this.error = error;
    this.route = route;
    this.wasAborted = wasAborted;
    this.state = state;
  }
}
class NamedTransitionIntent extends TransitionIntent {
  constructor(router, name, pivotHandler, contexts = [], queryParams = {}, data) {
    super(router, data);
    this.preTransitionState = undefined;
    this.name = name;
    this.pivotHandler = pivotHandler;
    this.contexts = contexts;
    this.queryParams = queryParams;
  }
  applyToState(oldState, isIntermediate) {
    let handlers = this.router.recognizer.handlersFor(this.name);
    let targetRouteName = handlers[handlers.length - 1].handler;
    return this.applyToHandlers(oldState, handlers, targetRouteName, isIntermediate, false);
  }
  applyToHandlers(oldState, parsedHandlers, targetRouteName, isIntermediate, checkingIfActive) {
    let i, len;
    let newState = new TransitionState();
    let objects = this.contexts.slice(0);
    let invalidateIndex = parsedHandlers.length;
    // Pivot handlers are provided for refresh transitions
    if (this.pivotHandler) {
      for (i = 0, len = parsedHandlers.length; i < len; ++i) {
        if (parsedHandlers[i].handler === this.pivotHandler._internalName) {
          invalidateIndex = i;
          break;
        }
      }
    }
    for (i = parsedHandlers.length - 1; i >= 0; --i) {
      let result = parsedHandlers[i];
      let name = result.handler;
      let oldHandlerInfo = oldState.routeInfos[i];
      let newHandlerInfo = null;
      if (result.names.length > 0) {
        if (i >= invalidateIndex) {
          newHandlerInfo = this.createParamHandlerInfo(name, result.names, objects, oldHandlerInfo);
        } else {
          newHandlerInfo = this.getHandlerInfoForDynamicSegment(name, result.names, objects, oldHandlerInfo, targetRouteName, i);
        }
      } else {
        // This route has no dynamic segment.
        // Therefore treat as a param-based handlerInfo
        // with empty params. This will cause the `model`
        // hook to be called with empty params, which is desirable.
        newHandlerInfo = this.createParamHandlerInfo(name, result.names, objects, oldHandlerInfo);
      }
      if (checkingIfActive) {
        // If we're performing an isActive check, we want to
        // serialize URL params with the provided context, but
        // ignore mismatches between old and new context.
        newHandlerInfo = newHandlerInfo.becomeResolved(null,
        // SAFETY: This seems to imply that it would be resolved, but it's unclear if that's actually the case.
        newHandlerInfo.context);
        let oldContext = oldHandlerInfo && oldHandlerInfo.context;
        if (result.names.length > 0 && oldHandlerInfo.context !== undefined && newHandlerInfo.context === oldContext) {
          // If contexts match in isActive test, assume params also match.
          // This allows for flexibility in not requiring that every last
          // handler provide a `serialize` method
          newHandlerInfo.params = oldHandlerInfo && oldHandlerInfo.params;
        }
        newHandlerInfo.context = oldContext;
      }
      let handlerToUse = oldHandlerInfo;
      if (i >= invalidateIndex || newHandlerInfo.shouldSupersede(oldHandlerInfo)) {
        invalidateIndex = Math.min(i, invalidateIndex);
        handlerToUse = newHandlerInfo;
      }
      if (isIntermediate && !checkingIfActive) {
        handlerToUse = handlerToUse.becomeResolved(null,
        // SAFETY: This seems to imply that it would be resolved, but it's unclear if that's actually the case.
        handlerToUse.context);
      }
      newState.routeInfos.unshift(handlerToUse);
    }
    if (objects.length > 0) {
      throw new Error('More context objects were passed than there are dynamic segments for the route: ' + targetRouteName);
    }
    if (!isIntermediate) {
      this.invalidateChildren(newState.routeInfos, invalidateIndex);
    }
    merge(newState.queryParams, this.queryParams || {});
    if (isIntermediate && oldState.queryParams) {
      merge(newState.queryParams, oldState.queryParams);
    }
    return newState;
  }
  invalidateChildren(handlerInfos, invalidateIndex) {
    for (let i = invalidateIndex, l = handlerInfos.length; i < l; ++i) {
      let handlerInfo = handlerInfos[i];
      if (handlerInfo.isResolved) {
        let {
          name,
          params,
          route,
          paramNames
        } = handlerInfos[i];
        handlerInfos[i] = new UnresolvedRouteInfoByParam(this.router, name, paramNames, params, route);
      }
    }
  }
  getHandlerInfoForDynamicSegment(name, names, objects, oldHandlerInfo, _targetRouteName, i) {
    let objectToUse;
    if (objects.length > 0) {
      // Use the objects provided for this transition.
      objectToUse = objects[objects.length - 1];
      if (isParam(objectToUse)) {
        return this.createParamHandlerInfo(name, names, objects, oldHandlerInfo);
      } else {
        objects.pop();
      }
    } else if (oldHandlerInfo && oldHandlerInfo.name === name) {
      // Reuse the matching oldHandlerInfo
      return oldHandlerInfo;
    } else {
      if (this.preTransitionState) {
        let preTransitionHandlerInfo = this.preTransitionState.routeInfos[i];
        objectToUse = preTransitionHandlerInfo === null || preTransitionHandlerInfo === void 0 ? void 0 : preTransitionHandlerInfo.context;
      } else {
        // Ideally we should throw this error to provide maximal
        // information to the user that not enough context objects
        // were provided, but this proves too cumbersome in Ember
        // in cases where inner template helpers are evaluated
        // before parent helpers un-render, in which cases this
        // error somewhat prematurely fires.
        //throw new Error("Not enough context objects were provided to complete a transition to " + targetRouteName + ". Specifically, the " + name + " route needs an object that can be serialized into its dynamic URL segments [" + names.join(', ') + "]");
        return oldHandlerInfo;
      }
    }
    return new UnresolvedRouteInfoByObject(this.router, name, names, objectToUse);
  }
  createParamHandlerInfo(name, names, objects, oldHandlerInfo) {
    let params = {};
    // Soak up all the provided string/numbers
    let numNames = names.length;
    let missingParams = [];
    while (numNames--) {
      // Only use old params if the names match with the new handler
      let oldParams = oldHandlerInfo && name === oldHandlerInfo.name && oldHandlerInfo.params || {};
      let peek = objects[objects.length - 1];
      let paramName = names[numNames];
      if (isParam(peek)) {
        params[paramName] = '' + objects.pop();
      } else {
        // If we're here, this means only some of the params
        // were string/number params, so try and use a param
        // value from a previous handler.
        if (oldParams.hasOwnProperty(paramName)) {
          params[paramName] = oldParams[paramName];
        } else {
          missingParams.push(paramName);
        }
      }
    }
    if (missingParams.length > 0) {
      throw new Error(`You didn't provide enough string/numeric parameters to satisfy all of the dynamic segments for route ${name}.` + ` Missing params: ${missingParams}`);
    }
    return new UnresolvedRouteInfoByParam(this.router, name, names, params);
  }
}
class URLTransitionIntent extends TransitionIntent {
  constructor(router, url, data) {
    super(router, data);
    this.url = url;
    this.preTransitionState = undefined;
  }
  applyToState(oldState) {
    let newState = new TransitionState();
    let results = this.router.recognizer.recognize(this.url),
      i,
      len;
    if (!results) {
      throw new UnrecognizedURLError(this.url);
    }
    let statesDiffer = false;
    let _url = this.url;
    // Checks if a handler is accessible by URL. If it is not, an error is thrown.
    // For the case where the handler is loaded asynchronously, the error will be
    // thrown once it is loaded.
    function checkHandlerAccessibility(handler) {
      if (handler && handler.inaccessibleByURL) {
        throw new UnrecognizedURLError(_url);
      }
      return handler;
    }
    for (i = 0, len = results.length; i < len; ++i) {
      let result = results[i];
      let name = result.handler;
      let paramNames = [];
      if (this.router.recognizer.hasRoute(name)) {
        paramNames = this.router.recognizer.handlersFor(name)[i].names;
      }
      let newRouteInfo = new UnresolvedRouteInfoByParam(this.router, name, paramNames, result.params);
      let route = newRouteInfo.route;
      if (route) {
        checkHandlerAccessibility(route);
      } else {
        // If the handler is being loaded asynchronously, check if we can
        // access it after it has resolved
        newRouteInfo.routePromise = newRouteInfo.routePromise.then(checkHandlerAccessibility);
      }
      let oldRouteInfo = oldState.routeInfos[i];
      if (statesDiffer || newRouteInfo.shouldSupersede(oldRouteInfo)) {
        statesDiffer = true;
        newState.routeInfos[i] = newRouteInfo;
      } else {
        newState.routeInfos[i] = oldRouteInfo;
      }
    }
    merge(newState.queryParams, results.queryParams);
    return newState;
  }
}
let Router$1 = class Router {
  constructor(logger) {
    this._lastQueryParams = {};
    this.state = undefined;
    this.oldState = undefined;
    this.activeTransition = undefined;
    this.currentRouteInfos = undefined;
    this._changedQueryParams = undefined;
    this.currentSequence = 0;
    this.log = logger;
    this.recognizer = new RouteRecognizer();
    this.reset();
  }
  /**
    The main entry point into the router. The API is essentially
    the same as the `map` method in `route-recognizer`.
       This method extracts the String handler at the last `.to()`
    call and uses it as the name of the whole route.
       @param {Function} callback
  */
  map(callback) {
    this.recognizer.map(callback, function (recognizer, routes) {
      for (let i = routes.length - 1, proceed = true; i >= 0 && proceed; --i) {
        let route = routes[i];
        let handler = route.handler;
        recognizer.add(routes, {
          as: handler
        });
        proceed = route.path === '/' || route.path === '' || handler.slice(-6) === '.index';
      }
    });
  }
  hasRoute(route) {
    return this.recognizer.hasRoute(route);
  }
  queryParamsTransition(changelist, wasTransitioning, oldState, newState) {
    this.fireQueryParamDidChange(newState, changelist);
    if (!wasTransitioning && this.activeTransition) {
      // One of the routes in queryParamsDidChange
      // caused a transition. Just return that transition.
      return this.activeTransition;
    } else {
      // Running queryParamsDidChange didn't change anything.
      // Just update query params and be on our way.
      // We have to return a noop transition that will
      // perform a URL update at the end. This gives
      // the user the ability to set the url update
      // method (default is replaceState).
      let newTransition = new Transition(this, undefined, undefined);
      newTransition.queryParamsOnly = true;
      oldState.queryParams = this.finalizeQueryParamChange(newState.routeInfos, newState.queryParams, newTransition);
      newTransition[QUERY_PARAMS_SYMBOL] = newState.queryParams;
      this.toReadOnlyInfos(newTransition, newState);
      this.routeWillChange(newTransition);
      newTransition.promise = newTransition.promise.then(result => {
        if (!newTransition.isAborted) {
          this._updateURL(newTransition, oldState);
          this.didTransition(this.currentRouteInfos);
          this.toInfos(newTransition, newState.routeInfos, true);
          this.routeDidChange(newTransition);
        }
        return result;
      }, null, promiseLabel('Transition complete'));
      return newTransition;
    }
  }
  transitionByIntent(intent, isIntermediate) {
    try {
      return this.getTransitionByIntent(intent, isIntermediate);
    } catch (e) {
      return new Transition(this, intent, undefined, e, undefined);
    }
  }
  recognize(url) {
    let intent = new URLTransitionIntent(this, url);
    let newState = this.generateNewState(intent);
    if (newState === null) {
      return newState;
    }
    let readonlyInfos = toReadOnlyRouteInfo(newState.routeInfos, newState.queryParams, {
      includeAttributes: false,
      localizeMapUpdates: true
    });
    return readonlyInfos[readonlyInfos.length - 1];
  }
  recognizeAndLoad(url) {
    let intent = new URLTransitionIntent(this, url);
    let newState = this.generateNewState(intent);
    if (newState === null) {
      return Promise$1.reject(`URL ${url} was not recognized`);
    }
    let newTransition = new Transition(this, intent, newState, undefined);
    return newTransition.then(() => {
      let routeInfosWithAttributes = toReadOnlyRouteInfo(newState.routeInfos, newTransition[QUERY_PARAMS_SYMBOL], {
        includeAttributes: true,
        localizeMapUpdates: false
      });
      return routeInfosWithAttributes[routeInfosWithAttributes.length - 1];
    });
  }
  generateNewState(intent) {
    try {
      return intent.applyToState(this.state, false);
    } catch (e) {
      return null;
    }
  }
  getTransitionByIntent(intent, isIntermediate) {
    let wasTransitioning = !!this.activeTransition;
    let oldState = wasTransitioning ? this.activeTransition[STATE_SYMBOL] : this.state;
    let newTransition;
    let newState = intent.applyToState(oldState, isIntermediate);
    let queryParamChangelist = getChangelist(oldState.queryParams, newState.queryParams);
    if (routeInfosEqual(newState.routeInfos, oldState.routeInfos)) {
      // This is a no-op transition. See if query params changed.
      if (queryParamChangelist) {
        let newTransition = this.queryParamsTransition(queryParamChangelist, wasTransitioning, oldState, newState);
        newTransition.queryParamsOnly = true;
        // SAFETY: The returned OpaqueTransition should actually be this.
        return newTransition;
      }
      // No-op. No need to create a new transition.
      return this.activeTransition || new Transition(this, undefined, undefined);
    }
    if (isIntermediate) {
      let transition = new Transition(this, undefined, newState);
      transition.isIntermediate = true;
      this.toReadOnlyInfos(transition, newState);
      this.setupContexts(newState, transition);
      this.routeWillChange(transition);
      return this.activeTransition;
    }
    // Create a new transition to the destination route.
    newTransition = new Transition(this, intent, newState, undefined, this.activeTransition);
    // transition is to same route with same params, only query params differ.
    // not caught above probably because refresh() has been used
    if (routeInfosSameExceptQueryParams(newState.routeInfos, oldState.routeInfos)) {
      newTransition.queryParamsOnly = true;
    }
    this.toReadOnlyInfos(newTransition, newState);
    // Abort and usurp any previously active transition.
    if (this.activeTransition) {
      this.activeTransition.redirect(newTransition);
    }
    this.activeTransition = newTransition;
    // Transition promises by default resolve with resolved state.
    // For our purposes, swap out the promise to resolve
    // after the transition has been finalized.
    newTransition.promise = newTransition.promise.then(result => {
      return this.finalizeTransition(newTransition, result);
    }, null, promiseLabel('Settle transition promise when transition is finalized'));
    if (!wasTransitioning) {
      this.notifyExistingHandlers(newState, newTransition);
    }
    this.fireQueryParamDidChange(newState, queryParamChangelist);
    return newTransition;
  }
  /**
  @private
     Begins and returns a Transition based on the provided
  arguments. Accepts arguments in the form of both URL
  transitions and named transitions.
     @param {Router} router
  @param {Array[Object]} args arguments passed to transitionTo,
    replaceWith, or handleURL
  */
  doTransition(name, modelsArray = [], isIntermediate = false) {
    let lastArg = modelsArray[modelsArray.length - 1];
    let queryParams = {};
    if (lastArg && Object.prototype.hasOwnProperty.call(lastArg, 'queryParams')) {
      // We just checked this.
      // TODO: Use an assertion?
      queryParams = modelsArray.pop().queryParams;
    }
    let intent;
    if (name === undefined) {
      log$1(this, 'Updating query params');
      // A query param update is really just a transition
      // into the route you're already on.
      let {
        routeInfos
      } = this.state;
      intent = new NamedTransitionIntent(this, routeInfos[routeInfos.length - 1].name, undefined, [], queryParams);
    } else if (name.charAt(0) === '/') {
      log$1(this, 'Attempting URL transition to ' + name);
      intent = new URLTransitionIntent(this, name);
    } else {
      log$1(this, 'Attempting transition to ' + name);
      intent = new NamedTransitionIntent(this, name, undefined,
      // SAFETY: We know this to be the case since we removed the last item if it was QPs
      modelsArray, queryParams);
    }
    return this.transitionByIntent(intent, isIntermediate);
  }
  /**
  @private
     Updates the URL (if necessary) and calls `setupContexts`
  to update the router's array of `currentRouteInfos`.
  */
  finalizeTransition(transition, newState) {
    try {
      log$1(transition.router, transition.sequence, 'Resolved all models on destination route; finalizing transition.');
      let routeInfos = newState.routeInfos;
      // Run all the necessary enter/setup/exit hooks
      this.setupContexts(newState, transition);
      // Check if a redirect occurred in enter/setup
      if (transition.isAborted) {
        // TODO: cleaner way? distinguish b/w targetRouteInfos?
        this.state.routeInfos = this.currentRouteInfos;
        return Promise$1.reject(logAbort(transition));
      }
      this._updateURL(transition, newState);
      transition.isActive = false;
      this.activeTransition = undefined;
      this.triggerEvent(this.currentRouteInfos, true, 'didTransition', []);
      this.didTransition(this.currentRouteInfos);
      this.toInfos(transition, newState.routeInfos, true);
      this.routeDidChange(transition);
      log$1(this, transition.sequence, 'TRANSITION COMPLETE.');
      // Resolve with the final route.
      return routeInfos[routeInfos.length - 1].route;
    } catch (e) {
      if (!isTransitionAborted(e)) {
        let infos = transition[STATE_SYMBOL].routeInfos;
        transition.trigger(true, 'error', e, transition, infos[infos.length - 1].route);
        transition.abort();
      }
      throw e;
    }
  }
  /**
  @private
     Takes an Array of `RouteInfo`s, figures out which ones are
  exiting, entering, or changing contexts, and calls the
  proper route hooks.
     For example, consider the following tree of routes. Each route is
  followed by the URL segment it handles.
     ```
  |~index ("/")
  | |~posts ("/posts")
  | | |-showPost ("/:id")
  | | |-newPost ("/new")
  | | |-editPost ("/edit")
  | |~about ("/about/:id")
  ```
     Consider the following transitions:
     1. A URL transition to `/posts/1`.
     1. Triggers the `*model` callbacks on the
        `index`, `posts`, and `showPost` routes
     2. Triggers the `enter` callback on the same
     3. Triggers the `setup` callback on the same
  2. A direct transition to `newPost`
     1. Triggers the `exit` callback on `showPost`
     2. Triggers the `enter` callback on `newPost`
     3. Triggers the `setup` callback on `newPost`
  3. A direct transition to `about` with a specified
     context object
     1. Triggers the `exit` callback on `newPost`
        and `posts`
     2. Triggers the `serialize` callback on `about`
     3. Triggers the `enter` callback on `about`
     4. Triggers the `setup` callback on `about`
     @param {Router} transition
  @param {TransitionState} newState
  */
  setupContexts(newState, transition) {
    let partition = this.partitionRoutes(this.state, newState);
    let i, l, route;
    for (i = 0, l = partition.exited.length; i < l; i++) {
      route = partition.exited[i].route;
      delete route.context;
      if (route !== undefined) {
        if (route._internalReset !== undefined) {
          route._internalReset(true, transition);
        }
        if (route.exit !== undefined) {
          route.exit(transition);
        }
      }
    }
    let oldState = this.oldState = this.state;
    this.state = newState;
    let currentRouteInfos = this.currentRouteInfos = partition.unchanged.slice();
    try {
      for (i = 0, l = partition.reset.length; i < l; i++) {
        route = partition.reset[i].route;
        if (route !== undefined) {
          if (route._internalReset !== undefined) {
            route._internalReset(false, transition);
          }
        }
      }
      for (i = 0, l = partition.updatedContext.length; i < l; i++) {
        this.routeEnteredOrUpdated(currentRouteInfos, partition.updatedContext[i], false, transition);
      }
      for (i = 0, l = partition.entered.length; i < l; i++) {
        this.routeEnteredOrUpdated(currentRouteInfos, partition.entered[i], true, transition);
      }
    } catch (e) {
      this.state = oldState;
      this.currentRouteInfos = oldState.routeInfos;
      throw e;
    }
    this.state.queryParams = this.finalizeQueryParamChange(currentRouteInfos, newState.queryParams, transition);
  }
  /**
  @private
     Fires queryParamsDidChange event
  */
  fireQueryParamDidChange(newState, queryParamChangelist) {
    // If queryParams changed trigger event
    if (queryParamChangelist) {
      // This is a little hacky but we need some way of storing
      // changed query params given that no activeTransition
      // is guaranteed to have occurred.
      this._changedQueryParams = queryParamChangelist.all;
      this.triggerEvent(newState.routeInfos, true, 'queryParamsDidChange', [queryParamChangelist.changed, queryParamChangelist.all, queryParamChangelist.removed]);
      this._changedQueryParams = undefined;
    }
  }
  /**
  @private
     Helper method used by setupContexts. Handles errors or redirects
  that may happen in enter/setup.
  */
  routeEnteredOrUpdated(currentRouteInfos, routeInfo, enter, transition) {
    let route = routeInfo.route,
      context = routeInfo.context;
    function _routeEnteredOrUpdated(route) {
      if (enter) {
        if (route.enter !== undefined) {
          route.enter(transition);
        }
      }
      throwIfAborted(transition);
      route.context = context;
      if (route.contextDidChange !== undefined) {
        route.contextDidChange();
      }
      if (route.setup !== undefined) {
        route.setup(context, transition);
      }
      throwIfAborted(transition);
      currentRouteInfos.push(routeInfo);
      return route;
    }
    // If the route doesn't exist, it means we haven't resolved the route promise yet
    if (route === undefined) {
      routeInfo.routePromise = routeInfo.routePromise.then(_routeEnteredOrUpdated);
    } else {
      _routeEnteredOrUpdated(route);
    }
    return true;
  }
  /**
  @private
     This function is called when transitioning from one URL to
  another to determine which routes are no longer active,
  which routes are newly active, and which routes remain
  active but have their context changed.
     Take a list of old routes and new routes and partition
  them into four buckets:
     * unchanged: the route was active in both the old and
    new URL, and its context remains the same
  * updated context: the route was active in both the
    old and new URL, but its context changed. The route's
    `setup` method, if any, will be called with the new
    context.
  * exited: the route was active in the old URL, but is
    no longer active.
  * entered: the route was not active in the old URL, but
    is now active.
     The PartitionedRoutes structure has four fields:
     * `updatedContext`: a list of `RouteInfo` objects that
    represent routes that remain active but have a changed
    context
  * `entered`: a list of `RouteInfo` objects that represent
    routes that are newly active
  * `exited`: a list of `RouteInfo` objects that are no
    longer active.
  * `unchanged`: a list of `RouteInfo` objects that remain active.
     @param {Array[InternalRouteInfo]} oldRoutes a list of the route
    information for the previous URL (or `[]` if this is the
    first handled transition)
  @param {Array[InternalRouteInfo]} newRoutes a list of the route
    information for the new URL
     @return {Partition}
  */
  partitionRoutes(oldState, newState) {
    let oldRouteInfos = oldState.routeInfos;
    let newRouteInfos = newState.routeInfos;
    let routes = {
      updatedContext: [],
      exited: [],
      entered: [],
      unchanged: [],
      reset: []
    };
    let routeChanged,
      contextChanged = false,
      i,
      l;
    for (i = 0, l = newRouteInfos.length; i < l; i++) {
      let oldRouteInfo = oldRouteInfos[i],
        newRouteInfo = newRouteInfos[i];
      if (!oldRouteInfo || oldRouteInfo.route !== newRouteInfo.route) {
        routeChanged = true;
      }
      if (routeChanged) {
        routes.entered.push(newRouteInfo);
        if (oldRouteInfo) {
          routes.exited.unshift(oldRouteInfo);
        }
      } else if (contextChanged || oldRouteInfo.context !== newRouteInfo.context) {
        contextChanged = true;
        routes.updatedContext.push(newRouteInfo);
      } else {
        routes.unchanged.push(oldRouteInfo);
      }
    }
    for (i = newRouteInfos.length, l = oldRouteInfos.length; i < l; i++) {
      routes.exited.unshift(oldRouteInfos[i]);
    }
    routes.reset = routes.updatedContext.slice();
    routes.reset.reverse();
    return routes;
  }
  _updateURL(transition, state) {
    let urlMethod = transition.urlMethod;
    if (!urlMethod) {
      return;
    }
    let {
      routeInfos
    } = state;
    let {
      name: routeName
    } = routeInfos[routeInfos.length - 1];
    let params = {};
    for (let i = routeInfos.length - 1; i >= 0; --i) {
      let routeInfo = routeInfos[i];
      merge(params, routeInfo.params);
      if (routeInfo.route.inaccessibleByURL) {
        urlMethod = null;
      }
    }
    if (urlMethod) {
      params.queryParams = transition._visibleQueryParams || state.queryParams;
      let url = this.recognizer.generate(routeName, params);
      // transitions during the initial transition must always use replaceURL.
      // When the app boots, you are at a url, e.g. /foo. If some route
      // redirects to bar as part of the initial transition, you don't want to
      // add a history entry for /foo. If you do, pressing back will immediately
      // hit the redirect again and take you back to /bar, thus killing the back
      // button
      let initial = transition.isCausedByInitialTransition;
      // say you are at / and you click a link to route /foo. In /foo's
      // route, the transition is aborted using replaceWith('/bar').
      // Because the current url is still /, the history entry for / is
      // removed from the history. Clicking back will take you to the page
      // you were on before /, which is often not even the app, thus killing
      // the back button. That's why updateURL is always correct for an
      // aborting transition that's not the initial transition
      let replaceAndNotAborting = urlMethod === 'replace' && !transition.isCausedByAbortingTransition;
      // because calling refresh causes an aborted transition, this needs to be
      // special cased - if the initial transition is a replace transition, the
      // urlMethod should be honored here.
      let isQueryParamsRefreshTransition = transition.queryParamsOnly && urlMethod === 'replace';
      // say you are at / and you a `replaceWith(/foo)` is called. Then, that
      // transition is aborted with `replaceWith(/bar)`. At the end, we should
      // end up with /bar replacing /. We are replacing the replace. We only
      // will replace the initial route if all subsequent aborts are also
      // replaces. However, there is some ambiguity around the correct behavior
      // here.
      let replacingReplace = urlMethod === 'replace' && transition.isCausedByAbortingReplaceTransition;
      if (initial || replaceAndNotAborting || isQueryParamsRefreshTransition || replacingReplace) {
        this.replaceURL(url);
      } else {
        this.updateURL(url);
      }
    }
  }
  finalizeQueryParamChange(resolvedHandlers, newQueryParams, transition) {
    // We fire a finalizeQueryParamChange event which
    // gives the new route hierarchy a chance to tell
    // us which query params it's consuming and what
    // their final values are. If a query param is
    // no longer consumed in the final route hierarchy,
    // its serialized segment will be removed
    // from the URL.
    for (let k in newQueryParams) {
      if (newQueryParams.hasOwnProperty(k) && newQueryParams[k] === null) {
        delete newQueryParams[k];
      }
    }
    let finalQueryParamsArray = [];
    this.triggerEvent(resolvedHandlers, true, 'finalizeQueryParamChange', [newQueryParams, finalQueryParamsArray, transition]);
    if (transition) {
      transition._visibleQueryParams = {};
    }
    let finalQueryParams = {};
    for (let i = 0, len = finalQueryParamsArray.length; i < len; ++i) {
      let qp = finalQueryParamsArray[i];
      finalQueryParams[qp.key] = qp.value;
      if (transition && qp.visible !== false) {
        transition._visibleQueryParams[qp.key] = qp.value;
      }
    }
    return finalQueryParams;
  }
  toReadOnlyInfos(newTransition, newState) {
    let oldRouteInfos = this.state.routeInfos;
    this.fromInfos(newTransition, oldRouteInfos);
    this.toInfos(newTransition, newState.routeInfos);
    this._lastQueryParams = newState.queryParams;
  }
  fromInfos(newTransition, oldRouteInfos) {
    if (newTransition !== undefined && oldRouteInfos.length > 0) {
      let fromInfos = toReadOnlyRouteInfo(oldRouteInfos, Object.assign({}, this._lastQueryParams), {
        includeAttributes: true,
        localizeMapUpdates: false
      });
      newTransition.from = fromInfos[fromInfos.length - 1] || null;
    }
  }
  toInfos(newTransition, newRouteInfos, includeAttributes = false) {
    if (newTransition !== undefined && newRouteInfos.length > 0) {
      let toInfos = toReadOnlyRouteInfo(newRouteInfos, Object.assign({}, newTransition[QUERY_PARAMS_SYMBOL]), {
        includeAttributes,
        localizeMapUpdates: false
      });
      newTransition.to = toInfos[toInfos.length - 1] || null;
    }
  }
  notifyExistingHandlers(newState, newTransition) {
    let oldRouteInfos = this.state.routeInfos,
      i,
      oldRouteInfoLen,
      oldHandler,
      newRouteInfo;
    oldRouteInfoLen = oldRouteInfos.length;
    for (i = 0; i < oldRouteInfoLen; i++) {
      oldHandler = oldRouteInfos[i];
      newRouteInfo = newState.routeInfos[i];
      if (!newRouteInfo || oldHandler.name !== newRouteInfo.name) {
        break;
      }
      if (!newRouteInfo.isResolved) ;
    }
    this.triggerEvent(oldRouteInfos, true, 'willTransition', [newTransition]);
    this.routeWillChange(newTransition);
    this.willTransition(oldRouteInfos, newState.routeInfos, newTransition);
  }
  /**
    Clears the current and target route routes and triggers exit
    on each of them starting at the leaf and traversing up through
    its ancestors.
  */
  reset() {
    if (this.state) {
      forEach(this.state.routeInfos.slice().reverse(), function (routeInfo) {
        let route = routeInfo.route;
        if (route !== undefined) {
          if (route.exit !== undefined) {
            route.exit();
          }
        }
        return true;
      });
    }
    this.oldState = undefined;
    this.state = new TransitionState();
    this.currentRouteInfos = undefined;
  }
  /**
    let handler = routeInfo.handler;
    The entry point for handling a change to the URL (usually
    via the back and forward button).
       Returns an Array of handlers and the parameters associated
    with those parameters.
       @param {String} url a URL to process
       @return {Array} an Array of `[handler, parameter]` tuples
  */
  handleURL(url) {
    // Perform a URL-based transition, but don't change
    // the URL afterward, since it already happened.
    if (url.charAt(0) !== '/') {
      url = '/' + url;
    }
    return this.doTransition(url).method(null);
  }
  /**
    Transition into the specified named route.
       If necessary, trigger the exit callback on any routes
    that are no longer represented by the target route.
       @param {String} name the name of the route
  */
  transitionTo(name, ...contexts) {
    if (typeof name === 'object') {
      contexts.push(name);
      return this.doTransition(undefined, contexts, false);
    }
    return this.doTransition(name, contexts);
  }
  intermediateTransitionTo(name, ...args) {
    return this.doTransition(name, args, true);
  }
  refresh(pivotRoute) {
    let previousTransition = this.activeTransition;
    let state = previousTransition ? previousTransition[STATE_SYMBOL] : this.state;
    let routeInfos = state.routeInfos;
    if (pivotRoute === undefined) {
      pivotRoute = routeInfos[0].route;
    }
    log$1(this, 'Starting a refresh transition');
    let name = routeInfos[routeInfos.length - 1].name;
    let intent = new NamedTransitionIntent(this, name, pivotRoute, [], this._changedQueryParams || state.queryParams);
    let newTransition = this.transitionByIntent(intent, false);
    // if the previous transition is a replace transition, that needs to be preserved
    if (previousTransition && previousTransition.urlMethod === 'replace') {
      newTransition.method(previousTransition.urlMethod);
    }
    return newTransition;
  }
  /**
    Identical to `transitionTo` except that the current URL will be replaced
    if possible.
       This method is intended primarily for use with `replaceState`.
       @param {String} name the name of the route
  */
  replaceWith(name) {
    return this.doTransition(name).method('replace');
  }
  /**
    Take a named route and context objects and generate a
    URL.
       @param {String} name the name of the route to generate
      a URL for
    @param {...Object} objects a list of objects to serialize
       @return {String} a URL
  */
  generate(routeName, ...args) {
    let partitionedArgs = extractQueryParams(args),
      suppliedParams = partitionedArgs[0],
      queryParams = partitionedArgs[1];
    // Construct a TransitionIntent with the provided params
    // and apply it to the present state of the router.
    let intent = new NamedTransitionIntent(this, routeName, undefined, suppliedParams);
    let state = intent.applyToState(this.state, false);
    let params = {};
    for (let i = 0, len = state.routeInfos.length; i < len; ++i) {
      let routeInfo = state.routeInfos[i];
      let routeParams = routeInfo.serialize();
      merge(params, routeParams);
    }
    params.queryParams = queryParams;
    return this.recognizer.generate(routeName, params);
  }
  applyIntent(routeName, contexts) {
    let intent = new NamedTransitionIntent(this, routeName, undefined, contexts);
    let state = this.activeTransition && this.activeTransition[STATE_SYMBOL] || this.state;
    return intent.applyToState(state, false);
  }
  isActiveIntent(routeName, contexts, queryParams, _state) {
    let state = _state || this.state,
      targetRouteInfos = state.routeInfos,
      routeInfo,
      len;
    if (!targetRouteInfos.length) {
      return false;
    }
    let targetHandler = targetRouteInfos[targetRouteInfos.length - 1].name;
    let recognizerHandlers = this.recognizer.handlersFor(targetHandler);
    let index = 0;
    for (len = recognizerHandlers.length; index < len; ++index) {
      routeInfo = targetRouteInfos[index];
      if (routeInfo.name === routeName) {
        break;
      }
    }
    if (index === recognizerHandlers.length) {
      // The provided route name isn't even in the route hierarchy.
      return false;
    }
    let testState = new TransitionState();
    testState.routeInfos = targetRouteInfos.slice(0, index + 1);
    recognizerHandlers = recognizerHandlers.slice(0, index + 1);
    let intent = new NamedTransitionIntent(this, targetHandler, undefined, contexts);
    let newState = intent.applyToHandlers(testState, recognizerHandlers, targetHandler, true, true);
    let routesEqual = routeInfosEqual(newState.routeInfos, testState.routeInfos);
    if (!queryParams || !routesEqual) {
      return routesEqual;
    }
    // Get a hash of QPs that will still be active on new route
    let activeQPsOnNewHandler = {};
    merge(activeQPsOnNewHandler, queryParams);
    let activeQueryParams = state.queryParams;
    for (let key in activeQueryParams) {
      if (activeQueryParams.hasOwnProperty(key) && activeQPsOnNewHandler.hasOwnProperty(key)) {
        activeQPsOnNewHandler[key] = activeQueryParams[key];
      }
    }
    return routesEqual && !getChangelist(activeQPsOnNewHandler, queryParams);
  }
  isActive(routeName, ...args) {
    let [contexts, queryParams] = extractQueryParams(args);
    return this.isActiveIntent(routeName, contexts, queryParams);
  }
  trigger(name, ...args) {
    this.triggerEvent(this.currentRouteInfos, false, name, args);
  }
};
function routeInfosEqual(routeInfos, otherRouteInfos) {
  if (routeInfos.length !== otherRouteInfos.length) {
    return false;
  }
  for (let i = 0, len = routeInfos.length; i < len; ++i) {
    // SAFETY: Just casting for comparison
    if (routeInfos[i] !== otherRouteInfos[i]) {
      return false;
    }
  }
  return true;
}
function routeInfosSameExceptQueryParams(routeInfos, otherRouteInfos) {
  if (routeInfos.length !== otherRouteInfos.length) {
    return false;
  }
  for (let i = 0, len = routeInfos.length; i < len; ++i) {
    if (routeInfos[i].name !== otherRouteInfos[i].name) {
      return false;
    }
    if (!paramsEqual(routeInfos[i].params, otherRouteInfos[i].params)) {
      return false;
    }
  }
  return true;
}
function paramsEqual(params, otherParams) {
  if (params === otherParams) {
    // Both identical or both undefined
    return true;
  }
  if (!params || !otherParams) {
    // One is falsy but other is not
    return false;
  }
  let keys = Object.keys(params);
  let otherKeys = Object.keys(otherParams);
  if (keys.length !== otherKeys.length) {
    return false;
  }
  for (let i = 0, len = keys.length; i < len; ++i) {
    let key = keys[i];
    if (params[key] !== otherParams[key]) {
      return false;
    }
  }
  return true;
}

/**
@module @ember/routing/router
*/

function defaultDidTransition(infos) {
  updatePaths(this);
  this._cancelSlowTransitionTimer();
  this.notifyPropertyChange('url');
  this.set('currentState', this.targetState);
}
function defaultWillTransition(oldInfos, newInfos) {
}
function K() {
  return this;
}
const {
  slice
} = Array.prototype;

/**
  The `EmberRouter` class manages the application state and URLs. Refer to
  the [routing guide](https://guides.emberjs.com/release/routing/) for documentation.

  @class EmberRouter
  @extends EmberObject
  @uses Evented
  @public
*/
class EmberRouter extends EmberObject.extend(Evented) {
  /**
   Represents the URL of the root of the application, often '/'. This prefix is
    assumed on all routes defined on this router.
     @property rootURL
    @default '/'
    @public
  */
  // Set with reopen to allow overriding via extend

  /**
   The `location` property determines the type of URL's that your
    application will use.
     The following location types are currently available:
     * `history` - use the browser's history API to make the URLs look just like any standard URL
    * `hash` - use `#` to separate the server part of the URL from the Ember part: `/blog/#/posts/new`
    * `none` - do not store the Ember URL in the actual browser URL (mainly used for testing)
    * `auto` - use the best option based on browser capabilities: `history` if possible, then `hash` if possible, otherwise `none`
     This value is defaulted to `history` by the `locationType` setting of `/config/environment.js`
     @property location
    @default 'hash'
    @see {Location}
    @public
  */
  // Set with reopen to allow overriding via extend

  _routerMicrolib;
  _didSetupRouter = false;
  _initialTransitionStarted = false;
  currentURL = null;
  currentRouteName = null;
  currentPath = null;
  currentRoute = null;
  _qpCache = Object.create(null);

  // Set of QueryParam['urlKey']
  _qpUpdates = new Set();
  _queuedQPChanges = {};
  _bucketCache;
  _toplevelView = null;
  _handledErrors = new Set();
  _engineInstances = Object.create(null);
  _engineInfoByRoute = Object.create(null);
  _routerService;
  _slowTransitionTimer = null;
  namespace;

  // Begin Evented

  // End Evented

  // Set with reopenClass
  static dslCallbacks;

  /**
    The `Router.map` function allows you to define mappings from URLs to routes
    in your application. These mappings are defined within the
    supplied callback function using `this.route`.
     The first parameter is the name of the route which is used by default as the
    path name as well.
     The second parameter is the optional options hash. Available options are:
       * `path`: allows you to provide your own path as well as mark dynamic
        segments.
      * `resetNamespace`: false by default; when nesting routes, ember will
        combine the route names to form the fully-qualified route name, which is
        used with `{{link-to}}` or manually transitioning to routes. Setting
        `resetNamespace: true` will cause the route not to inherit from its
        parent route's names. This is handy for preventing extremely long route names.
        Keep in mind that the actual URL path behavior is still retained.
     The third parameter is a function, which can be used to nest routes.
    Nested routes, by default, will have the parent route tree's route name and
    path prepended to it's own.
     ```app/router.js
    Router.map(function(){
      this.route('post', { path: '/post/:post_id' }, function() {
        this.route('edit');
        this.route('comments', { resetNamespace: true }, function() {
          this.route('new');
        });
      });
    });
    ```
     @method map
    @param callback
    @public
  */
  static map(callback) {
    if (!this.dslCallbacks) {
      this.dslCallbacks = [];
      // FIXME: Can we remove this?
      this.reopenClass({
        dslCallbacks: this.dslCallbacks
      });
    }
    this.dslCallbacks.push(callback);
    return this;
  }
  static _routePath(routeInfos) {
    let path = [];

    // We have to handle coalescing resource names that
    // are prefixed with their parent's names, e.g.
    // ['foo', 'foo.bar.baz'] => 'foo.bar.baz', not 'foo.foo.bar.baz'

    function intersectionMatches(a1, a2) {
      for (let i = 0; i < a1.length; ++i) {
        if (a1[i] !== a2[i]) {
          return false;
        }
      }
      return true;
    }
    let name, nameParts, oldNameParts;
    for (let i = 1; i < routeInfos.length; i++) {
      let routeInfo = routeInfos[i];
      name = routeInfo.name;
      nameParts = name.split('.');
      oldNameParts = slice.call(path);
      while (oldNameParts.length) {
        if (intersectionMatches(oldNameParts, nameParts)) {
          break;
        }
        oldNameParts.shift();
      }
      path.push(...nameParts.slice(oldNameParts.length));
    }
    return path.join('.');
  }

  // Note that owner is actually required in this scenario, but since it is strictly
  // optional in other contexts trying to make it required here confuses TS.
  constructor(owner) {
    super(owner);
    this._resetQueuedQueryParameterChanges();
    this.namespace = owner.lookup('application:main');
    let bucketCache = owner.lookup(privatize`-bucket-cache:main`);
    this._bucketCache = bucketCache;
    let routerService = owner.lookup('service:router');
    this._routerService = routerService;
  }
  _initRouterJs() {
    let location = get$1(this, 'location');
    let router = this;
    const owner = getOwner$1(this);
    let seen = Object.create(null);
    class PrivateRouter extends Router$1 {
      getRoute(name) {
        let routeName = name;
        let routeOwner = owner;
        let engineInfo = router._engineInfoByRoute[routeName];
        if (engineInfo) {
          let engineInstance = router._getEngineInstance(engineInfo);
          routeOwner = engineInstance;
          routeName = engineInfo.localFullName;
        }
        let fullRouteName = `route:${routeName}`;
        let route = routeOwner.lookup(fullRouteName);
        if (seen[name]) {
          return route;
        }
        seen[name] = true;
        if (!route) {
          // SAFETY: this is configured in `commonSetupRegistry` in the
          // `@ember/application/lib` package.
          let DefaultRoute = routeOwner.factoryFor('route:basic').class;
          routeOwner.register(fullRouteName, DefaultRoute.extend());
          route = routeOwner.lookup(fullRouteName);
        }
        route._setRouteName(routeName);
        if (engineInfo && !hasDefaultSerialize(route)) {
          throw new Error('Defining a custom serialize method on an Engine route is not supported.');
        }
        return route;
      }
      getSerializer(name) {
        let engineInfo = router._engineInfoByRoute[name];

        // If this is not an Engine route, we fall back to the handler for serialization
        if (!engineInfo) {
          return;
        }
        return engineInfo.serializeMethod || defaultSerialize;
      }
      updateURL(path) {
        once(() => {
          location.setURL(path);
          set(router, 'currentURL', path);
        });
      }

      // TODO: merge into routeDidChange
      didTransition(infos) {
        router.didTransition(infos);
      }

      // TODO: merge into routeWillChange
      willTransition(oldInfos, newInfos) {
        router.willTransition(oldInfos, newInfos);
      }
      triggerEvent(routeInfos, ignoreFailure, name, args) {
        return triggerEvent$1.bind(router)(routeInfos, ignoreFailure, name, args);
      }
      routeWillChange(transition) {
        router.trigger('routeWillChange', transition);
        router._routerService.trigger('routeWillChange', transition);

        // in case of intermediate transition we update the current route
        // to make router.currentRoute.name consistent with router.currentRouteName
        // see https://github.com/emberjs/ember.js/issues/19449
        if (transition.isIntermediate) {
          router.set('currentRoute', transition.to);
        }
      }
      routeDidChange(transition) {
        router.set('currentRoute', transition.to);
        once(() => {
          router.trigger('routeDidChange', transition);
          router._routerService.trigger('routeDidChange', transition);
        });
      }
      transitionDidError(error, transition) {
        if (error.wasAborted || transition.isAborted) {
          // If the error was a transition erorr or the transition aborted
          // log the abort.
          return logAbort(transition);
        } else {
          // Otherwise trigger the "error" event to attempt an intermediate
          // transition into an error substate
          transition.trigger(false, 'error', error.error, transition, error.route);
          if (router._isErrorHandled(error.error)) {
            // If we handled the error with a substate just roll the state back on
            // the transition and send the "routeDidChange" event for landing on
            // the error substate and return the error.
            transition.rollback();
            this.routeDidChange(transition);
            return error.error;
          } else {
            // If it was not handled, abort the transition completely and return
            // the error.
            transition.abort();
            return error.error;
          }
        }
      }
      replaceURL(url) {
        if (location.replaceURL) {
          let doReplaceURL = () => {
            location.replaceURL(url);
            set(router, 'currentURL', url);
          };
          once(doReplaceURL);
        } else {
          this.updateURL(url);
        }
      }
    }
    let routerMicrolib = this._routerMicrolib = new PrivateRouter();
    let dslCallbacks = this.constructor.dslCallbacks || [K];
    let dsl = this._buildDSL();
    dsl.route('application', {
      path: '/',
      resetNamespace: true,
      overrideNameAssertion: true
    }, function () {
      for (let i = 0; i < dslCallbacks.length; i++) {
        dslCallbacks[i].call(this);
      }
    });
    routerMicrolib.map(dsl.generate());
  }
  _buildDSL() {
    let enableLoadingSubstates = this._hasModuleBasedResolver();
    let router = this;
    const owner = getOwner$1(this);
    let options = {
      enableLoadingSubstates,
      resolveRouteMap(name) {
        return owner.factoryFor(`route-map:${name}`);
      },
      addRouteForEngine(name, engineInfo) {
        if (!router._engineInfoByRoute[name]) {
          router._engineInfoByRoute[name] = engineInfo;
        }
      }
    };
    return new DSLImpl(null, options);
  }

  /*
    Resets all pending query parameter changes.
    Called after transitioning to a new route
    based on query parameter changes.
  */
  _resetQueuedQueryParameterChanges() {
    this._queuedQPChanges = {};
  }
  _hasModuleBasedResolver() {
    let owner = getOwner$1(this);
    let resolver = get$1(owner, 'application.__registry__.resolver.moduleBasedResolver');
    return Boolean(resolver);
  }

  /**
    Initializes the current router instance and sets up the change handling
    event listeners used by the instances `location` implementation.
     A property named `initialURL` will be used to determine the initial URL.
    If no value is found `/` will be used.
     @method startRouting
    @private
  */
  startRouting() {
    if (this.setupRouter()) {
      let initialURL = get$1(this, 'initialURL');
      if (initialURL === undefined) {
        initialURL = get$1(this, 'location').getURL();
      }
      let initialTransition = this.handleURL(initialURL);
      if (initialTransition && initialTransition.error) {
        throw initialTransition.error;
      }
    }
  }
  setupRouter() {
    if (this._didSetupRouter) {
      return false;
    }
    this._didSetupRouter = true;
    this._setupLocation();
    let location = get$1(this, 'location');

    // Allow the Location class to cancel the router setup while it refreshes
    // the page
    if (get$1(location, 'cancelRouterSetup')) {
      return false;
    }
    this._initRouterJs();
    location.onUpdateURL(url => {
      this.handleURL(url);
    });
    return true;
  }
  _setOutlets() {
    // This is triggered async during Route#willDestroy.
    // If the router is also being destroyed we do not want to
    // to create another this._toplevelView (and leak the renderer)
    if (this.isDestroying || this.isDestroyed) {
      return;
    }
    let routeInfos = this._routerMicrolib.currentRouteInfos;
    if (!routeInfos) {
      return;
    }
    let root = null;
    let parent = null;
    for (let routeInfo of routeInfos) {
      let route = routeInfo.route;
      let render = getRenderState(route);
      if (render) {
        let state = {
          render,
          outlets: {
            main: undefined
          }
        };
        if (parent) {
          parent.outlets.main = state;
        } else {
          root = state;
        }
        parent = state;
      } else {
        // It used to be that we would create a stub entry and keep traversing,
        // but I don't think that is necessary anymore – if a parent route did
        // not render, then the child routes have nowhere to render into these
        // days. That wasn't always the case since in the past any route can
        // render into any other route's outlets.
        break;
      }
    }

    // when a transitionTo happens after the validation phase
    // during the initial transition _setOutlets is called
    // when no routes are active. However, it will get called
    // again with the correct values during the next turn of
    // the runloop
    if (root === null) {
      return;
    }
    if (!this._toplevelView) {
      let owner = getOwner$1(this);
      // this safe, so in each of these cases we assume that nothing *else* is
      // registered at this `FullName`, and simply check to make sure that
      // *something* is.
      let OutletView = owner.factoryFor('view:-outlet');
      let application = owner.lookup('application:main');
      let environment = owner.lookup('-environment:main');
      let template = owner.lookup('template:-outlet');
      this._toplevelView = OutletView.create({
        environment,
        template,
        application
      });
      this._toplevelView.setOutletState(root);

      // TODO(SAFETY): At least one test runs without this set correctly. At a
      // later time, update the test to configure this correctly. The test ID:
      // `Router Service - non application test:  RouterService#transitionTo with basic route`
      let instance = owner.lookup('-application-instance:main');
      // let instance = owner.lookup('-application-instance:main') as ApplicationInstance | undefined;
      // assert('[BUG] unexpectedly missing `-application-instance:main`', instance !== undefined);

      if (instance) {
        // SAFETY: LOL. This is calling a deprecated API with a type that we
        // cannot actually confirm at a type level *is* a `ViewMixin`. Seems:
        // not great on multiple fronts!
        instance.didCreateRootView(this._toplevelView);
      }
    } else {
      this._toplevelView.setOutletState(root);
    }
  }
  handleURL(url) {
    // Until we have an ember-idiomatic way of accessing #hashes, we need to
    // remove it because router.js doesn't know how to handle it.
    let _url = url.split(/#(.+)?/)[0];
    return this._doURLTransition('handleURL', _url);
  }
  _doURLTransition(routerJsMethod, url) {
    this._initialTransitionStarted = true;
    let transition = this._routerMicrolib[routerJsMethod](url || '/');
    didBeginTransition(transition, this);
    return transition;
  }

  /**
    Transition the application into another route. The route may
    be either a single route or route path:
     @method transitionTo
    @param {String} [name] the name of the route or a URL
    @param {...Object} models the model(s) or identifier(s) to be used while
      transitioning to the route.
    @param {Object} [options] optional hash with a queryParams property
      containing a mapping of query parameters
    @return {Transition} the transition object associated with this
      attempted transition
    @public
  */
  transitionTo(...args) {
    if (resemblesURL(args[0])) {
      return this._doURLTransition('transitionTo', args[0]);
    }
    let {
      routeName,
      models,
      queryParams
    } = extractRouteArgs(args);
    return this._doTransition(routeName, models, queryParams);
  }
  intermediateTransitionTo(name, ...args) {
    this._routerMicrolib.intermediateTransitionTo(name, ...args);
    updatePaths(this);
  }

  /**
    Similar to `transitionTo`, but instead of adding the destination to the browser's URL history,
    it replaces the entry for the current route.
    When the user clicks the "back" button in the browser, there will be fewer steps.
    This is most commonly used to manage redirects in a way that does not cause confusing additions
    to the user's browsing history.
     @method replaceWith
    @param {String} [name] the name of the route or a URL
    @param {...Object} models the model(s) or identifier(s) to be used while
      transitioning to the route.
    @param {Object} [options] optional hash with a queryParams property
      containing a mapping of query parameters
    @return {Transition} the transition object associated with this
      attempted transition
    @public
  */
  replaceWith(...args) {
    return this.transitionTo(...args).method('replace');
  }
  generate(name, ...args) {
    let url = this._routerMicrolib.generate(name, ...args);
    return this.location.formatURL(url);
  }

  /**
    Determines if the supplied route is currently active.
     @method isActive
    @param routeName
    @return {Boolean}
    @private
  */
  isActive(routeName) {
    return this._routerMicrolib.isActive(routeName);
  }

  /**
    An alternative form of `isActive` that doesn't require
    manual concatenation of the arguments into a single
    array.
     @method isActiveIntent
    @param routeName
    @param models
    @param queryParams
    @return {Boolean}
    @private
    @since 1.7.0
  */
  isActiveIntent(routeName, models, queryParams) {
    return this.currentState.isActiveIntent(routeName, models, queryParams);
  }
  send(name, ...args) {
    /*name, context*/
    this._routerMicrolib.trigger(name, ...args);
  }

  /**
    Does this router instance have the given route.
     @method hasRoute
    @return {Boolean}
    @private
  */
  hasRoute(route) {
    return this._routerMicrolib.hasRoute(route);
  }

  /**
    Resets the state of the router by clearing the current route
    handlers and deactivating them.
     @private
    @method reset
   */
  reset() {
    this._didSetupRouter = false;
    this._initialTransitionStarted = false;
    if (this._routerMicrolib) {
      this._routerMicrolib.reset();
    }
  }
  willDestroy() {
    if (this._toplevelView) {
      this._toplevelView.destroy();
      this._toplevelView = null;
    }
    super.willDestroy();
    this.reset();
    let instances = this._engineInstances;
    for (let name in instances) {
      let instanceMap = instances[name];
      for (let id in instanceMap) {
        let instance = instanceMap[id];
        run$1(instance, 'destroy');
      }
    }
  }

  /*
    Called when an active route's query parameter has changed.
    These changes are batched into a runloop run and trigger
    a single transition.
  */
  _activeQPChanged(queryParameterName, newValue) {
    this._queuedQPChanges[queryParameterName] = newValue;
    once(this, this._fireQueryParamTransition);
  }

  // The queryParameterName is QueryParam['urlKey']
  _updatingQPChanged(queryParameterName) {
    this._qpUpdates.add(queryParameterName);
  }

  /*
    Triggers a transition to a route based on query parameter changes.
    This is called once per runloop, to batch changes.
     e.g.
     if these methods are called in succession:
    this._activeQPChanged('foo', '10');
      // results in _queuedQPChanges = { foo: '10' }
    this._activeQPChanged('bar', false);
      // results in _queuedQPChanges = { foo: '10', bar: false }
     _queuedQPChanges will represent both of these changes
    and the transition using `transitionTo` will be triggered
    once.
  */
  _fireQueryParamTransition() {
    this.transitionTo({
      queryParams: this._queuedQPChanges
    });
    this._resetQueuedQueryParameterChanges();
  }
  _setupLocation() {
    let location = this.location;
    let rootURL = this.rootURL;
    let owner = getOwner$1(this);
    if ('string' === typeof location) {
      let resolvedLocation = owner.lookup(`location:${location}`);
      location = set(this, 'location', resolvedLocation);
    }
    if (location !== null && typeof location === 'object') {
      if (rootURL) {
        set(location, 'rootURL', rootURL);
      }

      // ensure that initState is called AFTER the rootURL is set on
      // the location instance
      if (typeof location.initState === 'function') {
        location.initState();
      }
    }
  }

  /**
    Serializes the given query params according to their QP meta information.
     @private
    @method _serializeQueryParams
    @param {Arrray<RouteInfo>} routeInfos
    @param {Object} queryParams
    @return {Void}
  */
  _serializeQueryParams(routeInfos, queryParams) {
    forEachQueryParam(this, routeInfos, queryParams, (key, value, qp) => {
      if (qp) {
        delete queryParams[key];
        queryParams[qp.urlKey] = qp.route.serializeQueryParam(value, qp.urlKey, qp.type);
      } else if (value === undefined) {
        return; // We don't serialize undefined values
      } else {
        queryParams[key] = this._serializeQueryParam(value, typeOf(value));
      }
    });
  }

  /**
    Serializes the value of a query parameter based on a type
     @private
    @method _serializeQueryParam
    @param {Object} value
    @param {String} type
  */
  _serializeQueryParam(value, type) {
    if (value === null || value === undefined) {
      return value;
    } else if (type === 'array') {
      return JSON.stringify(value);
    }
    return `${value}`;
  }

  /**
    Deserializes the given query params according to their QP meta information.
     @private
    @method _deserializeQueryParams
    @param {Array<RouteInfo>} routeInfos
    @param {Object} queryParams
    @return {Void}
  */
  _deserializeQueryParams(routeInfos, queryParams) {
    forEachQueryParam(this, routeInfos, queryParams, (key, value, qp) => {
      // If we don't have QP meta info for a given key, then we do nothing
      // because all values will be treated as strings
      if (qp) {
        delete queryParams[key];
        queryParams[qp.prop] = qp.route.deserializeQueryParam(value, qp.urlKey, qp.type);
      }
    });
  }

  /**
    Deserializes the value of a query parameter based on a default type
     @private
    @method _deserializeQueryParam
    @param {Object} value
    @param {String} defaultType
  */
  _deserializeQueryParam(value, defaultType) {
    if (value === null || value === undefined) {
      return value;
    } else if (defaultType === 'boolean') {
      return value === 'true';
    } else if (defaultType === 'number') {
      return Number(value).valueOf();
    } else if (defaultType === 'array') {
      return A(JSON.parse(value));
    }
    return value;
  }

  /**
    Removes (prunes) any query params with default values from the given QP
    object. Default values are determined from the QP meta information per key.
     @private
    @method _pruneDefaultQueryParamValues
    @param {Array<RouteInfo>} routeInfos
    @param {Object} queryParams
    @return {Void}
  */
  _pruneDefaultQueryParamValues(routeInfos, queryParams) {
    let qps = this._queryParamsFor(routeInfos);
    for (let key in queryParams) {
      let qp = qps.map[key];
      if (qp && qp.serializedDefaultValue === queryParams[key]) {
        delete queryParams[key];
      }
    }
  }
  _doTransition(_targetRouteName, models, _queryParams, _fromRouterService) {
    let targetRouteName = _targetRouteName || getActiveTargetName(this._routerMicrolib);
    this._initialTransitionStarted = true;
    let queryParams = {};
    this._processActiveTransitionQueryParams(targetRouteName, models, queryParams, _queryParams);
    Object.assign(queryParams, _queryParams);
    this._prepareQueryParams(targetRouteName, models, queryParams, Boolean(_fromRouterService));
    let transition = this._routerMicrolib.transitionTo(targetRouteName, ...models, {
      queryParams
    });
    didBeginTransition(transition, this);
    return transition;
  }
  _processActiveTransitionQueryParams(targetRouteName, models, queryParams,
  // eslint-disable-next-line @typescript-eslint/no-empty-object-type
  _queryParams) {
    // merge in any queryParams from the active transition which could include
    // queryParams from the url on initial load.
    if (!this._routerMicrolib.activeTransition) {
      return;
    }
    let unchangedQPs = {};
    let qpUpdates = this._qpUpdates;
    let params = getFullQueryParams(this, this._routerMicrolib.activeTransition[STATE_SYMBOL]);
    for (let key in params) {
      if (!qpUpdates.has(key)) {
        unchangedQPs[key] = params[key];
      }
    }

    // We need to fully scope queryParams so that we can create one object
    // that represents both passed-in queryParams and ones that aren't changed
    // from the active transition.
    this._fullyScopeQueryParams(targetRouteName, models, _queryParams);
    this._fullyScopeQueryParams(targetRouteName, models, unchangedQPs);
    Object.assign(queryParams, unchangedQPs);
  }

  /**
    Prepares the query params for a URL or Transition. Restores any undefined QP
    keys/values, serializes all values, and then prunes any default values.
     @private
    @method _prepareQueryParams
    @param {String} targetRouteName
    @param {Array<Object>} models
    @param {Object} queryParams
    @param {boolean} keepDefaultQueryParamValues
    @return {Void}
  */
  _prepareQueryParams(targetRouteName, models, queryParams, _fromRouterService) {
    let state = calculatePostTransitionState(this, targetRouteName, models);
    this._hydrateUnsuppliedQueryParams(state, queryParams, Boolean(_fromRouterService));
    this._serializeQueryParams(state.routeInfos, queryParams);
    if (!_fromRouterService) {
      this._pruneDefaultQueryParamValues(state.routeInfos, queryParams);
    }
  }

  /**
    Returns the meta information for the query params of a given route. This
    will be overridden to allow support for lazy routes.
     @private
    @method _getQPMeta
    @param {RouteInfo} routeInfo
    @return {Object}
  */
  _getQPMeta(routeInfo) {
    let route = routeInfo.route;
    return route && get$1(route, '_qp');
  }

  /**
    Returns a merged query params meta object for a given set of routeInfos.
    Useful for knowing what query params are available for a given route hierarchy.
     @private
    @method _queryParamsFor
    @param {Array<RouteInfo>} routeInfos
    @return {Object}
   */
  _queryParamsFor(routeInfos) {
    let routeInfoLength = routeInfos.length;
    let leafRouteName = routeInfos[routeInfoLength - 1].name;
    let cached = this._qpCache[leafRouteName];
    if (cached !== undefined) {
      return cached;
    }
    let shouldCache = true;
    let map = {};
    let qps = [];
    let qpMeta;
    for (let routeInfo of routeInfos) {
      qpMeta = this._getQPMeta(routeInfo);
      if (!qpMeta) {
        shouldCache = false;
        continue;
      }

      // Loop over each QP to make sure we don't have any collisions by urlKey
      for (let qp of qpMeta.qps) {
        qps.push(qp);
      }
      Object.assign(map, qpMeta.map);
    }
    let finalQPMeta = {
      qps,
      map
    };
    if (shouldCache) {
      this._qpCache[leafRouteName] = finalQPMeta;
    }
    return finalQPMeta;
  }

  /**
    Maps all query param keys to their fully scoped property name of the form
    `controllerName:propName`.
     @private
    @method _fullyScopeQueryParams
    @param {String} leafRouteName
    @param {Array<Object>} contexts
    @param {Object} queryParams
    @return {Void}
  */
  _fullyScopeQueryParams(leafRouteName, contexts, queryParams) {
    let state = calculatePostTransitionState(this, leafRouteName, contexts);
    let routeInfos = state.routeInfos;
    let qpMeta;
    for (let routeInfo of routeInfos) {
      qpMeta = this._getQPMeta(routeInfo);
      if (!qpMeta) {
        continue;
      }
      for (let qp of qpMeta.qps) {
        let presentProp = qp.prop in queryParams && qp.prop || qp.scopedPropertyName in queryParams && qp.scopedPropertyName || qp.urlKey in queryParams && qp.urlKey;
        if (presentProp) {
          if (presentProp !== qp.scopedPropertyName) {
            queryParams[qp.scopedPropertyName] = queryParams[presentProp];
            delete queryParams[presentProp];
          }
        }
      }
    }
  }

  /**
    Hydrates (adds/restores) any query params that have pre-existing values into
    the given queryParams hash. This is what allows query params to be "sticky"
    and restore their last known values for their scope.
     @private
    @method _hydrateUnsuppliedQueryParams
    @param {TransitionState} state
    @param {Object} queryParams
    @return {Void}
  */
  _hydrateUnsuppliedQueryParams(state, queryParams, _fromRouterService) {
    let routeInfos = state.routeInfos;
    let appCache = this._bucketCache;
    let qpMeta;
    let qp;
    let presentProp;
    for (let routeInfo of routeInfos) {
      qpMeta = this._getQPMeta(routeInfo);
      if (!qpMeta) {
        continue;
      }

      // Needs to stay for index loop to avoid throwIfClosureRequired
      for (let j = 0, qpLen = qpMeta.qps.length; j < qpLen; ++j) {
        qp = qpMeta.qps[j];
        presentProp = qp.prop in queryParams && qp.prop || qp.scopedPropertyName in queryParams && qp.scopedPropertyName || qp.urlKey in queryParams && qp.urlKey;
        if (presentProp) {
          if (presentProp !== qp.scopedPropertyName) {
            queryParams[qp.scopedPropertyName] = queryParams[presentProp];
            delete queryParams[presentProp];
          }
        } else {
          let cacheKey = calculateCacheKey(qp.route.fullRouteName, qp.parts, state.params);
          queryParams[qp.scopedPropertyName] = appCache.lookup(cacheKey, qp.prop, qp.defaultValue);
        }
      }
    }
  }
  _scheduleLoadingEvent(transition, originRoute) {
    this._cancelSlowTransitionTimer();
    this._slowTransitionTimer = scheduleOnce('routerTransitions', this, this._handleSlowTransition, transition, originRoute);
  }
  currentState = null;
  targetState = null;
  _handleSlowTransition(transition, originRoute) {
    if (!this._routerMicrolib.activeTransition) {
      // Don't fire an event if we've since moved on from
      // the transition that put us in a loading state.
      return;
    }
    let targetState = new RouterState(this, this._routerMicrolib, this._routerMicrolib.activeTransition[STATE_SYMBOL]);
    this.set('targetState', targetState);
    transition.trigger(true, 'loading', transition, originRoute);
  }
  _cancelSlowTransitionTimer() {
    if (this._slowTransitionTimer) {
      cancel(this._slowTransitionTimer);
    }
    this._slowTransitionTimer = null;
  }

  // These three helper functions are used to ensure errors aren't
  // re-raised if they're handled in a route's error action.
  _markErrorAsHandled(error) {
    this._handledErrors.add(error);
  }
  _isErrorHandled(error) {
    return this._handledErrors.has(error);
  }
  _clearHandledError(error) {
    this._handledErrors.delete(error);
  }
  _getEngineInstance({
    name,
    instanceId,
    mountPoint
  }) {
    let engineInstances = this._engineInstances;
    let namedInstances = engineInstances[name];
    if (!namedInstances) {
      namedInstances = Object.create(null);
      engineInstances[name] = namedInstances;
    }
    let engineInstance = namedInstances[instanceId];
    if (!engineInstance) {
      let owner = getOwner$1(this);
      engineInstance = owner.buildChildEngineInstance(name, {
        routable: true,
        mountPoint
      });
      engineInstance.boot();
      namedInstances[instanceId] = engineInstance;
    }
    return engineInstance;
  }

  /**
    Handles updating the paths and notifying any listeners of the URL
    change.
     Triggers the router level `didTransition` hook.
     For example, to notify google analytics when the route changes,
    you could use this hook.  (Note: requires also including GA scripts, etc.)
     ```javascript
    import config from './config/environment';
    import EmberRouter from '@ember/routing/router';
    import { service } from '@ember/service';
     let Router = EmberRouter.extend({
      location: config.locationType,
       router: service(),
       didTransition: function() {
        this._super(...arguments);
         ga('send', 'pageview', {
          page: this.router.currentURL,
          title: this.router.currentRouteName,
        });
      }
    });
    ```
     @method didTransition
    @private
    @since 1.2.0
  */
  // Set with reopen to allow overriding via extend

  /**
    Handles notifying any listeners of an impending URL
    change.
     Triggers the router level `willTransition` hook.
     @method willTransition
    @private
    @since 1.11.0
  */
  // Set with reopen to allow overriding via extend

  /**
   Represents the current URL.
     @property url
    @type {String}
    @private
  */
  // Set with reopen to allow overriding via extend
}

/*
  Helper function for iterating over routes in a set of routeInfos that are
  at or above the given origin route. Example: if `originRoute` === 'foo.bar'
  and the routeInfos given were for 'foo.bar.baz', then the given callback
  will be invoked with the routes for 'foo.bar', 'foo', and 'application'
  individually.

  If the callback returns anything other than `true`, then iteration will stop.

  @private
  @param {Route} originRoute
  @param {Array<RouteInfo>} routeInfos
  @param {Function} callback
  @return {Void}
 */
function forEachRouteAbove(routeInfos, callback) {
  for (let i = routeInfos.length - 1; i >= 0; --i) {
    let routeInfo = routeInfos[i];
    let route = routeInfo.route;

    // routeInfo.handler being `undefined` generally means either:
    //
    // 1. an error occurred during creation of the route in question
    // 2. the route is across an async boundary (e.g. within an engine)
    //
    // In both of these cases, we cannot invoke the callback on that specific
    // route, because it just doesn't exist...
    if (route === undefined) {
      continue;
    }
    if (callback(route, routeInfo) !== true) {
      return;
    }
  }
}

// These get invoked when an action bubbles above ApplicationRoute
// and are not meant to be overridable.
let defaultActionHandlers = {
  willResolveModel(_routeInfos, transition, originRoute) {
    this._scheduleLoadingEvent(transition, originRoute);
  },
  // Attempt to find an appropriate error route or substate to enter.
  error(routeInfos, error, transition) {
    let router = this;
    let routeInfoWithError = routeInfos[routeInfos.length - 1];
    forEachRouteAbove(routeInfos, (route, routeInfo) => {
      // We don't check the leaf most routeInfo since that would
      // technically be below where we're at in the route hierarchy.
      if (routeInfo !== routeInfoWithError) {
        // Check for the existence of an 'error' route.
        let errorRouteName = findRouteStateName(route, 'error');
        if (errorRouteName) {
          router._markErrorAsHandled(error);
          router.intermediateTransitionTo(errorRouteName, error);
          return false;
        }
      }

      // Check for an 'error' substate route
      let errorSubstateName = findRouteSubstateName(route, 'error');
      if (errorSubstateName) {
        router._markErrorAsHandled(error);
        router.intermediateTransitionTo(errorSubstateName, error);
        return false;
      }
      return true;
    });
    logError(error, `Error while processing route: ${transition.targetName}`);
  },
  // Attempt to find an appropriate loading route or substate to enter.
  loading(routeInfos, transition) {
    let router = this;
    let routeInfoWithSlowLoading = routeInfos[routeInfos.length - 1];
    forEachRouteAbove(routeInfos, (route, routeInfo) => {
      // We don't check the leaf most routeInfos since that would
      // technically be below where we're at in the route hierarchy.
      if (routeInfo !== routeInfoWithSlowLoading) {
        // Check for the existence of a 'loading' route.
        let loadingRouteName = findRouteStateName(route, 'loading');
        if (loadingRouteName) {
          router.intermediateTransitionTo(loadingRouteName);
          return false;
        }
      }

      // Check for loading substate
      let loadingSubstateName = findRouteSubstateName(route, 'loading');
      if (loadingSubstateName) {
        router.intermediateTransitionTo(loadingSubstateName);
        return false;
      }

      // Don't bubble above pivot route.
      return transition.pivotHandler !== route;
    });
  }
};
function logError(_error, initialMessage) {
  let errorArgs = [];
  let error;
  if (_error && typeof _error === 'object' && typeof _error.errorThrown === 'object') {
    error = _error.errorThrown;
  } else {
    error = _error;
  }
  if (initialMessage) {
    errorArgs.push(initialMessage);
  }
  if (error) {
    if (error.message) {
      errorArgs.push(error.message);
    }
    if (error.stack) {
      errorArgs.push(error.stack);
    }
    if (typeof error === 'string') {
      errorArgs.push(error);
    }
  }
  console.error(...errorArgs); //eslint-disable-line no-console
}

/**
  Finds the name of the substate route if it exists for the given route. A
  substate route is of the form `route_state`, such as `foo_loading`.

  @private
  @param {Route} route
  @param {String} state
  @return {String}
*/
function findRouteSubstateName(route, state) {
  let owner = getOwner$1(route);
  let {
    routeName,
    fullRouteName,
    _router: router
  } = route;
  let substateName = `${routeName}_${state}`;
  let substateNameFull = `${fullRouteName}_${state}`;
  return routeHasBeenDefined(owner, router, substateName, substateNameFull) ? substateNameFull : '';
}

/**
  Finds the name of the state route if it exists for the given route. A state
  route is of the form `route.state`, such as `foo.loading`. Properly Handles
  `application` named routes.

  @private
  @param {Route} route
  @param {String} state
  @return {String}
*/
function findRouteStateName(route, state) {
  let owner = getOwner$1(route);
  let {
    routeName,
    fullRouteName,
    _router: router
  } = route;
  let stateName = routeName === 'application' ? state : `${routeName}.${state}`;
  let stateNameFull = fullRouteName === 'application' ? state : `${fullRouteName}.${state}`;
  return routeHasBeenDefined(owner, router, stateName, stateNameFull) ? stateNameFull : '';
}

/**
  Determines whether or not a route has been defined by checking that the route
  is in the Router's map and the owner has a registration for that route.

  @private
  @param {Owner} owner
  @param {Router} router
  @param {String} localName
  @param {String} fullName
  @return {Boolean}
*/
function routeHasBeenDefined(owner, router, localName, fullName) {
  let routerHasRoute = router.hasRoute(fullName);
  let ownerHasRoute = owner.factoryFor(`template:${localName}`) || owner.factoryFor(`route:${localName}`);
  return routerHasRoute && ownerHasRoute;
}
function triggerEvent$1(routeInfos, ignoreFailure, name, args) {
  if (!routeInfos) {
    if (ignoreFailure) {
      return;
    }
    // TODO: update?
    throw new Error(`Can't trigger action '${name}' because your app hasn't finished transitioning into its first route. To trigger an action on destination routes during a transition, you can call \`.send()\` on the \`Transition\` object passed to the \`model/beforeModel/afterModel\` hooks.`);
  }
  let eventWasHandled = false;
  let routeInfo, handler, actionHandler;
  for (let i = routeInfos.length - 1; i >= 0; i--) {
    routeInfo = routeInfos[i];
    handler = routeInfo.route;
    actionHandler = handler && handler.actions && handler.actions[name];
    if (actionHandler) {
      if (actionHandler.apply(handler, args) === true) {
        eventWasHandled = true;
      } else {
        // Should only hit here if a non-bubbling error action is triggered on a route.
        if (name === 'error') {
          handler._router._markErrorAsHandled(args[0]);
        }
        return;
      }
    }
  }
  let defaultHandler = defaultActionHandlers[name];
  if (defaultHandler) {
    defaultHandler.call(this, routeInfos, ...args);
    return;
  }
  if (!eventWasHandled && !ignoreFailure) {
    throw new Error(`Nothing handled the action '${name}'. If you did handle the action, this error can be caused by returning true from an action handler in a controller, causing the action to bubble.`);
  }
}
function calculatePostTransitionState(emberRouter, leafRouteName, contexts) {
  let state = emberRouter._routerMicrolib.applyIntent(leafRouteName, contexts);
  let {
    routeInfos,
    params
  } = state;
  for (let routeInfo of routeInfos) {
    // If the routeInfo is not resolved, we serialize the context into params
    if (!routeInfo.isResolved) {
      params[routeInfo.name] = routeInfo.serialize(routeInfo.context);
    } else {
      params[routeInfo.name] = routeInfo.params;
    }
  }
  return state;
}
function updatePaths(router) {
  let infos = router._routerMicrolib.currentRouteInfos;
  if (infos.length === 0) {
    return;
  }
  let path = EmberRouter._routePath(infos);
  let info = infos[infos.length - 1];
  let currentRouteName = info.name;
  let location = router.location;
  let currentURL = location.getURL();
  set(router, 'currentPath', path);
  set(router, 'currentRouteName', currentRouteName);
  set(router, 'currentURL', currentURL);
}
function didBeginTransition(transition, router) {
  let routerState = new RouterState(router, router._routerMicrolib, transition[STATE_SYMBOL]);
  if (!router.currentState) {
    router.set('currentState', routerState);
  }
  router.set('targetState', routerState);
  transition.promise = transition.catch(error => {
    if (router._isErrorHandled(error)) {
      router._clearHandledError(error);
    } else {
      throw error;
    }
  }, 'Transition Error');
}
function forEachQueryParam(router, routeInfos, queryParams, callback) {
  let qpCache = router._queryParamsFor(routeInfos);
  for (let key in queryParams) {
    if (!Object.prototype.hasOwnProperty.call(queryParams, key)) {
      continue;
    }
    let value = queryParams[key];
    let qp = qpCache.map[key];
    callback(key, value, qp);
  }
}
EmberRouter.reopen({
  didTransition: defaultDidTransition,
  willTransition: defaultWillTransition,
  rootURL: '/',
  location: 'hash',
  // FIXME: Does this need to be overrideable via extend?
  url: computed(function () {
    let location = get$1(this, 'location');
    if (typeof location === 'string') {
      return undefined;
    }
    return location.getURL();
  })
});

/**
  @private

  Returns the current `location.pathname`, normalized for IE inconsistencies.
*/

/**
  @private

  Returns the hash or empty string
*/
function getHash(location) {
  if (location.hash !== undefined) {
    return location.hash.substring(0);
  }
  return '';
}

/**
@module @ember/routing/hash-location
*/

/**
  `HashLocation` implements the location API using the browser's
  hash. At present, it relies on a `hashchange` event existing in the
  browser.

  Using `HashLocation` results in URLs with a `#` (hash sign) separating the
  server side URL portion of the URL from the portion that is used by Ember.

  Example:

  ```app/router.js
  Router.map(function() {
    this.route('posts', function() {
      this.route('new');
    });
  });

  Router.reopen({
    location: 'hash'
  });
  ```

  This will result in a posts.new url of `/#/posts/new`.

  @class HashLocation
  @extends EmberObject
  @protected
*/
class HashLocation extends EmberObject {
  _hashchangeHandler;
  _location;
  init() {
    this.location = this._location ?? window.location;
    this._hashchangeHandler = undefined;
  }

  /**
    @private
     Returns normalized location.hash
     @since 1.5.1
    @method getHash
  */
  getHash() {
    return getHash(this.location);
  }

  /**
    Returns the normalized URL, constructed from `location.hash`.
     e.g. `#/foo` => `/foo` as well as `#/foo#bar` => `/foo#bar`.
     By convention, hashed paths must begin with a forward slash, otherwise they
    are not treated as a path so we can distinguish intent.
     @private
    @method getURL
  */
  getURL() {
    let originalPath = this.getHash().substring(1);
    let outPath = originalPath;
    if (outPath[0] !== '/') {
      outPath = '/';

      // Only add the # if the path isn't empty.
      // We do NOT want `/#` since the ampersand
      // is only included (conventionally) when
      // the location.hash has a value
      if (originalPath) {
        outPath += `#${originalPath}`;
      }
    }
    return outPath;
  }

  /**
    Set the `location.hash` and remembers what was set. This prevents
    `onUpdateURL` callbacks from triggering when the hash was set by
    `HashLocation`.
     @private
    @method setURL
    @param path {String}
  */
  setURL(path) {
    this.location.hash = path;
    this.lastSetURL = path;
  }

  /**
    Uses location.replace to update the url without a page reload
    or history modification.
     @private
    @method replaceURL
    @param path {String}
  */
  replaceURL(path) {
    this.location.replace(`#${path}`);
    this.lastSetURL = path;
  }
  lastSetURL = null;

  /**
    Register a callback to be invoked when the hash changes. These
    callbacks will execute when the user presses the back or forward
    button, but not after `setURL` is invoked.
     @private
    @method onUpdateURL
    @param callback {Function}
  */
  onUpdateURL(callback) {
    this._removeEventListener();
    this._hashchangeHandler = bind(this, function (_event) {
      let path = this.getURL();
      if (this.lastSetURL === path) {
        return;
      }
      this.lastSetURL = null;
      callback(path);
    });
    window.addEventListener('hashchange', this._hashchangeHandler);
  }

  /**
    Given a URL, formats it to be placed into the page as part
    of an element's `href` attribute.
     @private
    @method formatURL
    @param url {String}
  */
  formatURL(url) {
    return `#${url}`;
  }

  /**
    Cleans up the HashLocation event listener.
     @private
    @method willDestroy
  */
  willDestroy() {
    this._removeEventListener();
  }
  _removeEventListener() {
    if (this._hashchangeHandler) {
      window.removeEventListener('hashchange', this._hashchangeHandler);
    }
  }
}

let popstateFired = false;
function _uuid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    let r, v;
    r = Math.random() * 16 | 0;
    v = c === 'x' ? r : r & 3 | 8;
    return v.toString(16);
  });
}

/**
  HistoryLocation implements the location API using the browser's
  history.pushState API.

  Using `HistoryLocation` results in URLs that are indistinguishable from a
  standard URL. This relies upon the browser's `history` API.

  Example:

  ```app/router.js
  Router.map(function() {
    this.route('posts', function() {
      this.route('new');
    });
  });

  Router.reopen({
    location: 'history'
  });
  ```

  This will result in a posts.new url of `/posts/new`.

  Keep in mind that your server must serve the Ember app at all the routes you
  define.

  Using `HistoryLocation` will also result in location states being recorded by
  the browser `history` API with the following schema:

  ```
  window.history.state -> { path: '/', uuid: '3552e730-b4a6-46bd-b8bf-d8c3c1a97e0a' }
  ```

  This allows each in-app location state to be tracked uniquely across history
  state changes via the `uuid` field.

  @class HistoryLocation
  @extends EmberObject
  @protected
*/
class HistoryLocation extends EmberObject {
  // SAFETY: both of these properties initialized via `init`.

  history;
  _previousURL;
  _popstateHandler;

  /**
    Will be pre-pended to path upon state change
     @property rootURL
    @default '/'
    @private
  */
  rootURL = '/';

  /**
    @private
     Returns normalized location.hash
     @method getHash
  */
  getHash() {
    return getHash(this.location);
  }
  init() {
    this._super(...arguments);
    let base = document.querySelector('base');
    let baseURL = '';
    if (base !== null && base.hasAttribute('href')) {
      baseURL = base.getAttribute('href') ?? '';
    }
    this.baseURL = baseURL;
    this.location = this.location ?? window.location;
    this._popstateHandler = undefined;
  }

  /**
    Used to set state on first call to setURL
     @private
    @method initState
  */
  initState() {
    let history = this.history ?? window.history;
    this.history = history;
    let {
      state
    } = history;
    let path = this.formatURL(this.getURL());
    if (state && state.path === path) {
      // preserve existing state
      // used for webkit workaround, since there will be no initial popstate event
      this._previousURL = this.getURL();
    } else {
      this.replaceState(path);
    }
  }

  /**
    Returns the current `location.pathname` without `rootURL` or `baseURL`
     @private
    @method getURL
    @return url {String}
  */
  getURL() {
    let {
      location,
      rootURL,
      baseURL
    } = this;
    let path = location.pathname;

    // remove trailing slashes if they exists
    rootURL = rootURL.replace(/\/$/, '');
    baseURL = baseURL.replace(/\/$/, '');

    // remove baseURL and rootURL from start of path
    let url = path.replace(new RegExp(`^${baseURL}(?=/|$)`), '').replace(new RegExp(`^${rootURL}(?=/|$)`), '').replace(/\/\//g, '/'); // remove extra slashes

    let search = location.search || '';
    url += search + this.getHash();
    return url;
  }

  /**
    Uses `history.pushState` to update the url without a page reload.
     @private
    @method setURL
    @param path {String}
  */
  setURL(path) {
    let {
      state
    } = this.history;
    path = this.formatURL(path);
    if (!state || state.path !== path) {
      this.pushState(path);
    }
  }

  /**
    Uses `history.replaceState` to update the url without a page reload
    or history modification.
     @private
    @method replaceURL
    @param path {String}
  */
  replaceURL(path) {
    let {
      state
    } = this.history;
    path = this.formatURL(path);
    if (!state || state.path !== path) {
      this.replaceState(path);
    }
  }

  /**
   Pushes a new state.
    @private
   @method pushState
   @param path {String}
  */
  pushState(path) {
    let state = {
      path,
      uuid: _uuid()
    };
    this.history.pushState(state, '', path);

    // used for webkit workaround
    this._previousURL = this.getURL();
  }

  /**
   Replaces the current state.
    @private
   @method replaceState
   @param path {String}
  */
  replaceState(path) {
    let state = {
      path,
      uuid: _uuid()
    };
    this.history.replaceState(state, '', path);

    // used for webkit workaround
    this._previousURL = this.getURL();
  }

  /**
    Register a callback to be invoked whenever the browser
    history changes, including using forward and back buttons.
     @private
    @method onUpdateURL
    @param callback {Function}
  */
  onUpdateURL(callback) {
    this._removeEventListener();
    this._popstateHandler = () => {
      // Ignore initial page load popstate event in Chrome
      if (!popstateFired) {
        popstateFired = true;
        if (this.getURL() === this._previousURL) {
          return;
        }
      }
      callback(this.getURL());
    };
    window.addEventListener('popstate', this._popstateHandler);
  }

  /**
    Formats url to be placed into href attribute.
     @private
    @method formatURL
    @param url {String}
    @return formatted url {String}
  */
  formatURL(url) {
    let {
      rootURL,
      baseURL
    } = this;
    if (url !== '') {
      // remove trailing slashes if they exists
      rootURL = rootURL.replace(/\/$/, '');
      baseURL = baseURL.replace(/\/$/, '');
    } else if (baseURL[0] === '/' && rootURL[0] === '/') {
      // if baseURL and rootURL both start with a slash
      // ... remove trailing slash from baseURL if it exists
      baseURL = baseURL.replace(/\/$/, '');
    }
    return baseURL + rootURL + url;
  }

  /**
    Cleans up the HistoryLocation event listener.
     @private
    @method willDestroy
  */
  willDestroy() {
    this._removeEventListener();
  }
  _removeEventListener() {
    if (this._popstateHandler) {
      window.removeEventListener('popstate', this._popstateHandler);
    }
  }
}

/**
@module @ember/routing/none-location
*/

/**
  NoneLocation does not interact with the browser. It is useful for
  testing, or when you need to manage state with your Router, but temporarily
  don't want it to muck with the URL (for example when you embed your
  application in a larger page).

  Using `NoneLocation` causes Ember to not store the applications URL state
  in the actual URL. This is generally used for testing purposes, and is one
  of the changes made when calling `App.setupForTesting()`.

  @class NoneLocation
  @extends EmberObject
  @protected
*/
class NoneLocation extends EmberObject {
  updateCallback;

  // Set in reopen so it can be overwritten with extend

  /**
    Will be pre-pended to path.
     @private
    @property rootURL
    @default '/'
  */
  // Set in reopen so it can be overwritten with extend

  initState() {
    this._super(...arguments);
    let {
      rootURL
    } = this;
  }

  /**
    Returns the current path without `rootURL`.
     @private
    @method getURL
    @return {String} path
  */
  getURL() {
    let {
      path,
      rootURL
    } = this;

    // remove trailing slashes if they exists
    rootURL = rootURL.replace(/\/$/, '');

    // remove rootURL from url
    return path.replace(new RegExp(`^${rootURL}(?=/|$)`), '');
  }

  /**
    Set the path and remembers what was set. Using this method
    to change the path will not invoke the `updateURL` callback.
     @private
    @method setURL
    @param path {String}
  */
  setURL(path) {
    this.path = path;
  }

  /**
    Register a callback to be invoked when the path changes. These
    callbacks will execute when the user presses the back or forward
    button, but not after `setURL` is invoked.
     @private
    @method onUpdateURL
    @param callback {Function}
  */
  onUpdateURL(callback) {
    this.updateCallback = callback;
  }

  /**
    Sets the path and calls the `updateURL` callback.
     @private
    @method handleURL
    @param url {String}
  */
  handleURL(url) {
    this.path = url;
    if (this.updateCallback) {
      this.updateCallback(url);
    }
  }

  /**
    Given a URL, formats it to be placed into the page as part
    of an element's `href` attribute.
     @private
    @method formatURL
    @param {String} url
    @return {String} url
  */
  formatURL(url) {
    let {
      rootURL
    } = this;
    if (url !== '') {
      // remove trailing slashes if they exists
      rootURL = rootURL.replace(/\/$/, '');
    }
    return rootURL + url;
  }
}
NoneLocation.reopen({
  path: '',
  rootURL: '/'
});

function alias(altKey) {
  return makeComputedDecorator(new AliasedProperty(altKey), AliasDecoratorImpl);
}

// TODO: This class can be svelted once `meta` has been deprecated
class AliasDecoratorImpl extends Function {
  readOnly() {
    descriptorForDecorator(this).readOnly();
    return this;
  }
  oneWay() {
    descriptorForDecorator(this).oneWay();
    return this;
  }
  meta(meta) {
    let prop = descriptorForDecorator(this);
    if (arguments.length === 0) {
      return prop._meta || {};
    } else {
      prop._meta = meta;
    }
  }
}
class AliasedProperty extends ComputedDescriptor {
  altKey;
  constructor(altKey) {
    super();
    this.altKey = altKey;
  }
  setup(obj, keyName, propertyDesc, meta) {
    super.setup(obj, keyName, propertyDesc, meta);
    CHAIN_PASS_THROUGH.add(this);
  }
  get(obj, keyName) {
    let ret;
    let meta$1$1 = meta$1(obj);
    let tagMeta = tagMetaFor(obj);
    let propertyTag = tagFor(obj, keyName, tagMeta);

    // We don't use the tag since CPs are not automatic, we just want to avoid
    // anything tracking while we get the altKey
    untrack(() => {
      ret = get$1(obj, this.altKey);
    });
    let lastRevision = meta$1$1.revisionFor(keyName);
    if (lastRevision === undefined || !validateTag(propertyTag, lastRevision)) {
      UPDATE_TAG(propertyTag, getChainTagsForKey(obj, this.altKey, tagMeta, meta$1$1));
      meta$1$1.setRevisionFor(keyName, valueForTag(propertyTag));
      finishLazyChains(meta$1$1, keyName, ret);
    }
    consumeTag(propertyTag);
    return ret;
  }
  set(obj, _keyName, value) {
    return set(obj, this.altKey, value);
  }
  readOnly() {
    this.set = AliasedProperty_readOnlySet;
  }
  oneWay() {
    this.set = AliasedProperty_oneWaySet;
  }
}
function AliasedProperty_readOnlySet(obj, keyName) {
  throw new Error(`Cannot set read-only property '${keyName}' on object: ${inspect(obj)}`);
}
function AliasedProperty_oneWaySet(obj, keyName, value) {
  defineProperty(obj, keyName, null);
  return set(obj, keyName, value);
}

/**
 @module @ember/utils
*/
/**
  Returns true if the passed value is null or undefined. This avoids errors
  from JSLint complaining about use of ==, which can be technically
  confusing.

  ```javascript
  isNone(null);          // true
  isNone(undefined);     // true
  isNone('');            // false
  isNone([]);            // false
  isNone(function() {}); // false
  ```

  @method isNone
  @static
  @for @ember/utils
  @param {Object} obj Value to test
  @return {Boolean}
  @public
*/
function isNone(obj) {
  return obj === null || obj === undefined;
}

/**
 @module @ember/utils
*/
/**
  Verifies that a value is `null` or `undefined`, an empty string, or an empty
  array.

  Constrains the rules on `isNone` by returning true for empty strings and
  empty arrays.

  If the value is an object with a `size` property of type number, it is used
  to check emptiness.

  ```javascript
  isEmpty(null);             // true
  isEmpty(undefined);        // true
  isEmpty('');               // true
  isEmpty([]);               // true
  isEmpty({ size: 0});       // true
  isEmpty({});               // false
  isEmpty('Adam Hawkins');   // false
  isEmpty([0,1,2]);          // false
  isEmpty('\n\t');           // false
  isEmpty('  ');             // false
  isEmpty({ size: 1 })       // false
  isEmpty({ size: () => 0 }) // false
  ```

  @method isEmpty
  @static
  @for @ember/utils
  @param {Object} obj Value to test
  @return {Boolean}
  @public
*/
function isEmpty$1(obj) {
  if (obj === null || obj === undefined) {
    return true;
  }
  if (!hasUnknownProperty(obj) && typeof obj.size === 'number') {
    return !obj.size;
  }
  if (typeof obj === 'object') {
    let size = get$1(obj, 'size');
    if (typeof size === 'number') {
      return !size;
    }
    let length = get$1(obj, 'length');
    if (typeof length === 'number') {
      return !length;
    }
  }
  if (typeof obj.length === 'number' && typeof obj !== 'function') {
    return !obj.length;
  }
  return false;
}

/**
  This is a more semantically meaningful alias of the `oneWay` computed macro,
  whose name is somewhat ambiguous as to which direction the data flows.

  @method reads
  @static
  @for @ember/object/computed
  @param {String} dependentKey
  @return {ComputedProperty} computed property which creates a one way computed
    property to the original value for property.
  @public
 */

/**
  Where `oneWay` computed macro provides oneWay bindings, the `readOnly`
  computed macro provides a readOnly one way binding. Very often when using
  the `oneWay` macro one does not also want changes to propagate back up, as
  they will replace the value.

  This prevents the reverse flow, and also throws an exception when it occurs.

  Example:

  ```javascript
  import { set } from '@ember/object';
  import { readOnly } from '@ember/object/computed';

  class User {
    constructor(firstName, lastName) {
      set(this, 'firstName', firstName);
      set(this, 'lastName', lastName);
    }

    @readOnly('firstName') nickName;
  });

  let teddy = new User('Teddy', 'Zeenny');

  teddy.nickName; // 'Teddy'

  set(teddy, 'nickName', 'TeddyBear'); // throws Exception
  // throw new EmberError('Cannot Set: nickName on: <User:ember27288>' );`

  teddy.firstName; // 'Teddy'
  ```

  @method readOnly
  @static
  @for @ember/object/computed
  @param {String} dependentKey
  @return {ComputedProperty} computed property which creates a one way computed
  property to the original value for property.
  @since 1.5.0
  @public
*/
function readOnly(dependentKey) {
  return alias(dependentKey).readOnly();
}

/*
  This module exists to separate the @ember/string methods used
  internally in ember-source, from those public methods that are
  now deprecated and to be removed.
*/

const STRING_DASHERIZE_REGEXP$1 = /[ _]/g;
const STRING_DASHERIZE_CACHE$1 = new Cache$1(1000, key => decamelize$1(key).replace(STRING_DASHERIZE_REGEXP$1, '-'));
const STRING_CLASSIFY_REGEXP_1$1 = /^(-|_)+(.)?/;
const STRING_CLASSIFY_REGEXP_2$1 = /(.)(-|_|\.|\s)+(.)?/g;
const STRING_CLASSIFY_REGEXP_3$1 = /(^|\/|\.)([a-z])/g;
const CLASSIFY_CACHE$1 = new Cache$1(1000, str => {
  let replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';
  let replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');
  let parts = str.split('/');
  for (let i = 0; i < parts.length; i++) {
    parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1$1, replace1).replace(STRING_CLASSIFY_REGEXP_2$1, replace2);
  }
  return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3$1, (match /*, separator, chr */) => match.toUpperCase());
});
const STRING_DECAMELIZE_REGEXP$1 = /([a-z\d])([A-Z])/g;
const DECAMELIZE_CACHE$1 = new Cache$1(1000, str => str.replace(STRING_DECAMELIZE_REGEXP$1, '$1_$2').toLowerCase());

/**
 Defines string helper methods used internally in ember-source.

 @class String
 @private
 */

/**
 Replaces underscores, spaces, or camelCase with dashes.

 ```javascript
 import { dasherize } from '@ember/-internals/string';

 dasherize('innerHTML');                // 'inner-html'
 dasherize('action_name');              // 'action-name'
 dasherize('css-class-name');           // 'css-class-name'
 dasherize('my favorite items');        // 'my-favorite-items'
 dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'
 ```

 @method dasherize
 @param {String} str The string to dasherize.
 @return {String} the dasherized string.
 @private
 */
function dasherize$1(str) {
  return STRING_DASHERIZE_CACHE$1.get(str);
}

/**
 Returns the UpperCamelCase form of a string.

 ```javascript
 import { classify } from '@ember/string';

 classify('innerHTML');                   // 'InnerHTML'
 classify('action_name');                 // 'ActionName'
 classify('css-class-name');              // 'CssClassName'
 classify('my favorite items');           // 'MyFavoriteItems'
 classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'
 ```

 @method classify
 @param {String} str the string to classify
 @return {String} the classified string
 @private
 */
function classify$1(str) {
  return CLASSIFY_CACHE$1.get(str);
}

/**
 Converts a camelized string into all lower case separated by underscores.

 ```javascript
 decamelize('innerHTML');          // 'inner_html'
 decamelize('action_name');        // 'action_name'
 decamelize('css-class-name');     // 'css-class-name'
 decamelize('my favorite items');  // 'my favorite items'
 ```
 */
function decamelize$1(str) {
  return DECAMELIZE_CACHE$1.get(str);
}

function isEnabled$1(options) {
  return Object.hasOwnProperty.call(options.since, 'enabled') || ENV._ALL_DEPRECATIONS_ENABLED;
}
let numEmberVersion = parseFloat(ENV._OVERRIDE_DEPRECATION_VERSION ?? Version);

/* until must only be a minor version or major version */
function emberVersionGte(until, emberVersion = numEmberVersion) {
  let significantUntil = until.replace(/(\.0+)/g, '');
  return emberVersion >= parseFloat(significantUntil);
}
function isRemoved(options) {
  return emberVersionGte(options.until);
}
function deprecation(options) {
  return {
    options,
    test: !isEnabled$1(options),
    isEnabled: isEnabled$1(options) || isRemoved(options),
    isRemoved: isRemoved(options)
  };
}

/*
  To add a deprecation, you must add a new entry to the `DEPRECATIONS` object.
  The entry should be an object with the following properties:

  * `id` (required): A string that uniquely identifies the deprecation. This
    should be a short, descriptive name, typically dasherized.
  * `for` (required): The string `ember-source` -- every deprecation from this
    package is for `ember-source`.
  * `since` (required): An object with `available` and `enabled`. `available` is
    the first version of Ember that the deprecation is available in. `enabled` is
    the version of Ember that the deprecation was first enabled. This is used as
    a feature flag deprecations. For public APIs, the `enabled` value is added
    only once the deprecation RFC is [Ready for Release](https://github.com/emberjs/rfcs#ready-for-release).
  * `until` (required): The version of Ember that the deprecation will be removed
  * `url` (required): A URL to the deprecation guide for the deprecation. This
    URL can be constructed in advance of the deprecation being added to the
    [deprecation app](https://github.com/ember-learn/deprecation-app) by
    following this format: `https://deprecations.emberjs.com/deprecations/{{id}}`.

  For example:
  `deprecate` should then be called using the entry from the `DEPRECATIONS` object.

  ```ts
  import { DEPRECATIONS } from '@ember/-internals/deprecations';
  //...

  deprecateUntil(message, DEPRECATIONS.MY_DEPRECATION);
  ```

  `expectDeprecation` should also use the DEPRECATIONS object, but it should be noted
  that it uses `isEnabled` instead of `test` because the expectations of `expectDeprecation`
  are the opposite of `test`.

  ```ts
  expectDeprecation(
    () => {
        assert.equal(foo, bar(), 'foo is equal to bar'); // something that triggers the deprecation
    },
    /matchesMessage/,
    DEPRECATIONS.MY_DEPRECATION.isEnabled
  );
  ```

  Tests can be conditionally run based on whether a deprecation is enabled or not:

  ```ts
    [`${testUnless(DEPRECATIONS.MY_DEPRECATION.isRemoved)} specific deprecated feature tested only in this test`]
  ```

  This test will be skipped when the MY_DEPRECATION is removed.
  When adding a deprecation, we need to guard all the code that will eventually be removed, including tests.
  For tests that are not specifically testing the deprecated feature, we need to figure out how to
  test the behavior without encountering the deprecated feature, just as users would.
 */
const DEPRECATIONS = {
  DEPRECATE_IMPORT_EMBER(importName) {
    return deprecation({
      id: `deprecate-import-${dasherize$1(importName).toLowerCase()}-from-ember`,
      for: 'ember-source',
      since: {
        available: '5.10.0',
        enabled: '6.5.0'
      },
      until: '7.0.0',
      url: `https://deprecations.emberjs.com/id/import-${dasherize$1(importName).toLowerCase()}-from-ember`
    });
  },
  DEPRECATE_ARRAY_PROTOTYPE_EXTENSIONS: deprecation({
    id: 'deprecate-array-prototype-extensions',
    url: 'https://deprecations.emberjs.com/id/deprecate-array-prototype-extensions',
    until: '6.0.0',
    for: 'ember-source',
    since: {
      available: '5.10.0',
      enabled: '5.10.0'
    }
  }),
  DEPRECATE_IMPORT_INJECT: deprecation({
    for: 'ember-source',
    id: 'importing-inject-from-ember-service',
    since: {
      available: '6.2.0',
      enabled: '6.3.0'
    },
    until: '7.0.0',
    url: 'https://deprecations.emberjs.com/id/importing-inject-from-ember-service'
  })
};
function deprecateUntil(message, deprecation) {
  const {
    options
  } = deprecation;
  if (deprecation.isRemoved) {
    throw new Error(`The API deprecated by ${options.id} was removed in ember-source ${options.until}. The message was: ${message}. Please see ${options.url} for more details.`);
  }
}
const {
  EXTEND_PROTOTYPES
} = ENV;
if (EXTEND_PROTOTYPES.Array !== false) {
  deprecateUntil('Array prototype extensions are deprecated. Follow the deprecation guide for migration instructions, and set EmberENV.EXTEND_PROTOTYPES to false in your config/environment.js', DEPRECATIONS.DEPRECATE_ARRAY_PROTOTYPE_EXTENSIONS);
}

/**
  Creates a property that lazily looks up a service in the container. There are
  no restrictions as to what objects a service can be injected into.

  Example:

  ```app/routes/application.js
  import Route from '@ember/routing/route';
  import { service } from '@ember/service';

  export default class ApplicationRoute extends Route {
    @service('auth') authManager;

    model() {
      return this.authManager.findCurrentUser();
    }
  }
  ```

  Classic Class Example:

  ```app/routes/application.js
  import Route from '@ember/routing/route';
  import { service } from '@ember/service';

  export default Route.extend({
    authManager: service('auth'),

    model() {
      return this.get('authManager').findCurrentUser();
    }
  });
  ```

  This example will create an `authManager` property on the application route
  that looks up the `auth` service in the container, making it easily accessible
  in the `model` hook.

  @method service
  @static
  @since 4.1.0
  @for @ember/service
  @param {String} name (optional) name of the service to inject, defaults to
         the property's name
  @return {ComputedDecorator} injection decorator instance
  @public
*/

function service(...args) {
  return inject$1('service', ...args);
}

/**
  @class Service
  @extends EmberObject
  @since 1.10.0
  @public
*/
class Service extends FrameworkObject {
  static isServiceFactory = true;
}

/**
 * @module @ember/routing/router-service
 */
const ROUTER$1 = Symbol('ROUTER');
function cleanURL(url, rootURL) {
  if (rootURL === '/') {
    return url;
  }
  return url.substring(rootURL.length);
}

/**
   The Router service is the public API that provides access to the router.

   The immediate benefit of the Router service is that you can inject it into components,
   giving them a friendly way to initiate transitions and ask questions about the current
   global router state.

   In this example, the Router service is injected into a component to initiate a transition
   to a dedicated route:

   ```app/components/example.js
   import Component from '@glimmer/component';
   import { action } from '@ember/object';
   import { service } from '@ember/service';

   export default class ExampleComponent extends Component {
     @service router;

     @action
     next() {
       this.router.transitionTo('other.route');
     }
   }
   ```

   Like any service, it can also be injected into helpers, routes, etc.

   @public
   @extends Service
   @class RouterService
 */

class RouterService extends Service.extend(Evented) {
  [ROUTER$1];
  get _router() {
    let router = this[ROUTER$1];
    if (router !== undefined) {
      return router;
    }
    let owner = getOwner$2(this);
    let _router = owner.lookup('router:main');
    return this[ROUTER$1] = _router;
  }
  willDestroy() {
    super.willDestroy();
    this[ROUTER$1] = undefined;
  }

  /**
     Transition the application into another route. The route may
     be either a single route or route path:
      Calling `transitionTo` from the Router service will cause default query parameter values to be included in the URL.
     This behavior is different from calling `transitionTo` on a route or `transitionToRoute` on a controller.
     See the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.
      In the following example we use the Router service to navigate to a route with a
     specific model from a Component in the first action, and in the second we trigger
     a query-params only transition.
      ```app/components/example.js
     import Component from '@glimmer/component';
     import { action } from '@ember/object';
     import { service } from '@ember/service';
      export default class extends Component {
       @service router;
        @action
       goToComments(post) {
         this.router.transitionTo('comments', post);
       }
        @action
       fetchMoreComments(latestComment) {
         this.router.transitionTo({
           queryParams: { commentsAfter: latestComment }
         });
       }
     }
     ```
      @method transitionTo
     @param {String} [routeNameOrUrl] the name of the route or a URL
     @param {...Object} [models] the model(s) or identifier(s) to be used while
       transitioning to the route.
     @param {Object} [options] optional hash with a queryParams property
       containing a mapping of query parameters. May be supplied as the only
      parameter to trigger a query-parameter-only transition.
     @return {Transition} the transition object associated with this
       attempted transition
     @public
   */
  transitionTo(...args) {
    if (resemblesURL(args[0])) {
      // NOTE: this `args[0] as string` cast is safe and TS correctly infers it
      // in 3.6+, so it can be removed when TS is upgraded.
      return this._router._doURLTransition('transitionTo', args[0]);
    }
    let {
      routeName,
      models,
      queryParams
    } = extractRouteArgs(args);
    let transition = this._router._doTransition(routeName, models, queryParams, true);
    return transition;
  }

  /**
     Similar to `transitionTo`, but instead of adding the destination to the browser's URL history,
     it replaces the entry for the current route.
     When the user clicks the "back" button in the browser, there will be fewer steps.
     This is most commonly used to manage redirects in a way that does not cause confusing additions
     to the user's browsing history.
      Calling `replaceWith` from the Router service will cause default query parameter values to be included in the URL.
     This behavior is different from calling `replaceWith` on a route.
     See the [Router Service RFC](https://github.com/emberjs/rfcs/blob/master/text/0095-router-service.md#query-parameter-semantics) for more info.
      Usage example:
      ```app/routes/application.js
     import Route from '@ember/routing/route';
     import { service } from '@ember/service';
      export default class extends Route {
       @service router;
       beforeModel() {
         if (!authorized()){
           this.router.replaceWith('unauthorized');
         }
       }
     });
     ```
      @method replaceWith
     @param {String} routeNameOrUrl the name of the route or a URL of the desired destination
     @param {...Object} models the model(s) or identifier(s) to be used while
       transitioning to the route i.e. an object of params to pass to the destination route
     @param {Object} [options] optional hash with a queryParams property
       containing a mapping of query parameters
     @return {Transition} the transition object associated with this
       attempted transition
     @public
   */
  replaceWith(...args) {
    return this.transitionTo(...args).method('replace');
  }

  /**
    Generate a URL based on the supplied route name and optionally a model. The
    URL is returned as a string that can be used for any purpose.
     In this example, the URL for the `author.books` route for a given author
    is copied to the clipboard.
     ```app/templates/application.hbs
    <CopyLink @author={{hash id="tomster" name="Tomster"}} />
    ```
     ```app/components/copy-link.js
    import Component from '@glimmer/component';
    import { service } from '@ember/service';
    import { action } from '@ember/object';
     export default class CopyLinkComponent extends Component {
      @service router;
      @service clipboard;
       @action
      copyBooksURL() {
        if (this.author) {
          const url = this.router.urlFor('author.books', this.args.author);
          this.clipboard.set(url);
          // Clipboard now has /author/tomster/books
        }
      }
    }
    ```
     Just like with `transitionTo` and `replaceWith`, `urlFor` can also handle
    query parameters.
     ```app/templates/application.hbs
    <CopyLink @author={{hash id="tomster" name="Tomster"}} />
    ```
     ```app/components/copy-link.js
    import Component from '@glimmer/component';
    import { service } from '@ember/service';
    import { action } from '@ember/object';
     export default class CopyLinkComponent extends Component {
      @service router;
      @service clipboard;
       @action
      copyOnlyEmberBooksURL() {
        if (this.author) {
          const url = this.router.urlFor('author.books', this.author, {
            queryParams: { filter: 'emberjs' }
          });
          this.clipboard.set(url);
          // Clipboard now has /author/tomster/books?filter=emberjs
        }
      }
    }
    ```
      @method urlFor
     @param {String} routeName the name of the route
     @param {...Object} models the model(s) for the route.
     @param {Object} [options] optional hash with a queryParams property
       containing a mapping of query parameters
     @return {String} the string representing the generated URL
     @public
   */
  urlFor(routeName, ...args) {
    this._router.setupRouter();
    return this._router.generate(routeName, ...args);
  }

  /**
     Returns `true` if `routeName/models/queryParams` is the active route, where `models` and `queryParams` are optional.
     See [model](api/ember/release/classes/Route/methods/model?anchor=model) and
     [queryParams](/api/ember/3.7/classes/Route/properties/queryParams?anchor=queryParams) for more information about these arguments.
      In the following example, `isActive` will return `true` if the current route is `/posts`.
      ```app/components/posts.js
     import Component from '@glimmer/component';
     import { service } from '@ember/service';
      export default class extends Component {
       @service router;
        displayComments() {
         return this.router.isActive('posts');
       }
     });
     ```
      The next example includes a dynamic segment, and will return `true` if the current route is `/posts/1`,
     assuming the post has an id of 1:
      ```app/components/posts.js
     import Component from '@glimmer/component';
     import { service } from '@ember/service';
      export default class extends Component {
       @service router;
        displayComments(post) {
         return this.router.isActive('posts', post.id);
       }
     });
     ```
      Where `post.id` is the id of a specific post, which is represented in the route as /posts/[post.id].
     If `post.id` is equal to 1, then isActive will return true if the current route is /posts/1, and false if the route is anything else.
      @method isActive
     @param {String} routeName the name of the route
     @param {...Object} models the model(s) or identifier(s) to be used when determining the active route.
     @param {Object} [options] optional hash with a queryParams property
       containing a mapping of query parameters
     @return {boolean} true if the provided routeName/models/queryParams are active
     @public
   */
  isActive(...args) {
    let {
      routeName,
      models,
      queryParams
    } = extractRouteArgs(args);
    let routerMicrolib = this._router._routerMicrolib;

    // When using isActive() in a getter, we want to entagle with the auto-tracking system
    // for example,
    // in
    // get isBarActive() {
    //   return isActive('foo.bar');
    // }
    //
    // you'd expect isBarActive to be dirtied when the route changes.
    //
    // https://github.com/emberjs/ember.js/issues/19004
    consumeTag(tagFor(this._router, 'currentURL'));

    // UNSAFE: casting `routeName as string` here encodes the existing
    // assumption but may be wrong: `extractRouteArgs` correctly returns it as
    // `string | undefined`. There may be bugs if `isActiveIntent` does
    // not correctly account for `undefined` values for `routeName`. Spoilers:
    // it *does not* account for this being `undefined`.
    if (!routerMicrolib.isActiveIntent(routeName, models)) {
      return false;
    }
    let hasQueryParams = Object.keys(queryParams).length > 0;
    if (hasQueryParams) {
      // UNSAFE: casting `routeName as string` here encodes the existing
      // assumption but may be wrong: `extractRouteArgs` correctly returns it
      // as `string | undefined`. There may be bugs if `_prepareQueryParams`
      // does not correctly account for `undefined` values for `routeName`.
      //  Spoilers: under the hood this currently uses router.js APIs which
      // *do not* account for this being `undefined`.
      let targetRouteName = routeName;
      queryParams = Object.assign({}, queryParams);
      this._router._prepareQueryParams(targetRouteName, models, queryParams, true /* fromRouterService */);
      let currentQueryParams = Object.assign({}, routerMicrolib.state.queryParams);
      this._router._prepareQueryParams(targetRouteName, models, currentQueryParams, true /* fromRouterService */);
      return shallowEqual(queryParams, currentQueryParams);
    }
    return true;
  }

  /**
     Takes a string URL and returns a `RouteInfo` for the leafmost route represented
     by the URL. Returns `null` if the URL is not recognized. This method expects to
     receive the actual URL as seen by the browser including the app's `rootURL`.
      See [RouteInfo](/ember/release/classes/RouteInfo) for more info.
      In the following example `recognize` is used to verify if a path belongs to our
     application before transitioning to it.
      ```
     import Component from '@ember/component';
     import { service } from '@ember/service';
      export default class extends Component {
       @service router;
       path = '/';
        click() {
         if (this.router.recognize(this.path)) {
           this.router.transitionTo(this.path);
         }
       }
     }
     ```
       @method recognize
      @param {String} url
      @return {RouteInfo | null}
      @public
    */
  recognize(url) {
    this._router.setupRouter();
    let internalURL = cleanURL(url, this.rootURL);
    return this._router._routerMicrolib.recognize(internalURL);
  }

  /**
    Takes a string URL and returns a promise that resolves to a
    `RouteInfoWithAttributes` for the leafmost route represented by the URL.
    The promise rejects if the URL is not recognized or an unhandled exception
    is encountered. This method expects to receive the actual URL as seen by
    the browser including the app's `rootURL`.
       @method recognizeAndLoad
      @param {String} url
      @return {RouteInfo}
      @public
   */
  recognizeAndLoad(url) {
    this._router.setupRouter();
    let internalURL = cleanURL(url, this.rootURL);
    return this._router._routerMicrolib.recognizeAndLoad(internalURL);
  }

  /**
    You can register a listener for events emitted by this service with `.on()`:
     ```app/routes/contact-form.js
    import Route from '@ember/routing';
    import { service } from '@ember/service';
     export default class extends Route {
      @service router;
       activate() {
        this.router.on('routeWillChange', (transition) => {
          if (!transition.to.find(route => route.name === this.routeName)) {
            alert("Please save or cancel your changes.");
            transition.abort();
          }
        })
      }
    }
    ```
     @method on
    @param {String} eventName
    @param {Function} callback
    @public
  */

  /**
    You can unregister a listener for events emitted by this service with `.off()`:
     ```app/routes/contact-form.js
    import Route from '@ember/routing';
    import { service } from '@ember/service';
     export default class ContactFormRoute extends Route {
      @service router;
       callback = (transition) => {
        if (!transition.to.find(route => route.name === this.routeName)) {
          alert('Please save or cancel your changes.');
          transition.abort();
        }
      };
       activate() {
        this.router.on('routeWillChange', this.callback);
      }
       deactivate() {
        this.router.off('routeWillChange', this.callback);
      }
    }
    ```
     @method off
    @param {String} eventName
    @param {Function} callback
    @public
  */

  /**
    The `routeWillChange` event is fired at the beginning of any
    attempted transition with a `Transition` object as the sole
    argument. This action can be used for aborting, redirecting,
    or decorating the transition from the currently active routes.
     A good example is preventing navigation when a form is
    half-filled out:
     ```app/routes/contact-form.js
    import Route from '@ember/routing';
    import { service } from '@ember/service';
     export default class extends Route {
      @service router;
       activate() {
        this.router.on('routeWillChange', (transition) => {
          if (!transition.to.find(route => route.name === this.routeName)) {
            alert("Please save or cancel your changes.");
            transition.abort();
          }
        })
      }
    }
    ```
     The `routeWillChange` event fires whenever a new route is chosen as the desired target of a transition. This includes `transitionTo`, `replaceWith`, all redirection for any reason including error handling, and abort. Aborting implies changing the desired target back to where you already were. Once a transition has completed, `routeDidChange` fires.
     @event routeWillChange
    @param {Transition} transition
    @public
  */

  /**
    The `routeDidChange` event only fires once a transition has settled.
    This includes aborts and error substates. Like the `routeWillChange` event
    it receives a Transition as the sole argument.
     A good example is sending some analytics when the route has transitioned:
     ```app/routes/contact-form.js
    import Route from '@ember/routing';
    import { service } from '@ember/service';
     export default class extends Route {
      @service router;
       activate() {
        this.router.on('routeDidChange', (transition) => {
          ga.send('pageView', {
            current: transition.to.name,
            from: transition.from.name
          });
        })
      }
    }
    ```
     `routeDidChange` will be called after any `Route`'s
    [didTransition](/ember/release/classes/Route/events/didTransition?anchor=didTransition)
    action has been fired.
    The updates of properties
    [currentURL](/ember/release/classes/RouterService/properties/currentURL?anchor=currentURL),
    [currentRouteName](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRouteName)
    and
    [currentRoute](/ember/release/classes/RouterService/properties/currentURL?anchor=currentRoute)
    are completed at the time `routeDidChange` is called.
     @event routeDidChange
    @param {Transition} transition
    @public
  */

  /**
   * Refreshes all currently active routes, doing a full transition.
   * If a route name is provided and refers to a currently active route,
   * it will refresh only that route and its descendents.
   * Returns a promise that will be resolved once the refresh is complete.
   * All resetController, beforeModel, model, afterModel, redirect, and setupController
   * hooks will be called again. You will get new data from the model hook.
   *
   * @method refresh
   * @param {String} [routeName] the route to refresh (along with all child routes)
   * @return Transition
   * @public
   */
  refresh(pivotRouteName) {
    if (!pivotRouteName) {
      return this._router._routerMicrolib.refresh();
    }
    let owner = getOwner$2(this);
    let pivotRoute = owner.lookup(`route:${pivotRouteName}`);
    return this._router._routerMicrolib.refresh(pivotRoute);
  }

  /**
   Name of the current route.
     This property represents the logical name of the route,
    which is dot separated.
    For the following router:
     ```app/router.js
    Router.map(function() {
      this.route('about');
      this.route('blog', function () {
        this.route('post', { path: ':post_id' });
      });
    });
    ```
     It will return:
     * `index` when you visit `/`
    * `about` when you visit `/about`
    * `blog.index` when you visit `/blog`
    * `blog.post` when you visit `/blog/some-post-id`
     @property currentRouteName
    @type {String | null}
    @public
  */
  static {
    decorateFieldV2$1(this.prototype, "currentRouteName", [readOnly('_router.currentRouteName')]);
  }
  #currentRouteName = (initializeDeferredDecorator$1(this, "currentRouteName"), void 0);
  static {
    decorateFieldV2$1(this.prototype, "currentURL", [readOnly('_router.currentURL')]);
  }
  #currentURL = (initializeDeferredDecorator$1(this, "currentURL"), void 0);
  /**
   Current URL for the application.
   This property represents the URL path for this route.
  For the following router:
     ```app/router.js
    Router.map(function() {
      this.route('about');
      this.route('blog', function () {
        this.route('post', { path: ':post_id' });
      });
    });
    ```
     It will return:
     * `/` when you visit `/`
    * `/about` when you visit `/about`
    * `/blog` when you visit `/blog`
    * `/blog/some-post-id` when you visit `/blog/some-post-id`
     @property currentURL
    @type String
    @public
  */
  static {
    decorateFieldV2$1(this.prototype, "location", [readOnly('_router.location')]);
  }
  #location = (initializeDeferredDecorator$1(this, "location"), void 0);
  /**
    The `location` property returns what implementation of the `location` API
    your application is using, which determines what type of URL is being used.
     See [Location](/ember/release/classes/Location) for more information.
     To force a particular `location` API implementation to be used in your
    application you can set a location type on your `config/environment`.
    For example, to set the `history` type:
     ```config/environment.js
    'use strict';
     module.exports = function(environment) {
      let ENV = {
        modulePrefix: 'router-service',
        environment,
        rootURL: '/',
        locationType: 'history',
        ...
      }
    }
    ```
     The following location types are available by default:
    `hash`, `history`, `none`.
     See [HashLocation](/ember/release/classes/HashLocation).
    See [HistoryLocation](/ember/release/classes/HistoryLocation).
    See [NoneLocation](/ember/release/classes/NoneLocation).
     @property location
    @default 'hash'
    @see {Location}
    @public
  */
  static {
    decorateFieldV2$1(this.prototype, "rootURL", [readOnly('_router.rootURL')]);
  }
  #rootURL = (initializeDeferredDecorator$1(this, "rootURL"), void 0);
  /**
    The `rootURL` property represents the URL of the root of
    the application, '/' by default.
    This prefix is assumed on all routes defined on this app.
     If you change the `rootURL` in your environment configuration
    like so:
     ```config/environment.js
    'use strict';
     module.exports = function(environment) {
      let ENV = {
        modulePrefix: 'router-service',
        environment,
        rootURL: '/my-root',
      …
      }
    ]
    ```
     This property will return `/my-root`.
     @property rootURL
    @default '/'
    @public
  */
  static {
    decorateFieldV2$1(this.prototype, "currentRoute", [readOnly('_router.currentRoute')]);
  }
  #currentRoute = (initializeDeferredDecorator$1(this, "currentRoute"), void 0);
  /**
    The `currentRoute` property contains metadata about the current leaf route.
    It returns a `RouteInfo` object that has information like the route name,
    params, query params and more.
     See [RouteInfo](/ember/release/classes/RouteInfo) for more info.
     This property is guaranteed to change whenever a route transition
    happens (even when that transition only changes parameters
    and doesn't change the active route).
     Usage example:
    ```app/components/header.js
      import Component from '@glimmer/component';
      import { service } from '@ember/service';
      import { notEmpty } from '@ember/object/computed';
       export default class extends Component {
        @service router;
         @notEmpty('router.currentRoute.child') isChildRoute;
      });
    ```
     @property currentRoute
    @type RouteInfo
    @public
  */
}

/**
@module ember
*/

class RoutingService extends Service {
  [ROUTER$1];
  get router() {
    let router = this[ROUTER$1];
    if (router !== undefined) {
      return router;
    }
    let owner = getOwner$2(this);
    let _router = owner.lookup('router:main');
    _router.setupRouter();
    return this[ROUTER$1] = _router;
  }
  hasRoute(routeName) {
    return this.router.hasRoute(routeName);
  }
  transitionTo(routeName, models, queryParams, shouldReplace) {
    let transition = this.router._doTransition(routeName, models, queryParams);
    if (shouldReplace) {
      transition.method('replace');
    }
    return transition;
  }
  normalizeQueryParams(routeName, models, queryParams) {
    this.router._prepareQueryParams(routeName, models, queryParams);
  }
  _generateURL(routeName, models, queryParams) {
    let visibleQueryParams = {};
    if (queryParams) {
      Object.assign(visibleQueryParams, queryParams);
      this.normalizeQueryParams(routeName, models, visibleQueryParams);
    }
    return this.router.generate(routeName, ...models, {
      queryParams: visibleQueryParams
    });
  }
  generateURL(routeName, models, queryParams) {
    if (this.router._initialTransitionStarted) {
      return this._generateURL(routeName, models, queryParams);
    } else {
      // Swallow error when transition has not started.
      // When rendering in tests without visit(), we cannot infer the route context which <LinkTo/> needs be aware of
      try {
        return this._generateURL(routeName, models, queryParams);
      } catch (_e) {
        return;
      }
    }
  }
  isActiveForRoute(contexts, queryParams, routeName, routerState) {
    let handlers = this.router._routerMicrolib.recognizer.handlersFor(routeName);
    let leafName = handlers[handlers.length - 1].handler;
    let maximumContexts = numberOfContextsAcceptedByHandler(routeName, handlers);

    // NOTE: any ugliness in the calculation of activeness is largely
    // due to the fact that we support automatic normalizing of
    // `resource` -> `resource.index`, even though there might be
    // dynamic segments / query params defined on `resource.index`
    // which complicates (and makes somewhat ambiguous) the calculation
    // of activeness for links that link to `resource` instead of
    // directly to `resource.index`.

    // if we don't have enough contexts revert back to full route name
    // this is because the leaf route will use one of the contexts
    if (contexts.length > maximumContexts) {
      routeName = leafName;
    }
    return routerState.isActiveIntent(routeName, contexts, queryParams);
  }
}
RoutingService.reopen({
  targetState: readOnly('router.targetState'),
  currentState: readOnly('router.currentState'),
  currentRouteName: readOnly('router.currentRouteName'),
  currentPath: readOnly('router.currentPath')
});
function numberOfContextsAcceptedByHandler(handlerName, handlerInfos) {
  let req = 0;
  for (let i = 0; i < handlerInfos.length; i++) {
    req += handlerInfos[i].names.length;
    if (handlerInfos[i].handler === handlerName) {
      break;
    }
  }
  return req;
}

class InstructionEncoderImpl {
  constructor(buffer) {
    this.buffer = buffer, this.size = 0;
  }
  encode(type, machine, ...args) {
    if (type > TYPE_SIZE) throw new Error(`Opcode type over 8-bits. Got ${type}.`);
    let first = type | machine | arguments.length - 2 << ARG_SHIFT;
    this.buffer.push(first);
    for (const op of args) {
      this.buffer.push(op);
    }
    this.size = this.buffer.length;
  }
  patch(position, target) {
    if (-1 !== this.buffer[position + 1]) throw new Error("Trying to patch operand in populated slot instead of a reserved slot.");
    this.buffer[position + 1] = target;
  }
}

const opcodes = {
    Append: 1,
    TrustingAppend: 2,
    Comment: 3,
    Modifier: 4,
    Block: 6,
    Component: 8,
    OpenElement: 10,
    OpenElementWithSplat: 11,
    FlushElement: 12,
    CloseElement: 13,
    StaticAttr: 14,
    DynamicAttr: 15,
    ComponentAttr: 16,
    AttrSplat: 17,
    Yield: 18,
    TrustingDynamicAttr: 22,
    TrustingComponentAttr: 23,
    StaticComponentAttr: 24,
    Debugger: 26,
    Undefined: 27,
    Call: 28,
    Concat: 29,
    GetSymbol: 30,
    GetLexicalSymbol: 32,
    GetStrictKeyword: 31,
    GetFreeAsComponentOrHelperHead: 35,
    GetFreeAsHelperHead: 37,
    GetFreeAsModifierHead: 38,
    GetFreeAsComponentHead: 39,
    InElement: 40,
    If: 41,
    Each: 42,
    Let: 44,
    WithDynamicVars: 45,
    InvokeComponent: 46,
    HasBlock: 48,
    HasBlockParams: 49,
    Curry: 50,
    Not: 51,
    IfInline: 52,
    GetDynamicVar: 53,
    Log: 54
  };

function encodeImmediate(num) {
  return (num |= 0) < 0 ? function (num) {
    return -536870913 & num;
  }(num) : function (num) {
    return ~num;
  }(num);
}
function makeResolutionTypeVerifier(typeToVerify) {
  return opcode => {
    if (!function (opcode) {
      return Array.isArray(opcode) && 2 === opcode.length;
    }(opcode)) return false;
    let type = opcode[0];
    return type === opcodes.GetStrictKeyword || type === opcodes.GetLexicalSymbol || type === typeToVerify;
  };
}
[1, -1].forEach(x => {
  return num = encodeImmediate(x), (num |= 0) > -536870913 ? function (num) {
    return ~num;
  }(num) : function (num) {
    return 536870912 | num;
  }(num);
  var num;
});
const isGetFreeComponent = makeResolutionTypeVerifier(opcodes.GetFreeAsComponentHead),
  isGetFreeModifier = makeResolutionTypeVerifier(opcodes.GetFreeAsModifierHead),
  isGetFreeHelper = makeResolutionTypeVerifier(opcodes.GetFreeAsHelperHead),
  isGetFreeComponentOrHelper = makeResolutionTypeVerifier(opcodes.GetFreeAsComponentOrHelperHead);
function assertResolverInvariants(meta) {
  return meta;
}

/**
 * <Foo/>
 * <Foo></Foo>
 * <Foo @arg={{true}} />
 */
function lookupBuiltInHelper(expr, resolver, meta, constants, type) {
  let {
      symbols: {
        upvars: upvars
      }
    } = assertResolverInvariants(meta),
    name = upvars[expr[1]],
    helper = resolver?.lookupBuiltInHelper?.(name) ?? null;
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
  return constants.helper(helper, name);
}
function labelOperand(value) {
  return {
    type: 1,
    value: value
  };
}
function stdlibOperand(value) {
  return {
    type: 5,
    value: value
  };
}
function symbolTableOperand(value) {
  return {
    type: 7,
    value: value
  };
}
function layoutOperand(value) {
  return {
    type: 8,
    value: value
  };
}
class Labels {
  label(name, index) {
    this.labels[name] = index;
  }
  target(at, target) {
    this.targets.push({
      at: at,
      target: target
    });
  }
  patch(heap) {
    let {
      targets: targets,
      labels: labels
    } = this;
    for (const {
      at: at,
      target: target
    } of targets) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      let address = labels[target] - at;
      heap.getbyaddr(at), heap.setbyaddr(at, address);
    }
  }
  constructor() {
    this.labels = dict(), this.targets = [];
  }
}
function encodeOp(encoder, context, meta, op) {
  let {
    program: {
      constants: constants
    },
    resolver: resolver
  } = context;
  if (function (op) {
    return op < 1e3;
  }(op[0])) {
    let [type, ...operands] = op;
    encoder.push(constants, type, ...operands);
  } else switch (op[0]) {
    case 1e3:
      return encoder.label(op[1]);
    case 1001:
      return encoder.startLabels();
    case 1002:
      return encoder.stopLabels();
    case 1004:
      return function (resolver, constants, meta, [, expr, then]) {
        isGetFreeComponent(expr);
        let type = expr[0];
        if (type === opcodes.GetLexicalSymbol) {
          let {
              scopeValues: scopeValues,
              owner: owner,
              symbols: {
                lexical: lexical
              }
            } = meta,
            definition = scopeValues[expr[1]];
          then(constants.component(definition, owner, false, lexical?.at(expr[1])));
        } else {
          let {
              symbols: {
                upvars: upvars
              },
              owner: owner
            } = assertResolverInvariants(meta),
            name = upvars[expr[1]],
            definition = resolver?.lookupComponent?.(name, owner) ?? null;
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
          then(constants.resolvedComponent(definition, name));
        }
      }
      /**
      * (helper)
      * (helper arg)
      */(resolver, constants, meta, op);
    case 1003:
      /**
      * <div {{modifier}}/>
      * <div {{modifier arg}}/>
      * <Foo {{modifier}}/>
      */
      return function (resolver, constants, meta, [, expr, then]) {
        isGetFreeModifier(expr);
        let type = expr[0];
        if (type === opcodes.GetLexicalSymbol) {
          let {
              scopeValues: scopeValues,
              symbols: {
                lexical: lexical
              }
            } = meta,
            definition = scopeValues[expr[1]];
          then(constants.modifier(definition, lexical?.at(expr[1]) ?? void 0));
        } else if (type === opcodes.GetStrictKeyword) {
          let {
              symbols: {
                upvars: upvars
              }
            } = assertResolverInvariants(meta),
            name = upvars[expr[1]],
            modifier = resolver?.lookupBuiltInModifier?.(name) ?? null;
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
          then(constants.modifier(modifier, name));
        } else {
          let {
              symbols: {
                upvars: upvars
              },
              owner: owner
            } = assertResolverInvariants(meta),
            name = upvars[expr[1]],
            modifier = resolver?.lookupModifier?.(name, owner) ?? null;
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
          then(constants.modifier(modifier));
        }
      }
      /**
      * {{component-or-helper arg}}
      */(resolver, constants, meta, op);
    case 1005:
      return function (resolver, constants, meta, [, expr, then]) {
        isGetFreeHelper(expr);
        let type = expr[0];
        if (type === opcodes.GetLexicalSymbol) {
          let {
              scopeValues: scopeValues
            } = meta,
            definition = scopeValues[expr[1]];
          then(constants.helper(definition));
        } else if (type === opcodes.GetStrictKeyword) then(lookupBuiltInHelper(expr, resolver, meta, constants));else {
          let {
              symbols: {
                upvars: upvars
              },
              owner: owner
            } = assertResolverInvariants(meta),
            name = upvars[expr[1]],
            helper = resolver?.lookupHelper?.(name, owner) ?? null;
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
          then(constants.helper(helper, name));
        }
      }(resolver, constants, meta, op);
    case 1007:
      return function (resolver, constants, meta, [, expr, {
        ifComponent: ifComponent,
        ifHelper: ifHelper
      }]) {
        isGetFreeComponentOrHelper(expr);
        let type = expr[0];
        if (type === opcodes.GetLexicalSymbol) {
          let {
              scopeValues: scopeValues,
              owner: owner,
              symbols: {
                lexical: lexical
              }
            } = meta,
            definition = scopeValues[expr[1]],
            component = constants.component(definition, owner, true, lexical?.at(expr[1]));
          if (null !== component) return void ifComponent(component);
          let helper = constants.helper(definition, null, true);
          ifHelper(helper);
        } else if (type === opcodes.GetStrictKeyword) ifHelper(lookupBuiltInHelper(expr, resolver, meta, constants));else {
          let {
              symbols: {
                upvars: upvars
              },
              owner: owner
            } = assertResolverInvariants(meta),
            name = upvars[expr[1]],
            definition = resolver?.lookupComponent?.(name, owner) ?? null;
          if (null !== definition) ifComponent(constants.resolvedComponent(definition, name));else {
            let helper = resolver?.lookupHelper?.(name, owner) ?? null;
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
            ifHelper(constants.helper(helper, name));
          }
        }
      }
      /**
      * {{maybeHelperOrComponent}}
      */(resolver, constants, meta, op);
    case 1008:
      return function (resolver, constants, meta, [, expr, {
        ifComponent: ifComponent,
        ifHelper: ifHelper,
        ifValue: ifValue
      }]) {
        isGetFreeComponentOrHelper(expr);
        let type = expr[0];
        if (type === opcodes.GetLexicalSymbol) {
          let {
              scopeValues: scopeValues,
              owner: owner,
              symbols: {
                lexical: lexical
              }
            } = meta,
            definition = scopeValues[expr[1]];
          if ("function" != typeof definition && ("object" != typeof definition || null === definition))
            // The value is not an object, so it can't be a component or helper.
            return void ifValue(constants.value(definition));
          let component = constants.component(definition, owner, true, lexical?.at(expr[1]));
          if (null !== component) return void ifComponent(component);
          let helper = constants.helper(definition, null, true);
          if (null !== helper) return void ifHelper(helper);
          ifValue(constants.value(definition));
        } else if (type === opcodes.GetStrictKeyword) ifHelper(lookupBuiltInHelper(expr, resolver, meta, constants));else {
          let {
              symbols: {
                upvars: upvars
              },
              owner: owner
            } = assertResolverInvariants(meta),
            name = upvars[expr[1]],
            definition = resolver?.lookupComponent?.(name, owner) ?? null;
          if (null !== definition) return void ifComponent(constants.resolvedComponent(definition, name));
          let helper = resolver?.lookupHelper?.(name, owner) ?? null;
          null !== helper && ifHelper(constants.helper(helper, name));
        }
      }(resolver, constants, meta, op);
    case 1010:
      {
        let [, freeVar, andThen] = op;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
        andThen(meta.symbols.upvars[freeVar], meta.moduleName);
        break;
      }
    case 1011:
      {
        let [, valueIndex, then] = op,
          value = meta.scopeValues[valueIndex];
        then(constants.value(value));
        break;
      }
    default:
      throw new Error(`Unexpected high level opcode ${op[0]}`);
  }
}
class EncoderImpl {
  constructor(heap, meta, stdlib) {
    this.heap = heap, this.meta = meta, this.stdlib = stdlib, this.labelsStack = new StackImpl(), this.encoder = new InstructionEncoderImpl([]), this.errors = [], this.handle = heap.malloc();
  }
  error(error) {
    this.encoder.encode(30, 0), this.errors.push(error);
  }
  commit(size) {
    let handle = this.handle;
    return this.heap.pushMachine(5), this.heap.finishMalloc(handle, size), (list = this.errors) && list.length > 0 ? {
      errors: this.errors,
      handle: handle
    } : handle;
    var list;
  }
  push(constants, type, ...args) {
    let {
      heap: heap
    } = this;
    var value;
    let first = type | ((value = type) >= 0 && value <= 15 ? MACHINE_MASK : 0) | args.length << ARG_SHIFT;
    heap.pushRaw(first);
    for (let i = 0; i < args.length; i++) {
      let op = args[i];
      heap.pushRaw(this.operand(constants, op));
    }
  }
  operand(constants, operand) {
    if ("number" == typeof operand) return operand;
    if ("object" == typeof operand && null !== operand) {
      if (Array.isArray(operand)) return constants.array(operand);
      switch (operand.type) {
        case 1:
          return this.currentLabels.target(this.heap.offset, operand.value), -1;
        case 2:
          return constants.value(this.meta.isStrictMode);
        case 3:
        case 6:
        case 7:
        case 8:
          return constants.value(operand.value);
        case 4:
          return constants.value((block = operand.value, containing = this.meta, new CompilableTemplateImpl(block[0], containing, {
            parameters: block[1] || EMPTY_ARRAY$4
          })));
        case 5:
          return this.stdlib[operand.value];
      }
    }
    var block, containing;
    return constants.value(operand);
  }
  get currentLabels() {
    return this.labelsStack.current;
  }
  label(name) {
    this.currentLabels.label(name, this.heap.offset + 1);
  }
  startLabels() {
    this.labelsStack.push(new Labels());
  }
  stopLabels() {
    this.labelsStack.pop().patch(this.heap);
  }
}
function templateCompilationContext(evaluation, meta) {
  return {
    evaluation: evaluation,
    encoder: new EncoderImpl(evaluation.program.heap, meta, evaluation.stdlib),
    meta: meta
  };
}
class Compilers {
  add(name, func) {
    this.names[name] = this.funcs.push(func) - 1;
  }
  compile(op, sexp) {
    let name = sexp[0],
      index = this.names[name],
      func = this.funcs[index];
    sexp[0], func(op, sexp);
  }
  constructor() {
    this.names = {},
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    this.funcs = [];
  }
}
const EXPRESSIONS = new Compilers();
function withPath(op, path) {
  if (void 0 !== path && 0 !== path.length) for (let i = 0; i < path.length; i++) op(22, path[i]);
}
function expr(op, expression) {
  Array.isArray(expression) ? EXPRESSIONS.compile(op, expression) : (PushPrimitive(op, expression), op(31));
}

/**
 * Push a reference onto the stack corresponding to a statically known primitive
 * @param value A JavaScript primitive (undefined, null, boolean, number or string)
 */
function PushPrimitiveReference(op, value) {
  PushPrimitive(op, value), op(31);
}

/**
 * Push an encoded representation of a JavaScript primitive on the stack
 *
 * @param value A JavaScript primitive (undefined, null, boolean, number or string)
 */
function PushPrimitive(op, primitive) {
  let p = primitive;
  var value;
  "number" == typeof p && (p = (value = p) % 1 == 0 && value <= 536870911 && value >= -536870912 ? encodeImmediate(p) : function (value) {
    return {
      type: 6,
      value: value
    };
  }(p)), op(30, p);
}

/**
 * Invoke a foreign function (a "helper") based on a statically known handle
 *
 * @param op The op creation function
 * @param handle A handle
 * @param positional An optional list of expressions to compile
 * @param named An optional list of named arguments (name + expression) to compile
 */
function Call(op, handle, positional, named) {
  op(0), SimpleArgs(op, positional, named, false), op(16, handle), op(1), op(36, $v0);
}

/**
 * Invoke a foreign function (a "helper") based on a dynamically loaded definition
 *
 * @param op The op creation function
 * @param positional An optional list of expressions to compile
 * @param named An optional list of named arguments (name + expression) to compile
 */
function CallDynamic(op, positional, named, append) {
  op(0), SimpleArgs(op, positional, named, false), op(33, $fp, 1), op(107), append ? (op(36, $v0), append(), op(1), op(34, 1)) : (op(1), op(34, 1), op(36, $v0));
}

/**
 * Evaluate statements in the context of new dynamic scope entries. Move entries from the
 * stack into named entries in the dynamic scope, then evaluate the statements, then pop
 * the dynamic scope
 *
 * @param names a list of dynamic scope names
 * @param block a function that returns a list of statements to evaluate
 */
function Curry(op, type, definition, positional, named) {
  op(0), SimpleArgs(op, positional, named, false), op(86), expr(op, definition), op(77, type, {
    type: 2,
    value: void 0
  }), op(1), op(36, $v0);
}

/**
 * Yield to a block located at a particular symbol location.
 *
 * @param to the symbol containing the block to yield to
 * @param params optional block parameters to yield to the block
 */
function YieldBlock(op, to, positional) {
  SimpleArgs(op, positional, null, true), op(23, to), op(24), op(61), op(64), op(40), op(1);
}

/**
 * Push an (optional) yieldable block onto the stack. The yieldable block must be known
 * statically at compile time.
 *
 * @param block An optional Compilable block
 */
function PushYieldableBlock(op, block) {
  !function (op, parameters) {
    null !== parameters ? op(63, symbolTableOperand({
      parameters: parameters
    })) : PushPrimitive(op, null);
  }(op, block && block[1]), op(62), PushCompilable(op, block);
}

/**
 * Invoke a block that is known statically at compile time.
 *
 * @param block a Compilable block
 */
function InvokeStaticBlock(op, block) {
  op(0), PushCompilable(op, block), op(61), op(2), op(1);
}

/**
 * Invoke a static block, preserving some number of stack entries for use in
 * updating.
 *
 * @param block A compilable block
 * @param callerCount A number of stack entries to preserve
 */
function InvokeStaticBlockWithStack(op, block, callerCount) {
  let parameters = block[1],
    calleeCount = parameters.length,
    count = Math.min(callerCount, calleeCount);
  if (0 !== count) {
    if (op(0), count) {
      op(39);
      for (let i = 0; i < count; i++) op(33, $fp, callerCount - i), op(19, parameters[i]);
    }
    PushCompilable(op, block), op(61), op(2), count && op(40), op(1);
  } else InvokeStaticBlock(op, block);
}
function PushCompilable(op, _block) {
  null === _block ? PushPrimitive(op, null) : op(28, {
    type: 4,
    value: _block
  });
}

/**
 * Compile arguments, pushing an Arguments object onto the stack.
 *
 * @param args.params
 * @param args.hash
 * @param args.blocks
 * @param args.atNames
 */
function SimpleArgs(op, positional, named, atNames) {
  if (null === positional && null === named) return void op(83);
  let flags = CompilePositional(op, positional) << 4;
  atNames && (flags |= 8);
  let names = EMPTY_STRING_ARRAY;
  if (named) {
    names = named[0];
    let val = named[1];
    for (let i = 0; i < val.length; i++) expr(op, val[i]);
  }
  op(82, names, EMPTY_STRING_ARRAY, flags);
}

/**
 * Compile an optional list of positional arguments, which pushes each argument
 * onto the stack and returns the number of parameters compiled
 *
 * @param positional an optional list of positional arguments
 */
function CompilePositional(op, positional) {
  if (null === positional) return 0;
  for (let i = 0; i < positional.length; i++) expr(op, positional[i]);
  return positional.length;
}
function meta(layout) {
  let [, locals, upvars, lexicalSymbols] = layout.block;
  return {
    symbols: {
      locals: locals,
      upvars: upvars,
      lexical: lexicalSymbols
    },
    scopeValues: layout.scope?.() ?? null,
    isStrictMode: layout.isStrictMode,
    moduleName: layout.moduleName,
    owner: layout.owner,
    size: locals.length
  };
}
EXPRESSIONS.add(opcodes.Concat, (op, [, parts]) => {
  for (let part of parts) expr(op, part);
  op(27, parts.length);
}), EXPRESSIONS.add(opcodes.Call, (op, [, expression, positional, named]) => {
  isGetFreeHelper(expression) ? op(1005, expression, handle => {
    Call(op, handle, positional, named);
  }) : (expr(op, expression), CallDynamic(op, positional, named));
}), EXPRESSIONS.add(opcodes.Curry, (op, [, expr, type, positional, named]) => {
  Curry(op, type, expr, positional, named);
}), EXPRESSIONS.add(opcodes.GetSymbol, (op, [, sym, path]) => {
  op(21, sym), withPath(op, path);
}), EXPRESSIONS.add(opcodes.GetLexicalSymbol, (op, [, sym, path]) => {
  op(1011, sym, handle => {
    op(29, handle), withPath(op, path);
  });
}), EXPRESSIONS.add(opcodes.GetStrictKeyword, (op, expr) => {
  op(1010, expr[1], () => {
    op(1005, expr, handle => {
      Call(op, handle, null, null);
    });
  });
}), EXPRESSIONS.add(opcodes.GetFreeAsHelperHead, (op, expr) => {
  op(1010, expr[1], () => {
    op(1005, expr, handle => {
      Call(op, handle, null, null);
    });
  });
}), EXPRESSIONS.add(opcodes.Undefined, op => PushPrimitiveReference(op, void 0)), EXPRESSIONS.add(opcodes.HasBlock, (op, [, block]) => {
  expr(op, block), op(25);
}), EXPRESSIONS.add(opcodes.HasBlockParams, (op, [, block]) => {
  expr(op, block), op(24), op(61), op(26);
}), EXPRESSIONS.add(opcodes.IfInline, (op, [, condition, truthy, falsy]) => {
  // Push in reverse order
  expr(op, falsy), expr(op, truthy), expr(op, condition), op(109);
}), EXPRESSIONS.add(opcodes.Not, (op, [, value]) => {
  expr(op, value), op(110);
}), EXPRESSIONS.add(opcodes.GetDynamicVar, (op, [, expression]) => {
  expr(op, expression), op(111);
}), EXPRESSIONS.add(opcodes.Log, (op, [, positional]) => {
  op(0), SimpleArgs(op, positional, null, false), op(112), op(1), op(36, $v0);
});
class NamedBlocksImpl {
  constructor(blocks) {
    this.blocks = blocks, this.names = blocks ? Object.keys(blocks) : [];
  }
  get(name) {
    return this.blocks && this.blocks[name] || null;
  }
  has(name) {
    let {
      blocks: blocks
    } = this;
    return null !== blocks && name in blocks;
  }
  with(name, block) {
    let {
      blocks: blocks
    } = this;
    return new NamedBlocksImpl(blocks ? assign({}, blocks, {
      [name]: block
    }) : {
      [name]: block
    });
  }
  get hasAny() {
    return null !== this.blocks;
  }
}
const EMPTY_BLOCKS = new NamedBlocksImpl(null);
function namedBlocks(blocks) {
  if (null === blocks) return EMPTY_BLOCKS;
  let out = dict(),
    [keys, values] = blocks;
  for (const [i, key] of enumerate(keys)) out[key] = values[i];
  return new NamedBlocksImpl(out);
}
function SwitchCases(op, bootstrap, matcher) {
  // Setup the switch DSL
  let clauses = [],
    count = 0;
  // Call the callback
  matcher(function (match, callback) {
    clauses.push({
      match: match,
      callback: callback,
      label: "CLAUSE" + count++
    });
  }),
  // Emit the opcodes for the switch
  op(69, 1), bootstrap(), op(1001);
  // First, emit the jump opcodes. We don't need a jump for the last
  // opcode, since it bleeds directly into its clause.
  for (let clause of clauses.slice(0, -1)) op(67, labelOperand(clause.label), clause.match);
  // Enumerate the clauses in reverse order. Earlier matches will
  // require fewer checks.
  for (let i = clauses.length - 1; i >= 0; i--) {
    let clause = clauses[i];
    op(1e3, clause.label), op(34, 1), clause.callback(),
    // The first match is special: it is placed directly before the END
    // label, so no additional jump is needed at the end of it.
    0 !== i && op(4, labelOperand("END"));
  }
  op(1e3, "END"), op(1002), op(70);
}

/**
 * A convenience for pushing some arguments on the stack and
 * running some code if the code needs to be re-executed during
 * updating execution if some of the arguments have changed.
 *
 * # Initial Execution
 *
 * The `args` function should push zero or more arguments onto
 * the stack and return the number of arguments pushed.
 *
 * The `body` function provides the instructions to execute both
 * during initial execution and during updating execution.
 *
 * Internally, this function starts by pushing a new frame, so
 * that the body can return and sets the return point ($ra) to
 * the ENDINITIAL label.
 *
 * It then executes the `args` function, which adds instructions
 * responsible for pushing the arguments for the block to the
 * stack. These arguments will be restored to the stack before
 * updating execution.
 *
 * Next, it adds the Enter opcode, which marks the current position
 * in the DOM, and remembers the current $pc (the next instruction)
 * as the first instruction to execute during updating execution.
 *
 * Next, it runs `body`, which adds the opcodes that should
 * execute both during initial execution and during updating execution.
 * If the `body` wishes to finish early, it should Jump to the
 * `FINALLY` label.
 *
 * Next, it adds the FINALLY label, followed by:
 *
 * - the Exit opcode, which finalizes the marked DOM started by the
 *   Enter opcode.
 * - the Return opcode, which returns to the current return point
 *   ($ra).
 *
 * Finally, it adds the ENDINITIAL label followed by the PopFrame
 * instruction, which restores $fp, $sp and $ra.
 *
 * # Updating Execution
 *
 * Updating execution for this `replayable` occurs if the `body` added an
 * assertion, via one of the `JumpIf`, `JumpUnless` or `AssertSame` opcodes.
 *
 * If, during updating executon, the assertion fails, the initial VM is
 * restored, and the stored arguments are pushed onto the stack. The DOM
 * between the starting and ending markers is cleared, and the VM's cursor
 * is set to the area just cleared.
 *
 * The return point ($ra) is set to -1, the exit instruction.
 *
 * Finally, the $pc is set to to the instruction saved off by the
 * Enter opcode during initial execution, and execution proceeds as
 * usual.
 *
 * The only difference is that when a `Return` instruction is
 * encountered, the program jumps to -1 rather than the END label,
 * and the PopFrame opcode is not needed.
 */
function Replayable(op, args, body) {
  // Start a new label frame, to give END and RETURN
  // a unique meaning.
  op(1001), op(0),
  // If the body invokes a block, its return will return to
  // END. Otherwise, the return in RETURN will return to END.
  op(6, labelOperand("ENDINITIAL")),
  // Start a new updating closure, remembering `count` elements
  // from the stack. Everything after this point, and before END,
  // will execute both initially and to update the block.
  // The enter and exit opcodes also track the area of the DOM
  // associated with this block. If an assertion inside the block
  // fails (for example, the test value changes from true to false
  // in an #if), the DOM is cleared and the program is re-executed,
  // restoring `count` elements to the stack and executing the
  // instructions between the enter and exit.
  op(69, args()),
  // Evaluate the body of the block. The body of the block may
  // return, which will jump execution to END during initial
  // execution, and exit the updating routine.
  body(),
  // All execution paths in the body should run the FINALLY once
  // they are done. It is executed both during initial execution
  // and during updating execution.
  op(1e3, "FINALLY"),
  // Finalize the DOM.
  op(70),
  // In initial execution, this is a noop: it returns to the
  // immediately following opcode. In updating execution, this
  // exits the updating routine.
  op(5),
  // Cleanup code for the block. Runs on initial execution
  // but not on updating.
  op(1e3, "ENDINITIAL"), op(1), op(1002);
}

/**
 * A specialized version of the `replayable` convenience that allows the
 * caller to provide different code based upon whether the item at
 * the top of the stack is true or false.
 *
 * As in `replayable`, the `ifTrue` and `ifFalse` code can invoke `return`.
 *
 * During the initial execution, a `return` will continue execution
 * in the cleanup code, which finalizes the current DOM block and pops
 * the current frame.
 *
 * During the updating execution, a `return` will exit the updating
 * routine, as it can reuse the DOM block and is always only a single
 * frame deep.
 */
function ReplayableIf(op, args, ifTrue, ifFalse) {
  return Replayable(op, args, () => {
    // If the conditional is false, jump to the ELSE label.
    op(66, labelOperand("ELSE")),
    // Otherwise, execute the code associated with the true branch.
    ifTrue(),
    // We're done, so return. In the initial execution, this runs
    // the cleanup code. In the updating VM, it exits the updating
    // routine.
    op(4, labelOperand("FINALLY")), op(1e3, "ELSE"),
    // If the conditional is false, and code associatied ith the
    // false branch was provided, execute it. If there was no code
    // associated with the false branch, jumping to the else statement
    // has no other behavior.
    void 0 !== ifFalse && ifFalse();
  });
}
function InvokeComponent(op, component, _elementBlock, positional, named, _blocks) {
  let {
      compilable: compilable,
      capabilities: capabilities,
      handle: handle
    } = component,
    elementBlock = _elementBlock ? [_elementBlock, []] : null,
    blocks = namedBlocks(_blocks);
  compilable ? (op(78, handle), function (op, {
    capabilities: capabilities,
    layout: layout,
    elementBlock: elementBlock,
    positional: positional,
    named: named,
    blocks: blocks
  }) {
    let {
      symbolTable: symbolTable
    } = layout;
    if (hasCapability(capabilities, InternalComponentCapabilities.prepareArgs)) return void InvokeNonStaticComponent(op, {
      capabilities: capabilities,
      elementBlock: elementBlock,
      positional: positional,
      named: named,
      atNames: true,
      blocks: blocks,
      layout: layout
    });
    op(36, $s0), op(33, $sp, 1), op(35, $s0), op(0);
    // Setup arguments
    let {
        symbols: symbols
      } = symbolTable,
      blockSymbols = [],
      argSymbols = [],
      argNames = [],
      blockNames = blocks.names;
    // As we push values onto the stack, we store the symbols associated  with them
    // so that we can set them on the scope later on with SetVariable and SetBlock
    // Starting with the attrs block, if it exists and is referenced in the component
    if (null !== elementBlock) {
      let symbol = symbols.indexOf("&attrs");
      -1 !== symbol && (PushYieldableBlock(op, elementBlock), blockSymbols.push(symbol));
    }
    // Followed by the other blocks, if they exist and are referenced in the component.
    // Also store the index of the associated symbol.
    for (const name of blockNames) {
      let symbol = symbols.indexOf(`&${name}`);
      -1 !== symbol && (PushYieldableBlock(op, blocks.get(name)), blockSymbols.push(symbol));
    }
    // Next up we have arguments. If the component has the `createArgs` capability,
    // then it wants access to the arguments in JavaScript. We can't know whether
    // or not an argument is used, so we have to give access to all of them.
    if (hasCapability(capabilities, InternalComponentCapabilities.createArgs)) {
      // First we push positional arguments
      let flags = CompilePositional(op, positional) << 4;
      // setup the flags with the count of positionals, and to indicate that atNames
      // are used
      flags |= 8;
      let names = EMPTY_STRING_ARRAY;
      // Next, if named args exist, push them all. If they have an associated symbol
      // in the invoked component (e.g. they are used within its template), we push
      // that symbol. If not, we still push the expression as it may be used, and
      // we store the symbol as -1 (this is used later).
      if (null !== named) {
        names = named[0];
        let val = named[1];
        for (let i = 0; i < val.length; i++) {
          let symbol = symbols.indexOf(names[i]);
          expr(op, val[i]), argSymbols.push(symbol);
        }
      }
      // Finally, push the VM arguments themselves. These args won't need access
      // to blocks (they aren't accessible from userland anyways), so we push an
      // empty array instead of the actual block names.
      op(82, names, EMPTY_STRING_ARRAY, flags),
      // And push an extra pop operation to remove the args before we begin setting
      // variables on the local context
      argSymbols.push(-1);
    } else if (null !== named) {
      // If the component does not have the `createArgs` capability, then the only
      // expressions we need to push onto the stack are those that are actually
      // referenced in the template of the invoked component (e.g. have symbols).
      let names = named[0],
        val = named[1];
      for (let i = 0; i < val.length; i++) {
        let name = names[i],
          symbol = symbols.indexOf(name);
        -1 !== symbol && (expr(op, val[i]), argSymbols.push(symbol), argNames.push(name));
      }
    }
    op(97, $s0), hasCapability(capabilities, InternalComponentCapabilities.dynamicScope) && op(59), hasCapability(capabilities, InternalComponentCapabilities.createInstance) &&
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    op(87, 0 | blocks.has("default")), op(88, $s0), hasCapability(capabilities, InternalComponentCapabilities.createArgs) ? op(90, $s0) : op(90, $s0, argNames),
    // Setup the new root scope for the component
    op(37, symbols.length + 1, Object.keys(blocks).length > 0 ? 1 : 0),
    // Pop the self reference off the stack and set it to the symbol for `this`
    // in the new scope. This is why all subsequent symbols are increased by one.
    op(19, 0);
    // Going in reverse, now we pop the args/blocks off the stack, starting with
    // arguments, and assign them to their symbols in the new scope.
    for (const symbol of reverse(argSymbols))
    // for (let i = argSymbols.length - 1; i >= 0; i--) {
    //   let symbol = argSymbols[i];
    -1 === symbol ?
    // The expression was not bound to a local symbol, it was only pushed to be
    // used with VM args in the javascript side
    op(34, 1) : op(19, symbol + 1);
    // if any positional params exist, pop them off the stack as well
    null !== positional && op(34, positional.length);
    // Finish up by popping off and assigning blocks
    for (const symbol of reverse(blockSymbols)) op(20, symbol + 1);
    op(28, layoutOperand(layout)), op(61), op(2), op(100, $s0), op(1), op(40), hasCapability(capabilities, InternalComponentCapabilities.dynamicScope) && op(60), op(98), op(35, $s0);
  }(op, {
    capabilities: capabilities,
    layout: compilable,
    elementBlock: elementBlock,
    positional: positional,
    named: named,
    blocks: blocks
  })) : (op(78, handle), InvokeNonStaticComponent(op, {
    capabilities: capabilities,
    elementBlock: elementBlock,
    positional: positional,
    named: named,
    atNames: true,
    blocks: blocks
  }));
}
function InvokeDynamicComponent(op, definition, _elementBlock, positional, named, _blocks, atNames, curried) {
  let elementBlock = _elementBlock ? [_elementBlock, []] : null,
    blocks = namedBlocks(_blocks);
  Replayable(op, () => (expr(op, definition), op(33, $sp, 0), 2), () => {
    op(66, labelOperand("ELSE")), curried ? op(81) : op(80, {
      type: 2,
      value: void 0
    }), op(79), InvokeNonStaticComponent(op, {
      capabilities: true,
      elementBlock: elementBlock,
      positional: positional,
      named: named,
      atNames: atNames,
      blocks: blocks
    }), op(1e3, "ELSE");
  });
}
function InvokeNonStaticComponent(op, {
  capabilities: capabilities,
  elementBlock: elementBlock,
  positional: positional,
  named: named,
  atNames: atNames,
  blocks: namedBlocks,
  layout: layout
}) {
  let bindableBlocks = !!namedBlocks,
    bindableAtNames = true === capabilities || hasCapability(capabilities, InternalComponentCapabilities.prepareArgs) || !(!named || 0 === named[0].length),
    blocks = namedBlocks.with("attrs", elementBlock);
  op(36, $s0), op(33, $sp, 1), op(35, $s0), op(0), function (op, positional, named, blocks, atNames) {
    let blockNames = blocks.names;
    for (const name of blockNames) PushYieldableBlock(op, blocks.get(name));
    let flags = CompilePositional(op, positional) << 4;
    atNames && (flags |= 8), blocks.hasAny && (flags |= 7);
    let names = EMPTY_ARRAY$4;
    if (named) {
      names = named[0];
      let val = named[1];
      for (let i = 0; i < val.length; i++) expr(op, val[i]);
    }
    op(82, names, blockNames, flags);
  }(op, positional, named, blocks, atNames), op(85, $s0), invokePreparedComponent(op, blocks.has("default"), bindableBlocks, bindableAtNames, () => {
    layout ? (op(63, symbolTableOperand(layout.symbolTable)), op(28, layoutOperand(layout)), op(61)) : op(92, $s0), op(95, $s0);
  }), op(35, $s0);
}
function invokePreparedComponent(op, hasBlock, bindableBlocks, bindableAtNames, populateLayout = null) {
  op(97, $s0), op(59),
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  op(87, 0 | hasBlock),
  // this has to run after createComponent to allow
  // for late-bound layouts, but a caller is free
  // to populate the layout earlier if it wants to
  // and do nothing here.
  populateLayout && populateLayout(), op(88, $s0), op(90, $s0), op(38, $s0), op(19, 0), bindableAtNames && op(17, $s0), bindableBlocks && op(18, $s0), op(34, 1), op(96, $s0), op(100, $s0), op(1), op(40), op(60), op(98);
}
const STATEMENTS = new Compilers(),
  INFLATE_ATTR_TABLE = ["class", "id", "value", "name", "type", "style", "href"],
  INFLATE_TAG_TABLE = ["div", "span", "p", "a"];
function inflateTagName(tagName) {
  return "string" == typeof tagName ? tagName : INFLATE_TAG_TABLE[tagName];
}
function inflateAttrName(attrName) {
  return "string" == typeof attrName ? attrName : INFLATE_ATTR_TABLE[attrName];
}
function hashToArgs(hash) {
  return null === hash ? null : [hash[0].map(key => `@${key}`), hash[1]];
}
STATEMENTS.add(opcodes.Comment, (op, sexp) => op(42, sexp[1])), STATEMENTS.add(opcodes.CloseElement, op => op(55)), STATEMENTS.add(opcodes.FlushElement, op => op(54)), STATEMENTS.add(opcodes.Modifier, (op, [, expression, positional, named]) => {
  isGetFreeModifier(expression) ? op(1003, expression, handle => {
    op(0), SimpleArgs(op, positional, named, false), op(57, handle), op(1);
  }) : (expr(op, expression), op(0), SimpleArgs(op, positional, named, false), op(33, $fp, 1), op(108), op(1));
}), STATEMENTS.add(opcodes.StaticAttr, (op, [, name, value, namespace]) => {
  op(51, inflateAttrName(name), value, namespace ?? null);
}), STATEMENTS.add(opcodes.StaticComponentAttr, (op, [, name, value, namespace]) => {
  op(105, inflateAttrName(name), value, namespace ?? null);
}), STATEMENTS.add(opcodes.DynamicAttr, (op, [, name, value, namespace]) => {
  expr(op, value), op(52, inflateAttrName(name), false, namespace ?? null);
}), STATEMENTS.add(opcodes.TrustingDynamicAttr, (op, [, name, value, namespace]) => {
  expr(op, value), op(52, inflateAttrName(name), true, namespace ?? null);
}), STATEMENTS.add(opcodes.ComponentAttr, (op, [, name, value, namespace]) => {
  expr(op, value), op(53, inflateAttrName(name), false, namespace ?? null);
}), STATEMENTS.add(opcodes.TrustingComponentAttr, (op, [, name, value, namespace]) => {
  expr(op, value), op(53, inflateAttrName(name), true, namespace ?? null);
}), STATEMENTS.add(opcodes.OpenElement, (op, [, tag]) => {
  op(48, inflateTagName(tag));
}), STATEMENTS.add(opcodes.OpenElementWithSplat, (op, [, tag]) => {
  op(89), op(48, inflateTagName(tag));
}), STATEMENTS.add(opcodes.Component, (op, [, expr, elementBlock, named, blocks]) => {
  isGetFreeComponent(expr) ? op(1004, expr, component => {
    InvokeComponent(op, component, elementBlock, null, named, blocks);
  }) :
  // otherwise, the component name was an expression, so resolve the expression
  // and invoke it as a dynamic component
  InvokeDynamicComponent(op, expr, elementBlock, null, named, blocks, true, true);
}), STATEMENTS.add(opcodes.Yield, (op, [, to, params]) => YieldBlock(op, to, params)), STATEMENTS.add(opcodes.AttrSplat, (op, [, to]) => YieldBlock(op, to, null)), STATEMENTS.add(opcodes.Debugger, (op, [, locals, upvars, lexical]) => {
  op(103, function (locals, upvars, lexical) {
    return {
      type: 3,
      value: {
        locals: locals,
        upvars: upvars,
        lexical: lexical
      }
    };
  }(locals, upvars, lexical));
}), STATEMENTS.add(opcodes.Append, (op, [, value]) => {
  // Special case for static values
  if (Array.isArray(value)) {
    if (isGetFreeComponentOrHelper(value)) op(1008, value, {
      ifComponent(component) {
        InvokeComponent(op, component, null, null, null, null);
      },
      ifHelper(handle) {
        op(0), Call(op, handle, null, null), op(3, stdlibOperand("cautious-non-dynamic-append")), op(1);
      },
      ifValue(handle) {
        op(0), op(29, handle), op(3, stdlibOperand("cautious-non-dynamic-append")), op(1);
      }
    });else if (value[0] === opcodes.Call) {
      let [, expression, positional, named] = value;
      isGetFreeComponentOrHelper(expression) ? op(1007, expression, {
        ifComponent(component) {
          InvokeComponent(op, component, null, positional, hashToArgs(named), null);
        },
        ifHelper(handle) {
          op(0), Call(op, handle, positional, named), op(3, stdlibOperand("cautious-non-dynamic-append")), op(1);
        }
      }) : SwitchCases(op, () => {
        expr(op, expression), op(106);
      }, when => {
        when(ContentType.Component, () => {
          op(81), op(79), InvokeNonStaticComponent(op, {
            capabilities: true,
            elementBlock: null,
            positional: positional,
            named: named,
            atNames: false,
            blocks: namedBlocks(null)
          });
        }), when(ContentType.Helper, () => {
          CallDynamic(op, positional, named, () => {
            op(3, stdlibOperand("cautious-non-dynamic-append"));
          });
        });
      });
    } else op(0), expr(op, value), op(3, stdlibOperand("cautious-append")), op(1);
  } else op(41, null == value ? "" : String(value));
}), STATEMENTS.add(opcodes.TrustingAppend, (op, [, value]) => {
  Array.isArray(value) ? (op(0), expr(op, value), op(3, stdlibOperand("trusting-append")), op(1)) : op(41, null == value ? "" : String(value));
}), STATEMENTS.add(opcodes.Block, (op, [, expr, positional, named, blocks]) => {
  isGetFreeComponent(expr) ? op(1004, expr, component => {
    InvokeComponent(op, component, null, positional, hashToArgs(named), blocks);
  }) : InvokeDynamicComponent(op, expr, null, positional, named, blocks, false, false);
}), STATEMENTS.add(opcodes.InElement, (op, [, block, guid, destination, insertBefore]) => {
  ReplayableIf(op, () => (expr(op, guid), void 0 === insertBefore ? PushPrimitiveReference(op, void 0) : expr(op, insertBefore), expr(op, destination), op(33, $sp, 0), 4), () => {
    op(50), InvokeStaticBlock(op, block), op(56);
  });
}), STATEMENTS.add(opcodes.If, (op, [, condition, block, inverse]) => ReplayableIf(op, () => (expr(op, condition), op(71), 1), () => {
  InvokeStaticBlock(op, block);
}, inverse ? () => {
  InvokeStaticBlock(op, inverse);
} : void 0)), STATEMENTS.add(opcodes.Each, (op, [, value, key, block, inverse]) => Replayable(op, () => (key ? expr(op, key) : PushPrimitiveReference(op, null), expr(op, value), 2), () => {
  op(72, labelOperand("BODY"), labelOperand("ELSE")), op(0), op(33, $fp, 1), op(6, labelOperand("ITER")), op(1e3, "ITER"), op(74, labelOperand("BREAK")), op(1e3, "BODY"), InvokeStaticBlockWithStack(op, block, 2), op(34, 2), op(4, labelOperand("FINALLY")), op(1e3, "BREAK"), op(1), op(73), op(4, labelOperand("FINALLY")), op(1e3, "ELSE"), inverse && InvokeStaticBlock(op, inverse);
})), STATEMENTS.add(opcodes.Let, (op, [, positional, block]) => {
  InvokeStaticBlockWithStack(op, block, CompilePositional(op, positional));
}), STATEMENTS.add(opcodes.WithDynamicVars, (op, [, named, block]) => {
  if (named) {
    let [names, expressions] = named;
    CompilePositional(op, expressions), function (op, names, block) {
      op(59), op(58, names), block(), op(60);
    }(op, names, () => {
      InvokeStaticBlock(op, block);
    });
  } else InvokeStaticBlock(op, block);
}), STATEMENTS.add(opcodes.InvokeComponent, (op, [, expr, positional, named, blocks]) => {
  isGetFreeComponent(expr) ? op(1004, expr, component => {
    InvokeComponent(op, component, null, positional, hashToArgs(named), blocks);
  }) : InvokeDynamicComponent(op, expr, null, positional, named, blocks, false, false);
});
class CompilableTemplateImpl {
  constructor(statements, meta,
  // Part of CompilableTemplate
  symbolTable,
  // Used for debugging
  moduleName = "plain block") {
    this.statements = statements, this.meta = meta, this.symbolTable = symbolTable, this.moduleName = moduleName, this.compiled = null;
  }
  // Part of CompilableTemplate
  compile(context) {
    return function (compilable, context) {
      if (null !== compilable.compiled) return compilable.compiled;
      compilable.compiled = -1;
      let {
          statements: statements,
          meta: meta
        } = compilable,
        result = compileStatements(statements, meta, context);
      return compilable.compiled = result, result;
    }(this, context);
  }
}
function compilable(layout, moduleName) {
  let [statements, symbols] = layout.block;
  return new CompilableTemplateImpl(statements, meta(layout), {
    symbols: symbols
  }, moduleName);
}
function compileStatements(statements, meta, syntaxContext) {
  let sCompiler = STATEMENTS,
    context = templateCompilationContext(syntaxContext, meta),
    {
      encoder: encoder,
      evaluation: evaluation
    } = context;
  function pushOp(...op) {
    encodeOp(encoder, evaluation, meta, op);
  }
  for (const statement of statements) sCompiler.compile(pushOp, statement);
  return context.encoder.commit(meta.size);
}
class StdLib {
  constructor(main, trustingGuardedAppend, cautiousGuardedAppend, trustingNonDynamicAppend, cautiousNonDynamicAppend) {
    this.main = main, this.trustingGuardedAppend = trustingGuardedAppend, this.cautiousGuardedAppend = cautiousGuardedAppend, this.trustingNonDynamicAppend = trustingNonDynamicAppend, this.cautiousNonDynamicAppend = cautiousNonDynamicAppend;
  }
  get "trusting-append"() {
    return this.trustingGuardedAppend;
  }
  get "cautious-append"() {
    return this.cautiousGuardedAppend;
  }
  get "trusting-non-dynamic-append"() {
    return this.trustingNonDynamicAppend;
  }
  get "cautious-non-dynamic-append"() {
    return this.cautiousNonDynamicAppend;
  }
  getAppend(trusting) {
    return trusting ? this.trustingGuardedAppend : this.cautiousGuardedAppend;
  }
}

/**
 * Append content to the DOM. This standard function triages content and does the
 * right thing based upon whether it's a string, safe string, component, fragment
 * or node.
 *
 * @param trusting whether to interpolate a string as raw HTML (corresponds to
 * triple curlies)
 */
function StdAppend(op, trusting, nonDynamicAppend) {
  SwitchCases(op, () => op(76), when => {
    when(ContentType.String, () => {
      trusting ? (op(68), op(43)) : op(47);
    }), "number" == typeof nonDynamicAppend ? (when(ContentType.Component, () => {
      op(81), op(79), function (op) {
        op(36, $s0), op(33, $sp, 1), op(35, $s0), op(0), op(83), op(85, $s0), invokePreparedComponent(op, false, false, true, () => {
          op(92, $s0), op(95, $s0);
        }), op(35, $s0);
      }(op);
    }), when(ContentType.Helper, () => {
      CallDynamic(op, null, null, () => {
        op(3, nonDynamicAppend);
      });
    })) : (
    // when non-dynamic, we can no longer call the value (potentially because we've already called it)
    // this prevents infinite loops. We instead coerce the value, whatever it is, into the DOM.
    when(ContentType.Component, () => {
      op(47);
    }), when(ContentType.Helper, () => {
      op(47);
    })), when(ContentType.SafeString, () => {
      op(68), op(44);
    }), when(ContentType.Fragment, () => {
      op(68), op(45);
    }), when(ContentType.Node, () => {
      op(68), op(46);
    });
  });
}
function compileStd(context) {
  let mainHandle = build(context, op => function (op) {
      op(75, $s0), invokePreparedComponent(op, false, false, true);
    }(op)),
    trustingGuardedNonDynamicAppend = build(context, op => StdAppend(op, true, null)),
    cautiousGuardedNonDynamicAppend = build(context, op => StdAppend(op, false, null)),
    trustingGuardedDynamicAppend = build(context, op => StdAppend(op, true, trustingGuardedNonDynamicAppend)),
    cautiousGuardedDynamicAppend = build(context, op => StdAppend(op, false, cautiousGuardedNonDynamicAppend));
  return new StdLib(mainHandle, trustingGuardedDynamicAppend, cautiousGuardedDynamicAppend, trustingGuardedNonDynamicAppend, cautiousGuardedNonDynamicAppend);
}
const STDLIB_META = {
  symbols: {
    locals: null,
    upvars: null
  },
  moduleName: "stdlib",
  // TODO: ??
  scopeValues: null,
  isStrictMode: true,
  owner: null,
  size: 0
};
function build(evaluation, builder) {
  let encoder = new EncoderImpl(evaluation.program.heap, STDLIB_META);
  builder(function (...op) {
    encodeOp(encoder, evaluation, STDLIB_META, op);
  });
  let result = encoder.commit(0);
  if ("number" != typeof result)
    // This shouldn't be possible
    throw new Error("Unexpected errors compiling std");
  return result;
}
class EvaluationContextImpl {
  constructor({
    constants: constants,
    heap: heap
  }, createOp, runtime) {
    this.constants = constants, this.heap = heap, this.resolver = runtime.resolver, this.createOp = createOp, this.env = runtime.env, this.program = runtime.program, this.stdlib = compileStd(this);
  }
}
class WrappedBuilder {
  constructor(layout, moduleName) {
    this.layout = layout, this.moduleName = moduleName, this.compiled = null;
    let {
        block: block
      } = layout,
      [, symbols] = block;
    symbols = symbols.slice();
    // ensure ATTRS_BLOCK is always included (only once) in the list of symbols
    let attrsBlockIndex = symbols.indexOf("&attrs");
    this.attrsBlockNumber = -1 === attrsBlockIndex ? symbols.push("&attrs") : attrsBlockIndex + 1, this.symbolTable = {
      symbols: symbols
    }, this.meta = meta(layout);
  }
  compile(syntax) {
    if (null !== this.compiled) return this.compiled;
    let m = meta(this.layout),
      context = templateCompilationContext(syntax, m),
      {
        encoder: encoder,
        evaluation: evaluation
      } = context;
    var op, layout, attrsBlockNumber;
    op = function (...op) {
      encodeOp(encoder, evaluation, m, op);
    }, layout = this.layout, attrsBlockNumber = this.attrsBlockNumber, op(1001), function (op, register, block) {
      op(36, register), block(), op(35, register);
    }(op, $s1, () => {
      op(91, $s0), op(31), op(33, $sp, 0);
    }), op(66, labelOperand("BODY")), op(36, $s1), op(89), op(49), op(99, $s0), YieldBlock(op, attrsBlockNumber, null), op(54), op(1e3, "BODY"), InvokeStaticBlock(op, [layout.block[0], []]), op(36, $s1), op(66, labelOperand("END")), op(55), op(1e3, "END"), op(35, $s1), op(1002);
    let handle = context.encoder.commit(m.size);
    return "number" != typeof handle || (this.compiled = handle), handle;
  }
}
let clientId = 0,
  templateCacheCounters = {
    cacheHit: 0,
    cacheMiss: 0
  };

/**
 * Wraps a template js in a template module to change it into a factory
 * that handles lazy parsing the template and to create per env singletons
 * of the template.
 */
function templateFactory({
  id: templateId,
  moduleName: moduleName,
  block: block,
  scope: scope,
  isStrictMode: isStrictMode
}) {
  // TODO(template-refactors): This should be removed in the near future, as it
  // appears that id is unused. It is currently kept for backwards compat reasons.
  let parsedBlock,
    id = templateId || "client-" + clientId++,
    ownerlessTemplate = null,
    templateCache = new WeakMap(),
    factory = owner => {
      if (void 0 === parsedBlock && (parsedBlock = JSON.parse(block)), void 0 === owner) return null === ownerlessTemplate ? (templateCacheCounters.cacheMiss++, ownerlessTemplate = new TemplateImpl({
        id: id,
        block: parsedBlock,
        moduleName: moduleName,
        owner: null,
        scope: scope,
        isStrictMode: isStrictMode
      })) : templateCacheCounters.cacheHit++, ownerlessTemplate;
      let result = templateCache.get(owner);
      return void 0 === result ? (templateCacheCounters.cacheMiss++, result = new TemplateImpl({
        id: id,
        block: parsedBlock,
        moduleName: moduleName,
        owner: owner,
        scope: scope,
        isStrictMode: isStrictMode
      }), templateCache.set(owner, result)) : templateCacheCounters.cacheHit++, result;
    };
  // TODO: This caches JSON serialized output once in case a template is
  // compiled by multiple owners, but we haven't verified if this is actually
  // helpful. We should benchmark this in the future.
  return factory.__id = id, factory.__meta = {
    moduleName: moduleName
  }, factory;
}
class TemplateImpl {
  constructor(parsedLayout) {
    this.parsedLayout = parsedLayout, this.result = "ok", this.layout = null, this.wrappedLayout = null;
  }
  get moduleName() {
    return this.parsedLayout.moduleName;
  }
  get id() {
    return this.parsedLayout.id;
  }
  // TODO(template-refactors): This should be removed in the near future, it is
  // only being exposed for backwards compatibility
  get referrer() {
    return {
      moduleName: this.parsedLayout.moduleName,
      owner: this.parsedLayout.owner
    };
  }
  asLayout() {
    return this.layout ? this.layout : this.layout = compilable(assign({}, this.parsedLayout), this.moduleName);
  }
  asWrappedLayout() {
    return this.wrappedLayout ? this.wrappedLayout : this.wrappedLayout = new WrappedBuilder(assign({}, this.parsedLayout), this.moduleName);
  }
}

function unwrapTemplate$2(template) {
  if ("error" === template.result) throw new Error(`Compile Error: ${template.problem} @ ${template.span.start}..${template.span.end}`);
  return template;
}

/**
 * Default component template, which is a plain yield
 */
const DEFAULT_TEMPLATE_BLOCK = [[[opcodes.Yield, 1, null]], ["&default"], []],
  DEFAULT_TEMPLATE = {
    // random uuid
    id: "1b32f5c2-7623-43d6-a0ad-9672898920a1",
    moduleName: "__default__.hbs",
    block: JSON.stringify(DEFAULT_TEMPLATE_BLOCK),
    scope: null,
    isStrictMode: true
  },
  WELL_KNOWN_EMPTY_ARRAY = Object.freeze([]),
  STARTER_CONSTANTS = [false, true, null, void 0, WELL_KNOWN_EMPTY_ARRAY],
  WELL_KNOWN_EMPTY_ARRAY_POSITION = STARTER_CONSTANTS.indexOf(WELL_KNOWN_EMPTY_ARRAY);
class ConstantsImpl {
  value(value) {
    let indexMap = this.indexMap,
      index = indexMap.get(value);
    return void 0 === index && (index = this.values.push(value) - 1, indexMap.set(value, index)), index;
  }
  array(values) {
    if (0 === values.length) return WELL_KNOWN_EMPTY_ARRAY_POSITION;
    let handles = new Array(values.length);
    for (let i = 0; i < values.length; i++) handles[i] = this.value(values[i]);
    return this.value(handles);
  }
  toPool() {
    return this.values;
  }
  hasHandle(handle) {
    return this.values.length > handle;
  }
  helper(definitionState,
  // TODO: Add a way to expose resolved name for debugging
  _resolvedName = null, isOptional) {
    let handle = this.helperDefinitionCache.get(definitionState);
    if (void 0 === handle) {
      let managerOrHelper = getInternalHelperManager(definitionState, isOptional);
      if (null === managerOrHelper) return this.helperDefinitionCache.set(definitionState, null), null;
      let helper = "function" == typeof managerOrHelper ? managerOrHelper : managerOrHelper.getHelper(definitionState);
      handle = this.value(helper), this.helperDefinitionCache.set(definitionState, handle), this.helperDefinitionCount++;
    }
    return handle;
  }
  modifier(definitionState, resolvedName = null, isOptional) {
    let handle = this.modifierDefinitionCache.get(definitionState);
    if (void 0 === handle) {
      let manager = getInternalModifierManager(definitionState);
      if (null === manager) return this.modifierDefinitionCache.set(definitionState, null), null;
      let definition = {
        resolvedName: resolvedName,
        manager: manager,
        state: definitionState
      };
      handle = this.value(definition), this.modifierDefinitionCache.set(definitionState, handle), this.modifierDefinitionCount++;
    }
    return handle;
  }
  component(definitionState, owner, isOptional, debugName) {
    let definition = this.componentDefinitionCache.get(definitionState);
    if (void 0 === definition) {
      let manager = getInternalComponentManager(definitionState);
      if (null === manager) return this.componentDefinitionCache.set(definitionState, null), null;
      let template,
        capabilities = capabilityFlagsFrom(manager.getCapabilities(definitionState)),
        templateFactory = getComponentTemplate(definitionState),
        compilable = null;
      template = managerHasCapability(manager, capabilities, InternalComponentCapabilities.dynamicLayout) ? templateFactory?.(owner) : templateFactory?.(owner) ?? this.defaultTemplate, void 0 !== template && (template = unwrapTemplate$2(template), compilable = managerHasCapability(manager, capabilities, InternalComponentCapabilities.wrapped) ? template.asWrappedLayout() : template.asLayout()), definition = {
        resolvedName: null,
        handle: -1,
        manager: manager,
        capabilities: capabilities,
        state: definitionState,
        compilable: compilable
      }, definition.handle = this.value(definition), debugName && (definition.debugName = debugName), this.componentDefinitionCache.set(definitionState, definition), this.componentDefinitionCount++;
    }
    return definition;
  }
  resolvedComponent(resolvedDefinition, resolvedName) {
    let definition = this.componentDefinitionCache.get(resolvedDefinition);
    if (void 0 === definition) {
      let {
          manager: manager,
          state: state,
          template: template
        } = resolvedDefinition,
        capabilities = capabilityFlagsFrom(manager.getCapabilities(resolvedDefinition)),
        compilable = null;
      managerHasCapability(manager, capabilities, InternalComponentCapabilities.dynamicLayout) || (template = template ?? this.defaultTemplate), null !== template && (template = unwrapTemplate$2(template), compilable = managerHasCapability(manager, capabilities, InternalComponentCapabilities.wrapped) ? template.asWrappedLayout() : template.asLayout()), definition = {
        resolvedName: resolvedName,
        handle: -1,
        manager: manager,
        capabilities: capabilities,
        state: state,
        compilable: compilable
      }, definition.handle = this.value(definition), this.componentDefinitionCache.set(resolvedDefinition, definition), this.componentDefinitionCount++;
    }
    return definition;
  }
  getValue(index) {
    return this.values[index];
  }
  getArray(index) {
    let reifiedArrs = this.reifiedArrs,
      reified = reifiedArrs[index];
    if (void 0 === reified) {
      let names = this.getValue(index);
      reified = new Array(names.length);
      for (const [i, name] of enumerate(names)) reified[i] = this.getValue(name);
      reifiedArrs[index] = reified;
    }
    return reified;
  }
  constructor() {
    this.reifiedArrs = {
      [WELL_KNOWN_EMPTY_ARRAY_POSITION]: WELL_KNOWN_EMPTY_ARRAY
    }, this.defaultTemplate = templateFactory(DEFAULT_TEMPLATE)(),
    // Used for tests and debugging purposes, and to be able to analyze large apps
    // This is why it's enabled even in production
    this.helperDefinitionCount = 0, this.modifierDefinitionCount = 0, this.componentDefinitionCount = 0, this.values = STARTER_CONSTANTS.slice(), this.indexMap = new Map(this.values.map((value, index) => [value, index])), this.helperDefinitionCache = new WeakMap(), this.modifierDefinitionCache = new WeakMap(), this.componentDefinitionCache = new WeakMap();
  }
}
class RuntimeOpImpl {
  constructor(heap) {
    this.heap = heap, this.offset = 0;
  }
  get size() {
    return 1 + ((this.heap.getbyaddr(this.offset) & OPERAND_LEN_MASK) >> ARG_SHIFT);
  }
  get isMachine() {
    return this.heap.getbyaddr(this.offset) & MACHINE_MASK ? 1 : 0;
  }
  get type() {
    return this.heap.getbyaddr(this.offset) & TYPE_MASK;
  }
  get op1() {
    return this.heap.getbyaddr(this.offset + 1);
  }
  get op2() {
    return this.heap.getbyaddr(this.offset + 2);
  }
  get op3() {
    return this.heap.getbyaddr(this.offset + 3);
  }
}

/**
 * The Program Heap is responsible for dynamically allocating
 * memory in which we read/write the VM's instructions
 * from/to. When we malloc we pass out a VMHandle, which
 * is used as an indirect way of accessing the memory during
 * execution of the VM. Internally we track the different
 * regions of the memory in an int array known as the table.
 *
 * The table 32-bit aligned and has the following layout:
 *
 * | ... | hp (u32) |       info (u32)   | size (u32) |
 * | ... |  Handle  | Scope Size | State | Size       |
 * | ... | 32bits   | 30bits     | 2bits | 32bit      |
 *
 * With this information we effectively have the ability to
 * control when we want to free memory. That being said you
 * can not free during execution as raw address are only
 * valid during the execution. This means you cannot close
 * over them as you will have a bad memory access exception.
 */
class ProgramHeapImpl {
  constructor() {
    this.offset = 0, this.handle = 0, this.heap = new Int32Array(1048576), this.handleTable = [], this.handleState = [];
  }
  entries() {
    return this.offset;
  }
  pushRaw(value) {
    this.sizeCheck(), this.heap[this.offset++] = value;
  }
  pushOp(item) {
    this.pushRaw(item);
  }
  pushMachine(item) {
    this.pushRaw(item | MACHINE_MASK);
  }
  sizeCheck() {
    let {
      heap: heap
    } = this;
    if (this.offset === this.heap.length) {
      let newHeap = new Int32Array(heap.length + 1048576);
      newHeap.set(heap, 0), this.heap = newHeap;
    }
  }
  getbyaddr(address) {
    return this.heap[address];
  }
  setbyaddr(address, value) {
    this.heap[address] = value;
  }
  malloc() {
    // push offset, info, size
    return this.handleTable.push(this.offset), this.handleTable.length - 1;
  }
  finishMalloc(handle) {}
  size() {
    return this.offset;
  }
  // It is illegal to close over this address, as compaction
  // may move it. However, it is legal to use this address
  // multiple times between compactions.
  getaddr(handle) {
    return this.handleTable[handle];
  }
  sizeof(handle) {
    return this.handleTable, -1;
  }
  free(handle) {
    this.handleState[handle] = 1;
  }
  /**
  * The heap uses the [Mark-Compact Algorithm](https://en.wikipedia.org/wiki/Mark-compact_algorithm) to shift
  * reachable memory to the bottom of the heap and freeable
  * memory to the top of the heap. When we have shifted all
  * the reachable memory to the top of the heap, we move the
  * offset to the next free position.
  */
  compact() {
    let compactedSize = 0,
      {
        handleTable: handleTable,
        handleState: handleState,
        heap: heap
      } = this;
    for (let i = 0; i < length; i++) {
      let offset = handleTable[i],
        size = handleTable[i + 1] - offset,
        state = handleState[i];
      if (2 !== state) if (1 === state)
        // transition to "already freed" aka "purged"
        // a good improvement would be to reuse
        // these slots
        handleState[i] = 2, compactedSize += size;else if (0 === state) {
        for (let j = offset; j <= i + size; j++) heap[j - compactedSize] = heap[j];
        handleTable[i] = offset - compactedSize;
      } else 3 === state && (handleTable[i] = offset - compactedSize);
    }
    this.offset = this.offset - compactedSize;
  }
}
class ProgramImpl {
  constructor(constants, heap) {
    this.constants = constants, this.heap = heap, this._opcode = new RuntimeOpImpl(this.heap);
  }
  opcode(offset) {
    return this._opcode.offset = offset, this._opcode;
  }
}
function artifacts() {
  return {
    constants: new ConstantsImpl(),
    heap: new ProgramHeapImpl()
  };
}

const NS_MATHML = "http://www.w3.org/1998/Math/MathML",
  NS_SVG = "http://www.w3.org/2000/svg";
function castToSimple(node) {
  return function (node) {
    node.nodeType;
  }(node), node;
}
function unwrapHandle(handle) {
  if ("number" == typeof handle) return handle;
  {
    let error = handle.errors[0];
    throw new Error(`Compile Error: ${error.problem} @ ${error.span.start}..${error.span.end}`);
  }
}
function unwrapTemplate$1(template) {
  if ("error" === template.result) throw new Error(`Compile Error: ${template.problem} @ ${template.span.start}..${template.span.end}`);
  return template;
}

/* eslint-disable @typescript-eslint/no-empty-object-type */
function buildUntouchableThis(source) {
  let context = null;
  return context;
}
function decodeImmediate(num) {
  return (num |= 0) > -536870913 ? function (num) {
    return ~num;
  }(num) : function (num) {
    return 536870912 | num;
  }(num);
}
[1, -1].forEach(x => {
  return decodeImmediate((num = x, (num |= 0) < 0 ? function (num) {
    return -536870913 & num;
  }(num) : function (num) {
    return ~num;
  }(num)));
  var num;
});
const APPEND_OPCODES = new class {
    constructor() {
      // This code is intentionally putting unsafe `null`s into the array that it
      // will intentionally overwrite before anyone can see them.
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      this.evaluateOpcode = new Array(113).fill(null);
    }
    add(name, evaluate, kind = "syscall") {
      this.evaluateOpcode[name] = {
        syscall: "machine" !== kind,
        evaluate: evaluate
      };
    }
    evaluate(vm, opcode, type) {
      let operation = this.evaluateOpcode[type];
      operation.syscall ? (opcode.isMachine, operation.syscall, opcode.isMachine, opcode.type, operation.evaluate(vm, opcode)) : (opcode.isMachine, operation.syscall, opcode.isMachine, opcode.type, operation.evaluate(vm.lowlevel, opcode));
    }
  }(),
  TYPE = Symbol("TYPE"),
  INNER = Symbol("INNER"),
  OWNER = Symbol("OWNER"),
  ARGS$1 = Symbol("ARGS"),
  RESOLVED = Symbol("RESOLVED"),
  CURRIED_VALUES = new WeakSet();
function isCurriedValue(value) {
  return CURRIED_VALUES.has(value);
}
function isCurriedType(value, type) {
  return isCurriedValue(value) && value[TYPE] === type;
}
class CurriedValue {
  /** @internal */constructor(type, inner, owner, args, resolved = false) {
    CURRIED_VALUES.add(this), this[TYPE] = type, this[INNER] = inner, this[OWNER] = owner, this[ARGS$1] = args, this[RESOLVED] = resolved;
  }
}
function resolveCurriedValue(curriedValue) {
  let positional,
    named,
    definition,
    owner,
    resolved,
    currentWrapper = curriedValue;
  for (;;) {
    let {
      [ARGS$1]: curriedArgs,
      [INNER]: inner
    } = currentWrapper;
    if (null !== curriedArgs) {
      let {
        named: curriedNamed,
        positional: curriedPositional
      } = curriedArgs;
      curriedPositional.length > 0 && (positional = void 0 === positional ? curriedPositional : curriedPositional.concat(positional)), void 0 === named && (named = []), named.unshift(curriedNamed);
    }
    if (!isCurriedValue(inner)) {
      // Save off the owner that this helper was curried with. Later on,
      // we'll fetch the value of this register and set it as the owner on the
      // new root scope.
      definition = inner, owner = currentWrapper[OWNER], resolved = currentWrapper[RESOLVED];
      break;
    }
    currentWrapper = inner;
  }
  return {
    definition: definition,
    owner: owner,
    resolved: resolved,
    positional: positional,
    named: named
  };
}
function curry(type, spec, owner, args, resolved = false) {
  return new CurriedValue(type, spec, owner, args, resolved);
}
class DynamicScopeImpl {
  constructor(bucket) {
    this.bucket = bucket ? assign({}, bucket) : {};
  }
  get(key) {
    return this.bucket[key];
  }
  set(key, reference) {
    return this.bucket[key] = reference;
  }
  child() {
    return new DynamicScopeImpl(this.bucket);
  }
}
class ScopeImpl {
  static root(owner, {
    self: self,
    size = 0
  }) {
    let refs = new Array(size + 1).fill(UNDEFINED_REFERENCE);
    return new ScopeImpl(owner, refs, null).init({
      self: self
    });
  }
  static sized(owner, size = 0) {
    let refs = new Array(size + 1).fill(UNDEFINED_REFERENCE);
    return new ScopeImpl(owner, refs, null);
  }
  constructor(owner,
  // the 0th slot is `self`
  slots,
  // a single program can mix owners via curried components, and the state lives on root scopes
  callerScope) {
    this.owner = owner, this.slots = slots, this.callerScope = callerScope;
  }
  init({
    self: self
  }) {
    return this.slots[0] = self, this;
  }
  /**
  * @debug
  */
  snapshot() {
    return this.slots.slice();
  }
  getSelf() {
    return this.get(0);
  }
  getSymbol(symbol) {
    return this.get(symbol);
  }
  getBlock(symbol) {
    let block = this.get(symbol);
    return block === UNDEFINED_REFERENCE ? null : block;
  }
  bind(symbol, value) {
    this.set(symbol, value);
  }
  bindSelf(self) {
    this.set(0, self);
  }
  bindSymbol(symbol, value) {
    this.set(symbol, value);
  }
  bindBlock(symbol, value) {
    this.set(symbol, value);
  }
  bindCallerScope(scope) {
    this.callerScope = scope;
  }
  getCallerScope() {
    return this.callerScope;
  }
  child() {
    return new ScopeImpl(this.owner, this.slots.slice(), this.callerScope);
  }
  get(index) {
    if (index >= this.slots.length) throw new RangeError(`BUG: cannot get $${index} from scope; length=${this.slots.length}`);
    return this.slots[index];
  }
  set(index, value) {
    if (index >= this.slots.length) throw new RangeError(`BUG: cannot get $${index} from scope; length=${this.slots.length}`);
    this.slots[index] = value;
  }
}
class CursorImpl {
  constructor(element, nextSibling) {
    this.element = element, this.nextSibling = nextSibling;
  }
}
class ConcreteBounds {
  constructor(parentNode, first, last) {
    this.parentNode = parentNode, this.first = first, this.last = last;
  }
  parentElement() {
    return this.parentNode;
  }
  firstNode() {
    return this.first;
  }
  lastNode() {
    return this.last;
  }
}
function move(bounds, reference) {
  let parent = bounds.parentElement(),
    first = bounds.firstNode(),
    last = bounds.lastNode(),
    current = first;
  for (;;) {
    let next = current.nextSibling;
    if (parent.insertBefore(current, reference), current === last) return next;
    current = next;
  }
}
function clear(bounds) {
  let parent = bounds.parentElement(),
    first = bounds.firstNode(),
    last = bounds.lastNode(),
    current = first;
  for (;;) {
    let next = current.nextSibling;
    if (parent.removeChild(current), current === last) return next;
    current = next;
  }
}

/** @internal */
function hasCustomDebugRenderTreeLifecycle(manager) {
  return "getDebugCustomRenderTree" in manager;
}
let GUID = 0;
class Ref {
  constructor(value) {
    this.id = GUID++, this.value = value;
  }
  get() {
    return this.value;
  }
  release() {
    this.value = null;
  }
  toString() {
    let label = `Ref ${this.id}`;
    if (null === this.value) return `${label} (released)`;
    try {
      // eslint-disable-next-line @typescript-eslint/no-base-to-string
      return `${label}: ${this.value}`;
    } catch {
      return label;
    }
  }
}
class DebugRenderTreeImpl {
  begin() {
    this.reset();
  }
  create(state, node) {
    let internalNode = assign({}, node, {
      bounds: null,
      refs: new Set()
    });
    this.nodes.set(state, internalNode), this.appendChild(internalNode, state), this.enter(state);
  }
  update(state) {
    this.enter(state);
  }
  didRender(state, bounds) {
    this.nodeFor(state).bounds = bounds, this.exit();
  }
  willDestroy(state) {
    this.refs.get(state).release();
  }
  commit() {
    this.reset();
  }
  capture() {
    return this.captureRefs(this.roots);
  }
  reset() {
    if (0 !== this.stack.size) {
      // We probably encountered an error during the rendering loop. This will
      // likely trigger undefined behavior and memory leaks as the error left
      // things in an inconsistent state. It is recommended that the user
      // refresh the page.
      // TODO: We could warn here? But this happens all the time in our tests?
      // Clean up the root reference to prevent errors from happening if we
      // attempt to capture the render tree (Ember Inspector may do this)
      let root = this.stack.toArray()[0],
        ref = this.refs.get(root);
      for (void 0 !== ref && this.roots.delete(ref); !this.stack.isEmpty();) this.stack.pop();
    }
  }
  enter(state) {
    this.stack.push(state);
  }
  exit() {
    this.stack.pop();
  }
  nodeFor(state) {
    return this.nodes.get(state);
  }
  appendChild(node, state) {
    let parent = this.stack.current,
      ref = new Ref(state);
    if (this.refs.set(state, ref), parent) {
      let parentNode = this.nodeFor(parent);
      parentNode.refs.add(ref), node.parent = parentNode;
    } else this.roots.add(ref);
  }
  captureRefs(refs) {
    let captured = [];
    return refs.forEach(ref => {
      let state = ref.get();
      state ? captured.push(this.captureNode(`render-node:${ref.id}`, state)) : refs.delete(ref);
    }), captured;
  }
  captureNode(id, state) {
    let node = this.nodeFor(state),
      {
        type: type,
        name: name,
        args: args,
        instance: instance,
        refs: refs
      } = node,
      template = this.captureTemplate(node),
      bounds = this.captureBounds(node),
      children = this.captureRefs(refs);
    return {
      id: id,
      type: type,
      name: name,
      args: reifyArgsDebug(args),
      instance: instance,
      template: template,
      bounds: bounds,
      children: children
    };
  }
  captureTemplate({
    template: template
  }) {
    return template || null;
  }
  captureBounds(node) {
    let bounds = node.bounds;
    return {
      parentElement: bounds.parentElement(),
      firstNode: bounds.firstNode(),
      lastNode: bounds.lastNode()
    };
  }
  constructor() {
    this.stack = new StackImpl(), this.refs = new WeakMap(), this.roots = new Set(), this.nodes = new WeakMap();
  }
}
function getDebugName(definition, manager = definition.manager) {
  return definition.resolvedName ?? definition.debugName ?? manager.getDebugName(definition.state);
}
function normalizeStringValue(value) {
  return isEmpty$2(value) ? "" : String(value);
}
function isEmpty$2(value) {
  return null == value || "function" != typeof value.toString;
}
function isIndexable$1(value) {
  return null !== value && "object" == typeof value;
}
function isSafeString(value) {
  return isIndexable$1(value) && "function" == typeof value.toHTML;
}
function isString(value) {
  return "string" == typeof value;
}
APPEND_OPCODES.add(39, vm => vm.pushChildScope()), APPEND_OPCODES.add(40, vm => vm.popScope()), APPEND_OPCODES.add(59, vm => vm.pushDynamicScope()), APPEND_OPCODES.add(60, vm => vm.popDynamicScope()), APPEND_OPCODES.add(28, (vm, {
  op1: other
}) => {
  vm.stack.push(vm.constants.getValue(other));
}), APPEND_OPCODES.add(29, (vm, {
  op1: other
}) => {
  vm.stack.push(createConstRef(vm.constants.getValue(other)));
}), APPEND_OPCODES.add(30, (vm, {
  op1: primitive
}) => {
  let stack = vm.stack;
  if (primitive >= 0) {
    // it is a handle which does not already exist on the stack
    let value = vm.constants.getValue(primitive);
    stack.push(value);
  } else
    // is already an encoded immediate or primitive handle
    stack.push(decodeImmediate(primitive));
}), APPEND_OPCODES.add(31, vm => {
  let ref,
    stack = vm.stack,
    value = stack.pop();
  ref = void 0 === value ? UNDEFINED_REFERENCE : null === value ? NULL_REFERENCE : true === value ? TRUE_REFERENCE : false === value ? FALSE_REFERENCE : createPrimitiveRef(value), stack.push(ref);
}), APPEND_OPCODES.add(33, (vm, {
  op1: register,
  op2: offset
}) => {
  let position = vm.fetchValue(register) - offset;
  vm.stack.dup(position);
}), APPEND_OPCODES.add(34, (vm, {
  op1: count
}) => {
  vm.stack.pop(count);
}), APPEND_OPCODES.add(35, (vm, {
  op1: register
}) => {
  vm.load(register);
}), APPEND_OPCODES.add(36, (vm, {
  op1: register
}) => {
  vm.fetch(register);
}), APPEND_OPCODES.add(58, (vm, {
  op1: _names
}) => {
  let names = vm.constants.getArray(_names);
  vm.bindDynamicScope(names);
}), APPEND_OPCODES.add(69, (vm, {
  op1: args
}) => {
  vm.enter(args);
}), APPEND_OPCODES.add(70, vm => {
  vm.exit();
}), APPEND_OPCODES.add(63, (vm, {
  op1: _table
}) => {
  vm.stack.push(vm.constants.getValue(_table));
}), APPEND_OPCODES.add(62, vm => {
  vm.stack.push(vm.scope());
}), APPEND_OPCODES.add(61, vm => {
  let stack = vm.stack,
    block = stack.pop();
  block ? stack.push(vm.compile(block)) : stack.push(null);
}), APPEND_OPCODES.add(64, vm => {
  let {
      stack: stack
    } = vm,
    handle = stack.pop(),
    scope = stack.pop(),
    table = stack.pop(),
    args = stack.pop();
  if (null === table || null === handle)
    // To balance the pop{Frame,Scope}
    return vm.lowlevel.pushFrame(), void vm.pushScope(scope ?? vm.scope());
  let invokingScope = scope;
  // If necessary, create a child scope
  {
    let locals = table.parameters,
      localsCount = locals.length;
    if (localsCount > 0) {
      invokingScope = invokingScope.child();
      for (let i = 0; i < localsCount; i++) invokingScope.bindSymbol(locals[i], args.at(i));
    }
  }
  vm.lowlevel.pushFrame(), vm.pushScope(invokingScope), vm.call(handle);
}), APPEND_OPCODES.add(65, (vm, {
  op1: target
}) => {
  let reference = vm.stack.pop(),
    value = Boolean(valueForRef(reference));
  isConstRef(reference) ? value && vm.lowlevel.goto(target) : (value && vm.lowlevel.goto(target), vm.updateWith(new Assert(reference)));
}), APPEND_OPCODES.add(66, (vm, {
  op1: target
}) => {
  let reference = vm.stack.pop(),
    value = Boolean(valueForRef(reference));
  isConstRef(reference) ? value || vm.lowlevel.goto(target) : (value || vm.lowlevel.goto(target), vm.updateWith(new Assert(reference)));
}), APPEND_OPCODES.add(67, (vm, {
  op1: target,
  op2: comparison
}) => {
  vm.stack.peek() === comparison && vm.lowlevel.goto(target);
}), APPEND_OPCODES.add(68, vm => {
  let reference = vm.stack.peek();
  isConstRef(reference) || vm.updateWith(new Assert(reference));
}), APPEND_OPCODES.add(71, vm => {
  let {
      stack: stack
    } = vm,
    valueRef = stack.pop();
  stack.push(createComputeRef(() => toBool$1(valueForRef(valueRef))));
});
class Assert {
  constructor(ref) {
    this.ref = ref, this.last = valueForRef(ref);
  }
  evaluate(vm) {
    let {
      last: last,
      ref: ref
    } = this;
    last !== valueForRef(ref) && vm.throw();
  }
}
class AssertFilter {
  constructor(ref, filter) {
    this.ref = ref, this.filter = filter, this.last = filter(valueForRef(ref));
  }
  evaluate(vm) {
    let {
      last: last,
      ref: ref,
      filter: filter
    } = this;
    last !== filter(valueForRef(ref)) && vm.throw();
  }
}
class JumpIfNotModifiedOpcode {
  finalize(tag, target) {
    this.target = target, this.didModify(tag);
  }
  evaluate(vm) {
    let {
      tag: tag,
      target: target,
      lastRevision: lastRevision
    } = this;
    !vm.alwaysRevalidate && validateTag(tag, lastRevision) && (consumeTag(tag), vm.goto(target));
  }
  didModify(tag) {
    this.tag = tag, this.lastRevision = valueForTag(this.tag), consumeTag(tag);
  }
  constructor() {
    this.tag = CONSTANT_TAG, this.lastRevision = INITIAL;
  }
}
class BeginTrackFrameOpcode {
  constructor(debugLabel) {
    this.debugLabel = debugLabel;
  }
  evaluate() {
    beginTrackFrame(this.debugLabel);
  }
}
class EndTrackFrameOpcode {
  constructor(target) {
    this.target = target;
  }
  evaluate() {
    let tag = endTrackFrame();
    this.target.didModify(tag);
  }
}
APPEND_OPCODES.add(41, (vm, {
  op1: text
}) => {
  vm.tree().appendText(vm.constants.getValue(text));
}), APPEND_OPCODES.add(42, (vm, {
  op1: text
}) => {
  vm.tree().appendComment(vm.constants.getValue(text));
}), APPEND_OPCODES.add(48, (vm, {
  op1: tag
}) => {
  vm.tree().openElement(vm.constants.getValue(tag));
}), APPEND_OPCODES.add(49, vm => {
  let tagName = valueForRef(vm.stack.pop());
  vm.tree().openElement(tagName);
}), APPEND_OPCODES.add(50, vm => {
  let elementRef = vm.stack.pop(),
    insertBeforeRef = vm.stack.pop(),
    guidRef = vm.stack.pop(),
    element = valueForRef(elementRef),
    insertBefore = valueForRef(insertBeforeRef),
    guid = valueForRef(guidRef);
  isConstRef(elementRef) || vm.updateWith(new Assert(elementRef)), void 0 === insertBefore || isConstRef(insertBeforeRef) || vm.updateWith(new Assert(insertBeforeRef));
  let block = vm.tree().pushRemoteElement(element, guid, insertBefore);
  if (vm.associateDestroyable(block), void 0 !== vm.env.debugRenderTree) {
    // Note that there is nothing to update – when the args for an
    // {{#in-element}} changes it gets torn down and a new one is
    // re-created/rendered in its place (see the `Assert`s above)
    let args = createCapturedArgs(void 0 === insertBefore ? {} : {
      insertBefore: insertBeforeRef
    }, [elementRef]);
    vm.env.debugRenderTree.create(block, {
      type: "keyword",
      name: "in-element",
      args: args,
      instance: null
    }), registerDestructor$1(block, () => {
      vm.env.debugRenderTree?.willDestroy(block);
    });
  }
}), APPEND_OPCODES.add(56, vm => {
  let bounds = vm.tree().popRemoteElement();
  void 0 !== vm.env.debugRenderTree &&
  // The RemoteBlock is also its bounds
  vm.env.debugRenderTree.didRender(bounds, bounds);
}), APPEND_OPCODES.add(54, vm => {
  let operations = vm.fetchValue($t0),
    modifiers = null;
  operations && (modifiers = operations.flush(vm), vm.loadValue($t0, null)), vm.tree().flushElement(modifiers);
}), APPEND_OPCODES.add(55, vm => {
  let modifiers = vm.tree().closeElement();
  null !== modifiers && modifiers.forEach(modifier => {
    vm.env.scheduleInstallModifier(modifier);
    const d = modifier.manager.getDestroyable(modifier.state);
    null !== d && vm.associateDestroyable(d);
  });
}), APPEND_OPCODES.add(57, (vm, {
  op1: handle
}) => {
  if (!vm.env.isInteractive) return;
  let owner = vm.getOwner(),
    args = vm.stack.pop(),
    definition = vm.constants.getValue(handle),
    {
      manager: manager
    } = definition,
    {
      constructing: constructing
    } = vm.tree(),
    capturedArgs = args.capture(),
    state = manager.create(owner, constructing, definition.state, capturedArgs),
    instance = {
      manager: manager,
      state: state,
      definition: definition
    };
  vm.fetchValue($t0).addModifier(vm, instance, capturedArgs);
  let tag = manager.getTag(state);
  return null !== tag ? (consumeTag(tag), vm.updateWith(new UpdateModifierOpcode(tag, instance))) : void 0;
}), APPEND_OPCODES.add(108, vm => {
  if (!vm.env.isInteractive) return;
  let {
      stack: stack
    } = vm,
    ref = stack.pop(),
    args = stack.pop().capture(),
    {
      positional: outerPositional,
      named: outerNamed
    } = args,
    {
      constructing: constructing
    } = vm.tree(),
    initialOwner = vm.getOwner(),
    instanceRef = createComputeRef(() => {
      let owner,
        hostDefinition,
        value = valueForRef(ref);
      if (!isIndexable$2(value)) return;
      if (isCurriedType(value, 2)) {
        let {
          definition: resolvedDefinition,
          owner: curriedOwner,
          positional: positional,
          named: named
        } = resolveCurriedValue(value);
        hostDefinition = resolvedDefinition, owner = curriedOwner, void 0 !== positional && (args.positional = positional.concat(outerPositional)), void 0 !== named && (
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        args.named = Object.assign({}, ...named, outerNamed));
      } else hostDefinition = value, owner = initialOwner;
      let manager = getInternalModifierManager(hostDefinition);
      if (null === manager) throw new Error("BUG: modifier manager expected");
      let definition = {
          resolvedName: null,
          manager: manager,
          state: hostDefinition
        },
        state = manager.create(owner, constructing, definition.state, args);
      return {
        manager: manager,
        state: state,
        definition: definition
      };
    }),
    instance = valueForRef(instanceRef),
    tag = null;
  return void 0 !== instance && (vm.fetchValue($t0).addModifier(vm, instance, args), tag = instance.manager.getTag(instance.state), null !== tag && consumeTag(tag)), !isConstRef(ref) || tag ? vm.updateWith(new UpdateDynamicModifierOpcode(tag, instance, instanceRef)) : void 0;
});
class UpdateModifierOpcode {
  constructor(tag, modifier) {
    this.tag = tag, this.modifier = modifier, this.lastUpdated = valueForTag(tag);
  }
  evaluate(vm) {
    let {
      modifier: modifier,
      tag: tag,
      lastUpdated: lastUpdated
    } = this;
    consumeTag(tag), validateTag(tag, lastUpdated) || (vm.env.scheduleUpdateModifier(modifier), this.lastUpdated = valueForTag(tag));
  }
}
class UpdateDynamicModifierOpcode {
  constructor(tag, instance, instanceRef) {
    this.tag = tag, this.instance = instance, this.instanceRef = instanceRef, this.lastUpdated = valueForTag(tag ?? CURRENT_TAG);
  }
  evaluate(vm) {
    let {
        tag: tag,
        lastUpdated: lastUpdated,
        instance: instance,
        instanceRef: instanceRef
      } = this,
      newInstance = valueForRef(instanceRef);
    if (newInstance !== instance) {
      if (void 0 !== instance) {
        let destroyable = instance.manager.getDestroyable(instance.state);
        null !== destroyable && destroy(destroyable);
      }
      if (void 0 !== newInstance) {
        let {
            manager: manager,
            state: state
          } = newInstance,
          destroyable = manager.getDestroyable(state);
        null !== destroyable && associateDestroyableChild(this, destroyable), tag = manager.getTag(state), null !== tag && (this.lastUpdated = valueForTag(tag)), this.tag = tag, vm.env.scheduleInstallModifier(newInstance);
      }
      this.instance = newInstance;
    } else null === tag || validateTag(tag, lastUpdated) || (
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    vm.env.scheduleUpdateModifier(instance), this.lastUpdated = valueForTag(tag));
    null !== tag && consumeTag(tag);
  }
}
APPEND_OPCODES.add(51, (vm, {
  op1: _name,
  op2: _value,
  op3: _namespace
}) => {
  let name = vm.constants.getValue(_name),
    value = vm.constants.getValue(_value),
    namespace = _namespace ? vm.constants.getValue(_namespace) : null;
  vm.tree().setStaticAttribute(name, value, namespace);
}), APPEND_OPCODES.add(52, (vm, {
  op1: _name,
  op2: _trusting,
  op3: _namespace
}) => {
  let name = vm.constants.getValue(_name),
    trusting = vm.constants.getValue(_trusting),
    reference = vm.stack.pop(),
    value = valueForRef(reference),
    namespace = _namespace ? vm.constants.getValue(_namespace) : null,
    attribute = vm.tree().setDynamicAttribute(name, value, trusting, namespace);
  isConstRef(reference) || vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute, vm.env));
});
class UpdateDynamicAttributeOpcode {
  constructor(reference, attribute, env) {
    let initialized = false;
    this.updateRef = createComputeRef(() => {
      let value = valueForRef(reference);
      initialized ? attribute.update(value, env) : initialized = true;
    }), valueForRef(this.updateRef);
  }
  evaluate() {
    valueForRef(this.updateRef);
  }
}
APPEND_OPCODES.add(78, (vm, {
  op1: handle
}) => {
  let definition = vm.constants.getValue(handle),
    {
      manager: manager,
      capabilities: capabilities
    } = definition,
    instance = {
      definition: definition,
      manager: manager,
      capabilities: capabilities,
      state: null,
      handle: null,
      table: null,
      lookup: null
    };
  vm.stack.push(instance);
}), APPEND_OPCODES.add(80, (vm, {
  op1: _isStrict
}) => {
  let definition,
    stack = vm.stack,
    component = valueForRef(stack.pop()),
    constants = vm.constants,
    owner = vm.getOwner();
    constants.getValue(_isStrict);
  if (vm.loadValue($t1, null), "string" == typeof component) {
    let resolvedDefinition = function (resolver, constants, name, owner) {
      let definition = resolver?.lookupComponent?.(name, owner) ?? null;
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      return constants.resolvedComponent(definition, name);
    }(vm.context.resolver, constants, component, owner);
    definition = resolvedDefinition;
  } else definition = isCurriedValue(component) ? component : constants.component(component, owner);
  stack.push(definition);
}), APPEND_OPCODES.add(81, vm => {
  let definition,
    stack = vm.stack,
    ref = stack.pop(),
    value = valueForRef(ref),
    constants = vm.constants;
  if (isCurriedValue(value)) definition = value;else if (definition = constants.component(value, vm.getOwner(), true), false) ;
  stack.push(definition);
}), APPEND_OPCODES.add(79, vm => {
  let capabilities,
    manager,
    {
      stack: stack
    } = vm,
    definition = stack.pop();
  isCurriedValue(definition) ? manager = capabilities = null : (manager = definition.manager, capabilities = definition.capabilities), stack.push({
    definition: definition,
    capabilities: capabilities,
    manager: manager,
    state: null,
    handle: null,
    table: null
  });
}), APPEND_OPCODES.add(82, (vm, {
  op1: _names,
  op2: _blockNames,
  op3: flags
}) => {
  let stack = vm.stack,
    names = vm.constants.getArray(_names),
    positionalCount = flags >> 4,
    atNames = 8 & flags,
    blockNames = 7 & flags ? vm.constants.getArray(_blockNames) : EMPTY_STRING_ARRAY;
  vm.args.setup(stack, names, blockNames, positionalCount, !!atNames), stack.push(vm.args);
}), APPEND_OPCODES.add(83, vm => {
  let {
    stack: stack
  } = vm;
  stack.push(vm.args.empty(stack));
}), APPEND_OPCODES.add(86, vm => {
  let stack = vm.stack,
    capturedArgs = stack.pop().capture();
  stack.push(capturedArgs);
}), APPEND_OPCODES.add(85, (vm, {
  op1: register
}) => {
  let stack = vm.stack,
    instance = vm.fetchValue(register),
    args = stack.pop(),
    {
      definition: definition
    } = instance;
  if (isCurriedType(definition, 0)) {
    definition.manager;
    let constants = vm.constants,
      {
        definition: resolvedDefinition,
        owner: owner,
        resolved: resolved,
        positional: positional,
        named: named
      } = resolveCurriedValue(definition);
    if (resolved) definition = resolvedDefinition;else if ("string" == typeof resolvedDefinition) {
      let resolvedValue = vm.context.resolver?.lookupComponent?.(resolvedDefinition, owner) ?? null;
      definition = constants.resolvedComponent(resolvedValue, resolvedDefinition);
    } else definition = constants.component(resolvedDefinition, owner);
    void 0 !== named &&
    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
    args.named.merge(assign({}, ...named)), void 0 !== positional && (args.realloc(positional.length), args.positional.prepend(positional));
    let {
      manager: manager
    } = definition;
    instance.definition = definition, instance.manager = manager, instance.capabilities = definition.capabilities,
    // Save off the owner that this component was curried with. Later on,
    // we'll fetch the value of this register and set it as the owner on the
    // new root scope.
    vm.loadValue($t1, owner);
  }
  let {
      manager: manager,
      state: state
    } = definition,
    capabilities = instance.capabilities;
  if (!managerHasCapability(manager, capabilities, InternalComponentCapabilities.prepareArgs)) return void stack.push(args);
  let blocks = args.blocks.values,
    blockNames = args.blocks.names,
    preparedArgs = manager.prepareArgs(state, args);
  if (preparedArgs) {
    args.clear();
    for (let i = 0; i < blocks.length; i++) stack.push(blocks[i]);
    let {
        positional: positional,
        named: named
      } = preparedArgs,
      positionalCount = positional.length;
    for (let i = 0; i < positionalCount; i++) stack.push(positional[i]);
    let names = Object.keys(named);
    for (let i = 0; i < names.length; i++) stack.push(named[names[i]]);
    args.setup(stack, names, blockNames, positionalCount, false);
  }
  stack.push(args);
}), APPEND_OPCODES.add(87, (vm, {
  op1: flags
}) => {
  let instance = vm.fetchValue($s0),
    {
      definition: definition,
      manager: manager,
      capabilities: capabilities
    } = instance;
  if (!managerHasCapability(manager, capabilities, InternalComponentCapabilities.createInstance))
    // TODO: Closure and Main components are always invoked dynamically, so this
    // opcode may run even if this capability is not enabled. In the future we
    // should handle this in a better way.
    return;
  let dynamicScope = null;
  managerHasCapability(manager, capabilities, InternalComponentCapabilities.dynamicScope) && (dynamicScope = vm.dynamicScope());
  let hasDefaultBlock = 1 & flags,
    args = null;
  managerHasCapability(manager, capabilities, InternalComponentCapabilities.createArgs) && (args = vm.stack.peek());
  let self = null;
  managerHasCapability(manager, capabilities, InternalComponentCapabilities.createCaller) && (self = vm.getSelf());
  let state = manager.create(vm.getOwner(), definition.state, args, vm.env, dynamicScope, self, !!hasDefaultBlock);
  // We want to reuse the `state` POJO here, because we know that the opcodes
  // only transition at exactly one place.
  instance.state = state, managerHasCapability(manager, capabilities, InternalComponentCapabilities.updateHook) && vm.updateWith(new UpdateComponentOpcode(state, manager, dynamicScope));
}), APPEND_OPCODES.add(88, (vm, {
  op1: register
}) => {
  let {
      manager: manager,
      state: state,
      capabilities: capabilities
    } = vm.fetchValue(register),
    d = manager.getDestroyable(state);
  d && vm.associateDestroyable(d);
}), APPEND_OPCODES.add(97, (vm, {
  op1: register
}) => {
  let name;
  vm.beginCacheGroup(name), vm.tree().pushAppendingBlock();
}), APPEND_OPCODES.add(89, vm => {
  vm.loadValue($t0, new ComponentElementOperations());
}), APPEND_OPCODES.add(53, (vm, {
  op1: _name,
  op2: _trusting,
  op3: _namespace
}) => {
  let name = vm.constants.getValue(_name),
    trusting = vm.constants.getValue(_trusting),
    reference = vm.stack.pop(),
    namespace = _namespace ? vm.constants.getValue(_namespace) : null;
  vm.fetchValue($t0).setAttribute(name, reference, trusting, namespace);
}), APPEND_OPCODES.add(105, (vm, {
  op1: _name,
  op2: _value,
  op3: _namespace
}) => {
  let name = vm.constants.getValue(_name),
    value = vm.constants.getValue(_value),
    namespace = _namespace ? vm.constants.getValue(_namespace) : null;
  vm.fetchValue($t0).setStaticAttribute(name, value, namespace);
});
class ComponentElementOperations {
  setAttribute(name, value, trusting, namespace) {
    let deferred = {
      value: value,
      namespace: namespace,
      trusting: trusting
    };
    "class" === name && this.classes.push(value), this.attributes[name] = deferred;
  }
  setStaticAttribute(name, value, namespace) {
    let deferred = {
      value: value,
      namespace: namespace
    };
    "class" === name && this.classes.push(value), this.attributes[name] = deferred;
  }
  addModifier(vm, modifier, capturedArgs) {
    if (this.modifiers.push(modifier), void 0 !== vm.env.debugRenderTree) {
      const {
        manager: manager,
        definition: definition,
        state: state
      } = modifier;
      // TODO: we need a stable object for the debugRenderTree as the key, add support for
      // the case where the state is a primitive, or if in practice we always have/require
      // an object, then change the internal types to reflect that
      if (null === state || "object" != typeof state && "function" != typeof state) return;
      let {
          element: element,
          constructing: constructing
        } = vm.tree(),
        name = definition.resolvedName ?? manager.getDebugName(definition.state),
        instance = manager.getDebugInstance(state),
        bounds = new ConcreteBounds(element, constructing, constructing);
      vm.env.debugRenderTree.create(state, {
        type: "modifier",
        name: name,
        args: capturedArgs,
        instance: instance
      }), vm.env.debugRenderTree.didRender(state, bounds),
      // For tearing down the debugRenderTree
      vm.associateDestroyable(state), vm.updateWith(new DebugRenderTreeUpdateOpcode(state)), vm.updateWith(new DebugRenderTreeDidRenderOpcode(state, bounds)), registerDestructor$1(state, () => {
        vm.env.debugRenderTree?.willDestroy(state);
      });
    }
  }
  flush(vm) {
    let type,
      attributes = this.attributes;
    for (let name in this.attributes) {
      if ("type" === name) {
        type = attributes[name];
        continue;
      }
      let attr = this.attributes[name];
      "class" === name ? setDeferredAttr(vm, "class", mergeClasses(this.classes), attr.namespace, attr.trusting) : setDeferredAttr(vm, name, attr.value, attr.namespace, attr.trusting);
    }
    return void 0 !== type && setDeferredAttr(vm, "type", type.value, type.namespace, type.trusting), this.modifiers;
  }
  constructor() {
    this.attributes = dict(), this.classes = [], this.modifiers = [];
  }
}
function mergeClasses(classes) {
  return 0 === classes.length ? "" : 1 === classes.length ? classes[0] : function (classes) {
    return classes.every(c => "string" == typeof c);
  }(classes) ? classes.join(" ") : (list = classes, createComputeRef(() => {
    let ret = [];
    for (const ref of list) {
      let value = normalizeStringValue("string" == typeof ref ? ref : valueForRef(ref));
      value && ret.push(value);
    }
    return 0 === ret.length ? null : ret.join(" ");
  }));
  var list;
}
function setDeferredAttr(vm, name, value, namespace, trusting = false) {
  if ("string" == typeof value) vm.tree().setStaticAttribute(name, value, namespace);else {
    let attribute = vm.tree().setDynamicAttribute(name, valueForRef(value), trusting, namespace);
    isConstRef(value) || vm.updateWith(new UpdateDynamicAttributeOpcode(value, attribute, vm.env));
  }
}
function bindBlock(symbolName, blockName, state, blocks, vm) {
  let symbol = state.table.symbols.indexOf(symbolName),
    block = blocks.get(blockName);
  -1 !== symbol && vm.scope().bindBlock(symbol + 1, block), state.lookup && (state.lookup[symbolName] = block);
}
APPEND_OPCODES.add(99, (vm, {
  op1: register
}) => {
  let {
      definition: definition,
      state: state
    } = vm.fetchValue(register),
    {
      manager: manager
    } = definition,
    operations = vm.fetchValue($t0);
  manager.didCreateElement(state, vm.tree().constructing, operations);
}), APPEND_OPCODES.add(90, (vm, {
  op1: register,
  op2: _names
}) => {
  let instance = vm.fetchValue(register),
    {
      definition: definition,
      state: state
    } = instance,
    {
      manager: manager
    } = definition,
    selfRef = manager.getSelf(state);
  if (void 0 !== vm.env.debugRenderTree) {
    let args,
      moduleName,
      instance = vm.fetchValue(register),
      {
        definition: definition,
        manager: manager
      } = instance;
    if (vm.stack.peek() === vm.args) args = vm.args.capture();else {
      let names = vm.constants.getArray(_names);
      vm.args.setup(vm.stack, names, [], 0, true), args = vm.args.capture();
    }
    let compilable = definition.compilable;
    if (null === compilable) {
      managerHasCapability(manager, instance.capabilities, InternalComponentCapabilities.dynamicLayout);
      let resolver = vm.context.resolver;
      compilable = null === resolver ? null : manager.getDynamicLayout(state, resolver), moduleName = null !== compilable ? compilable.moduleName : "__default__.hbs";
    } else moduleName = compilable.moduleName;
    // For tearing down the debugRenderTree
    if (vm.associateDestroyable(instance), hasCustomDebugRenderTreeLifecycle(manager)) manager.getDebugCustomRenderTree(instance.definition.state, instance.state, args, moduleName).forEach(node => {
      let {
        bucket: bucket
      } = node;
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      vm.env.debugRenderTree.create(bucket, node), registerDestructor$1(instance, () => {
        vm.env.debugRenderTree?.willDestroy(bucket);
      }), vm.updateWith(new DebugRenderTreeUpdateOpcode(bucket));
    });else {
      let name = getDebugName(definition, manager);
      vm.env.debugRenderTree.create(instance, {
        type: "component",
        name: name,
        args: args,
        template: moduleName,
        instance: valueForRef(selfRef)
      }), registerDestructor$1(instance, () => {
        vm.env.debugRenderTree?.willDestroy(instance);
      }), vm.updateWith(new DebugRenderTreeUpdateOpcode(instance));
    }
  }
  vm.stack.push(selfRef);
}), APPEND_OPCODES.add(91, (vm, {
  op1: register
}) => {
  let {
      definition: definition,
      state: state
    } = vm.fetchValue(register),
    {
      manager: manager
    } = definition,
    tagName = manager.getTagName(state);
  // User provided value from JS, so we don't bother to encode
  vm.stack.push(tagName);
}),
// Dynamic Invocation Only
APPEND_OPCODES.add(92, (vm, {
  op1: register
}) => {
  let instance = vm.fetchValue(register),
    {
      manager: manager,
      definition: definition
    } = instance,
    {
      stack: stack
    } = vm,
    {
      compilable: compilable
    } = definition;
  if (null === compilable) {
    let {
      capabilities: capabilities
    } = instance;
    let resolver = vm.context.resolver;
    compilable = null === resolver ? null : manager.getDynamicLayout(instance.state, resolver), null === compilable && (compilable = managerHasCapability(manager, capabilities, InternalComponentCapabilities.wrapped) ? unwrapTemplate$1(vm.constants.defaultTemplate).asWrappedLayout() : unwrapTemplate$1(vm.constants.defaultTemplate).asLayout());
  }
  let handle = compilable.compile(vm.context);
  stack.push(compilable.symbolTable), stack.push(handle);
}), APPEND_OPCODES.add(75, (vm, {
  op1: register
}) => {
  let definition = vm.stack.pop(),
    invocation = vm.stack.pop(),
    {
      manager: manager,
      capabilities: capabilities
    } = definition,
    state = {
      definition: definition,
      manager: manager,
      capabilities: capabilities,
      state: null,
      handle: invocation.handle,
      table: invocation.symbolTable,
      lookup: null
    };
  vm.loadValue(register, state);
}), APPEND_OPCODES.add(95, (vm, {
  op1: register
}) => {
  let {
      stack: stack
    } = vm,
    handle = stack.pop(),
    table = stack.pop(),
    state = vm.fetchValue(register);
  // In DEBUG handles could be ErrHandle objects
  state.handle = handle, state.table = table;
}), APPEND_OPCODES.add(38, (vm, {
  op1: register
}) => {
  let owner,
    {
      table: table,
      manager: manager,
      capabilities: capabilities,
      state: state
    } = vm.fetchValue(register);
  managerHasCapability(manager, capabilities, InternalComponentCapabilities.hasSubOwner) ? (owner = manager.getOwner(state), vm.loadValue($t1, null)) : (
  // Check the temp register to see if an owner was resolved from currying
  owner = vm.fetchValue($t1), null === owner ?
  // If an owner wasn't found, default to using the current owner. This
  // will happen for normal dynamic component invocation,
  // e.g. <SomeClassicEmberComponent/>
  owner = vm.getOwner() :
  // Else the owner was found, so clear the temp register. This will happen
  // if we are loading a curried component, e.g. <@someCurriedComponent/>
  vm.loadValue($t1, null)), vm.pushRootScope(table.symbols.length + 1, owner);
}), APPEND_OPCODES.add(17, (vm, {
  op1: register
}) => {
  let state = vm.fetchValue(register),
    scope = vm.scope(),
    args = vm.stack.peek(),
    callerNames = args.named.atNames;
  for (let i = callerNames.length - 1; i >= 0; i--) {
    let atName = callerNames[i],
      symbol = state.table.symbols.indexOf(atName),
      value = args.named.get(atName, true);
    -1 !== symbol && scope.bindSymbol(symbol + 1, value), state.lookup && (state.lookup[atName] = value);
  }
}), APPEND_OPCODES.add(18, (vm, {
  op1: register
}) => {
  let state = vm.fetchValue(register),
    {
      blocks: blocks
    } = vm.stack.peek();
  for (const [i] of enumerate(blocks.names)) bindBlock(blocks.symbolNames[i], blocks.names[i], state, blocks, vm);
}),
// Dynamic Invocation Only
APPEND_OPCODES.add(96, (vm, {
  op1: register
}) => {
  let state = vm.fetchValue(register);
  vm.call(state.handle);
}), APPEND_OPCODES.add(100, (vm, {
  op1: register
}) => {
  let instance = vm.fetchValue(register),
    {
      manager: manager,
      state: state,
      capabilities: capabilities
    } = instance,
    bounds = vm.tree().popBlock();
  void 0 !== vm.env.debugRenderTree && (hasCustomDebugRenderTreeLifecycle(manager) ? manager.getDebugCustomRenderTree(instance.definition.state, state, EMPTY_ARGS).reverse().forEach(node => {
    let {
      bucket: bucket
    } = node;
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    vm.env.debugRenderTree.didRender(bucket, bounds), vm.updateWith(new DebugRenderTreeDidRenderOpcode(bucket, bounds));
  }) : (vm.env.debugRenderTree.didRender(instance, bounds), vm.updateWith(new DebugRenderTreeDidRenderOpcode(instance, bounds)))), managerHasCapability(manager, capabilities, InternalComponentCapabilities.createInstance) && (
  // eslint-disable-next-line @typescript-eslint/no-unsafe-call -- @fixme
  manager.didRenderLayout(state, bounds), vm.env.didCreate(instance), vm.updateWith(new DidUpdateLayoutOpcode(instance, bounds)));
}), APPEND_OPCODES.add(98, vm => {
  vm.commitCacheGroup();
});
class UpdateComponentOpcode {
  constructor(component, manager, dynamicScope) {
    this.component = component, this.manager = manager, this.dynamicScope = dynamicScope;
  }
  evaluate(_vm) {
    let {
      component: component,
      manager: manager,
      dynamicScope: dynamicScope
    } = this;
    manager.update(component, dynamicScope);
  }
}
class DidUpdateLayoutOpcode {
  constructor(component, bounds) {
    this.component = component, this.bounds = bounds;
  }
  evaluate(vm) {
    let {
        component: component,
        bounds: bounds
      } = this,
      {
        manager: manager,
        state: state
      } = component;
    manager.didUpdateLayout(state, bounds), vm.env.didUpdate(component);
  }
}
class DebugRenderTreeUpdateOpcode {
  constructor(bucket) {
    this.bucket = bucket;
  }
  evaluate(vm) {
    vm.env.debugRenderTree?.update(this.bucket);
  }
}
class DebugRenderTreeDidRenderOpcode {
  constructor(bucket, bounds) {
    this.bucket = bucket, this.bounds = bounds;
  }
  evaluate(vm) {
    vm.env.debugRenderTree?.didRender(this.bucket, this.bounds);
  }
}

/*
  The calling convention is:

  * 0-N block arguments at the bottom
  * 0-N positional arguments next (left-to-right)
  * 0-N named arguments next
*/
class VMArgumentsImpl {
  constructor() {
    this.stack = null, this.positional = new PositionalArgumentsImpl(), this.named = new NamedArgumentsImpl(), this.blocks = new BlockArgumentsImpl();
  }
  empty(stack) {
    let base = stack.registers[$sp] + 1;
    return this.named.empty(stack, base), this.positional.empty(stack, base), this.blocks.empty(stack, base), this;
  }
  setup(stack, names, blockNames, positionalCount, atNames) {
    this.stack = stack;
    /*
       | ... | blocks      | positional  | named |
       | ... | b0    b1    | p0 p1 p2 p3 | n0 n1 |
    index | ... | 4/5/6 7/8/9 | 10 11 12 13 | 14 15 |
               ^             ^             ^  ^
             bbase         pbase       nbase  sp
    */
    let named = this.named,
      namedCount = names.length,
      namedBase = stack.registers[$sp] - namedCount + 1;
    named.setup(stack, namedBase, namedCount, names, atNames);
    let positionalBase = namedBase - positionalCount;
    this.positional.setup(stack, positionalBase, positionalCount);
    let blocks = this.blocks,
      blocksCount = blockNames.length,
      blocksBase = positionalBase - 3 * blocksCount;
    blocks.setup(stack, blocksBase, blocksCount, blockNames);
  }
  get base() {
    return this.blocks.base;
  }
  get length() {
    return this.positional.length + this.named.length + 3 * this.blocks.length;
  }
  at(pos) {
    return this.positional.at(pos);
  }
  realloc(offset) {
    let {
      stack: stack
    } = this;
    if (offset > 0 && null !== stack) {
      let {
          positional: positional,
          named: named
        } = this,
        newBase = positional.base + offset;
      for (let i = positional.length + named.length - 1; i >= 0; i--) stack.copy(i + positional.base, i + newBase);
      positional.base += offset, named.base += offset, stack.registers[$sp] += offset;
    }
  }
  capture() {
    let positional = 0 === this.positional.length ? EMPTY_POSITIONAL : this.positional.capture();
    return {
      named: 0 === this.named.length ? EMPTY_NAMED : this.named.capture(),
      positional: positional
    };
  }
  clear() {
    let {
      stack: stack,
      length: length
    } = this;
    length > 0 && null !== stack && stack.pop(length);
  }
}
const EMPTY_REFERENCES = emptyArray();
class PositionalArgumentsImpl {
  constructor() {
    this.base = 0, this.length = 0, this.stack = null, this._references = null;
  }
  empty(stack, base) {
    this.stack = stack, this.base = base, this.length = 0, this._references = EMPTY_REFERENCES;
  }
  setup(stack, base, length) {
    this.stack = stack, this.base = base, this.length = length, this._references = 0 === length ? EMPTY_REFERENCES : null;
  }
  at(position) {
    let {
      base: base,
      length: length,
      stack: stack
    } = this;
    return position < 0 || position >= length ? UNDEFINED_REFERENCE : stack.get(position, base);
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
  }
  capture() {
    return this.references;
  }
  prepend(other) {
    let additions = other.length;
    if (additions > 0) {
      let {
        base: base,
        length: length,
        stack: stack
      } = this;
      this.base = base -= additions, this.length = length + additions;
      for (let i = 0; i < additions; i++)
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      stack.set(other[i], i, base);
      this._references = null;
    }
  }
  get references() {
    let references = this._references;
    if (!references) {
      let {
        stack: stack,
        base: base,
        length: length
      } = this;
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      references = this._references = stack.slice(base, base + length);
    }
    return references;
  }
}
class NamedArgumentsImpl {
  constructor() {
    this.base = 0, this.length = 0, this._references = null, this._names = EMPTY_STRING_ARRAY, this._atNames = EMPTY_STRING_ARRAY;
  }
  empty(stack, base) {
    this.stack = stack, this.base = base, this.length = 0, this._references = EMPTY_REFERENCES, this._names = EMPTY_STRING_ARRAY, this._atNames = EMPTY_STRING_ARRAY;
  }
  setup(stack, base, length, names, atNames) {
    this.stack = stack, this.base = base, this.length = length, 0 === length ? (this._references = EMPTY_REFERENCES, this._names = EMPTY_STRING_ARRAY, this._atNames = EMPTY_STRING_ARRAY) : (this._references = null, atNames ? (this._names = null, this._atNames = names) : (this._names = names, this._atNames = null));
  }
  get names() {
    let names = this._names;
    return names || (
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    names = this._names = this._atNames.map(this.toSyntheticName)), names;
  }
  get atNames() {
    let atNames = this._atNames;
    return atNames || (
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    atNames = this._atNames = this._names.map(this.toAtName)), atNames;
  }
  has(name) {
    return -1 !== this.names.indexOf(name);
  }
  get(name, atNames = false) {
    let {
        base: base,
        stack: stack
      } = this,
      idx = (atNames ? this.atNames : this.names).indexOf(name);
    if (-1 === idx) return UNDEFINED_REFERENCE;
    let ref = stack.get(idx, base);
    return ref;
  }
  capture() {
    let {
        names: names,
        references: references
      } = this,
      map = dict();
    for (const [i, name] of enumerate(names))
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    map[name] = references[i];
    return map;
  }
  merge(other) {
    let keys = Object.keys(other);
    if (keys.length > 0) {
      let {
          names: names,
          length: length,
          stack: stack
        } = this,
        newNames = names.slice();
      for (const name of keys) -1 === newNames.indexOf(name) && (length = newNames.push(name), stack.push(other[name]));
      this.length = length, this._references = null, this._names = newNames, this._atNames = null;
    }
  }
  get references() {
    let references = this._references;
    if (!references) {
      let {
        base: base,
        length: length,
        stack: stack
      } = this;
      references = this._references = stack.slice(base, base + length);
    }
    return references;
  }
  toSyntheticName(name) {
    return name.slice(1);
  }
  toAtName(name) {
    return `@${name}`;
  }
}
function toSymbolName(name) {
  return `&${name}`;
}
const EMPTY_BLOCK_VALUES = emptyArray();
class BlockArgumentsImpl {
  constructor() {
    this.internalValues = null, this._symbolNames = null, this.internalTag = null, this.names = EMPTY_STRING_ARRAY, this.length = 0, this.base = 0;
  }
  empty(stack, base) {
    this.stack = stack, this.names = EMPTY_STRING_ARRAY, this.base = base, this.length = 0, this._symbolNames = null, this.internalTag = CONSTANT_TAG, this.internalValues = EMPTY_BLOCK_VALUES;
  }
  setup(stack, base, length, names) {
    this.stack = stack, this.names = names, this.base = base, this.length = length, this._symbolNames = null, 0 === length ? (this.internalTag = CONSTANT_TAG, this.internalValues = EMPTY_BLOCK_VALUES) : (this.internalTag = null, this.internalValues = null);
  }
  get values() {
    let values = this.internalValues;
    if (!values) {
      let {
        base: base,
        length: length,
        stack: stack
      } = this;
      values = this.internalValues = stack.slice(base, base + 3 * length);
    }
    return values;
  }
  has(name) {
    return -1 !== this.names.indexOf(name);
  }
  get(name) {
    let idx = this.names.indexOf(name);
    if (-1 === idx) return null;
    let {
        base: base,
        stack: stack
      } = this,
      table = stack.get(3 * idx, base),
      scope = stack.get(3 * idx + 1, base),
      handle = stack.get(3 * idx + 2, base);
    return null === handle ? null : [handle, scope, table];
  }
  capture() {
    return new CapturedBlockArgumentsImpl(this.names, this.values);
  }
  get symbolNames() {
    let symbolNames = this._symbolNames;
    return null === symbolNames && (symbolNames = this._symbolNames = this.names.map(toSymbolName)), symbolNames;
  }
}
class CapturedBlockArgumentsImpl {
  constructor(names, values) {
    this.names = names, this.values = values, this.length = names.length;
  }
  has(name) {
    return -1 !== this.names.indexOf(name);
  }
  get(name) {
    let idx = this.names.indexOf(name);
    return -1 === idx ? null : [this.values[3 * idx + 2], this.values[3 * idx + 1], this.values[3 * idx]];
  }
}
function createCapturedArgs(named, positional) {
  return {
    named: named,
    positional: positional
  };
}
function reifyNamed(named) {
  let reified = dict();
  for (const [key, value] of Object.entries(named)) reified[key] = valueForRef(value);
  return reified;
}
function reifyPositional(positional) {
  return positional.map(valueForRef);
}
const ARGUMENT_ERROR = Symbol("ARGUMENT_ERROR");
function isArgumentError(arg) {
  return null !== arg && "object" == typeof arg && arg[ARGUMENT_ERROR];
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function ArgumentErrorImpl(error) {
  return {
    [ARGUMENT_ERROR]: true,
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    error: error
  };
}
function reifyArgsDebug(args) {
  return {
    named: function (named) {
      let reified = dict();
      for (const [key, value] of Object.entries(named)) try {
        reified[key] = valueForRef(value);
      } catch (e) {
        reified[key] = ArgumentErrorImpl(e);
      }
      return reified;
    }(args.named),
    positional: (positional = args.positional, positional.map(p => {
      try {
        return valueForRef(p);
      } catch (e) {
        return ArgumentErrorImpl(e);
      }
    }))
  };
  var positional;
}
const EMPTY_NAMED = Object.freeze(Object.create(null)),
  EMPTY_POSITIONAL = EMPTY_REFERENCES,
  EMPTY_ARGS = createCapturedArgs(EMPTY_NAMED, EMPTY_POSITIONAL);
function castToString(value) {
  return "string" == typeof value ? value : "function" != typeof value.toString ? "" : String(value);
  // eslint-disable-next-line @typescript-eslint/no-base-to-string -- @fixme
}
function resolveHelper(definition, ref) {
  let helper,
    managerOrHelper = getInternalHelperManager(definition, true);
  return helper = null === managerOrHelper ? null : "function" == typeof managerOrHelper ? managerOrHelper : managerOrHelper.getHelper(definition), helper;
}
function isUndefinedReference(input) {
  return input === UNDEFINED_REFERENCE;
}
APPEND_OPCODES.add(77, (vm, {
  op1: type,
  op2: _isStrict
}) => {
  let stack = vm.stack,
    definition = stack.pop(),
    capturedArgs = stack.pop(),
    owner = vm.getOwner();
    vm.context.resolver;
  vm.loadValue($v0, function (type, inner, owner, args, resolver, isStrict) {
    let lastValue, curriedDefinition;
    return createComputeRef(() => {
      let value = valueForRef(inner);
      if (value === lastValue) return curriedDefinition;
      if (isCurriedType(value, type)) curriedDefinition = args ? curry(type, value, owner, args) : args;else if (0 === type && "string" == typeof value && value) {
        curriedDefinition = curry(type, value, owner, args);
      } else curriedDefinition = isIndexable$2(value) ? curry(type, value, owner, args) : null;
      return lastValue = value, curriedDefinition;
    });
  }(type, definition, owner, capturedArgs));
}), APPEND_OPCODES.add(107, vm => {
  let helperRef,
    stack = vm.stack,
    ref = stack.pop(),
    args = stack.pop().capture(),
    initialOwner = vm.getOwner(),
    helperInstanceRef = createComputeRef(() => {
      void 0 !== helperRef && destroy(helperRef);
      let definition = valueForRef(ref);
      if (isCurriedType(definition, 1)) {
        let {
            definition: resolvedDef,
            owner: owner,
            positional: positional,
            named: named
          } = resolveCurriedValue(definition),
          helper = resolveHelper(resolvedDef);
        void 0 !== named && (
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        args.named = assign({}, ...named, args.named)), void 0 !== positional && (args.positional = positional.concat(args.positional)), helperRef = helper(args, owner), associateDestroyableChild(helperInstanceRef, helperRef);
      } else if (isIndexable$2(definition)) {
        let helper = resolveHelper(definition);
        helperRef = helper(args, initialOwner), _hasDestroyableChildren(helperRef) && associateDestroyableChild(helperInstanceRef, helperRef);
      } else helperRef = UNDEFINED_REFERENCE;
    }),
    helperValueRef = createComputeRef(() => (valueForRef(helperInstanceRef), valueForRef(helperRef)));
  vm.associateDestroyable(helperInstanceRef), vm.loadValue($v0, helperValueRef);
}), APPEND_OPCODES.add(16, (vm, {
  op1: handle
}) => {
  let stack = vm.stack,
    value = vm.constants.getValue(handle)(stack.pop().capture(), vm.getOwner(), vm.dynamicScope());
  _hasDestroyableChildren(value) && vm.associateDestroyable(value), vm.loadValue($v0, value);
}), APPEND_OPCODES.add(21, (vm, {
  op1: symbol
}) => {
  let expr = vm.referenceForSymbol(symbol);
  vm.stack.push(expr);
}), APPEND_OPCODES.add(19, (vm, {
  op1: symbol
}) => {
  let expr = vm.stack.pop();
  vm.scope().bindSymbol(symbol, expr);
}), APPEND_OPCODES.add(20, (vm, {
  op1: symbol
}) => {
  let handle = vm.stack.pop(),
    scope = vm.stack.pop(),
    table = vm.stack.pop();
  vm.scope().bindBlock(symbol, [handle, scope, table]);
}), APPEND_OPCODES.add(37, (vm, {
  op1: size
}) => {
  vm.pushRootScope(size, vm.getOwner());
}), APPEND_OPCODES.add(22, (vm, {
  op1: _key
}) => {
  let key = vm.constants.getValue(_key),
    expr = vm.stack.pop();
  vm.stack.push(childRefFor(expr, key));
}), APPEND_OPCODES.add(23, (vm, {
  op1: _block
}) => {
  let {
      stack: stack
    } = vm,
    block = vm.scope().getBlock(_block);
  stack.push(block);
}), APPEND_OPCODES.add(24, vm => {
  let {
      stack: stack
    } = vm,
    block = stack.pop();
  if (block && !isUndefinedReference(block)) {
    let [handleOrCompilable, scope, table] = block;
    stack.push(table), stack.push(scope), stack.push(handleOrCompilable);
  } else stack.push(null), stack.push(null), stack.push(null);
}), APPEND_OPCODES.add(25, vm => {
  let {
      stack: stack
    } = vm,
    block = stack.pop();
  block && !isUndefinedReference(block) ? stack.push(TRUE_REFERENCE) : stack.push(FALSE_REFERENCE);
}), APPEND_OPCODES.add(26, vm => {
  // FIXME(mmun): should only need to push the symbol table
  vm.stack.pop(), vm.stack.pop();
  let table = vm.stack.pop(),
    hasBlockParams = table && table.parameters.length;
  vm.stack.push(hasBlockParams ? TRUE_REFERENCE : FALSE_REFERENCE);
}), APPEND_OPCODES.add(27, (vm, {
  op1: count
}) => {
  let out = new Array(count);
  for (let i = count; i > 0; i--) out[i - 1] = vm.stack.pop();
  var partsRefs;
  vm.stack.push((partsRefs = out, createComputeRef(() => {
    const parts = [];
    for (const ref of partsRefs) {
      const value = valueForRef(ref);
      null != value && parts.push(castToString(value));
    }
    return parts.length > 0 ? parts.join("") : null;
  })));
}), APPEND_OPCODES.add(109, vm => {
  let condition = vm.stack.pop(),
    truthy = vm.stack.pop(),
    falsy = vm.stack.pop();
  vm.stack.push(createComputeRef(() => toBool$1(valueForRef(condition)) ? valueForRef(truthy) : valueForRef(falsy)));
}), APPEND_OPCODES.add(110, vm => {
  let ref = vm.stack.pop();
  vm.stack.push(createComputeRef(() => !toBool$1(valueForRef(ref))));
}), APPEND_OPCODES.add(111, vm => {
  let scope = vm.dynamicScope(),
    stack = vm.stack,
    nameRef = stack.pop();
  stack.push(createComputeRef(() => {
    let name = String(valueForRef(nameRef));
    return valueForRef(scope.get(name));
  }));
}), APPEND_OPCODES.add(112, vm => {
  let {
    positional: positional
  } = vm.stack.pop().capture();
  vm.loadValue($v0, createComputeRef(() => {
    // eslint-disable-next-line no-console
    console.log(...reifyPositional(positional));
  }));
});
class DynamicTextContent {
  constructor(node, reference, lastValue) {
    this.node = node, this.reference = reference, this.lastValue = lastValue;
  }
  evaluate() {
    let normalized,
      value = valueForRef(this.reference),
      {
        lastValue: lastValue
      } = this;
    value !== lastValue && (normalized = isEmpty$2(value) ? "" : isString(value) ? value : String(value), normalized !== lastValue) && (this.node.nodeValue = this.lastValue = normalized);
  }
}
function toContentType(value) {
  return function (value) {
    return isString(value) || isEmpty$2(value) || "boolean" == typeof value || "number" == typeof value;
  }(value) ? ContentType.String : isCurriedType(value, 0) || hasInternalComponentManager(value) ? ContentType.Component : isCurriedType(value, 1) || hasInternalHelperManager(value) ? ContentType.Helper : isSafeString(value) ? ContentType.SafeString : function (value) {
    return isIndexable$1(value) && 11 === value.nodeType;
  }(value) ? ContentType.Fragment : function (value) {
    return isIndexable$1(value) && "number" == typeof value.nodeType;
  }(value) ? ContentType.Node : ContentType.String;
}
function toDynamicContentType(value) {
  if (!isIndexable$2(value)) return ContentType.String;
  if (isCurriedType(value, 0) || hasInternalComponentManager(value)) return ContentType.Component;
  return ContentType.Helper;
}
function debugCallback(context, get) {
  // eslint-disable-next-line no-console
  console.info("Use `context`, and `get(<path>)` to debug this template."), get("this");
  // eslint-disable-next-line no-debugger
  debugger;
}
APPEND_OPCODES.add(76, vm => {
  let reference = vm.stack.peek();
  vm.stack.push(toContentType(valueForRef(reference))), isConstRef(reference) || vm.updateWith(new AssertFilter(reference, toContentType));
}), APPEND_OPCODES.add(106, vm => {
  let reference = vm.stack.peek();
  vm.stack.push(toDynamicContentType(valueForRef(reference))), isConstRef(reference) || vm.updateWith(new AssertFilter(reference, toDynamicContentType));
}), APPEND_OPCODES.add(43, vm => {
  let reference = vm.stack.pop(),
    rawValue = valueForRef(reference),
    value = isEmpty$2(rawValue) ? "" : String(rawValue);
  vm.tree().appendDynamicHTML(value);
}), APPEND_OPCODES.add(44, vm => {
  let reference = vm.stack.pop(),
    rawValue = valueForRef(reference).toHTML(),
    value = isEmpty$2(rawValue) ? "" : rawValue;
  vm.tree().appendDynamicHTML(value);
}), APPEND_OPCODES.add(47, vm => {
  let reference = vm.stack.pop(),
    rawValue = valueForRef(reference),
    value = isEmpty$2(rawValue) ? "" : String(rawValue),
    node = vm.tree().appendDynamicText(value);
  isConstRef(reference) || vm.updateWith(new DynamicTextContent(node, reference, value));
}), APPEND_OPCODES.add(45, vm => {
  let reference = vm.stack.pop(),
    value = valueForRef(reference);
  vm.tree().appendDynamicFragment(value);
}), APPEND_OPCODES.add(46, vm => {
  let reference = vm.stack.pop(),
    value = valueForRef(reference);
  vm.tree().appendDynamicNode(value);
});
let callback = debugCallback;
class ScopeInspector {
  #symbols;
  constructor(scope, symbols) {
    this.scope = scope, this.#symbols = symbols;
  }
  get(path) {
    let ref,
      {
        scope: scope
      } = this,
      symbols = this.#symbols,
      parts = path.split("."),
      [head, ...tail] = path.split(".");
    return "this" === head ? ref = scope.getSelf() : symbols.locals[head] ? ref = scope.getSymbol(symbols.locals[head]) : (ref = this.scope.getSelf(), tail = parts), tail.reduce((r, part) => childRefFor(r, part), ref);
  }
}
APPEND_OPCODES.add(103, (vm, {
  op1: _debugInfo
}) => {
  let debuggerInfo = vm.constants.getValue(_debugInfo),
    inspector = new ScopeInspector(vm.scope(), debuggerInfo);
  callback(valueForRef(vm.getSelf()), path => valueForRef(inspector.get(path)));
}), APPEND_OPCODES.add(72, (vm, {
  op1: relativeStart,
  op2: elseTarget
}) => {
  let stack = vm.stack,
    listRef = stack.pop(),
    keyRef = stack.pop(),
    keyValue = valueForRef(keyRef),
    key = null === keyValue ? "@identity" : String(keyValue),
    iteratorRef = createIteratorRef(listRef, key),
    iterator = valueForRef(iteratorRef);
  vm.updateWith(new AssertFilter(iteratorRef, iterator => iterator.isEmpty())), iterator.isEmpty() ?
  // TODO: Fix this offset, should be accurate
  vm.lowlevel.goto(elseTarget + 1) : (vm.enterList(iteratorRef, relativeStart), vm.stack.push(iterator));
}), APPEND_OPCODES.add(73, vm => {
  vm.exitList();
}), APPEND_OPCODES.add(74, (vm, {
  op1: breaks
}) => {
  let item = vm.stack.peek().next();
  null !== item ? vm.registerItem(vm.enterItem(item)) : vm.lowlevel.goto(breaks);
});
const CAPABILITIES$4 = {
  dynamicLayout: false,
  dynamicTag: false,
  prepareArgs: false,
  createArgs: false,
  attributeHook: false,
  elementHook: false,
  createCaller: false,
  dynamicScope: false,
  updateHook: false,
  createInstance: false,
  wrapped: false,
  willDestroy: false,
  hasSubOwner: false
};
class TemplateOnlyComponentManager {
  getCapabilities() {
    return CAPABILITIES$4;
  }
  getDebugName({
    name: name
  }) {
    return name;
  }
  getSelf() {
    return NULL_REFERENCE;
  }
  getDestroyable() {
    return null;
  }
}
const TEMPLATE_ONLY_COMPONENT_MANAGER = new TemplateOnlyComponentManager();

// This is only exported for types, don't use this class directly
class TemplateOnlyComponentDefinition {
  constructor(moduleName = "@glimmer/component/template-only", name = "(unknown template-only component)") {
    this.moduleName = moduleName, this.name = name;
  }
  toString() {
    return this.moduleName;
  }
}

/**
  This utility function is used to declare a given component has no backing class. When the rendering engine detects this it
  is able to perform a number of optimizations. Templates that are associated with `templateOnly()` will be rendered _as is_
  without adding a wrapping `<div>` (or any of the other element customization behaviors of [@ember/component](/ember/release/classes/Component)).
  Specifically, this means that the template will be rendered as "outer HTML".

  In general, this method will be used by build time tooling and would not be directly written in an application. However,
  at times it may be useful to use directly to leverage the "outer HTML" semantics mentioned above. For example, if an addon would like
  to use these semantics for its templates but cannot be certain it will only be consumed by applications that have enabled the
  `template-only-glimmer-components` optional feature.

  @example

  ```js
  import { templateOnlyComponent } from '@glimmer/runtime';

  export default templateOnlyComponent();
  ```

  @public
  @method templateOnly
  @param {String} moduleName the module name that the template only component represents, this will be used for debugging purposes
  @category EMBER_GLIMMER_SET_COMPONENT_TEMPLATE
*/
function templateOnlyComponent(moduleName, name) {
  return new TemplateOnlyComponentDefinition(moduleName, name);
}

// http://www.w3.org/TR/html/syntax.html#html-integration-point
setInternalComponentManager(TEMPLATE_ONLY_COMPONENT_MANAGER, TemplateOnlyComponentDefinition.prototype);
const SVG_INTEGRATION_POINTS = {
    foreignObject: 1,
    desc: 1,
    title: 1
  },
  BLACKLIST_TABLE = Object.create(null);

// http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes
// TODO: Adjust SVG attributes
// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
// TODO: Adjust SVG elements
// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign
class DOMOperations {
  constructor(document) {
    this.document = document, this.setupUselessElement();
  }
  // split into separate method so that NodeDOMTreeConstruction
  // can override it.
  setupUselessElement() {
    this.uselessElement = this.document.createElement("div");
  }
  createElement(tag, context) {
    let isElementInSVGNamespace, isHTMLIntegrationPoint, isElementInMathMlNamespace, ns;
    if (context ? (isElementInSVGNamespace = context.namespaceURI === NS_SVG || "svg" === tag, isElementInMathMlNamespace = context.namespaceURI === NS_MATHML || "math" === tag, isHTMLIntegrationPoint = !!SVG_INTEGRATION_POINTS[context.tagName]) : (isElementInSVGNamespace = "svg" === tag, isElementInMathMlNamespace = "math" === tag, isHTMLIntegrationPoint = false), !isElementInMathMlNamespace && !isElementInSVGNamespace || isHTMLIntegrationPoint) return this.document.createElement(tag);
    // FIXME: This does not properly handle <font> with color, face, or
    // size attributes, which is also disallowed by the spec. We should fix
    // this.
    if (BLACKLIST_TABLE[tag]) throw new Error(`Cannot create a ${tag} inside an SVG context`);
    return ns = isElementInMathMlNamespace ? NS_MATHML : NS_SVG, this.document.createElementNS(ns, tag);
  }
  insertBefore(parent, node, reference) {
    parent.insertBefore(node, reference);
  }
  insertHTMLBefore(parent, nextSibling, html) {
    if ("" === html) {
      const comment = this.createComment("");
      return parent.insertBefore(comment, nextSibling), new ConcreteBounds(parent, comment, comment);
    }
    const prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;
    let last;
    if (null === nextSibling) parent.insertAdjacentHTML("beforeend", html), last = parent.lastChild;else if (nextSibling instanceof HTMLElement) nextSibling.insertAdjacentHTML("beforebegin", html), last = nextSibling.previousSibling;else {
      // Non-element nodes do not support insertAdjacentHTML, so add an
      // element and call it on that element. Then remove the element.
      // This also protects Edge, IE and Firefox w/o the inspector open
      // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts
      const {
        uselessElement: uselessElement
      } = this;
      parent.insertBefore(uselessElement, nextSibling), uselessElement.insertAdjacentHTML("beforebegin", html), last = uselessElement.previousSibling, parent.removeChild(uselessElement);
    }
    const first = prev ? prev.nextSibling : parent.firstChild;
    return new ConcreteBounds(parent, first, last);
  }
  createTextNode(text) {
    return this.document.createTextNode(text);
  }
  createComment(data) {
    return this.document.createComment(data);
  }
}

// Patch:    insertAdjacentHTML on SVG Fix
// Browsers: Safari, IE, Edge, Firefox ~33-34
// Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is
//           present but throws an exception on IE and Edge. Old versions of
//           Firefox create nodes in the incorrect namespace.
// Fix:      Since IE and Edge silently fail to create SVG nodes using
//           innerHTML, and because Firefox may create nodes in the incorrect
//           namespace using innerHTML on SVG elements, an HTML-string wrapping
//           approach is used. A pre/post SVG tag is added to the string, then
//           that whole string is added to a div. The created nodes are plucked
//           out and applied to the target location on DOM.
function applySVGInnerHTMLFix(document, DOMClass, svgNamespace) {
  if (!document) return DOMClass;
  if (!function (document, svgNamespace) {
    const svg = document.createElementNS(svgNamespace, "svg");
    try {
      svg.insertAdjacentHTML("beforeend", "<circle></circle>");
    } catch {
      // IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG
      // Safari: Will throw, insertAdjacentHTML is not present on SVG
    } finally {
      // FF: Old versions will create a node in the wrong namespace
      return 1 !== svg.childNodes.length || svg.firstChild.namespaceURI !== NS_SVG;
      // eslint-disable-next-line no-unsafe-finally
    }
  }
  // Patch:    Adjacent text node merging fix
  // Browsers: IE, Edge, Firefox w/o inspector open
  // Reason:   These browsers will merge adjacent text nodes. For example given
  //           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers
  //           with proper behavior will populate div.childNodes with two items.
  //           These browsers will populate it with one merged node instead.
  // Fix:      Add these nodes to a wrapper element, then iterate the childNodes
  //           of that wrapper and move the nodes to their target location. Note
  //           that potential SVG bugs will have been handled before this fix.
  //           Note that this fix must only apply to the previous text node, as
  //           the base implementation of `insertHTMLBefore` already handles
  //           following text nodes correctly.
  (document, svgNamespace)) return DOMClass;
  const div = document.createElement("div");
  return class extends DOMClass {
    insertHTMLBefore(parent, nextSibling, html) {
      return "" === html || parent.namespaceURI !== svgNamespace ? super.insertHTMLBefore(parent, nextSibling, html) : function (parent, div, html, reference) {
        let source;
        // This is important, because descendants of the <foreignObject> integration
        // point are parsed in the HTML namespace
        if ("FOREIGNOBJECT" === parent.tagName.toUpperCase()) {
          // IE, Edge: also do not correctly support using `innerHTML` on SVG
          // namespaced elements. So here a wrapper is used.
          const wrappedHtml = "<svg><foreignObject>" + html + "</foreignObject></svg>";
          clearElement(div), div.insertAdjacentHTML("afterbegin", wrappedHtml),
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
          source = div.firstChild.firstChild;
        } else {
          // IE, Edge: also do not correctly support using `innerHTML` on SVG
          // namespaced elements. So here a wrapper is used.
          const wrappedHtml = "<svg>" + html + "</svg>";
          clearElement(div), div.insertAdjacentHTML("afterbegin", wrappedHtml),
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
          source = div.firstChild;
        }
        return function (source, target, nextSibling) {
          const first = source.firstChild;
          let last = first,
            current = first;
          for (; current;) {
            const next = current.nextSibling;
            target.insertBefore(current, nextSibling), last = current, current = next;
          }
          return new ConcreteBounds(target, first, last);
        }(source, parent, reference);
      }(parent, div, html, nextSibling);
    }
  };
}
function applyTextNodeMergingFix(document, DOMClass) {
  return document && function (document) {
    const mergingTextDiv = document.createElement("div");
    return mergingTextDiv.appendChild(document.createTextNode("first")), mergingTextDiv.insertAdjacentHTML("beforeend", "second"), 2 !== mergingTextDiv.childNodes.length;
  }(document) ? class extends DOMClass {
    constructor(document) {
      super(document), this.uselessComment = document.createComment("");
    }
    insertHTMLBefore(parent, nextSibling, html) {
      if ("" === html) return super.insertHTMLBefore(parent, nextSibling, html);
      let didSetUselessComment = false;
      const nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;
      nextPrevious && nextPrevious instanceof Text && (didSetUselessComment = true, parent.insertBefore(this.uselessComment, nextSibling));
      const bounds = super.insertHTMLBefore(parent, nextSibling, html);
      return didSetUselessComment && parent.removeChild(this.uselessComment), bounds;
    }
  } : DOMClass;
}
const doc$1 = "undefined" == typeof document ? null : castToSimple(document);
let appliedTreeConstruction = class extends DOMOperations {
  createElementNS(namespace, tag) {
    return this.document.createElementNS(namespace, tag);
  }
  setAttribute(element, name, value, namespace = null) {
    namespace ? element.setAttributeNS(namespace, name, value) : element.setAttribute(name, value);
  }
};
appliedTreeConstruction = applyTextNodeMergingFix(doc$1, appliedTreeConstruction), appliedTreeConstruction = applySVGInnerHTMLFix(doc$1, appliedTreeConstruction, NS_SVG);
const DOMTreeConstruction = appliedTreeConstruction;
["b", "big", "blockquote", "body", "br", "center", "code", "dd", "div", "dl", "dt", "em", "embed", "h1", "h2", "h3", "h4", "h5", "h6", "head", "hr", "i", "img", "li", "listing", "main", "meta", "nobr", "ol", "p", "pre", "ruby", "s", "small", "span", "strong", "strike", "sub", "sup", "table", "tt", "u", "ul", "var"].forEach(tag => BLACKLIST_TABLE[tag] = 1);
const doc = "undefined" == typeof document ? null : castToSimple(document);
class DOMChangesImpl extends DOMOperations {
  constructor(document1) {
    super(document1), this.document = document1, this.namespace = null;
  }
  setAttribute(element, name, value) {
    element.setAttribute(name, value);
  }
  removeAttribute(element, name) {
    element.removeAttribute(name);
  }
  insertAfter(element, node, reference) {
    this.insertBefore(element, node, reference.nextSibling);
  }
}
let helper$3 = DOMChangesImpl;
helper$3 = applyTextNodeMergingFix(doc, helper$3), helper$3 = applySVGInnerHTMLFix(doc, helper$3, NS_SVG);
const DOMChanges = helper$3;

/*
 * @method normalizeProperty
 * @param element {HTMLElement}
 * @param slotName {String}
 * @returns {Object} { name, type }
 */
function normalizeProperty(element, slotName) {
  let type, normalized;
  if (slotName in element) normalized = slotName, type = "prop";else {
    let lower = slotName.toLowerCase();
    lower in element ? (type = "prop", normalized = lower) : (type = "attr", normalized = slotName);
  }
  return "prop" !== type || "style" !== normalized.toLowerCase() && !function (tagName, propName) {
    let tag = ATTR_OVERRIDES[tagName.toUpperCase()];
    return !(!tag || !tag[propName.toLowerCase()]);
  }(element.tagName, normalized) || (type = "attr"), {
    normalized: normalized,
    type: type
  };
}

// properties that MUST be set as attributes, due to:
// * browser bug
// * strange spec outlier
const ATTR_OVERRIDES = {
    INPUT: {
      form: true,
      // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false
      // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false
      // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true
      autocorrect: true,
      // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true
      // Safari 9.1.3: 'list' in document.createElement('input') === false
      list: true
    },
    // element.form is actually a legitimate readOnly property, that is to be
    // mutated, but must be mutated by setAttribute...
    SELECT: {
      form: true
    },
    OPTION: {
      form: true
    },
    TEXTAREA: {
      form: true
    },
    LABEL: {
      form: true
    },
    FIELDSET: {
      form: true
    },
    LEGEND: {
      form: true
    },
    OBJECT: {
      form: true
    },
    OUTPUT: {
      form: true
    },
    BUTTON: {
      form: true
    }
  },
  TRANSACTION = Symbol("TRANSACTION");
class TransactionImpl {
  didCreate(component) {
    this.createdComponents.push(component);
  }
  didUpdate(component) {
    this.updatedComponents.push(component);
  }
  scheduleInstallModifier(modifier) {
    this.scheduledInstallModifiers.push(modifier);
  }
  scheduleUpdateModifier(modifier) {
    this.scheduledUpdateModifiers.push(modifier);
  }
  commit() {
    let {
      createdComponents: createdComponents,
      updatedComponents: updatedComponents
    } = this;
    for (const {
      manager: manager,
      state: state
    } of createdComponents) manager.didCreate(state);
    for (const {
      manager: manager,
      state: state
    } of updatedComponents) manager.didUpdate(state);
    let {
      scheduledInstallModifiers: scheduledInstallModifiers,
      scheduledUpdateModifiers: scheduledUpdateModifiers
    } = this;
    for (const {
      manager: manager,
      state: state,
      definition: definition
    } of scheduledInstallModifiers) {
      let modifierTag = manager.getTag(state);
      if (null !== modifierTag) {
        let tag = track(() => manager.install(state));
        UPDATE_TAG(modifierTag, tag);
      } else manager.install(state);
    }
    for (const {
      manager: manager,
      state: state,
      definition: definition
    } of scheduledUpdateModifiers) {
      let modifierTag = manager.getTag(state);
      if (null !== modifierTag) {
        let tag = track(() => manager.update(state));
        UPDATE_TAG(modifierTag, tag);
      } else manager.update(state);
    }
  }
  constructor() {
    this.scheduledInstallModifiers = [], this.scheduledUpdateModifiers = [], this.createdComponents = [], this.updatedComponents = [];
  }
}
class EnvironmentImpl {
  static {
    _TRANSACTION = TRANSACTION;
  }
  constructor(options, delegate) {
    if (this.delegate = delegate, this[_TRANSACTION] = null, this.isInteractive = delegate.isInteractive, this.debugRenderTree = this.delegate.enableDebugTooling ? new DebugRenderTreeImpl() : void 0, this.isArgumentCaptureError = this.delegate.enableDebugTooling ? isArgumentError : void 0, options.appendOperations) this.appendOperations = options.appendOperations, this.updateOperations = options.updateOperations;else if (options.document) this.appendOperations = new DOMTreeConstruction(options.document), this.updateOperations = new DOMChangesImpl(options.document);else ;
  }
  getAppendOperations() {
    return this.appendOperations;
  }
  getDOM() {
    return this.updateOperations;
  }
  begin() {
    this[TRANSACTION], this.debugRenderTree?.begin(), this[TRANSACTION] = new TransactionImpl();
  }
  get transaction() {
    return this[TRANSACTION];
  }
  didCreate(component) {
    this.transaction.didCreate(component);
  }
  didUpdate(component) {
    this.transaction.didUpdate(component);
  }
  scheduleInstallModifier(modifier) {
    this.isInteractive && this.transaction.scheduleInstallModifier(modifier);
  }
  scheduleUpdateModifier(modifier) {
    this.isInteractive && this.transaction.scheduleUpdateModifier(modifier);
  }
  commit() {
    let transaction = this.transaction;
    this[TRANSACTION] = null, transaction.commit(), this.debugRenderTree?.commit(), this.delegate.onTransactionCommit();
  }
}
function runtimeOptions(options, delegate, artifacts, resolver) {
  return {
    env: new EnvironmentImpl(options, delegate),
    program: new ProgramImpl(artifacts.constants, artifacts.heap),
    resolver: resolver
  };
}
function inTransaction(env, block) {
  if (env[TRANSACTION]) block();else {
    env.begin();
    try {
      block();
    } finally {
      env.commit();
    }
  }
}
var _TRANSACTION;
function internalHelper$1(helper) {
  return setInternalHelperManager(helper, {});
}

/**
   Use the `{{array}}` helper to create an array to pass as an option to your
   components.

   ```handlebars
   <MyComponent @people={{array
     'Tom Dale'
     'Yehuda Katz'
     this.myOtherPerson}}
   />
   ```
    or
   ```handlebars
   {{my-component people=(array
     'Tom Dale'
     'Yehuda Katz'
     this.myOtherPerson)
   }}
   ```

   Would result in an object such as:

   ```js
   ['Tom Dale', 'Yehuda Katz', this.get('myOtherPerson')]
   ```

   Where the 3rd item in the array is bound to updates of the `myOtherPerson` property.

   @method array
   @param {Array} options
   @return {Array} Array
   @public
 */
const array = internalHelper$1(({
    positional: positional
  }) => createComputeRef(() => reifyPositional(positional), null, "array")),
  normalizeTextValue = value => (value => null == value || "function" != typeof value.toString)(value) ? "" : String(value),
  concat = internalHelper$1(({
    positional: positional
  }) => createComputeRef(() => reifyPositional(positional).map(normalizeTextValue).join(""), null, "concat")),
  context = buildUntouchableThis(),
  fn = internalHelper$1(({
    positional: positional
  }) => {
    let callbackRef = positional[0];
    return createComputeRef(() => (...invocationArgs) => {
      let [fn, ...args] = reifyPositional(positional);
      if (!isInvokableRef(callbackRef))
        // eslint-disable-next-line @typescript-eslint/no-unsafe-return -- @fixme
        return fn.call(context, ...args, ...invocationArgs);
      {
        let value = args.length > 0 ? args[0] : invocationArgs[0];
        updateRef(callbackRef, value);
      }
    }, null, "fn");
  }),
  get = internalHelper$1(({
    positional: positional
  }) => {
    let sourceRef = positional[0] ?? UNDEFINED_REFERENCE,
      pathRef = positional[1] ?? UNDEFINED_REFERENCE;
    return createComputeRef(() => {
      let source = valueForRef(sourceRef);
      if (isDict(source)) return getPath(source, String(valueForRef(pathRef)));
    }, value => {
      let source = valueForRef(sourceRef);
      if (isDict(source)) return setPath(source, String(valueForRef(pathRef)), value);
    }, "get");
  }),
  hash$1 = internalHelper$1(({
    named: named
  }) => {
    let ref = createComputeRef(() => reifyNamed(named), null, "hash"),
      children = new Map();
    // Setup the children so that templates can bypass getting the value of
    // the reference and treat children lazily
    for (let name in named) children.set(name, named[name]);
    return ref.children = children, ref;
  });
function getArgs(proxy) {
  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
  return getValue(proxy.argsCache);
}
class SimpleArgsProxy {
  constructor(context, computeArgs = () => EMPTY_ARGS) {
    let argsCache = createCache(() => computeArgs(context));
    this.argsCache = argsCache;
  }
  get named() {
    return getArgs(this).named || EMPTY_NAMED;
  }
  get positional() {
    return getArgs(this).positional || EMPTY_POSITIONAL;
  }
}

////////////
function invokeHelper(context, definition, computeArgs) {
  const owner = getOwner$3(context),
    internalManager = getInternalHelperManager(definition);
  const manager = internalManager.getDelegateFor(owner);
  let cache,
    args = new SimpleArgsProxy(context, computeArgs),
    bucket = manager.createHelper(definition, args);
  if (!hasValue(manager)) throw new Error("TODO: unreachable, to be implemented with hasScheduledEffect");
  if (cache = createCache(() => {
    return manager.getValue(bucket);
  }), associateDestroyableChild(context, cache), hasDestroyable(manager)) {
    let destroyable = manager.getDestroyable(bucket);
    associateDestroyableChild(cache, destroyable);
  }
  return cache;
}
class OnModifierState {
  constructor(element, args) {
    this.tag = createUpdatableTag(), this.listener = null, this.element = element, this.args = args, registerDestructor$1(this, () => {
      let {
        element: element,
        listener: listener
      } = this;
      if (listener) {
        let {
          eventName: eventName,
          callback: callback,
          options: options
        } = listener;
        removeEventListener(element, eventName, callback, options);
      }
    });
  }
  // Update this.listener if needed
  updateListener() {
    let {
      element: element,
      args: args,
      listener: listener
    } = this;
    args.positional[0];
    let eventName = valueForRef(args.positional[0]);
    args.positional[1];
    let once,
      passive,
      capture,
      userProvidedCallback = valueForRef(args.positional[1]);
    {
      let {
        once: _once,
        passive: _passive,
        capture: _capture
      } = args.named;
      _once && (once = valueForRef(_once)), _passive && (passive = valueForRef(_passive)), _capture && (capture = valueForRef(_capture));
    }
    let options,
      shouldUpdate = false;
    if (shouldUpdate = null === listener || eventName !== listener.eventName || userProvidedCallback !== listener.userProvidedCallback || once !== listener.once || passive !== listener.passive || capture !== listener.capture,
    // we want to handle both `true` and `false` because both have a meaning:
    // https://bugs.chromium.org/p/chromium/issues/detail?id=770208
    shouldUpdate && (void 0 === once && void 0 === passive && void 0 === capture || (options = {
      once: once,
      passive: passive,
      capture: capture
    })), shouldUpdate) {
      let callback = userProvidedCallback;
      this.listener = {
        eventName: eventName,
        callback: callback,
        userProvidedCallback: userProvidedCallback,
        once: once,
        passive: passive,
        capture: capture,
        options: options
      }, listener && removeEventListener(element, listener.eventName, listener.callback, listener.options), function (element, eventName, callback, options) {
        adds++, element.addEventListener(eventName, callback, options);
      }
      /**
      The `{{on}}` modifier lets you easily add event listeners (it uses
      [EventTarget.addEventListener](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
      internally).
      For example, if you'd like to run a function on your component when a `<button>`
      in the components template is clicked you might do something like:
      ```app/components/like-post.hbs
      <button {{on 'click' this.saveLike}}>Like this post!</button>
      ```
      ```app/components/like-post.js
      import Component from '@glimmer/component';
      import { action } from '@ember/object';
      export default class LikePostComponent extends Component {
      saveLike = () => {
      // someone likes your post!
      // better send a request off to your server...
      }
      }
      ```
      ### Arguments
      `{{on}}` accepts two positional arguments, and a few named arguments.
      The positional arguments are:
      - `event` -- the name to use when calling `addEventListener`
      - `callback` -- the function to be passed to `addEventListener`
      The named arguments are:
      - capture -- a `true` value indicates that events of this type will be dispatched
      to the registered listener before being dispatched to any EventTarget beneath it
      in the DOM tree.
      - once -- indicates that the listener should be invoked at most once after being
      added. If true, the listener would be automatically removed when invoked.
      - passive -- if `true`, indicates that the function specified by listener will never
      call preventDefault(). If a passive listener does call preventDefault(), the user
      agent will do nothing other than generate a console warning. See
      [Improving scrolling performance with passive listeners](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Improving_scrolling_performance_with_passive_listeners)
      to learn more.
      The callback function passed to `{{on}}` will receive any arguments that are passed
      to the event handler. Most commonly this would be the `event` itself.
      If you would like to pass additional arguments to the function you should use
      the `{{fn}}` helper.
      For example, in our example case above if you'd like to pass in the post that
      was being liked when the button is clicked you could do something like:
      ```app/components/like-post.hbs
      <button {{on 'click' (fn this.saveLike @post)}}>Like this post!</button>
      ```
      In this case, the `saveLike` function will receive two arguments: the click event
      and the value of `@post`.
      ### Function Context
      In the example above, we used an arrow function to ensure that `likePost` is
      properly bound to the `items-list`, but let's explore what happens if we
      left out the arrow function:
      ```app/components/like-post.js
      import Component from '@glimmer/component';
      export default class LikePostComponent extends Component {
      saveLike() {
      // ...snip...
      }
      }
      ```
      In this example, when the button is clicked `saveLike` will be invoked,
      it will **not** have access to the component instance. In other
      words, it will have no `this` context, so please make sure your functions
      are bound (via an arrow function or other means) before passing into `on`!
      @method on
      @public
      */(element, eventName, callback, options);
    }
  }
}
let adds = 0,
  removes = 0;
function removeEventListener(element, eventName, callback, options) {
  removes++, element.removeEventListener(eventName, callback, options);
}
const on$1 = setInternalModifierManager(new class {
  getDebugName() {
    return "on";
  }
  getDebugInstance() {
    return null;
  }
  get counters() {
    return {
      adds: adds,
      removes: removes
    };
  }
  create(_owner, element, _state, args) {
    return new OnModifierState(element, args);
  }
  getTag({
    tag: tag
  }) {
    return tag;
  }
  install(state) {
    state.updateListener();
  }
  update(state) {
    state.updateListener();
  }
  getDestroyable(state) {
    return state;
  }
}(), {});
class LowLevelVM {
  constructor(stack, context, externs, registers) {
    this.stack = stack, this.externs = externs, this.currentOpSize = 0, this.context = context, this.registers = registers;
  }
  fetchRegister(register) {
    return this.registers[register];
  }
  loadRegister(register, value) {
    this.registers[register] = value;
  }
  setPc(pc) {
    this.registers[$pc] = pc;
  }
  // Start a new frame and save $ra and $fp on the stack
  pushFrame() {
    this.stack.push(this.registers[$ra]), this.stack.push(this.registers[$fp]), this.registers[$fp] = this.registers[$sp] - 1;
  }
  // Restore $ra, $sp and $fp
  popFrame() {
    this.registers[$sp] = this.registers[$fp] - 1, this.registers[$ra] = this.stack.get(0), this.registers[$fp] = this.stack.get(1);
  }
  pushSmallFrame() {
    this.stack.push(this.registers[$ra]);
  }
  popSmallFrame() {
    this.registers[$ra] = this.stack.pop();
  }
  // Jump to an address in `program`
  goto(offset) {
    this.setPc(this.target(offset));
  }
  target(offset) {
    return this.registers[$pc] + offset - this.currentOpSize;
  }
  // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)
  call(handle) {
    this.registers[$ra] = this.registers[$pc], this.setPc(this.context.program.heap.getaddr(handle));
  }
  // Put a specific `program` address in $ra
  returnTo(offset) {
    this.registers[$ra] = this.target(offset);
  }
  // Return to the `program` address stored in $ra
  return() {
    this.setPc(this.registers[$ra]);
  }
  nextStatement() {
    let {
        registers: registers,
        context: context
      } = this,
      pc = registers[$pc];
    if (-1 === pc) return null;
    // We have to save off the current operations size so that
    // when we do a jump we can calculate the correct offset
    // to where we are going. We can't simply ask for the size
    // in a jump because we have have already incremented the
    // program counter to the next instruction prior to executing.
    let opcode = context.program.opcode(pc),
      operationSize = this.currentOpSize = opcode.size;
    return this.registers[$pc] += operationSize, opcode;
  }
  evaluateOuter(opcode, vm) {
    this.evaluateInner(opcode, vm);
  }
  evaluateInner(opcode, vm) {
    opcode.isMachine ? this.evaluateMachine(opcode, vm) : this.evaluateSyscall(opcode, vm);
  }
  evaluateMachine(opcode, vm) {
    switch (opcode.type) {
      case 0:
        return void this.pushFrame();
      case 1:
        return void this.popFrame();
      case 3:
        return void this.call(opcode.op1);
      case 2:
        return void vm.call(this.stack.pop());
      case 4:
        return void this.goto(opcode.op1);
      case 5:
        return void vm.return();
      case 6:
        return void this.returnTo(opcode.op1);
    }
  }
  evaluateSyscall(opcode, vm) {
    APPEND_OPCODES.evaluate(vm, opcode, opcode.type);
  }
}
const badProtocols = ["javascript:", "vbscript:"],
  badTags = ["A", "BODY", "LINK", "IMG", "IFRAME", "BASE", "FORM"],
  badTagsForDataURI = ["EMBED"],
  badAttributes = ["href", "src", "background", "action"],
  badAttributesForDataURI = ["src"];
function has(array, item) {
  return -1 !== array.indexOf(item);
}
function checkURI(tagName, attribute) {
  return (null === tagName || has(badTags, tagName)) && has(badAttributes, attribute);
}
function checkDataURI(tagName, attribute) {
  return null !== tagName && has(badTagsForDataURI, tagName) && has(badAttributesForDataURI, attribute);
}
function requiresSanitization(tagName, attribute) {
  return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);
}
let _protocolForUrlImplementation;
function sanitizeAttributeValue(element, attribute, value) {
  if (null == value) return value;
  if (isSafeString(value)) return value.toHTML();
  const tagName = element.tagName.toUpperCase();
  let str = normalizeStringValue(value);
  if (checkURI(tagName, attribute)) {
    let protocol = (url = str, _protocolForUrlImplementation || (_protocolForUrlImplementation = function () {
      const weirdURL = URL;
      if ("object" == typeof weirdURL && null !== weirdURL &&
      // this is super annoying, TS thinks that URL **must** be a function so `URL.parse` check
      // thinks it is `never` without this `as unknown as any`
      "function" == typeof weirdURL.parse) {
        // In Ember-land the `fastboot` package sets the `URL` global to `require('url')`
        // ultimately, this should be changed (so that we can either rely on the natural `URL` global
        // that exists) but for now we have to detect the specific `FastBoot` case first
        // a future version of `fastboot` will detect if this legacy URL setup is required (by
        // inspecting Ember version) and if new enough, it will avoid shadowing the `URL` global
        // constructor with `require('url')`.
        let nodeURL = weirdURL;
        return url => {
          let protocol = null;
          return "string" == typeof url && (protocol = nodeURL.parse(url).protocol), null === protocol ? ":" : protocol;
        };
      }
      if ("function" == typeof weirdURL) return _url => {
        try {
          return new weirdURL(_url).protocol;
        } catch {
          // any non-fully qualified url string will trigger an error (because there is no
          // baseURI that we can provide; in that case we **know** that the protocol is
          // "safe" because it isn't specifically one of the `badProtocols` listed above
          // (and those protocols can never be the default baseURI)
          return ":";
        }
      };
      throw new Error('@glimmer/runtime needs a valid "globalThis.URL"');
    }()), _protocolForUrlImplementation(url));
    if (has(badProtocols, protocol)) return `unsafe:${str}`;
  }
  var url;
  return checkDataURI(tagName, attribute) ? `unsafe:${str}` : str;
}
function dynamicAttribute(element, attr, namespace, isTrusting = false) {
  const {
      tagName: tagName,
      namespaceURI: namespaceURI
    } = element,
    attribute = {
      element: element,
      name: attr,
      namespace: namespace
    };
  if (namespaceURI === NS_SVG) return buildDynamicAttribute(tagName, attr, attribute);
  const {
    type: type,
    normalized: normalized
  } = normalizeProperty(element, attr);
  return "attr" === type ? buildDynamicAttribute(tagName, normalized, attribute) : function (tagName, name, attribute) {
    return requiresSanitization(tagName, name) ? new SafeDynamicProperty(name, attribute) : function (tagName, attribute) {
      return ("INPUT" === tagName || "TEXTAREA" === tagName) && "value" === attribute;
    }(tagName, name) ? new InputValueDynamicAttribute(name, attribute) : function (tagName, attribute) {
      return "OPTION" === tagName && "selected" === attribute;
    }(tagName, name) ? new OptionSelectedDynamicAttribute(name, attribute) : new DefaultDynamicProperty(name, attribute);
  }(tagName, normalized, attribute);
}
function buildDynamicAttribute(tagName, name, attribute) {
  return requiresSanitization(tagName, name) ? new SafeDynamicAttribute(attribute) : new SimpleDynamicAttribute(attribute);
}
class DynamicAttribute {
  constructor(attribute) {
    this.attribute = attribute;
  }
}
class SimpleDynamicAttribute extends DynamicAttribute {
  set(dom, value, _env) {
    const normalizedValue = normalizeValue(value);
    if (null !== normalizedValue) {
      const {
        name: name,
        namespace: namespace
      } = this.attribute;
      dom.__setAttribute(name, normalizedValue, namespace);
    }
  }
  update(value, _env) {
    const normalizedValue = normalizeValue(value),
      {
        element: element,
        name: name
      } = this.attribute;
    null === normalizedValue ? element.removeAttribute(name) : element.setAttribute(name, normalizedValue);
  }
}
class DefaultDynamicProperty extends DynamicAttribute {
  constructor(normalizedName, attribute) {
    super(attribute), this.normalizedName = normalizedName;
  }
  set(dom, value, _env) {
    null != value && (this.value = value, dom.__setProperty(this.normalizedName, value));
  }
  update(value, _env) {
    const {
      element: element
    } = this.attribute;
    this.value !== value && (element[this.normalizedName] = this.value = value, null == value && this.removeAttribute());
  }
  removeAttribute() {
    // TODO this sucks but to preserve properties first and to meet current
    // semantics we must do this.
    const {
      element: element,
      namespace: namespace
    } = this.attribute;
    namespace ? element.removeAttributeNS(namespace, this.normalizedName) : element.removeAttribute(this.normalizedName);
  }
}
class SafeDynamicProperty extends DefaultDynamicProperty {
  set(dom, value, env) {
    const {
        element: element,
        name: name
      } = this.attribute,
      sanitized = sanitizeAttributeValue(element, name, value);
    super.set(dom, sanitized, env);
  }
  update(value, env) {
    const {
        element: element,
        name: name
      } = this.attribute,
      sanitized = sanitizeAttributeValue(element, name, value);
    super.update(sanitized, env);
  }
}
class SafeDynamicAttribute extends SimpleDynamicAttribute {
  set(dom, value, env) {
    const {
        element: element,
        name: name
      } = this.attribute,
      sanitized = sanitizeAttributeValue(element, name, value);
    super.set(dom, sanitized, env);
  }
  update(value, env) {
    const {
        element: element,
        name: name
      } = this.attribute,
      sanitized = sanitizeAttributeValue(element, name, value);
    super.update(sanitized, env);
  }
}
class InputValueDynamicAttribute extends DefaultDynamicProperty {
  set(dom, value) {
    dom.__setProperty("value", normalizeStringValue(value));
  }
  update(value) {
    const input = this.attribute.element,
      currentValue = input.value,
      normalizedValue = normalizeStringValue(value);
    currentValue !== normalizedValue && (input.value = normalizedValue);
  }
}
class OptionSelectedDynamicAttribute extends DefaultDynamicProperty {
  set(dom, value) {
    null != value && false !== value && dom.__setProperty("selected", true);
  }
  update(value) {
    this.attribute.element.selected = !!value;
  }
}
function normalizeValue(value) {
  return false === value || null == value || void 0 === value.toString ? null : true === value ? "" :
  // onclick function etc in SSR
  "function" == typeof value ? null : String(value);
}
class First {
  constructor(node) {
    this.node = node;
  }
  firstNode() {
    return this.node;
  }
}
class Last {
  constructor(node) {
    this.node = node;
  }
  lastNode() {
    return this.node;
  }
}
class NewTreeBuilder {
  static forInitialRender(env, cursor) {
    return new this(env, cursor.element, cursor.nextSibling).initialize();
  }
  static resume(env, block) {
    let stack = new this(env, block.parentElement(), block.reset(env)).initialize();
    return stack.pushBlock(block), stack;
  }
  constructor(env, parentNode, nextSibling) {
    this.constructing = null, this.operations = null, this.cursors = new StackImpl(), this.modifierStack = new StackImpl(), this.blockStack = new StackImpl(), this.pushElement(parentNode, nextSibling), this.env = env, this.dom = env.getAppendOperations(), this.updateOperations = env.getDOM();
  }
  initialize() {
    return this.pushAppendingBlock(), this;
  }
  debugBlocks() {
    return this.blockStack.toArray();
  }
  get element() {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    return this.cursors.current.element;
  }
  get nextSibling() {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    return this.cursors.current.nextSibling;
  }
  get hasBlocks() {
    return this.blockStack.size > 0;
  }
  block() {
    return this.blockStack.current;
  }
  popElement() {
    this.cursors.pop(), this.cursors.current;
  }
  pushAppendingBlock() {
    return this.pushBlock(new AppendingBlockImpl(this.element));
  }
  pushResettableBlock() {
    return this.pushBlock(new ResettableBlockImpl(this.element));
  }
  pushBlockList(list) {
    return this.pushBlock(new AppendingBlockList(this.element, list));
  }
  pushBlock(block, isRemote = false) {
    let current = this.blockStack.current;
    return null !== current && (isRemote || current.didAppendBounds(block)), this.__openBlock(), this.blockStack.push(block), block;
  }
  popBlock() {
    return this.block().finalize(this), this.__closeBlock(), this.blockStack.pop();
  }
  __openBlock() {}
  __closeBlock() {}
  // todo return seems unused
  openElement(tag) {
    let element = this.__openElement(tag);
    return this.constructing = element, element;
  }
  __openElement(tag) {
    return this.dom.createElement(tag, this.element);
  }
  flushElement(modifiers) {
    let parent = this.element,
      element = this.constructing;
    this.__flushElement(parent, element), this.constructing = null, this.operations = null, this.pushModifiers(modifiers), this.pushElement(element, null), this.didOpenElement(element);
  }
  __flushElement(parent, constructing) {
    this.dom.insertBefore(parent, constructing, this.nextSibling);
  }
  closeElement() {
    return this.willCloseElement(), this.popElement(), this.popModifiers();
  }
  pushRemoteElement(element, guid, insertBefore) {
    return this.__pushRemoteElement(element, guid, insertBefore);
  }
  __pushRemoteElement(element, _guid, insertBefore) {
    if (this.pushElement(element, insertBefore), void 0 === insertBefore) for (; element.lastChild;) element.removeChild(element.lastChild);
    let block = new RemoteBlock(element);
    return this.pushBlock(block, true);
  }
  popRemoteElement() {
    const block = this.popBlock();
    return this.popElement(), block;
  }
  pushElement(element, nextSibling = null) {
    this.cursors.push(new CursorImpl(element, nextSibling));
  }
  pushModifiers(modifiers) {
    this.modifierStack.push(modifiers);
  }
  popModifiers() {
    return this.modifierStack.pop();
  }
  didAppendBounds(bounds) {
    return this.block().didAppendBounds(bounds), bounds;
  }
  didAppendNode(node) {
    return this.block().didAppendNode(node), node;
  }
  didOpenElement(element) {
    return this.block().openElement(element), element;
  }
  willCloseElement() {
    this.block().closeElement();
  }
  appendText(string) {
    return this.didAppendNode(this.__appendText(string));
  }
  __appendText(text) {
    let {
        dom: dom,
        element: element,
        nextSibling: nextSibling
      } = this,
      node = dom.createTextNode(text);
    return dom.insertBefore(element, node, nextSibling), node;
  }
  __appendNode(node) {
    return this.dom.insertBefore(this.element, node, this.nextSibling), node;
  }
  __appendFragment(fragment) {
    let first = fragment.firstChild;
    if (first) {
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      let ret = new ConcreteBounds(this.element, first, fragment.lastChild);
      return this.dom.insertBefore(this.element, fragment, this.nextSibling), ret;
    }
    {
      const comment = this.__appendComment("");
      return new ConcreteBounds(this.element, comment, comment);
    }
  }
  __appendHTML(html) {
    return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);
  }
  appendDynamicHTML(value) {
    let bounds = this.trustedContent(value);
    this.didAppendBounds(bounds);
  }
  appendDynamicText(value) {
    let node = this.untrustedContent(value);
    return this.didAppendNode(node), node;
  }
  appendDynamicFragment(value) {
    let bounds = this.__appendFragment(value);
    this.didAppendBounds(bounds);
  }
  appendDynamicNode(value) {
    let node = this.__appendNode(value),
      bounds = new ConcreteBounds(this.element, node, node);
    this.didAppendBounds(bounds);
  }
  trustedContent(value) {
    return this.__appendHTML(value);
  }
  untrustedContent(value) {
    return this.__appendText(value);
  }
  appendComment(string) {
    return this.didAppendNode(this.__appendComment(string));
  }
  __appendComment(string) {
    let {
        dom: dom,
        element: element,
        nextSibling: nextSibling
      } = this,
      node = dom.createComment(string);
    return dom.insertBefore(element, node, nextSibling), node;
  }
  __setAttribute(name, value, namespace) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    this.dom.setAttribute(this.constructing, name, value, namespace);
  }
  __setProperty(name, value) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    this.constructing[name] = value;
  }
  setStaticAttribute(name, value, namespace) {
    this.__setAttribute(name, value, namespace);
  }
  setDynamicAttribute(name, value, trusting, namespace) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    let attribute = dynamicAttribute(this.constructing, name, namespace, trusting);
    return attribute.set(this, value, this.env), attribute;
  }
}
class AppendingBlockImpl {
  constructor(parent) {
    this.parent = parent, this.first = null, this.last = null, this.nesting = 0;
  }
  parentElement() {
    return this.parent;
  }
  firstNode() {
    return this.first.firstNode();
  }
  lastNode() {
    return this.last.lastNode();
  }
  openElement(element) {
    this.didAppendNode(element), this.nesting++;
  }
  closeElement() {
    this.nesting--;
  }
  didAppendNode(node) {
    0 === this.nesting && (this.first || (this.first = new First(node)), this.last = new Last(node));
  }
  didAppendBounds(bounds) {
    0 === this.nesting && (this.first || (this.first = bounds), this.last = bounds);
  }
  finalize(stack) {
    null === this.first && stack.appendComment("");
  }
}
class RemoteBlock extends AppendingBlockImpl {
  constructor(parent) {
    super(parent), registerDestructor$1(this, () => {
      // In general, you only need to clear the root of a hierarchy, and should never
      // need to clear any child nodes. This is an important constraint that gives us
      // a strong guarantee that clearing a subtree is a single DOM operation.
      // Because remote blocks are not normally physically nested inside of the tree
      // that they are logically nested inside, we manually clear remote blocks when
      // a logical parent is cleared.
      // HOWEVER, it is currently possible for a remote block to be physically nested
      // inside of the block it is logically contained inside of. This happens when
      // the remote block is appended to the end of the application's entire element.
      // The problem with that scenario is that Glimmer believes that it owns more of
      // the DOM than it actually does. The code is attempting to write past the end
      // of the Glimmer-managed root, but Glimmer isn't aware of that.
      // The correct solution to that problem is for Glimmer to be aware of the end
      // of the bounds that it owns, and once we make that change, this check could
      // be removed.
      // For now, a more targeted fix is to check whether the node was already removed
      // and avoid clearing the node if it was. In most cases this shouldn't happen,
      // so this might hide bugs where the code clears nested nodes unnecessarily,
      // so we should eventually try to do the correct fix.
      this.parentElement() === this.firstNode().parentNode && clear(this);
    });
  }
}
class ResettableBlockImpl extends AppendingBlockImpl {
  constructor(parent) {
    super(parent);
  }
  reset() {
    destroy(this);
    let nextSibling = clear(this);
    return this.first = null, this.last = null, this.nesting = 0, nextSibling;
  }
}

// FIXME: All the noops in here indicate a modelling problem
class AppendingBlockList {
  constructor(parent, boundList) {
    this.parent = parent, this.boundList = boundList, this.parent = parent, this.boundList = boundList;
  }
  parentElement() {
    return this.parent;
  }
  firstNode() {
    return this.boundList[0].firstNode();
  }
  lastNode() {
    let boundList = this.boundList;
    return boundList[boundList.length - 1].lastNode();
  }
  openElement(_element) {}
  closeElement() {}
  didAppendNode(_node) {}
  didAppendBounds(_bounds) {}
  finalize(_stack) {
    this.boundList.length;
  }
}
function clientBuilder(env, cursor) {
  return NewTreeBuilder.forInitialRender(env, cursor);
}
class UpdatingVM {
  constructor(env, {
    alwaysRevalidate = false
  }) {
    this.frameStack = new StackImpl(), this.env = env, this.dom = env.getDOM(), this.alwaysRevalidate = alwaysRevalidate;
  }
  execute(opcodes, handler) {
    this._execute(opcodes, handler);
  }
  _execute(opcodes, handler) {
    let {
      frameStack: frameStack
    } = this;
    for (this.try(opcodes, handler); !frameStack.isEmpty();) {
      let opcode = this.frame.nextStatement();
      void 0 !== opcode ? opcode.evaluate(this) : frameStack.pop();
    }
  }
  get frame() {
    return this.frameStack.current;
  }
  goto(index) {
    this.frame.goto(index);
  }
  try(ops, handler) {
    this.frameStack.push(new UpdatingVMFrame(ops, handler));
  }
  throw() {
    this.frame.handleException(), this.frameStack.pop();
  }
}
class BlockOpcode {
  constructor(state, context, bounds, children) {
    this.state = state, this.context = context, this.children = children, this.bounds = bounds;
  }
  parentElement() {
    return this.bounds.parentElement();
  }
  firstNode() {
    return this.bounds.firstNode();
  }
  lastNode() {
    return this.bounds.lastNode();
  }
  evaluate(vm) {
    vm.try(this.children, null);
  }
}
class TryOpcode extends BlockOpcode {
  evaluate(vm) {
    vm.try(this.children, this);
  }
  handleException() {
    let {
      state: state,
      bounds: bounds,
      context: {
        env: env
      }
    } = this;
    destroyChildren(this);
    let tree = NewTreeBuilder.resume(env, bounds),
      vm = state.evaluate(tree),
      children = this.children = [],
      result = vm.execute(vm => {
        vm.updateWith(this), vm.pushUpdating(children);
      });
    associateDestroyableChild(this, result.drop);
  }
  constructor(...args) {
    super(...args), this.type = "try";
  }
}
class ListItemOpcode extends TryOpcode {
  constructor(state, context, bounds, key, memo, value) {
    super(state, context, bounds, []), this.key = key, this.memo = memo, this.value = value, this.retained = false, this.index = -1;
  }
  shouldRemove() {
    return !this.retained;
  }
  reset() {
    this.retained = false;
  }
}
class ListBlockOpcode extends BlockOpcode {
  constructor(state, context, bounds, children, iterableRef) {
    super(state, context, bounds, children), this.iterableRef = iterableRef, this.type = "list-block", this.opcodeMap = new Map(), this.marker = null, this.lastIterator = valueForRef(iterableRef);
  }
  initializeChild(opcode) {
    opcode.index = this.children.length - 1, this.opcodeMap.set(opcode.key, opcode);
  }
  evaluate(vm) {
    let iterator = valueForRef(this.iterableRef);
    if (this.lastIterator !== iterator) {
      let {
          bounds: bounds
        } = this,
        {
          dom: dom
        } = vm,
        marker = this.marker = dom.createComment("");
      dom.insertAfter(bounds.parentElement(), marker, bounds.lastNode()), this.sync(iterator), this.parentElement().removeChild(marker), this.marker = null, this.lastIterator = iterator;
    }
    // Run now-updated updating opcodes
    super.evaluate(vm);
  }
  sync(iterator) {
    let {
        opcodeMap: itemMap,
        children: children
      } = this,
      currentOpcodeIndex = 0,
      seenIndex = 0;
    for (this.children = this.bounds.boundList = [];;) {
      let item = iterator.next();
      if (null === item) break;
      let opcode = children[currentOpcodeIndex],
        {
          key: key
        } = item;
      // Items that have already been found and moved will already be retained,
      // we can continue until we find the next unretained item
      for (; void 0 !== opcode && opcode.retained;) opcode = children[++currentOpcodeIndex];
      if (void 0 !== opcode && opcode.key === key) this.retainItem(opcode, item), currentOpcodeIndex++;else if (itemMap.has(key)) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
        let itemOpcode = itemMap.get(key);
        // The item opcode was seen already, so we should move it.
        if (itemOpcode.index < seenIndex) this.moveItem(itemOpcode, item, opcode);else {
          // Update the seen index, we are going to be moving this item around
          // so any other items that come before it will likely need to move as
          // well.
          seenIndex = itemOpcode.index;
          let seenUnretained = false;
          // iterate through all of the opcodes between the current position and
          // the position of the item's opcode, and determine if they are all
          // retained.
          for (let i = currentOpcodeIndex + 1; i < seenIndex; i++) if (!children[i].retained) {
            seenUnretained = true;
            break;
          }
          // If we have seen only retained opcodes between this and the matching
          // opcode, it means that all the opcodes in between have been moved
          // already, and we can safely retain this item's opcode.
          seenUnretained ? (this.moveItem(itemOpcode, item, opcode), currentOpcodeIndex++) : (this.retainItem(itemOpcode, item), currentOpcodeIndex = seenIndex + 1);
        }
      } else this.insertItem(item, opcode);
    }
    for (const opcode of children) opcode.retained ? opcode.reset() : this.deleteItem(opcode);
  }
  retainItem(opcode, item) {
    let {
      children: children
    } = this;
    updateRef(opcode.memo, item.memo), updateRef(opcode.value, item.value), opcode.retained = true, opcode.index = children.length, children.push(opcode);
  }
  insertItem(item, before) {
    let {
        opcodeMap: opcodeMap,
        bounds: bounds,
        state: state,
        children: children,
        context: {
          env: env
        }
      } = this,
      {
        key: key
      } = item,
      nextSibling = void 0 === before ? this.marker : before.firstNode(),
      elementStack = NewTreeBuilder.forInitialRender(env, {
        element: bounds.parentElement(),
        nextSibling: nextSibling
      });
    state.evaluate(elementStack).execute(vm => {
      let opcode = vm.enterItem(item);
      opcode.index = children.length, children.push(opcode), opcodeMap.set(key, opcode), associateDestroyableChild(this, opcode);
    });
  }
  moveItem(opcode, item, before) {
    let currentSibling,
      nextSibling,
      {
        children: children
      } = this;
    updateRef(opcode.memo, item.memo), updateRef(opcode.value, item.value), opcode.retained = true, void 0 === before ? move(opcode, this.marker) : (currentSibling = opcode.lastNode().nextSibling, nextSibling = before.firstNode(),
    // Items are moved throughout the algorithm, so there are cases where the
    // the items already happen to be siblings (e.g. an item in between was
    // moved before this move happened). Check to see if they are siblings
    // first before doing the move.
    currentSibling !== nextSibling && move(opcode, nextSibling)), opcode.index = children.length, children.push(opcode);
  }
  deleteItem(opcode) {
    destroy(opcode), clear(opcode), this.opcodeMap.delete(opcode.key);
  }
}
class UpdatingVMFrame {
  constructor(ops, exceptionHandler) {
    this.ops = ops, this.exceptionHandler = exceptionHandler, this.current = 0;
  }
  goto(index) {
    this.current = index;
  }
  nextStatement() {
    return this.ops[this.current++];
  }
  handleException() {
    this.exceptionHandler && this.exceptionHandler.handleException();
  }
}
class RenderResultImpl {
  constructor(env, updating, bounds, drop) {
    this.env = env, this.updating = updating, this.bounds = bounds, this.drop = drop, associateDestroyableChild(this, drop), registerDestructor$1(this, () => clear(this.bounds));
  }
  rerender({
    alwaysRevalidate = false
  } = {
    alwaysRevalidate: false
  }) {
    let {
      env: env,
      updating: updating
    } = this;
    new UpdatingVM(env, {
      alwaysRevalidate: alwaysRevalidate
    }).execute(updating, this);
  }
  parentElement() {
    return this.bounds.parentElement();
  }
  firstNode() {
    return this.bounds.firstNode();
  }
  lastNode() {
    return this.bounds.lastNode();
  }
  handleException() {}
}
class EvaluationStackImpl {
  static restore(snapshot, pc) {
    const stack = new this(snapshot.slice(), [0, -1, snapshot.length - 1, 0]);
    return stack.registers[$pc] = pc, stack.registers[$sp] = snapshot.length - 1, stack.registers[$fp] = -1, stack;
  }
  // fp -> sp
  constructor(stack = [], registers) {
    this.stack = stack, this.registers = registers;
  }
  push(value) {
    this.stack[++this.registers[$sp]] = value;
  }
  dup(position = this.registers[$sp]) {
    this.stack[++this.registers[$sp]] = this.stack[position];
  }
  copy(from, to) {
    this.stack[to] = this.stack[from];
  }
  pop(n = 1) {
    let top = this.stack[this.registers[$sp]];
    return this.registers[$sp] -= n, top;
  }
  peek(offset = 0) {
    return this.stack[this.registers[$sp] - offset];
  }
  get(offset, base = this.registers[$fp]) {
    return this.stack[base + offset];
  }
  set(value, offset, base = this.registers[$fp]) {
    this.stack[base + offset] = value;
  }
  slice(start, end) {
    return this.stack.slice(start, end);
  }
  capture(items) {
    let end = this.registers[$sp] + 1,
      start = end - items;
    return this.stack.slice(start, end);
  }
  reset() {
    this.stack.length = 0;
  }
}
class Stacks {
  constructor(scope, dynamicScope) {
    this.drop = {}, this.scope = new StackImpl(), this.dynamicScope = new StackImpl(), this.updating = new StackImpl(), this.cache = new StackImpl(), this.list = new StackImpl(), this.destroyable = new StackImpl(), this.scope.push(scope), this.dynamicScope.push(dynamicScope), this.destroyable.push(this.drop);
  }
}
class VM {
  #stacks;
  get stack() {
    return this.lowlevel.stack;
  }
  /* Registers */
  get pc() {
    return this.lowlevel.fetchRegister($pc);
  }
  #registers;
  /**
  * Fetch a value from a syscall register onto the stack.
  *
  * ## Opcodes
  *
  * - Append: `Fetch`
  *
  * ## State changes
  *
  * [!] push Eval Stack <- $register
  */
  fetch(register) {
    let value = this.fetchValue(register);
    this.stack.push(value);
  }
  /**
  * Load a value from the stack into a syscall register.
  *
  * ## Opcodes
  *
  * - Append: `Load`
  *
  * ## State changes
  *
  * [!] pop Eval Stack -> `value`
  * [$] $register <- `value`
  */
  load(register) {
    let value = this.stack.pop();
    this.loadValue(register, value);
  }
  /**
  * Load a value into a syscall register.
  *
  * ## State changes
  *
  * [$] $register <- `value`
  *
  * @utility
  */
  loadValue(register, value) {
    this.#registers[register] = value;
  }
  fetchValue(register) {
    return isLowLevelRegister(register) ? this.lowlevel.fetchRegister(register) : this.#registers[register];
  }
  // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)
  call(handle) {
    null !== handle && this.lowlevel.call(handle);
  }
  // Return to the `program` address stored in $ra
  return() {
    this.lowlevel.return();
  }
  #tree;
  constructor({
    scope: scope,
    dynamicScope: dynamicScope,
    stack: stack,
    pc: pc
  }, context, tree) {
    this.#registers = [null, null, null, null, null, null, null, null, null];
    let evalStack = EvaluationStackImpl.restore(stack, pc);
    this.#tree = tree, this.context = context, this.#stacks = new Stacks(scope, dynamicScope), this.args = new VMArgumentsImpl(), this.lowlevel = new LowLevelVM(evalStack, context, void 0, evalStack.registers), this.pushUpdating();
  }
  static initial(context, options) {
    let scope = ScopeImpl.root(options.owner, options.scope ?? {
      self: UNDEFINED_REFERENCE,
      size: 0
    });
    const state = function (pc, scope, dynamicScope) {
      return {
        pc: pc,
        scope: scope,
        dynamicScope: dynamicScope,
        stack: []
      };
    }
    /**
    * A closure captures the state of the VM for a particular block of code that is necessary to
    * re-invoke the block in the future.
    *
    * In practice, this allows us to clear the previous render and "replay" the block's execution,
    * rendering content in the same position as the first render.
    */(context.program.heap.getaddr(options.handle), scope, options.dynamicScope);
    return new VM(state, context, options.tree);
  }
  compile(block) {
    return unwrapHandle(block.compile(this.context));
  }
  get constants() {
    return this.context.program.constants;
  }
  get program() {
    return this.context.program;
  }
  get env() {
    return this.context.env;
  }
  captureClosure(args, pc = this.lowlevel.fetchRegister($pc)) {
    return {
      pc: pc,
      scope: this.scope(),
      dynamicScope: this.dynamicScope(),
      stack: this.stack.capture(args)
    };
  }
  capture(args, pc = this.lowlevel.fetchRegister($pc)) {
    return new Closure(this.captureClosure(args, pc), this.context);
  }
  /**
  * ## Opcodes
  *
  * - Append: `BeginComponentTransaction`
  *
  * ## State Changes
  *
  * [ ] create `guard` (`JumpIfNotModifiedOpcode`)
  * [ ] create `tracker` (`BeginTrackFrameOpcode`)
  * [!] push Updating Stack <- `guard`
  * [!] push Updating Stack <- `tracker`
  * [!] push Cache Stack <- `guard`
  * [!] push Tracking Stack
  */
  beginCacheGroup(name) {
    let opcodes = this.updating(),
      guard = new JumpIfNotModifiedOpcode();
    opcodes.push(guard), opcodes.push(new BeginTrackFrameOpcode(name)), this.#stacks.cache.push(guard), beginTrackFrame();
  }
  /**
  * ## Opcodes
  *
  * - Append: `CommitComponentTransaction`
  *
  * ## State Changes
  *
  * Create a new `EndTrackFrameOpcode` (`end`)
  *
  * [!] pop CacheStack -> `guard`
  * [!] pop Tracking Stack -> `tag`
  * [ ] create `end` (`EndTrackFrameOpcode`) with `guard`
  * [-] consume `tag`
  */
  commitCacheGroup() {
    let opcodes = this.updating(),
      guard = this.#stacks.cache.pop(),
      tag = endTrackFrame();
    opcodes.push(new EndTrackFrameOpcode(guard)), guard.finalize(tag, opcodes.length);
  }
  /**
  * ## Opcodes
  *
  * - Append: `Enter`
  *
  * ## State changes
  *
  * [!] push Element Stack as `block`
  * [ ] create `try` (`TryOpcode`) with `block`, capturing `args` from the Eval Stack
  *
  * Did Enter (`try`):
  * [-] associate destroyable `try`
  * [!] push Destroyable Stack <- `try`
  * [!] push Updating List <- `try`
  * [!] push Updating Stack <- `try.children`
  */
  enter(args) {
    let state = this.capture(args),
      block = this.tree().pushResettableBlock(),
      tryOpcode = new TryOpcode(state, this.context, block, []);
    this.didEnter(tryOpcode);
  }
  /**
  * ## Opcodes
  *
  * - Append: `Iterate`
  * - Update: `ListBlock`
  *
  * ## State changes
  *
  * Create a new ref for the iterator item (`value`).
  * Create a new ref for the iterator key (`key`).
  *
  * [ ] create `valueRef` (`Reference`) from `value`
  * [ ] create `keyRef` (`Reference`) from `key`
  * [!] push Eval Stack <- `valueRef`
  * [!] push Eval Stack <- `keyRef`
  * [!] push Element Stack <- `UpdatableBlock` as `block`
  * [ ] capture `closure` with *2* items from the Eval Stack
  * [ ] create `iteration` (`ListItemOpcode`) with `closure`, `block`, `key`, `keyRef` and `valueRef`
  *
  * Did Enter (`iteration`):
  * [-] associate destroyable `iteration`
  * [!] push Destroyable Stack <- `iteration`
  * [!] push Updating List <- `iteration`
  * [!] push Updating Stack <- `iteration.children`
  */
  enterItem({
    key: key,
    value: value,
    memo: memo
  }) {
    let {
        stack: stack
      } = this,
      valueRef = createIteratorItemRef(value),
      memoRef = createIteratorItemRef(memo);
    stack.push(valueRef), stack.push(memoRef);
    let state = this.capture(2),
      block = this.tree().pushResettableBlock(),
      opcode = new ListItemOpcode(state, this.context, block, key, memoRef, valueRef);
    return this.didEnter(opcode), opcode;
  }
  registerItem(opcode) {
    this.listBlock().initializeChild(opcode);
  }
  /**
  * ## Opcodes
  *
  * - Append: `EnterList`
  *
  * ## State changes
  *
  * [ ] capture `closure` with *0* items from the Eval Stack, and `$pc` from `offset`
  * [ ] create `updating` (empty `Array`)
  * [!] push Element Stack <- `list` (`BlockList`) with `updating`
  * [ ] create `list` (`ListBlockOpcode`) with `closure`, `list`, `updating` and `iterableRef`
  * [!] push List Stack <- `list`
  *
  * Did Enter (`list`):
  * [-] associate destroyable `list`
  * [!] push Destroyable Stack <- `list`
  * [!] push Updating List <- `list`
  * [!] push Updating Stack <- `list.children`
  */
  enterList(iterableRef, offset) {
    let updating = [],
      addr = this.lowlevel.target(offset),
      state = this.capture(0, addr),
      list = this.tree().pushBlockList(updating),
      opcode = new ListBlockOpcode(state, this.context, list, updating, iterableRef);
    this.#stacks.list.push(opcode), this.didEnter(opcode);
  }
  /**
  * ## Opcodes
  *
  * - Append: `Enter`
  * - Append: `Iterate`
  * - Append: `EnterList`
  * - Update: `ListBlock`
  *
  * ## State changes
  *
  * [-] associate destroyable `opcode`
  * [!] push Destroyable Stack <- `opcode`
  * [!] push Updating List <- `opcode`
  * [!] push Updating Stack <- `opcode.children`
  *
  */
  didEnter(opcode) {
    this.associateDestroyable(opcode), this.#stacks.destroyable.push(opcode), this.updateWith(opcode), this.pushUpdating(opcode.children);
  }
  /**
  * ## Opcodes
  *
  * - Append: `Exit`
  * - Append: `ExitList`
  *
  * ## State changes
  *
  * [!] pop Destroyable Stack
  * [!] pop Element Stack
  * [!] pop Updating Stack
  */
  exit() {
    this.#stacks.destroyable.pop(), this.#tree.popBlock(), this.popUpdating();
  }
  /**
  * ## Opcodes
  *
  * - Append: `ExitList`
  *
  * ## State changes
  *
  * Pop List:
  * [!] pop Destroyable Stack
  * [!] pop Element Stack
  * [!] pop Updating Stack
  *
  * [!] pop List Stack
  */
  exitList() {
    this.exit(), this.#stacks.list.pop();
  }
  /**
  * ## Opcodes
  *
  * - Append: `RootScope`
  * - Append: `VirtualRootScope`
  *
  * ## State changes
  *
  * [!] push Scope Stack
  */
  pushRootScope(size, owner) {
    let scope = ScopeImpl.sized(owner, size);
    return this.#stacks.scope.push(scope), scope;
  }
  /**
  * ## Opcodes
  *
  * - Append: `ChildScope`
  *
  * ## State changes
  *
  * [!] push Scope Stack <- `child` of current Scope
  */
  pushChildScope() {
    this.#stacks.scope.push(this.scope().child());
  }
  /**
  * ## Opcodes
  *
  * - Append: `Yield`
  *
  * ## State changes
  *
  * [!] push Scope Stack <- `scope`
  */
  pushScope(scope) {
    this.#stacks.scope.push(scope);
  }
  /**
  * ## Opcodes
  *
  * - Append: `PopScope`
  *
  * ## State changes
  *
  * [!] pop Scope Stack
  */
  popScope() {
    this.#stacks.scope.pop();
  }
  /**
  * ## Opcodes
  *
  * - Append: `PushDynamicScope`
  *
  * ## State changes:
  *
  * [!] push Dynamic Scope Stack <- child of current Dynamic Scope
  */
  pushDynamicScope() {
    let child = this.dynamicScope().child();
    return this.#stacks.dynamicScope.push(child), child;
  }
  /**
  * ## Opcodes
  *
  * - Append: `BindDynamicScope`
  *
  * ## State changes:
  *
  * [!] pop Dynamic Scope Stack `names.length` times
  */
  bindDynamicScope(names) {
    let scope = this.dynamicScope();
    for (const name of reverse(names)) scope.set(name, this.stack.pop());
  }
  /**
  * ## State changes
  *
  * - [!] push Updating Stack
  *
  * @utility
  */
  pushUpdating(list = []) {
    this.#stacks.updating.push(list);
  }
  /**
  * ## State changes
  *
  * [!] pop Updating Stack
  *
  * @utility
  */
  popUpdating() {
    return this.#stacks.updating.pop();
  }
  /**
  * ## State changes
  *
  * [!] push Updating List
  *
  * @utility
  */
  updateWith(opcode) {
    this.updating().push(opcode);
  }
  listBlock() {
    return this.#stacks.list.current;
  }
  /**
  * ## State changes
  *
  * [-] associate destroyable `child`
  *
  * @utility
  */
  associateDestroyable(child) {
    let parent = this.#stacks.destroyable.current;
    associateDestroyableChild(parent, child);
  }
  updating() {
    return this.#stacks.updating.current;
  }
  /**
  * Get Tree Builder
  */
  tree() {
    return this.#tree;
  }
  /**
  * Get current Scope
  */
  scope() {
    return this.#stacks.scope.current;
  }
  /**
  * Get current Dynamic Scope
  */
  dynamicScope() {
    return this.#stacks.dynamicScope.current;
  }
  popDynamicScope() {
    this.#stacks.dynamicScope.pop();
  }
  /// SCOPE HELPERS
  getOwner() {
    return this.scope().owner;
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  getSelf() {
    return this.scope().getSelf();
  }
  referenceForSymbol(symbol) {
    return this.scope().getSymbol(symbol);
  }
  /// EXECUTION
  execute(initialize) {
    return this._execute(initialize);
  }
  _execute(initialize) {
    let result;
    initialize && initialize(this);
    do {
      result = this.next();
    } while (!result.done);
    return result.value;
  }
  next() {
    let result,
      {
        env: env
      } = this,
      opcode = this.lowlevel.nextStatement();
    return null !== opcode ? (this.lowlevel.evaluateOuter(opcode, this), result = {
      done: false,
      value: null
    }) : (
    // Unload the stack
    this.stack.reset(), result = {
      done: true,
      value: new RenderResultImpl(env, this.popUpdating(), this.#tree.popBlock(), this.#stacks.drop)
    }), result;
  }
}
class Closure {
  constructor(state, context) {
    this.state = state, this.context = context;
  }
  evaluate(tree) {
    return new VM(this.state, this.context, tree);
  }
}
class TemplateIteratorImpl {
  constructor(vm) {
    this.vm = vm;
  }
  next() {
    return this.vm.next();
  }
  sync() {
    return this.vm.execute();
  }
}
function renderMain(context, owner, self, tree, layout, dynamicScope = new DynamicScopeImpl()) {
  let handle = unwrapHandle(layout.compile(context)),
    numSymbols = layout.symbolTable.symbols.length,
    vm = VM.initial(context, {
      scope: {
        self: self,
        size: numSymbols
      },
      dynamicScope: dynamicScope,
      tree: tree,
      handle: handle,
      owner: owner
    });
  return new TemplateIteratorImpl(vm);
}
function isSerializationFirstNode(node) {
  return "%+b:0%" === node.nodeValue;
}
class RehydratingCursor extends CursorImpl {
  constructor(element, nextSibling, startingBlockDepth) {
    super(element, nextSibling), this.startingBlockDepth = startingBlockDepth, this.candidate = null, this.injectedOmittedNode = false, this.openBlockDepth = startingBlockDepth - 1;
  }
}
class RehydrateTree extends NewTreeBuilder {
  constructor(env, parentNode, nextSibling) {
    if (super(env, parentNode, nextSibling), this.unmatchedAttributes = null, this.blockDepth = 0, nextSibling) throw new Error("Rehydration with nextSibling not supported");
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    let node = this.currentCursor.element.firstChild;
    for (; null !== node && !isOpenBlock(node);) node = node.nextSibling;
    this.candidate = node;
    const startingBlockOffset = getBlockDepth(node);
    if (0 !== startingBlockOffset) {
      // We are rehydrating from a partial tree and not the root component
      // We need to add an extra block before the first block to rehydrate correctly
      // The extra block is needed since the renderComponent API creates a synthetic component invocation which generates the extra block
      const newBlockDepth = startingBlockOffset - 1,
        newCandidate = this.dom.createComment(`%+b:${newBlockDepth}%`);
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      node.parentNode.insertBefore(newCandidate, this.candidate);
      let closingNode = node.nextSibling;
      for (; null !== closingNode && (!isCloseBlock(closingNode) || getBlockDepth(closingNode) !== startingBlockOffset);) closingNode = closingNode.nextSibling;
      const newClosingBlock = this.dom.createComment(`%-b:${newBlockDepth}%`);
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      node.parentNode.insertBefore(newClosingBlock, closingNode.nextSibling), this.candidate = newCandidate, this.startingBlockOffset = newBlockDepth;
    } else this.startingBlockOffset = 0;
  }
  get currentCursor() {
    return this.cursors.current;
  }
  get candidate() {
    return this.currentCursor ? this.currentCursor.candidate : null;
  }
  set candidate(node) {
    this.currentCursor.candidate = node;
  }
  disableRehydration(nextSibling) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    const currentCursor = this.currentCursor;
    // rehydration will be disabled until we either:
    // * hit popElement (and return to using the parent elements cursor)
    // * hit closeBlock and the next sibling is a close block comment
    //   matching the expected openBlockDepth
    currentCursor.candidate = null, currentCursor.nextSibling = nextSibling;
  }
  enableRehydration(candidate) {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    const currentCursor = this.currentCursor;
    currentCursor.candidate = candidate, currentCursor.nextSibling = null;
  }
  pushElement(element, nextSibling = null) {
    const cursor = new RehydratingCursor(element, nextSibling, this.blockDepth || 0);
    /**
    * <div>   <---------------  currentCursor.element
    *   <!--%+b:1%--> <-------  would have been removed during openBlock
    *   <div> <---------------  currentCursor.candidate -> cursor.element
    *     <!--%+b:2%--> <-----  currentCursor.candidate.firstChild -> cursor.candidate
    *     Foo
    *     <!--%-b:2%-->
    *   </div>
    *   <!--%-b:1%-->  <------  becomes currentCursor.candidate
    */
    null !== this.candidate && (cursor.candidate = element.firstChild, this.candidate = element.nextSibling), this.cursors.push(cursor);
  }
  // clears until the end of the current container
  // either the current open block or higher
  clearMismatch(candidate) {
    let current = candidate;
    const currentCursor = this.currentCursor;
    if (null !== currentCursor) {
      const openBlockDepth = currentCursor.openBlockDepth;
      if (openBlockDepth >= currentCursor.startingBlockDepth) for (; current && !(isCloseBlock(current) && openBlockDepth >= getBlockDepthWithOffset(current, this.startingBlockOffset));) current = this.remove(current);else for (; null !== current;) current = this.remove(current);
      // current cursor parentNode should be openCandidate if element
      // or openCandidate.parentNode if comment
      this.disableRehydration(current);
    }
  }
  __openBlock() {
    const {
      currentCursor: currentCursor
    } = this;
    if (null === currentCursor) return;
    const blockDepth = this.blockDepth;
    this.blockDepth++;
    const {
      candidate: candidate
    } = currentCursor;
    if (null === candidate) return;
    const {
      tagName: tagName
    } = currentCursor.element;
    isOpenBlock(candidate) && getBlockDepthWithOffset(candidate, this.startingBlockOffset) === blockDepth ? (this.candidate = this.remove(candidate), currentCursor.openBlockDepth = blockDepth) : "TITLE" !== tagName && "SCRIPT" !== tagName && "STYLE" !== tagName && this.clearMismatch(candidate);
  }
  __closeBlock() {
    const {
      currentCursor: currentCursor
    } = this;
    if (null === currentCursor) return;
    // openBlock is the last rehydrated open block
    const openBlockDepth = currentCursor.openBlockDepth;
    // this currently is the expected next open block depth
    this.blockDepth--;
    const {
      candidate: candidate
    } = currentCursor;
    let isRehydrating = false;
    if (null !== candidate)
      //assert(
      //  openBlockDepth === this.blockDepth,
      //  'when rehydrating, openBlockDepth should match this.blockDepth here'
      //);
      if (isRehydrating = true, isCloseBlock(candidate) && getBlockDepthWithOffset(candidate, this.startingBlockOffset) === openBlockDepth) {
        const nextSibling = this.remove(candidate);
        this.candidate = nextSibling, currentCursor.openBlockDepth--;
      } else
        // close the block and clear mismatch in parent container
        // we will be either at the end of the element
        // or at the end of our containing block
        this.clearMismatch(candidate), isRehydrating = false;
    if (!isRehydrating) {
      // check if nextSibling matches our expected close block
      // if so, we remove the close block comment and
      // restore rehydration after clearMismatch disabled
      const nextSibling = currentCursor.nextSibling;
      if (null !== nextSibling && isCloseBlock(nextSibling) && getBlockDepthWithOffset(nextSibling, this.startingBlockOffset) === this.blockDepth) {
        // restore rehydration state
        const candidate = this.remove(nextSibling);
        this.enableRehydration(candidate), currentCursor.openBlockDepth--;
      }
    }
  }
  __appendNode(node) {
    const {
      candidate: candidate
    } = this;
    // This code path is only used when inserting precisely one node. It needs more
    // comparison logic, but we can probably lean on the cases where this code path
    // is actually used.
    return candidate || super.__appendNode(node);
  }
  __appendHTML(html) {
    const candidateBounds = this.markerBounds();
    if (candidateBounds) {
      const first = candidateBounds.firstNode(),
        last = candidateBounds.lastNode(),
        newBounds = new ConcreteBounds(this.element, first.nextSibling, last.previousSibling),
        possibleEmptyMarker = this.remove(first);
      return this.remove(last), null !== possibleEmptyMarker && isEmpty(possibleEmptyMarker) && (this.candidate = this.remove(possibleEmptyMarker), null !== this.candidate && this.clearMismatch(this.candidate)), newBounds;
    }
    return super.__appendHTML(html);
  }
  remove(node) {
    const element = node.parentNode,
      next = node.nextSibling;
    return element.removeChild(node), next;
  }
  markerBounds() {
    const _candidate = this.candidate;
    if (_candidate && isMarker(_candidate)) {
      const first = _candidate;
      let last = first.nextSibling;
      for (; !isMarker(last);) last = last.nextSibling;
      return new ConcreteBounds(this.element, first, last);
    }
    return null;
  }
  __appendText(string) {
    const {
      candidate: candidate
    } = this;
    return candidate ? 3 === candidate.nodeType ? (candidate.nodeValue !== string && (candidate.nodeValue = string), this.candidate = candidate.nextSibling, candidate) : 8 === (node = candidate).nodeType && "%|%" === node.nodeValue || isEmpty(candidate) && "" === string ? (this.candidate = this.remove(candidate), this.__appendText(string)) : (this.clearMismatch(candidate), super.__appendText(string)) : super.__appendText(string);
    var node;
  }
  __appendComment(string) {
    const _candidate = this.candidate;
    return _candidate && 8 === _candidate.nodeType ? (_candidate.nodeValue !== string && (_candidate.nodeValue = string), this.candidate = _candidate.nextSibling, _candidate) : (_candidate && this.clearMismatch(_candidate), super.__appendComment(string));
  }
  __openElement(tag) {
    const _candidate = this.candidate;
    if (_candidate && isElement$2(_candidate) && function (candidate, tag) {
      return candidate.namespaceURI === NS_SVG ? candidate.tagName === tag : candidate.tagName === tag.toUpperCase();
    }(_candidate, tag)) return this.unmatchedAttributes = [].slice.call(_candidate.attributes), _candidate;
    if (_candidate) {
      if (isElement$2(_candidate) && "TBODY" === _candidate.tagName) return this.pushElement(_candidate, null),
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      this.currentCursor.injectedOmittedNode = true, this.__openElement(tag);
      this.clearMismatch(_candidate);
    }
    return super.__openElement(tag);
  }
  __setAttribute(name, value, namespace) {
    const unmatched = this.unmatchedAttributes;
    if (unmatched) {
      const attr = findByName(unmatched, name);
      if (attr) return attr.value !== value && (attr.value = value), void unmatched.splice(unmatched.indexOf(attr), 1);
    }
    return super.__setAttribute(name, value, namespace);
  }
  __setProperty(name, value) {
    const unmatched = this.unmatchedAttributes;
    if (unmatched) {
      const attr = findByName(unmatched, name);
      if (attr) return attr.value !== value && (attr.value = value), void unmatched.splice(unmatched.indexOf(attr), 1);
    }
    return super.__setProperty(name, value);
  }
  __flushElement(parent, constructing) {
    const {
      unmatchedAttributes: unmatched
    } = this;
    if (unmatched) {
      for (const attr of unmatched)
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
      this.constructing.removeAttribute(attr.name);
      this.unmatchedAttributes = null;
    } else super.__flushElement(parent, constructing);
  }
  willCloseElement() {
    const {
      candidate: candidate,
      currentCursor: currentCursor
    } = this;
    null !== candidate && this.clearMismatch(candidate), currentCursor && currentCursor.injectedOmittedNode && this.popElement(), super.willCloseElement();
  }
  getMarker(element, guid) {
    const marker = element.querySelector(`script[glmr="${guid}"]`);
    return marker ? castToSimple(marker) : null;
  }
  __pushRemoteElement(element, cursorId, insertBefore) {
    const marker = this.getMarker(element, cursorId);
    // when insertBefore is not present, we clear the element
    if (!marker || marker.parentNode, void 0 === insertBefore) {
      for (; null !== element.firstChild && element.firstChild !== marker;) this.remove(element.firstChild);
      insertBefore = null;
    }
    const cursor = new RehydratingCursor(element, null, this.blockDepth);
    this.cursors.push(cursor), null === marker ? this.disableRehydration(insertBefore) : this.candidate = this.remove(marker);
    const block = new RemoteBlock(element);
    return this.pushBlock(block, true);
  }
  didAppendBounds(bounds) {
    if (super.didAppendBounds(bounds), this.candidate) {
      const last = bounds.lastNode();
      this.candidate = last.nextSibling;
    }
    return bounds;
  }
}
function isOpenBlock(node) {
  return 8 === node.nodeType && 0 === node.nodeValue.lastIndexOf("%+b:", 0);
}
function isCloseBlock(node) {
  return 8 === node.nodeType && 0 === node.nodeValue.lastIndexOf("%-b:", 0);
}
function getBlockDepth(node) {
  return parseInt(node.nodeValue.slice(4), 10);
}
function getBlockDepthWithOffset(node, offset) {
  return getBlockDepth(node) - offset;
}
function isElement$2(node) {
  return 1 === node.nodeType;
}
function isMarker(node) {
  return 8 === node.nodeType && "%glmr%" === node.nodeValue;
}
function isEmpty(node) {
  return 8 === node.nodeType && "% %" === node.nodeValue;
}
function findByName(array, name) {
  for (const attr of array) if (attr.name === name) return attr;
}
function rehydrationBuilder(env, cursor) {
  return RehydrateTree.forInitialRender(env, cursor);
}

// In normal TypeScript, this modifier is essentially an opaque token that just
// needs to be importable. Declaring it with a unique interface like this,
// however, gives tools like Glint (that *do* have a richer notion of what it
// is) a place to install more detailed type information.
// eslint-disable-next-line @typescript-eslint/no-empty-object-type

// SAFETY: at the time of writing, the cast here is from `{}` to `OnModifier`,
// which makes it strictly safer to use outside this module because it is not
// usable as "any non-null item", which is what `{}` means, without loss of any
// information from the type itself.
const on = on$1;

const MUTABLE_CELL = Symbol('MUTABLE_CELL');

const RootTemplate = templateFactory(
/*
  {{component this}}
*/
{
  "id": "yTlmws8O",
  "block": "[[[46,[30,0],null,null,null]],[],[\"component\"]]",
  "moduleName": "packages/@ember/-internals/glimmer/lib/templates/root.hbs",
  "isStrictMode": true
});
const InputTemplate = templateFactory(
/*
  <input
  {{!-- for compatibility --}}
  id={{this.id}}
  class={{this.class}}

  ...attributes

  type={{this.type}}
  checked={{this.checked}}
  value={{this.value}}

  {{on "change" this.change}}
  {{on "input" this.input}}
  {{on "keyup" this.keyUp}}
  {{on "paste" this.valueDidChange}}
  {{on "cut" this.valueDidChange}}
/>
*/
{
  "id": "Cc/BCoQJ",
  "block": "[[[11,\"input\"],[16,1,[30,0,[\"id\"]]],[16,0,[30,0,[\"class\"]]],[17,1],[16,4,[30,0,[\"type\"]]],[16,\"checked\",[30,0,[\"checked\"]]],[16,2,[30,0,[\"value\"]]],[4,[32,0],[\"change\",[30,0,[\"change\"]]],null],[4,[32,0],[\"input\",[30,0,[\"input\"]]],null],[4,[32,0],[\"keyup\",[30,0,[\"keyUp\"]]],null],[4,[32,0],[\"paste\",[30,0,[\"valueDidChange\"]]],null],[4,[32,0],[\"cut\",[30,0,[\"valueDidChange\"]]],null],[12],[13]],[\"&attrs\"],[]]",
  "moduleName": "packages/@ember/-internals/glimmer/lib/templates/input.hbs",
  "scope": () => [on],
  "isStrictMode": true
});
function NOOP$1() {}
class InternalComponent {
  // Override this
  static toString() {
    return 'internal component';
  }
  constructor(owner, args, caller) {
    this.owner = owner;
    this.args = args;
    this.caller = caller;
    setOwner$1(this, owner);
  }

  /**
   * The default HTML id attribute. We don't really _need_ one, this is just
   * added for compatibility as it's hard to tell if people rely on it being
   * present, and it doens't really hurt.
   *
   * However, don't rely on this internally, like passing it to `getElementId`.
   * This can be (and often is) overriden by passing an `id` attribute on the
   * invocation, which shadows this default id via `...attributes`.
   */
  get id() {
    return guidFor(this);
  }

  /**
   * The default HTML class attribute. Similar to the above, we don't _need_
   * them, they are just added for compatibility as it's similarly hard to tell
   * if people rely on it in their CSS etc, and it doens't really hurt.
   */
  get class() {
    return 'ember-view';
  }
  validateArguments() {
    for (let name of Object.keys(this.args.named)) {
      if (!this.isSupportedArgument(name)) {
        this.onUnsupportedArgument(name);
      }
    }
  }
  named(name) {
    let ref = this.args.named[name];
    return ref ? valueForRef(ref) : undefined;
  }
  positional(index) {
    let ref = this.args.positional[index];
    return ref ? valueForRef(ref) : undefined;
  }
  listenerFor(name) {
    let listener = this.named(name);
    if (listener) {
      return listener;
    } else {
      return NOOP$1;
    }
  }
  isSupportedArgument(_name) {
    return false;
  }
  onUnsupportedArgument(_name) {}
  toString() {
    return `<${this.constructor}:${guidFor(this)}>`;
  }
}
const OPAQUE_CONSTRUCTOR_MAP = new WeakMap();
function opaquify(constructor, template) {
  let _opaque = {
    // Factory interface
    create() {
      throw assert$1();
    },
    toString() {
      return constructor.toString();
    }
  };
  let opaque = _opaque;
  OPAQUE_CONSTRUCTOR_MAP.set(opaque, constructor);
  setInternalComponentManager(INTERNAL_COMPONENT_MANAGER, opaque);
  setComponentTemplate(template, opaque);
  return opaque;
}
function deopaquify(opaque) {
  let constructor = OPAQUE_CONSTRUCTOR_MAP.get(opaque);
  return constructor;
}
const CAPABILITIES$3 = {
  dynamicLayout: false,
  dynamicTag: false,
  prepareArgs: false,
  createArgs: true,
  attributeHook: false,
  elementHook: false,
  createCaller: true,
  dynamicScope: false,
  updateHook: false,
  createInstance: true,
  wrapped: false,
  willDestroy: false,
  hasSubOwner: false
};
class InternalManager {
  getCapabilities() {
    return CAPABILITIES$3;
  }
  create(owner, definition, args, _env, _dynamicScope, caller) {
    let ComponentClass = deopaquify(definition);
    let instance = new ComponentClass(owner, args.capture(), valueForRef(caller));
    untrack(instance['validateArguments'].bind(instance));
    return instance;
  }
  didCreate() {}
  didUpdate() {}
  didRenderLayout() {}
  didUpdateLayout() {}
  getDebugName(definition) {
    return definition.toString();
  }
  getSelf(instance) {
    return createConstRef(instance);
  }
  getDestroyable(instance) {
    return instance;
  }
}
const INTERNAL_COMPONENT_MANAGER = new InternalManager();
const UNINITIALIZED = Object.freeze({});
function elementForEvent(event) {
  return event.target;
}
function valueForEvent(event) {
  return elementForEvent(event).value;
}
function devirtualize(callback) {
  return event => callback(valueForEvent(event), event);
}
function valueFrom(reference) {
  if (reference === undefined) {
    return new LocalValue(undefined);
  } else if (isConstRef(reference)) {
    return new LocalValue(valueForRef(reference));
  } else if (isUpdatableRef(reference)) {
    return new UpstreamValue(reference);
  } else {
    return new ForkedValue(reference);
  }
}
class LocalValue {
  static {
    decorateFieldV2$1(this.prototype, "value", [tracked]);
  }
  #value = (initializeDeferredDecorator$1(this, "value"), void 0);
  constructor(value) {
    this.value = value;
  }
  get() {
    return this.value;
  }
  set(value) {
    this.value = value;
  }
}
class UpstreamValue {
  constructor(reference) {
    this.reference = reference;
  }
  get() {
    return valueForRef(this.reference);
  }
  set(value) {
    updateRef(this.reference, value);
  }
}
class ForkedValue {
  local;
  upstream;
  lastUpstreamValue = UNINITIALIZED;
  constructor(reference) {
    this.upstream = new UpstreamValue(reference);
  }
  get() {
    let upstreamValue = this.upstream.get();
    if (upstreamValue !== this.lastUpstreamValue) {
      this.lastUpstreamValue = upstreamValue;
      this.local = new LocalValue(upstreamValue);
    }
    return this.local.get();
  }
  set(value) {
    this.local.set(value);
  }
}
class AbstractInput extends InternalComponent {
  validateArguments() {
    super.validateArguments();
  }
  _value = valueFrom(this.args.named['value']);
  get value() {
    return this._value.get();
  }
  set value(value) {
    this._value.set(value);
  }
  valueDidChange(event) {
    this.value = valueForEvent(event);
  }

  /**
   * The `change` and `input` actions need to be overridden in the `Input`
   * subclass. Unfortunately, some ember-source builds currently uses babel
   * loose mode to transpile its classes. Having the `@action` decorator on the
   * super class creates a getter on the prototype, and when the subclass
   * overrides the method, the loose mode transpilation would emit something
   * like `Subclass.prototype['change'] = function change() { ... }`, which
   * fails because `prototype['change']` is getter-only/readonly. The correct
   * solution is to use `Object.defineProperty(prototype, 'change', ...)` but
   * that requires disabling loose mode. For now, the workaround is to add the
   * decorator only on the subclass. This is more of a configuration issue on
   * our own builds and doesn't really affect apps.
   */

  /* @action */
  static {
    decorateMethodV2(this.prototype, "valueDidChange", [action]);
  }
  change(event) {
    this.valueDidChange(event);
  }

  /* @action */
  input(event) {
    this.valueDidChange(event);
  }
  keyUp(event) {
    switch (event.key) {
      case 'Enter':
        this.listenerFor('enter')(event);
        this.listenerFor('insert-newline')(event);
        break;
      case 'Escape':
        this.listenerFor('escape-press')(event);
        break;
    }
  }
  static {
    decorateMethodV2(this.prototype, "keyUp", [action]);
  }
  listenerFor(name) {
    let listener = super.listenerFor(name);
    if (this.isVirtualEventListener(name, listener)) {
      return devirtualize(listener);
    } else {
      return listener;
    }
  }
  isVirtualEventListener(name, _listener) {
    let virtualEvents = ['enter', 'insert-newline', 'escape-press'];
    return virtualEvents.indexOf(name) !== -1;
  }
}

/**
@module @ember/component
*/
let isValidInputType;
if (hasDOM) {
  const INPUT_TYPES = Object.create(null);
  const INPUT_ELEMENT = document.createElement('input');
  INPUT_TYPES[''] = false;
  INPUT_TYPES['text'] = true;
  INPUT_TYPES['checkbox'] = true;
  isValidInputType = type => {
    let isValid = INPUT_TYPES[type];
    if (isValid === undefined) {
      try {
        INPUT_ELEMENT.type = type;
        isValid = INPUT_ELEMENT.type === type;
      } catch (_e) {
        isValid = false;
      } finally {
        INPUT_ELEMENT.type = 'text';
      }
      INPUT_TYPES[type] = isValid;
    }
    return isValid;
  };
} else {
  isValidInputType = type => type !== '';
}

/**
  See [Ember.Templates.components.Input](/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input).

  @method input
  @for Ember.Templates.helpers
  @param {Hash} options
  @public
  */

/**
  An opaque interface which can be imported and used in strict-mode
  templates to call <Input>.

  See [Ember.Templates.components.Input](/ember/release/classes/Ember.Templates.components/methods/Input?anchor=Input).

  @for @ember/component
  @method Input
  @see {Ember.Templates.components.Input}
  @public
**/

/**
  The `Input` component lets you create an HTML `<input>` element.

  ```handlebars
  <Input @value="987" />
  ```

  creates an `<input>` element with `type="text"` and value set to 987.

  ### Text field

  If no `type` argument is specified, a default of type 'text' is used.

  ```handlebars
  Search:
  <Input @value={{this.searchWord}} />
  ```

  In this example, the initial value in the `<input>` will be set to the value of
  `this.searchWord`. If the user changes the text, the value of `this.searchWord` will also be
  updated.

  ### Actions

  The `Input` component takes a number of arguments with callbacks that are invoked in response to
  user events.

  * `enter`
  * `insert-newline`
  * `escape-press`
  * `focus-in`
  * `focus-out`
  * `key-down`
  * `key-press`
  * `key-up`

  These callbacks are passed to `Input` like this:

  ```handlebars
  <Input @value={{this.searchWord}} @enter={{this.query}} />
  ```

  Starting with Ember Octane, we recommend using the `{{on}}` modifier to call actions
  on specific events, such as the input event.

  ```handlebars
  <label for="input-name">Name:</label>
  <Input
    @id="input-name"
    @value={{this.name}}
    {{on "input" this.validateName}}
  />
  ```

  The event name (e.g. `focusout`, `input`, `keydown`) always follows the casing
  that the HTML standard uses.

  ### `<input>` HTML Attributes to Avoid

  In most cases, if you want to pass an attribute to the underlying HTML `<input>` element, you
  can pass the attribute directly, just like any other Ember component.

  ```handlebars
  <Input @type="text" size="10" />
  ```

  In this example, the `size` attribute will be applied to the underlying `<input>` element in the
  outputted HTML.

  However, there are a few attributes where you **must** use the `@` version.

  * `@type`: This argument is used to control which Ember component is used under the hood
  * `@value`: The `@value` argument installs a two-way binding onto the element. If you wanted a
    one-way binding, use `<input>` with the `value` property and the `input` event instead.
  * `@checked` (for checkboxes): like `@value`, the `@checked` argument installs a two-way binding
    onto the element. If you wanted a one-way binding, use `<input type="checkbox">` with
    `checked` and the `input` event instead.

  ### Checkbox

  To create an `<input type="checkbox">`:

  ```handlebars
  Emberize Everything:
  <Input @type="checkbox" @checked={{this.isEmberized}} name="isEmberized" />
  ```

  This will bind the checked state of this checkbox to the value of `isEmberized` -- if either one
  changes, it will be reflected in the other.

  @method Input
  @for Ember.Templates.components
  @param {Hash} options
  @public
*/
class _Input extends AbstractInput {
  static toString() {
    return 'Input';
  }

  /**
   * The HTML class attribute.
   */
  get class() {
    if (this.isCheckbox) {
      return 'ember-checkbox ember-view';
    } else {
      return 'ember-text-field ember-view';
    }
  }

  /**
   * The HTML type attribute.
   */
  get type() {
    let type = this.named('type');
    if (type === null || type === undefined) {
      return 'text';
    }
    return isValidInputType(type) ? type : 'text';
  }
  get isCheckbox() {
    return this.named('type') === 'checkbox';
  }
  _checked = valueFrom(this.args.named['checked']);
  get checked() {
    if (this.isCheckbox) {
      return this._checked.get();
    } else {
      return undefined;
    }
  }
  set checked(checked) {
    this._checked.set(checked);
  }
  change(event) {
    if (this.isCheckbox) {
      this.checkedDidChange(event);
    } else {
      super.change(event);
    }
  }
  static {
    decorateMethodV2(this.prototype, "change", [action]);
  }
  input(event) {
    if (!this.isCheckbox) {
      super.input(event);
    }
  }
  static {
    decorateMethodV2(this.prototype, "input", [action]);
  }
  checkedDidChange(event) {
    let element = event.target;
    this.checked = element.checked;
  }
  static {
    decorateMethodV2(this.prototype, "checkedDidChange", [action]);
  }
  isSupportedArgument(name) {
    let supportedArguments = ['type', 'value', 'checked', 'enter', 'insert-newline', 'escape-press'];
    return supportedArguments.indexOf(name) !== -1 || super.isSupportedArgument(name);
  }
}
const Input = opaquify(_Input, InputTemplate);
const LinkToTemplate = templateFactory(
/*
  <a
  {{!-- for compatibility --}}
  id={{this.id}}
  class={{this.class}}

  {{!-- deprecated attribute bindings --}}
  role={{this.role}}
  title={{this.title}}
  rel={{this.rel}}
  tabindex={{this.tabindex}}
  target={{this.target}}

  ...attributes

  href={{this.href}}

  {{on 'click' this.click}}
>{{yield}}</a>
*/
{
  "id": "7Z3LFeO/",
  "block": "[[[11,3],[16,1,[30,0,[\"id\"]]],[16,0,[30,0,[\"class\"]]],[16,\"role\",[30,0,[\"role\"]]],[16,\"title\",[30,0,[\"title\"]]],[16,\"rel\",[30,0,[\"rel\"]]],[16,\"tabindex\",[30,0,[\"tabindex\"]]],[16,\"target\",[30,0,[\"target\"]]],[17,1],[16,6,[30,0,[\"href\"]]],[4,[32,0],[\"click\",[30,0,[\"click\"]]],null],[12],[18,2,null],[13]],[\"&attrs\",\"&default\"],[\"yield\"]]",
  "moduleName": "packages/@ember/-internals/glimmer/lib/templates/link-to.hbs",
  "scope": () => [on],
  "isStrictMode": true
});
const EMPTY_ARRAY = [];
const EMPTY_QUERY_PARAMS = {};
function isMissing(value) {
  return value === null || value === undefined;
}
function isPresent$1(value) {
  return !isMissing(value);
}
function isQueryParams(value) {
  return typeof value === 'object' && value !== null && value['isQueryParams'] === true;
}

/**
  The `LinkTo` component renders a link to the supplied `routeName` passing an optionally
  supplied model to the route as its `model` context of the route. The block for `LinkTo`
  becomes the contents of the rendered element:

  ```handlebars
  <LinkTo @route='photoGallery'>
    Great Hamster Photos
  </LinkTo>
  ```

  This will result in:

  ```html
  <a href="/hamster-photos">
    Great Hamster Photos
  </a>
  ```

  ### Disabling the `LinkTo` component

  The `LinkTo` component can be disabled by using the `disabled` argument. A disabled link
  doesn't result in a transition when activated, and adds the `disabled` class to the `<a>`
  element.

  (The class name to apply to the element can be overridden by using the `disabledClass`
  argument)

  ```handlebars
  <LinkTo @route='photoGallery' @disabled={{true}}>
    Great Hamster Photos
  </LinkTo>
  ```

  ### Handling `href`

  `<LinkTo>` will use your application's Router to fill the element's `href` property with a URL
  that matches the path to the supplied `routeName`.

  ### Handling current route

  The `LinkTo` component will apply a CSS class name of 'active' when the application's current
  route matches the supplied routeName. For example, if the application's current route is
  'photoGallery.recent', then the following invocation of `LinkTo`:

  ```handlebars
  <LinkTo @route='photoGallery.recent'>
    Great Hamster Photos
  </LinkTo>
  ```

  will result in

  ```html
  <a href="/hamster-photos/this-week" class="active">
    Great Hamster Photos
  </a>
  ```

  The CSS class used for active classes can be customized by passing an `activeClass` argument:

  ```handlebars
  <LinkTo @route='photoGallery.recent' @activeClass="current-url">
    Great Hamster Photos
  </LinkTo>
  ```

  ```html
  <a href="/hamster-photos/this-week" class="current-url">
    Great Hamster Photos
  </a>
  ```

  ### Keeping a link active for other routes

  If you need a link to be 'active' even when it doesn't match the current route, you can use the
  `current-when` argument.

  ```handlebars
  <LinkTo @route='photoGallery' @current-when='photos'>
    Photo Gallery
  </LinkTo>
  ```

  This may be helpful for keeping links active for:

  * non-nested routes that are logically related
  * some secondary menu approaches
  * 'top navigation' with 'sub navigation' scenarios

  A link will be active if `current-when` is `true` or the current
  route is the route this link would transition to.

  To match multiple routes 'space-separate' the routes:

  ```handlebars
  <LinkTo @route='gallery' @current-when='photos drawings paintings'>
    Art Gallery
  </LinkTo>
  ```

  ### Supplying a model

  An optional `model` argument can be used for routes whose
  paths contain dynamic segments. This argument will become
  the model context of the linked route:

  ```javascript
  Router.map(function() {
    this.route("photoGallery", {path: "hamster-photos/:photo_id"});
  });
  ```

  ```handlebars
  <LinkTo @route='photoGallery' @model={{this.aPhoto}}>
    {{aPhoto.title}}
  </LinkTo>
  ```

  ```html
  <a href="/hamster-photos/42">
    Tomster
  </a>
  ```

  ### Supplying multiple models

  For deep-linking to route paths that contain multiple
  dynamic segments, the `models` argument can be used.

  As the router transitions through the route path, each
  supplied model argument will become the context for the
  route with the dynamic segments:

  ```javascript
  Router.map(function() {
    this.route("photoGallery", { path: "hamster-photos/:photo_id" }, function() {
      this.route("comment", {path: "comments/:comment_id"});
    });
  });
  ```

  This argument will become the model context of the linked route:

  ```handlebars
  <LinkTo @route='photoGallery.comment' @models={{array this.aPhoto this.comment}}>
    {{comment.body}}
  </LinkTo>
  ```

  ```html
  <a href="/hamster-photos/42/comments/718">
    A+++ would snuggle again.
  </a>
  ```

  ### Supplying an explicit dynamic segment value

  If you don't have a model object available to pass to `LinkTo`,
  an optional string or integer argument can be passed for routes whose
  paths contain dynamic segments. This argument will become the value
  of the dynamic segment:

  ```javascript
  Router.map(function() {
    this.route("photoGallery", { path: "hamster-photos/:photo_id" });
  });
  ```

  ```handlebars
  <LinkTo @route='photoGallery' @model={{aPhotoId}}>
    {{this.aPhoto.title}}
  </LinkTo>
  ```

  ```html
  <a href="/hamster-photos/42">
    Tomster
  </a>
  ```

  When transitioning into the linked route, the `model` hook will
  be triggered with parameters including this passed identifier.

  ### Supplying query parameters

  If you need to add optional key-value pairs that appear to the right of the ? in a URL,
  you can use the `query` argument.

  ```handlebars
  <LinkTo @route='photoGallery' @query={{hash page=1 per_page=20}}>
    Great Hamster Photos
  </LinkTo>
  ```

  This will result in:

  ```html
  <a href="/hamster-photos?page=1&per_page=20">
    Great Hamster Photos
  </a>
  ```

  @for Ember.Templates.components
  @method LinkTo
  @public
*/

/**
  @module @ember/routing
*/

/**
  See [Ember.Templates.components.LinkTo](/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo).

  @for Ember.Templates.helpers
  @method link-to
  @see {Ember.Templates.components.LinkTo}
  @public
**/

/**
  An opaque interface which can be imported and used in strict-mode
  templates to call <LinkTo>.

  See [Ember.Templates.components.LinkTo](/ember/release/classes/Ember.Templates.components/methods/input?anchor=LinkTo).

  @for @ember/routing
  @method LinkTo
  @see {Ember.Templates.components.LinkTo}
  @public
**/

class _LinkTo extends InternalComponent {
  static toString() {
    return 'LinkTo';
  }
  static {
    decorateFieldV2$1(this.prototype, "routing", [service('-routing')]);
  }
  #routing = (initializeDeferredDecorator$1(this, "routing"), void 0);
  validateArguments() {
    super.validateArguments();
  }
  get class() {
    let classes = 'ember-view';
    if (this.isActive) {
      classes += this.classFor('active');
      if (this.willBeActive === false) {
        classes += ' ember-transitioning-out';
      }
    } else if (this.willBeActive) {
      classes += ' ember-transitioning-in';
    }
    if (this.isLoading) {
      classes += this.classFor('loading');
    }
    if (this.isDisabled) {
      classes += this.classFor('disabled');
    }
    return classes;
  }
  get href() {
    if (this.isLoading) {
      return '#';
    }
    let {
      routing,
      route,
      models,
      query
    } = this;
    // TODO: can we narrow this down to QP changes only?
    consumeTag(tagFor(routing, 'currentState'));
    {
      return routing.generateURL(route, models, query);
    }
  }
  click(event) {
    if (!isSimpleClick(event)) {
      return;
    }
    let element = event.currentTarget;
    let isSelf = element.target === '' || element.target === '_self';
    if (isSelf) {
      this.preventDefault(event);
    } else {
      return;
    }
    if (this.isDisabled) {
      return;
    }
    if (this.isLoading) {
      return;
    }
    let {
      routing,
      route,
      models,
      query,
      replace
    } = this;
    let payload = {
      transition: undefined
    };
    flaggedInstrument('interaction.link-to', payload, () => {
      payload.transition = routing.transitionTo(route, models, query, replace);
    });
  }
  static {
    decorateMethodV2(this.prototype, "click", [action]);
  }
  get route() {
    if ('route' in this.args.named) {
      let route = this.named('route');
      return route && this.namespaceRoute(route);
    } else {
      return this.currentRoute;
    }
  }

  // GH #17963
  currentRouteCache = createCache(() => {
    consumeTag(tagFor(this.routing, 'currentState'));
    return untrack(() => this.routing.currentRouteName);
  });
  get currentRoute() {
    return getValue(this.currentRouteCache);
  }

  // TODO: not sure why generateURL takes {}[] instead of unknown[]
  // eslint-disable-next-line @typescript-eslint/no-empty-object-type
  get models() {
    if ('models' in this.args.named) {
      let models = this.named('models');
      return models;
    } else if ('model' in this.args.named) {
      // eslint-disable-next-line @typescript-eslint/no-empty-object-type
      return [this.named('model')];
    } else {
      return EMPTY_ARRAY;
    }
  }
  get query() {
    if ('query' in this.args.named) {
      let query = this.named('query');
      return {
        ...query
      };
    } else {
      return EMPTY_QUERY_PARAMS;
    }
  }
  get replace() {
    return this.named('replace') === true;
  }
  get isActive() {
    return this.isActiveForState(this.routing.currentState);
  }
  get willBeActive() {
    let current = this.routing.currentState;
    let target = this.routing.targetState;
    if (current === target) {
      return null;
    } else {
      return this.isActiveForState(target);
    }
  }
  get isLoading() {
    return isMissing(this.route) || this.models.some(model => isMissing(model));
  }
  get isDisabled() {
    return Boolean(this.named('disabled'));
  }
  get isEngine() {
    let owner = this.owner;
    return getEngineParent(owner) !== undefined;
  }
  get engineMountPoint() {
    let owner = this.owner;
    return owner.mountPoint;
  }
  classFor(state) {
    let className = this.named(`${state}Class`);
    if (className === true || isMissing(className)) {
      return ` ${state}`;
    } else if (className) {
      return ` ${className}`;
    } else {
      return '';
    }
  }
  namespaceRoute(route) {
    let {
      engineMountPoint
    } = this;
    if (engineMountPoint === undefined) {
      return route;
    } else if (route === 'application') {
      return engineMountPoint;
    } else {
      return `${engineMountPoint}.${route}`;
    }
  }
  isActiveForState(state) {
    if (!isPresent$1(state)) {
      return false;
    }
    if (this.isLoading) {
      return false;
    }
    let currentWhen = this.named('current-when');
    if (typeof currentWhen === 'boolean') {
      return currentWhen;
    } else if (typeof currentWhen === 'string') {
      let {
        models,
        routing
      } = this;
      return currentWhen.split(' ').some(route => routing.isActiveForRoute(models, undefined, this.namespaceRoute(route), state));
    } else {
      let {
        route,
        models,
        query,
        routing
      } = this;
      return routing.isActiveForRoute(models, query, route, state);
    }
  }
  preventDefault(event) {
    event.preventDefault();
  }
  isSupportedArgument(name) {
    let supportedArguments = ['route', 'model', 'models', 'query', 'replace', 'disabled', 'current-when', 'activeClass', 'loadingClass', 'disabledClass'];
    return supportedArguments.indexOf(name) !== -1 || super.isSupportedArgument(name);
  }
}
let {
  prototype
} = _LinkTo;
let descriptorFor = (target, property) => {
  if (target) {
    return Object.getOwnPropertyDescriptor(target, property) || descriptorFor(Object.getPrototypeOf(target), property);
  } else {
    return null;
  }
};

// @href
{
  let superOnUnsupportedArgument = prototype['onUnsupportedArgument'];
  Object.defineProperty(prototype, 'onUnsupportedArgument', {
    configurable: true,
    enumerable: false,
    value: function onUnsupportedArgument(name) {
      if (name === 'href') ; else {
        superOnUnsupportedArgument.call(this, name);
      }
    }
  });
}

// QP
{
  let superModelsDescriptor = descriptorFor(prototype, 'models');
  let superModelsGetter = superModelsDescriptor.get;
  Object.defineProperty(prototype, 'models', {
    configurable: true,
    enumerable: false,
    // eslint-disable-next-line @typescript-eslint/no-empty-object-type
    get: function models() {
      let models = superModelsGetter.call(this);
      if (models.length > 0 && !('query' in this.args.named)) {
        if (isQueryParams(models[models.length - 1])) {
          models = models.slice(0, -1);
        }
      }
      return models;
    }
  });
  let superQueryDescriptor = descriptorFor(prototype, 'query');
  let superQueryGetter = superQueryDescriptor.get;
  Object.defineProperty(prototype, 'query', {
    configurable: true,
    enumerable: false,
    // eslint-disable-next-line @typescript-eslint/no-empty-object-type
    get: function query() {
      if ('query' in this.args.named) {
        let qp = superQueryGetter.call(this);
        if (isQueryParams(qp)) {
          return qp.values ?? EMPTY_QUERY_PARAMS;
        } else {
          return qp;
        }
      } else {
        let models = superModelsGetter.call(this);
        if (models.length > 0) {
          let qp = models[models.length - 1];
          if (isQueryParams(qp) && qp.values !== null) {
            return qp.values;
          }
        }
        return EMPTY_QUERY_PARAMS;
      }
    }
  });
}

// Positional Arguments
{
  let superOnUnsupportedArgument = prototype['onUnsupportedArgument'];
  Object.defineProperty(prototype, 'onUnsupportedArgument', {
    configurable: true,
    enumerable: false,
    value: function onUnsupportedArgument(name) {
      if (name !== 'params') {
        superOnUnsupportedArgument.call(this, name);
      }
    }
  });
}
const LinkTo = opaquify(_LinkTo, LinkToTemplate);
const TextareaTemplate = templateFactory(
/*
  <textarea
  {{!-- for compatibility --}}
  id={{this.id}}
  class={{this.class}}

  ...attributes

  value={{this.value}}

  {{on "change" this.change}}
  {{on "input" this.input}}
  {{on "keyup" this.keyUp}}
  {{on "paste" this.valueDidChange}}
  {{on "cut" this.valueDidChange}}
/>
*/
{
  "id": "KVdeMchh",
  "block": "[[[11,\"textarea\"],[16,1,[30,0,[\"id\"]]],[16,0,[30,0,[\"class\"]]],[17,1],[16,2,[30,0,[\"value\"]]],[4,[32,0],[\"change\",[30,0,[\"change\"]]],null],[4,[32,0],[\"input\",[30,0,[\"input\"]]],null],[4,[32,0],[\"keyup\",[30,0,[\"keyUp\"]]],null],[4,[32,0],[\"paste\",[30,0,[\"valueDidChange\"]]],null],[4,[32,0],[\"cut\",[30,0,[\"valueDidChange\"]]],null],[12],[13]],[\"&attrs\"],[]]",
  "moduleName": "packages/@ember/-internals/glimmer/lib/templates/textarea.hbs",
  "scope": () => [on],
  "isStrictMode": true
});

/**
@module @ember/component
*/

class _Textarea extends AbstractInput {
  static toString() {
    return 'Textarea';
  }
  get class() {
    return 'ember-text-area ember-view';
  }

  // See abstract-input.ts for why these are needed

  change(event) {
    super.change(event);
  }
  static {
    decorateMethodV2(this.prototype, "change", [action]);
  }
  input(event) {
    super.input(event);
  }
  static {
    decorateMethodV2(this.prototype, "input", [action]);
  }
  isSupportedArgument(name) {
    let supportedArguments = ['type', 'value', 'enter', 'insert-newline', 'escape-press'];
    return supportedArguments.indexOf(name) !== -1 || super.isSupportedArgument(name);
  }
}
const Textarea = opaquify(_Textarea, TextareaTemplate);

/**
 * @deprecated
 */
function unwrapTemplate(template) {
  if (template.result === 'error') {
    throw new Error(`Compile Error: ${template.problem} @ ${template.span.start}..${template.span.end}`);
  }
  return template;
}
function isTemplateFactory(template) {
  return typeof template === 'function';
}
function referenceForParts(rootRef, parts) {
  let isAttrs = parts[0] === 'attrs';

  // TODO deprecate this
  if (isAttrs) {
    parts.shift();
    if (parts.length === 1) {
      return childRefFor(rootRef, parts[0]);
    }
  }
  return childRefFromParts(rootRef, parts);
}
function parseAttributeBinding(microsyntax) {
  let colonIndex = microsyntax.indexOf(':');
  if (colonIndex === -1) {
    return [microsyntax, microsyntax, true];
  } else {
    let prop = microsyntax.substring(0, colonIndex);
    let attribute = microsyntax.substring(colonIndex + 1);
    return [prop, attribute, false];
  }
}
function installAttributeBinding(component, rootRef, parsed, operations) {
  let [prop, attribute, isSimple] = parsed;
  if (attribute === 'id') {
    // SAFETY: `get` could not infer the type of `prop` and just gave us `unknown`.
    //         we may want to throw an error in the future if the value isn't string or null/undefined.
    let elementId = get$1(component, prop);
    if (elementId === undefined || elementId === null) {
      elementId = component.elementId;
    }
    let elementIdRef = createPrimitiveRef(elementId);
    operations.setAttribute('id', elementIdRef, true, null);
    return;
  }
  let isPath = prop.indexOf('.') > -1;
  let reference = isPath ? referenceForParts(rootRef, prop.split('.')) : childRefFor(rootRef, prop);
  operations.setAttribute(attribute, reference, false, null);
}
function createClassNameBindingRef(rootRef, microsyntax, operations) {
  let parts = microsyntax.split(':');
  let [prop, truthy, falsy] = parts;
  let isStatic = prop === '';
  if (isStatic) {
    operations.setAttribute('class', createPrimitiveRef(truthy), true, null);
  } else {
    let isPath = prop.indexOf('.') > -1;
    let parts = isPath ? prop.split('.') : [];
    let value = isPath ? referenceForParts(rootRef, parts) : childRefFor(rootRef, prop);
    let ref;
    if (truthy === undefined) {
      ref = createSimpleClassNameBindingRef(value, isPath ? parts[parts.length - 1] : prop);
    } else {
      ref = createColonClassNameBindingRef(value, truthy, falsy);
    }
    operations.setAttribute('class', ref, false, null);
  }
}
function createSimpleClassNameBindingRef(inner, path) {
  let dasherizedPath;
  return createComputeRef(() => {
    let value = valueForRef(inner);
    if (value === true) {
      return dasherizedPath || (dasherizedPath = dasherize$1(path));
    } else if (value || value === 0) {
      return String(value);
    } else {
      return null;
    }
  });
}
function createColonClassNameBindingRef(inner, truthy, falsy) {
  return createComputeRef(() => {
    return valueForRef(inner) ? truthy : falsy;
  });
}
function NOOP() {}

/**
  @module ember
*/

/**
  Represents the internal state of the component.

  @class ComponentStateBucket
  @private
*/
class ComponentStateBucket {
  classRef = null;
  rootRef;
  argsRevision;
  constructor(component, args, argsTag, finalizer, hasWrappedElement, isInteractive) {
    this.component = component;
    this.args = args;
    this.argsTag = argsTag;
    this.finalizer = finalizer;
    this.hasWrappedElement = hasWrappedElement;
    this.isInteractive = isInteractive;
    this.classRef = null;
    this.argsRevision = args === null ? 0 : valueForTag(argsTag);
    this.rootRef = createConstRef(component);
    registerDestructor$1(this, () => this.willDestroy(), true);
    registerDestructor$1(this, () => this.component.destroy());
  }
  willDestroy() {
    let {
      component,
      isInteractive
    } = this;
    if (isInteractive) {
      beginUntrackFrame();
      component.trigger('willDestroyElement');
      component.trigger('willClearRender');
      endUntrackFrame();
      let element = getViewElement(component);
      if (element) {
        clearElementView(element);
        clearViewElement(component);
      }
    }
    component.renderer.unregister(component);
  }
  finalize() {
    let {
      finalizer
    } = this;
    finalizer();
    this.finalizer = NOOP;
  }
}
function processComponentArgs(namedArgs) {
  let attrs = Object.create(null);
  let props = Object.create(null);
  for (let name in namedArgs) {
    let ref = namedArgs[name];
    let value = valueForRef(ref);
    if (isUpdatableRef(ref)) {
      attrs[name] = new MutableCell(ref, value);
    } else {
      attrs[name] = value;
    }
    props[name] = value;
  }
  props.attrs = attrs;
  return props;
}
const REF = Symbol('REF');
class MutableCell {
  value;
  [MUTABLE_CELL];
  [REF];
  constructor(ref, value) {
    this[MUTABLE_CELL] = true;
    this[REF] = ref;
    this.value = value;
  }
  update(val) {
    updateRef(this[REF], val);
  }
}
const ARGS = enumerableSymbol('ARGS');
const HAS_BLOCK = enumerableSymbol('HAS_BLOCK');
const DIRTY_TAG = Symbol('DIRTY_TAG');
const IS_DISPATCHING_ATTRS = Symbol('IS_DISPATCHING_ATTRS');
const BOUNDS = Symbol('BOUNDS');
const EMBER_VIEW_REF = createPrimitiveRef('ember-view');
function aliasIdToElementId(args, props) {
  if (args.named.has('id')) {
    props.elementId = props.id;
  }
}

// We must traverse the attributeBindings in reverse keeping track of
// what has already been applied. This is essentially refining the concatenated
// properties applying right to left.
function applyAttributeBindings(attributeBindings, component, rootRef, operations) {
  let seen = [];
  let i = attributeBindings.length - 1;
  while (i !== -1) {
    let binding = attributeBindings[i];
    let parsed = parseAttributeBinding(binding);
    let attribute = parsed[1];
    if (seen.indexOf(attribute) === -1) {
      seen.push(attribute);
      installAttributeBinding(component, rootRef, parsed, operations);
    }
    i--;
  }
  if (seen.indexOf('id') === -1) {
    let id = component.elementId ? component.elementId : guidFor(component);
    operations.setAttribute('id', createPrimitiveRef(id), false, null);
  }
}
class CurlyComponentManager {
  templateFor(component) {
    let {
      layout,
      layoutName
    } = component;
    let owner = getOwner$2(component);
    let factory;
    if (layout === undefined) {
      if (layoutName !== undefined) {
        let _factory = owner.lookup(`template:${layoutName}`);
        factory = _factory;
      } else {
        return null;
      }
    } else if (isTemplateFactory(layout)) {
      factory = layout;
    } else {
      // no layout was found, use the default layout
      return null;
    }
    return unwrapTemplate(factory(owner)).asWrappedLayout();
  }
  getDynamicLayout(bucket) {
    return this.templateFor(bucket.component);
  }
  getTagName(state) {
    let {
      component,
      hasWrappedElement
    } = state;
    if (!hasWrappedElement) {
      return null;
    }
    return component && component.tagName || 'div';
  }
  getCapabilities() {
    return CURLY_CAPABILITIES;
  }
  prepareArgs(ComponentClass, args) {
    if (args.named.has('__ARGS__')) {
      let {
        __ARGS__,
        ...rest
      } = args.named.capture();
      let __args__ = valueForRef(__ARGS__);
      let prepared = {
        positional: __args__.positional,
        named: {
          ...rest,
          ...__args__.named
        }
      };
      return prepared;
    }
    const {
      positionalParams
    } = ComponentClass.class ?? ComponentClass;

    // early exits
    if (positionalParams === undefined || positionalParams === null || args.positional.length === 0) {
      return null;
    }
    let named;
    if (typeof positionalParams === 'string') {
      let captured = args.positional.capture();
      named = {
        [positionalParams]: createComputeRef(() => reifyPositional(captured))
      };
      Object.assign(named, args.named.capture());
    } else if (Array.isArray(positionalParams) && positionalParams.length > 0) {
      const count = Math.min(positionalParams.length, args.positional.length);
      named = {};
      Object.assign(named, args.named.capture());
      for (let i = 0; i < count; i++) {
        let name = positionalParams[i];
        named[name] = args.positional.at(i);
      }
    } else {
      return null;
    }
    return {
      positional: EMPTY_ARRAY$4,
      named
    };
  }

  /*
   * This hook is responsible for actually instantiating the component instance.
   * It also is where we perform additional bookkeeping to support legacy
   * features like exposed by view mixins like ChildViewSupport, ActionSupport,
   * etc.
   */
  create(owner, ComponentClass, args, {
    isInteractive
  }, dynamicScope, callerSelfRef, hasBlock) {
    // Get the nearest concrete component instance from the scope. "Virtual"
    // components will be skipped.
    let parentView = dynamicScope.view;

    // Capture the arguments, which tells Glimmer to give us our own, stable
    // copy of the Arguments object that is safe to hold on to between renders.
    let capturedArgs = args.named.capture();
    beginTrackFrame();
    let props = processComponentArgs(capturedArgs);
    props[ARGS] = capturedArgs;
    let argsTag = endTrackFrame();

    // Alias `id` argument to `elementId` property on the component instance.
    aliasIdToElementId(args, props);

    // Set component instance's parentView property to point to nearest concrete
    // component.
    props.parentView = parentView;

    // Set whether this component was invoked with a block
    // (`{{#my-component}}{{/my-component}}`) or without one
    // (`{{my-component}}`).
    props[HAS_BLOCK] = hasBlock;

    // Save the current `this` context of the template as the component's
    // `_target`, so bubbled actions are routed to the right place.
    props._target = valueForRef(callerSelfRef);
    setOwner$1(props, owner);

    // caller:
    // <FaIcon @name="bug" />
    //
    // callee:
    // <i class="fa-{{@name}}"></i>

    // Now that we've built up all of the properties to set on the component instance,
    // actually create it.
    beginUntrackFrame();
    let component = ComponentClass.create(props);
    let finalizer = _instrumentStart('render.component', initialRenderInstrumentDetails, component);

    // We become the new parentView for downstream components, so save our
    // component off on the dynamic scope.
    dynamicScope.view = component;

    // Unless we're the root component, we need to add ourselves to our parent
    // component's childViews array.
    if (parentView !== null && parentView !== undefined) {
      addChildView(parentView, component);
    }
    component.trigger('didReceiveAttrs');
    let hasWrappedElement = component.tagName !== '';

    // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components
    if (!hasWrappedElement) {
      if (isInteractive) {
        component.trigger('willRender');
      }
      component._transitionTo('hasElement');
      if (isInteractive) {
        component.trigger('willInsertElement');
      }
    }

    // Track additional lifecycle metadata about this component in a state bucket.
    // Essentially we're saving off all the state we'll need in the future.
    let bucket = new ComponentStateBucket(component, capturedArgs, argsTag, finalizer, hasWrappedElement, isInteractive);
    if (args.named.has('class')) {
      bucket.classRef = args.named.get('class');
    }
    if (isInteractive && hasWrappedElement) {
      component.trigger('willRender');
    }
    endUntrackFrame();

    // consume every argument so we always run again
    consumeTag(bucket.argsTag);
    consumeTag(component[DIRTY_TAG]);
    return bucket;
  }
  getDebugName(definition) {
    return definition.fullName || definition.normalizedName || definition.class?.name || definition.name;
  }
  getSelf({
    rootRef
  }) {
    return rootRef;
  }
  didCreateElement({
    component,
    classRef,
    isInteractive,
    rootRef
  }, element, operations) {
    setViewElement(component, element);
    setElementView(element, component);
    let {
      attributeBindings,
      classNames,
      classNameBindings
    } = component;
    if (attributeBindings && attributeBindings.length) {
      applyAttributeBindings(attributeBindings, component, rootRef, operations);
    } else {
      let id = component.elementId ? component.elementId : guidFor(component);
      operations.setAttribute('id', createPrimitiveRef(id), false, null);
    }
    if (classRef) {
      const ref = createSimpleClassNameBindingRef(classRef);
      operations.setAttribute('class', ref, false, null);
    }
    if (classNames && classNames.length) {
      classNames.forEach(name => {
        operations.setAttribute('class', createPrimitiveRef(name), false, null);
      });
    }
    if (classNameBindings && classNameBindings.length) {
      classNameBindings.forEach(binding => {
        createClassNameBindingRef(rootRef, binding, operations);
      });
    }
    operations.setAttribute('class', EMBER_VIEW_REF, false, null);
    if ('ariaRole' in component) {
      operations.setAttribute('role', childRefFor(rootRef, 'ariaRole'), false, null);
    }
    component._transitionTo('hasElement');
    if (isInteractive) {
      beginUntrackFrame();
      component.trigger('willInsertElement');
      endUntrackFrame();
    }
  }
  didRenderLayout(bucket, bounds) {
    bucket.component[BOUNDS] = bounds;
    bucket.finalize();
  }
  didCreate({
    component,
    isInteractive
  }) {
    if (isInteractive) {
      component._transitionTo('inDOM');
      component.trigger('didInsertElement');
      component.trigger('didRender');
    }
  }
  update(bucket) {
    let {
      component,
      args,
      argsTag,
      argsRevision,
      isInteractive
    } = bucket;
    bucket.finalizer = _instrumentStart('render.component', rerenderInstrumentDetails, component);
    beginUntrackFrame();
    if (args !== null && !validateTag(argsTag, argsRevision)) {
      beginTrackFrame();
      let props = processComponentArgs(args);
      argsTag = bucket.argsTag = endTrackFrame();
      bucket.argsRevision = valueForTag(argsTag);
      component[IS_DISPATCHING_ATTRS] = true;
      component.setProperties(props);
      component[IS_DISPATCHING_ATTRS] = false;
      component.trigger('didUpdateAttrs');
      component.trigger('didReceiveAttrs');
    }
    if (isInteractive) {
      component.trigger('willUpdate');
      component.trigger('willRender');
    }
    endUntrackFrame();
    consumeTag(argsTag);
    consumeTag(component[DIRTY_TAG]);
  }
  didUpdateLayout(bucket) {
    bucket.finalize();
  }
  didUpdate({
    component,
    isInteractive
  }) {
    if (isInteractive) {
      component.trigger('didUpdate');
      component.trigger('didRender');
    }
  }
  getDestroyable(bucket) {
    return bucket;
  }
}
function initialRenderInstrumentDetails(component) {
  return component.instrumentDetails({
    initialRender: true
  });
}
function rerenderInstrumentDetails(component) {
  return component.instrumentDetails({
    initialRender: false
  });
}
const CURLY_CAPABILITIES = {
  dynamicLayout: true,
  dynamicTag: true,
  prepareArgs: true,
  createArgs: true,
  attributeHook: true,
  elementHook: true,
  createCaller: true,
  dynamicScope: true,
  updateHook: true,
  createInstance: true,
  wrapped: true,
  willDestroy: true,
  hasSubOwner: false
};
const CURLY_COMPONENT_MANAGER = new CurlyComponentManager();
function isCurlyManager(manager) {
  return manager === CURLY_COMPONENT_MANAGER;
}
let lazyEventsProcessed = new WeakMap();

/**
@module @ember/component
*/

// A zero-runtime-overhead private symbol to use in branding the component to
// preserve its type parameter.

/**
  A component is a reusable UI element that consists of a `.hbs` template and an
  optional JavaScript class that defines its behavior. For example, someone
  might make a `button` in the template and handle the click behavior in the
  JavaScript file that shares the same name as the template.

  Components are broken down into two categories:

  - Components _without_ JavaScript, that are based only on a template. These
    are called Template-only or TO components.
  - Components _with_ JavaScript, which consist of a template and a backing
    class.

  Ember ships with two types of JavaScript classes for components:

  1. Glimmer components, imported from `@glimmer/component`, which are the
     default component's for Ember Octane (3.15) and more recent editions.
  2. Classic components, imported from `@ember/component`, which were the
     default for older editions of Ember (pre 3.15).

  Below is the documentation for Classic components. If you are looking for the
  API documentation for Template-only or Glimmer components, it is [available
  here](/ember/release/modules/@glimmer%2Fcomponent).

  ## Defining a Classic Component

  If you want to customize the component in order to handle events, transform
  arguments or maintain internal state, you implement a subclass of `Component`.

  One example is to add computed properties to your component:

  ```app/components/person-profile.js
  import Component from '@ember/component';

  export default Component.extend({
    displayName: computed('person.title', 'person.firstName', 'person.lastName', function() {
      let { title, firstName, lastName } = this.person;

      if (title) {
        return `${title} ${lastName}`;
      } else {
        return `${firstName} ${lastName}`;
      }
    })
  });
  ```

  And then use it in the component's template:

  ```app/templates/components/person-profile.hbs
  <h1>{{this.displayName}}</h1>
  {{yield}}
  ```

  ## Customizing a Classic Component's HTML Element in JavaScript

  ### HTML Tag

  The default HTML tag name used for a component's HTML representation is `div`.
  This can be customized by setting the `tagName` property.

  Consider the following component class:

  ```app/components/emphasized-paragraph.js
  import Component from '@ember/component';

  export default Component.extend({
    tagName: 'em'
  });
  ```

  When invoked, this component would produce output that looks something like
  this:

  ```html
  <em id="ember1" class="ember-view"></em>
  ```

  ### HTML `class` Attribute

  The HTML `class` attribute of a component's tag can be set by providing a
  `classNames` property that is set to an array of strings:

  ```app/components/my-widget.js
  import Component from '@ember/component';

  export default Component.extend({
    classNames: ['my-class', 'my-other-class']
  });
  ```

  Invoking this component will produce output that looks like this:

  ```html
  <div id="ember1" class="ember-view my-class my-other-class"></div>
  ```

  `class` attribute values can also be set by providing a `classNameBindings`
  property set to an array of properties names for the component. The return
  value of these properties will be added as part of the value for the
  components's `class` attribute. These properties can be computed properties:

  ```app/components/my-widget.js
  import Component from '@ember/component';
  import { computed } from '@ember/object';

  export default Component.extend({
    classNames: ['my-class', 'my-other-class'],
    classNameBindings: ['propertyA', 'propertyB'],

    propertyA: 'from-a',
    propertyB: computed(function() {
      if (someLogic) { return 'from-b'; }
    })
  });
  ```

  Invoking this component will produce HTML that looks like:

  ```html
  <div id="ember1" class="ember-view my-class my-other-class from-a from-b"></div>
  ```

  Note that `classNames` and `classNameBindings` is in addition to the `class`
  attribute passed with the angle bracket invocation syntax. Therefore, if this
  component was invoked like so:

  ```handlebars
  <MyWidget class="from-invocation" />
  ```

  The resulting HTML will look similar to this:

  ```html
  <div id="ember1" class="from-invocation ember-view my-class my-other-class from-a from-b"></div>
  ```

  If the value of a class name binding returns a boolean the property name
  itself will be used as the class name if the property is true. The class name
  will not be added if the value is `false` or `undefined`.

  ```app/components/my-widget.js
  import Component from '@ember/component';

  export default Component.extend({
    classNameBindings: ['hovered'],

    hovered: true
  });
  ```

  Invoking this component will produce HTML that looks like:

  ```html
  <div id="ember1" class="ember-view hovered"></div>
  ```

  ### Custom Class Names for Boolean Values

  When using boolean class name bindings you can supply a string value other
  than the property name for use as the `class` HTML attribute by appending the
  preferred value after a ":" character when defining the binding:

  ```app/components/my-widget.js
  import Component from '@ember/component';

  export default Component.extend({
    classNameBindings: ['awesome:so-very-cool'],

    awesome: true
  });
  ```

  Invoking this component will produce HTML that looks like:

  ```html
  <div id="ember1" class="ember-view so-very-cool"></div>
  ```

  Boolean value class name bindings whose property names are in a
  camelCase-style format will be converted to a dasherized format:

  ```app/components/my-widget.js
  import Component from '@ember/component';

  export default Component.extend({
    classNameBindings: ['isUrgent'],

    isUrgent: true
  });
  ```

  Invoking this component will produce HTML that looks like:

  ```html
  <div id="ember1" class="ember-view is-urgent"></div>
  ```

  Class name bindings can also refer to object values that are found by
  traversing a path relative to the component itself:

  ```app/components/my-widget.js
  import Component from '@ember/component';
  import EmberObject from '@ember/object';

  export default Component.extend({
    classNameBindings: ['messages.empty'],

    messages: EmberObject.create({
      empty: true
    })
  });
  ```

  Invoking this component will produce HTML that looks like:

  ```html
  <div id="ember1" class="ember-view empty"></div>
  ```

  If you want to add a class name for a property which evaluates to true and and
  a different class name if it evaluates to false, you can pass a binding like
  this:

  ```app/components/my-widget.js
  import Component from '@ember/component';

  export default Component.extend({
    classNameBindings: ['isEnabled:enabled:disabled'],
    isEnabled: true
  });
  ```

  Invoking this component will produce HTML that looks like:

  ```html
  <div id="ember1" class="ember-view enabled"></div>
  ```

  When isEnabled is `false`, the resulting HTML representation looks like this:

  ```html
  <div id="ember1" class="ember-view disabled"></div>
  ```

  This syntax offers the convenience to add a class if a property is `false`:

  ```app/components/my-widget.js
  import Component from '@ember/component';

  // Applies no class when isEnabled is true and class 'disabled' when isEnabled is false
  export default Component.extend({
    classNameBindings: ['isEnabled::disabled'],
    isEnabled: true
  });
  ```

  Invoking this component when the `isEnabled` property is true will produce
  HTML that looks like:

  ```html
  <div id="ember1" class="ember-view"></div>
  ```

  Invoking it when the `isEnabled` property on the component is `false` will
  produce HTML that looks like:

  ```html
  <div id="ember1" class="ember-view disabled"></div>
  ```

  Updates to the value of a class name binding will result in automatic update
  of the  HTML `class` attribute in the component's rendered HTML
  representation. If the value becomes `false` or `undefined` the class name
  will be removed.

  Both `classNames` and `classNameBindings` are concatenated properties. See
  [EmberObject](/ember/release/classes/EmberObject) documentation for more
  information about concatenated properties.

  ### Other HTML Attributes

  The HTML attribute section of a component's tag can be set by providing an
  `attributeBindings` property set to an array of property names on the
  component. The return value of these properties will be used as the value of
  the component's HTML associated attribute:

  ```app/components/my-anchor.js
  import Component from '@ember/component';

  export default Component.extend({
    tagName: 'a',
    attributeBindings: ['href'],

    href: 'http://google.com'
  });
  ```

  Invoking this component will produce HTML that looks like:

  ```html
  <a id="ember1" class="ember-view" href="http://google.com"></a>
  ```

  One property can be mapped on to another by placing a ":" between the source
  property and the destination property:

  ```app/components/my-anchor.js
  import Component from '@ember/component';

  export default Component.extend({
    tagName: 'a',
    attributeBindings: ['url:href'],

    url: 'http://google.com'
  });
  ```

  Invoking this component will produce HTML that looks like:

  ```html
  <a id="ember1" class="ember-view" href="http://google.com"></a>
  ```

  HTML attributes passed with angle bracket invocations will take precedence
  over those specified in `attributeBindings`. Therefore, if this component was
  invoked like so:

  ```handlebars
  <MyAnchor href="http://bing.com" @url="http://google.com" />
  ```

  The resulting HTML will looks like this:

  ```html
  <a id="ember1" class="ember-view" href="http://bing.com"></a>
  ```

  Note that the `href` attribute is ultimately set to `http://bing.com`, despite
  it having attribute binidng to the `url` property, which was set to
  `http://google.com`.

  Namespaced attributes (e.g. `xlink:href`) are supported, but have to be
  mapped, since `:` is not a valid character for properties in Javascript:

  ```app/components/my-use.js
  import Component from '@ember/component';

  export default Component.extend({
    tagName: 'use',
    attributeBindings: ['xlinkHref:xlink:href'],

    xlinkHref: '#triangle'
  });
  ```

  Invoking this component will produce HTML that looks like:

  ```html
  <use xlink:href="#triangle"></use>
  ```

  If the value of a property monitored by `attributeBindings` is a boolean, the
  attribute will be present or absent depending on the value:

  ```app/components/my-text-input.js
  import Component from '@ember/component';

  export default Component.extend({
    tagName: 'input',
    attributeBindings: ['disabled'],

    disabled: false
  });
  ```

  Invoking this component will produce HTML that looks like:

  ```html
  <input id="ember1" class="ember-view" />
  ```

  `attributeBindings` can refer to computed properties:

  ```app/components/my-text-input.js
  import Component from '@ember/component';
  import { computed } from '@ember/object';

  export default Component.extend({
    tagName: 'input',
    attributeBindings: ['disabled'],

    disabled: computed(function() {
      if (someLogic) {
        return true;
      } else {
        return false;
      }
    })
  });
  ```

  To prevent setting an attribute altogether, use `null` or `undefined` as the
  value of the property used in `attributeBindings`:

  ```app/components/my-text-input.js
  import Component from '@ember/component';

  export default Component.extend({
    tagName: 'form',
    attributeBindings: ['novalidate'],
    novalidate: null
  });
  ```

  Updates to the property of an attribute binding will result in automatic
  update of the  HTML attribute in the component's HTML output.

  `attributeBindings` is a concatenated property. See
  [EmberObject](/ember/release/classes/EmberObject) documentation for more
  information about concatenated properties.

  ## Layouts

  The `layout` property can be used to dynamically specify a template associated
  with a component class, instead of relying on Ember to link together a
  component class and a template based on file names.

  In general, applications should not use this feature, but it's commonly used
  in addons for historical reasons.

  The `layout` property should be set to the default export of a template
  module, which is the name of a template file without the `.hbs` extension.

  ```app/templates/components/person-profile.hbs
  <h1>Person's Title</h1>
  <div class='details'>{{yield}}</div>
  ```

  ```app/components/person-profile.js
    import Component from '@ember/component';
    import layout from '../templates/components/person-profile';

    export default Component.extend({
      layout
    });
  ```

  If you invoke the component:

  ```handlebars
  <PersonProfile>
    <h2>Chief Basket Weaver</h2>
    <h3>Fisherman Industries</h3>
  </PersonProfile>
  ```

  or

  ```handlebars
  {{#person-profile}}
    <h2>Chief Basket Weaver</h2>
    <h3>Fisherman Industries</h3>
  {{/person-profile}}
  ```

  It will result in the following HTML output:

  ```html
  <h1>Person's Title</h1>
    <div class="details">
    <h2>Chief Basket Weaver</h2>
    <h3>Fisherman Industries</h3>
  </div>
  ```

  ## Handling Browser Events

  There are two ways to handle user-initiated events:

  ### Using the `on` modifier to capture browser events

  In a component's template, you can attach an event handler to any element with the `on` modifier:

  ```handlebars
  <button {{on 'click' this.doSomething}} />
  ```

  This will call the function on your component:

  ```js
  import Component from '@ember/component';

  export default class ExampleComponent extends Component {
    doSomething = (event) => {
      // `event` is the native click Event
      console.log('clicked on the button');
    };
  });
  ```

  See the [Guide on Component event
  handlers](https://guides.emberjs.com/release/components/component-state-and-actions/#toc_html-modifiers-and-actions)
  and the [API docs for `on`](../Ember.Templates.helpers/methods/on?anchor=on)
  for more details.

  ### Event Handler Methods

  Components can also respond to user-initiated events by implementing a method
  that matches the event name. This approach is appropriate when the same event
  should be handled by all instances of the same component.

  An event object will be passed as the argument to the event handler method.

  ```app/components/my-widget.js
  import Component from '@ember/component';

  export default Component.extend({
    click(event) {
      // `event.target` is either the component's element or one of its children
      let tag = event.target.tagName.toLowerCase();
      console.log('clicked on a `<${tag}>` HTML element!');
    }
  });
  ```

  In this example, whenever the user clicked anywhere inside the component, it
  will log a message to the console.

  It is possible to handle event types other than `click` by implementing the
  following event handler methods. In addition, custom events can be registered
  by using `Application.customEvents`.

  Touch events:

  * `touchStart`
  * `touchMove`
  * `touchEnd`
  * `touchCancel`

  Keyboard events:

  * `keyDown`
  * `keyUp`
  * `keyPress`

  Mouse events:

  * `mouseDown`
  * `mouseUp`
  * `contextMenu`
  * `click`
  * `doubleClick`
  * `focusIn`
  * `focusOut`

  Form events:

  * `submit`
  * `change`
  * `focusIn`
  * `focusOut`
  * `input`

  Drag and drop events:

  * `dragStart`
  * `drag`
  * `dragEnter`
  * `dragLeave`
  * `dragOver`
  * `dragEnd`
  * `drop`

  @class Component
  @extends Ember.CoreView
  @uses Ember.TargetActionSupport
  @uses Ember.ClassNamesSupport
  @uses Ember.ActionSupport
  @uses Ember.ViewMixin
  @uses Ember.ViewStateSupport
  @public
*/
// This type param is used in the class, so must appear here.
// eslint-disable-next-line @typescript-eslint/no-unused-vars

class Component extends CoreView.extend(ChildViewsSupport, ViewStateSupport, ClassNamesSupport, TargetActionSupport, ActionSupport, ViewMixin, {
  // These need to be overridable via extend/create but should still
  // have a default. Defining them here is the best way to achieve that.
  didReceiveAttrs() {},
  didRender() {},
  didUpdate() {},
  didUpdateAttrs() {},
  willRender() {},
  willUpdate() {}
}) {
  isComponent = true;

  // SAFETY: this has no runtime existence whatsoever; it is a "phantom type"
  // here to preserve the type param.

  // SAFTEY: This is set in `init`.

  init(properties) {
    super.init(properties);

    // Handle methods from ViewMixin.
    // The native class inheritance will not work for mixins. To work around this,
    // we copy the existing rerender method provided by the mixin and swap in the
    // new rerender method from our class.
    this._superRerender = this.rerender;
    this.rerender = this._rerender;
    this[IS_DISPATCHING_ATTRS] = false;
    this[DIRTY_TAG] = createTag();
    this[BOUNDS] = null;
    const eventDispatcher = this._dispatcher;
    if (eventDispatcher) {
      let lazyEventsProcessedForComponentClass = lazyEventsProcessed.get(eventDispatcher);
      if (!lazyEventsProcessedForComponentClass) {
        lazyEventsProcessedForComponentClass = new WeakSet();
        lazyEventsProcessed.set(eventDispatcher, lazyEventsProcessedForComponentClass);
      }
      let proto = Object.getPrototypeOf(this);
      if (!lazyEventsProcessedForComponentClass.has(proto)) {
        let lazyEvents = eventDispatcher.lazyEvents;
        lazyEvents.forEach((mappedEventName, event) => {
          if (mappedEventName !== null && typeof this[mappedEventName] === 'function') {
            eventDispatcher.setupHandlerForBrowserEvent(event);
          }
        });
        lazyEventsProcessedForComponentClass.add(proto);
      }
    }
  }
  __dispatcher;
  get _dispatcher() {
    if (this.__dispatcher === undefined) {
      let owner = getOwner$2(this);
      if (owner.lookup('-environment:main').isInteractive) {
        let dispatcher = owner.lookup('event_dispatcher:main');
        this.__dispatcher = dispatcher;
      } else {
        // In FastBoot we have no EventDispatcher. Set to null to not try again to look it up.
        this.__dispatcher = null;
      }
    }
    return this.__dispatcher;
  }
  on(name, target, method) {
    this._dispatcher?.setupHandlerForEmberEvent(name);
    // The `on` method here comes from the Evented mixin. Since this mixin
    // is applied to the parent of this class, however, we are still able
    // to use `super`.
    return super.on(name, target, method);
  }

  // Changed to `rerender` on init
  _rerender() {
    DIRTY_TAG$1(this[DIRTY_TAG]);
    this._superRerender();
  }
  [PROPERTY_DID_CHANGE](key, value) {
    if (this[IS_DISPATCHING_ATTRS]) {
      return;
    }
    let args = this[ARGS];
    let reference = args !== undefined ? args[key] : undefined;
    if (reference !== undefined && isUpdatableRef(reference)) {
      updateRef(reference, arguments.length === 2 ? value : get$1(this, key));
    }
  }
  getAttr(key) {
    // TODO Intimate API should be deprecated
    return this.get(key);
  }

  /**
    Normally, Ember's component model is "write-only". The component takes a
    bunch of attributes that it got passed in, and uses them to render its
    template.
     One nice thing about this model is that if you try to set a value to the
    same thing as last time, Ember (through HTMLBars) will avoid doing any
    work on the DOM.
     This is not just a performance optimization. If an attribute has not
    changed, it is important not to clobber the element's "hidden state".
    For example, if you set an input's `value` to the same value as before,
    it will clobber selection state and cursor position. In other words,
    setting an attribute is not **always** idempotent.
     This method provides a way to read an element's attribute and also
    update the last value Ember knows about at the same time. This makes
    setting an attribute idempotent.
     In particular, what this means is that if you get an `<input>` element's
    `value` attribute and then re-render the template with the same value,
    it will avoid clobbering the cursor and selection position.
    Since most attribute sets are idempotent in the browser, you typically
    can get away with reading attributes using jQuery, but the most reliable
    way to do so is through this method.
    @method readDOMAttr
     @param {String} name the name of the attribute
    @return String
    @public
    */
  readDOMAttr(name) {
    // TODO revisit this
    let _element = getViewElement(this);
    let element = _element;
    let isSVG = element.namespaceURI === 'http://www.w3.org/2000/svg';
    let {
      type,
      normalized
    } = normalizeProperty(element, name);
    if (isSVG || type === 'attr') {
      return element.getAttribute(normalized);
    }
    return element[normalized];
  }

  // --- Declarations which support mixins ---
  // We use `declare` on these properties, even though they are optional, so
  // that they do not get created on the class *at all* when emitting the
  // transpiled code. Otherwise, since declared class properties are equivalent
  // to calling `defineProperty` in the class constructor, they would "stomp"
  // the properties supplied by mixins.

  /**
   Enables components to take a list of parameters as arguments.
    For example, a component that takes two parameters with the names
    `name` and `age`:
     ```app/components/my-component.js
    import Component from '@ember/component';
     let MyComponent = Component.extend();
     MyComponent.reopenClass({
      positionalParams: ['name', 'age']
    });
     export default MyComponent;
    ```
     It can then be invoked like this:
     ```hbs
    {{my-component "John" 38}}
    ```
     The parameters can be referred to just like named parameters:
     ```hbs
    Name: {{name}}, Age: {{age}}.
    ```
     Using a string instead of an array allows for an arbitrary number of
    parameters:
     ```app/components/my-component.js
    import Component from '@ember/component';
     let MyComponent = Component.extend();
     MyComponent.reopenClass({
      positionalParams: 'names'
    });
     export default MyComponent;
    ```
     It can then be invoked like this:
     ```hbs
    {{my-component "John" "Michael" "Scott"}}
    ```
    The parameters can then be referred to by enumerating over the list:
     ```hbs
    {{#each names as |name|}}{{name}}{{/each}}
    ```
     @static
    @public
    @property positionalParams
    @since 1.13.0
    */ /**
       Enables components to take a list of parameters as arguments.
       For example, a component that takes two parameters with the names
       `name` and `age`:
       ```app/components/my-component.js
       import Component from '@ember/component';
       let MyComponent = Component.extend();
       MyComponent.reopenClass({
       positionalParams: ['name', 'age']
       });
       export default MyComponent;
       ```
       It can then be invoked like this:
       ```hbs
       {{my-component "John" 38}}
       ```
       The parameters can be referred to just like named parameters:
       ```hbs
       Name: {{name}}, Age: {{age}}.
       ```
       Using a string instead of an array allows for an arbitrary number of
       parameters:
       ```app/components/my-component.js
       import Component from '@ember/component';
       let MyComponent = Component.extend();
       MyComponent.reopenClass({
       positionalParams: 'names'
       });
       export default MyComponent;
       ```
       It can then be invoked like this:
       ```hbs
       {{my-component "John" "Michael" "Scott"}}
       ```
       The parameters can then be referred to by enumerating over the list:
       ```hbs
       {{#each names as |name|}}{{name}}{{/each}}
       ```
       @static
       @public
       @property positionalParams
       @since 1.13.0
       */

  /**
    Layout can be used to wrap content in a component.
    @property layout
    @type Function
    @public
  */

  /**
    The name of the layout to lookup if no layout is provided.
    By default `Component` will lookup a template with this name in
    `Ember.TEMPLATES` (a shared global object).
    @property layoutName
    @type String
    @default undefined
    @private
  */

  /**
   The WAI-ARIA role of the control represented by this view. For example, a
    button may have a role of type 'button', or a pane may have a role of
    type 'alertdialog'. This property is used by assistive software to help
    visually challenged users navigate rich web applications.
     The full list of valid WAI-ARIA roles is available at:
    [https://www.w3.org/TR/wai-aria/#roles_categorization](https://www.w3.org/TR/wai-aria/#roles_categorization)
     @property ariaRole
    @type String
    @default undefined
    @public
    */

  static isComponentFactory = true;
  static toString() {
    return '@ember/component';
  }
}

// We continue to use reopenClass here so that positionalParams can be overridden with reopenClass in subclasses.
Component.reopenClass({
  positionalParams: []
});
setInternalComponentManager(CURLY_COMPONENT_MANAGER, Component);

/**
@module @ember/component
*/

const RECOMPUTE_TAG = Symbol('RECOMPUTE_TAG');

// Signature type utilities

// eslint-disable-next-line @typescript-eslint/no-empty-object-type

// Implements Ember's `Factory` interface and tags it for narrowing/checking.

const IS_CLASSIC_HELPER = Symbol('IS_CLASSIC_HELPER');

// A zero-runtime-overhead private symbol to use in branding the component to
// preserve its type parameter.

/**
  Ember Helpers are functions that can compute values, and are used in templates.
  For example, this code calls a helper named `format-currency`:

  ```app/templates/application.hbs
  <Cost @cents={{230}} />
  ```

  ```app/components/cost.hbs
  <div>{{format-currency @cents currency="$"}}</div>
  ```

  Additionally a helper can be called as a nested helper.
  In this example, we show the formatted currency value if the `showMoney`
  named argument is truthy.

  ```handlebars
  {{if @showMoney (format-currency @cents currency="$")}}
  ```

  Helpers defined using a class must provide a `compute` function. For example:

  ```app/helpers/format-currency.js
  import Helper from '@ember/component/helper';

  export default class extends Helper {
    compute([cents], { currency }) {
      return `${currency}${cents * 0.01}`;
    }
  }
  ```

  Each time the input to a helper changes, the `compute` function will be
  called again.

  As instances, these helpers also have access to the container and will accept
  injected dependencies.

  Additionally, class helpers can call `recompute` to force a new computation.

  @class Helper
  @extends CoreObject
  @public
  @since 1.13.0
*/
// ESLint doesn't understand declaration merging.
/* eslint-disable import/export */

class Helper extends FrameworkObject {
  static isHelperFactory = true;
  static [IS_CLASSIC_HELPER] = true;

  // `packages/ember/index.js` was setting `Helper.helper`. This seems like
  // a bad idea and probably not something we want. We've moved that definition
  // here, but it should definitely be reviewed and probably removed.
  /** @deprecated */
  static helper = helper$1;

  // SAFETY: this is initialized in `init`, rather than `constructor`. It is
  // safe to `declare` like this *if and only if* nothing uses the constructor
  // directly in this class, since nothing else can run before `init`.

  // SAFETY: this has no runtime existence whatsoever; it is a "phantom type"
  // here to preserve the type param.

  init(properties) {
    super.init(properties);
    this[RECOMPUTE_TAG] = createTag();
  }

  /**
    On a class-based helper, it may be useful to force a recomputation of that
    helpers value. This is akin to `rerender` on a component.
     For example, this component will rerender when the `currentUser` on a
    session service changes:
     ```app/helpers/current-user-email.js
    import Helper from '@ember/component/helper'
    import { service } from '@ember/service'
    import { observer } from '@ember/object'
     export default Helper.extend({
      session: service(),
       onNewUser: observer('session.currentUser', function() {
        this.recompute();
      }),
       compute() {
        return this.get('session.currentUser.email');
      }
    });
    ```
     @method recompute
    @public
    @since 1.13.0
  */
  recompute() {
    join(() => DIRTY_TAG$1(this[RECOMPUTE_TAG]));
  }
}
/* eslint-enable import/export */

function isClassicHelper(obj) {
  return obj[IS_CLASSIC_HELPER] === true;
}
class ClassicHelperManager {
  capabilities = helperCapabilities('3.23', {
    hasValue: true,
    hasDestroyable: true
  });
  ownerInjection;
  constructor(owner) {
    let ownerInjection = {};
    setOwner$1(ownerInjection, owner);
    this.ownerInjection = ownerInjection;
  }
  createHelper(definition, args) {
    let instance = isFactoryManager(definition) ? definition.create() : definition.create(this.ownerInjection);
    return {
      instance,
      args
    };
  }
  getDestroyable({
    instance
  }) {
    return instance;
  }
  getValue({
    instance,
    args
  }) {
    let {
      positional,
      named
    } = args;
    let ret = instance.compute(positional, named);
    consumeTag(instance[RECOMPUTE_TAG]);
    return ret;
  }
  getDebugName(definition) {
    return getDebugName$1$1((definition.class || definition)['prototype']);
  }
}
function isFactoryManager(obj) {
  return obj != null && 'class' in obj;
}
setHelperManager(owner => {
  return new ClassicHelperManager(owner);
}, Helper);
const CLASSIC_HELPER_MANAGER = getInternalHelperManager(Helper);

///////////

class Wrapper {
  isHelperFactory = true;
  constructor(compute) {
    this.compute = compute;
  }
  create() {
    // needs new instance or will leak containers
    return {
      compute: this.compute
    };
  }
}
class SimpleClassicHelperManager {
  capabilities = helperCapabilities('3.23', {
    hasValue: true
  });
  createHelper(definition, args) {
    return () => definition.compute.call(null, args.positional, args.named);
  }
  getValue(fn) {
    return fn();
  }
  getDebugName(definition) {
    return getDebugName$1$1(definition.compute);
  }
}
const SIMPLE_CLASSIC_HELPER_MANAGER = new SimpleClassicHelperManager();
setHelperManager(() => SIMPLE_CLASSIC_HELPER_MANAGER, Wrapper.prototype);

/*
  Function-based helpers need to present with a constructor signature so that
  type parameters can be preserved when `helper()` is passed a generic function
  (this is particularly key for checking helper invocations with Glint).
  Accordingly, we define an abstract class and declaration merge it with the
  interface; this inherently provides an `abstract` constructor. Since it is
  `abstract`, it is not callable, which is important since end users should not
  be able to do `let myHelper = helper(someFn); new myHelper()`.
 */

/**
 * The type of a function-based helper.
 *
 * @note This is *not* user-constructible: it is exported only so that the type
 *   returned by the `helper` function can be named (and indeed can be exported
 *   like `export default helper(...)` safely).
 */
// Making `FunctionBasedHelper` an alias this way allows callers to name it in
// terms meaningful to *them*, while preserving the type behavior described on
// the `abstract class FunctionBasedHelperInstance` below.

// This abstract class -- specifically, its `protected abstract __concrete__`
// member -- prevents subclasses from doing `class X extends helper(..)`, since
// that is an error at runtime. While it is rare that people would type that, it
// is not impossible and we use this to give them early signal via the types for
// a behavior which will break (and in a somewhat inscrutable way!) at runtime.
//
// This is needful because we lie about what this actually is for Glint's sake:
// a function-based helper returns a `Factory<SimpleHelper>`, which is designed
// to be "opaque" from a consumer's POV, i.e. not user-callable or constructible
// but only useable in a template (or via `invokeHelper()` which also treats it
// as a fully opaque `object` from a type POV). But Glint needs a `Helper<S>` to
// make it work the same way as class-based helpers. (Note that this does not
// hold for plain functions as helpers, which it can handle distinctly.) This
// signature thus makes it so that the item is usable *as* a `Helper` in Glint,
// but without letting end users treat it as a helper class instance.

/**
  In many cases it is not necessary to use the full `Helper` class.
  The `helper` method create pure-function helpers without instances.
  For example:

  ```app/helpers/format-currency.js
  import { helper } from '@ember/component/helper';

  export default helper(function([cents], {currency}) {
    return `${currency}${cents * 0.01}`;
  });
  ```

  @static
  @param {Function} helper The helper function
  @method helper
  @for @ember/component/helper
  @public
  @since 1.13.0
*/
// This overload allows users to write types directly on the callback passed to
// the `helper` function and infer the resulting type correctly.

// This overload allows users to provide a `Signature` type explicitly at the
// helper definition site, e.g. `helper<Sig>((pos, named) => {...})`. **Note:**
// this overload must appear second, since TS' inference engine will not
// correctly infer the type of `S` here from the types on the supplied callback.

function helper$1(helperFn) {
  // SAFETY: this is completely lies, in two ways:
  //
  // 1. `Wrapper` is a `Factory<SimpleHelper<S>>`, but from the perspective of
  //    any external callers (i.e. Ember *users*), it is quite important that
  //    the `Factory` relationship be hidden, because it is not public API for
  //    an end user to call `.create()` on a helper created this way. Instead,
  //    we provide them an `abstract new` signature (which means it cannot be
  //    directly constructed by calling `new` on it) and which does not have the
  //    `.create()` signature on it anymore.
  //
  // 2. The produced type here ends up being a subtype of `Helper`, which is not
  //    strictly true. This is necessary for the sake of Glint, which provides
  //    its information by way of a "declaration merge" with `Helper<S>` in the
  //    case of items produced by `helper()`.
  //
  // Long-term, this entire construct can go away in favor of deprecating the
  // `helper()` invocation in favor of using plain functions.
  return new Wrapper(helperFn);
}

/**
@module @ember/template
*/

/**
  A wrapper around a string that has been marked as safe ("trusted"). **When
  rendered in HTML, Ember will not perform any escaping.**

  Note:

  1. This does not *make* the string safe; it means that some code in your
     application has *marked* it as safe using the `htmlSafe()` function.

  2. The only public API for getting a `SafeString` is calling `htmlSafe()`. It
     is *not* user-constructible.

  If a string contains user inputs or other untrusted data, you must sanitize
  the string before using the `htmlSafe` method. Otherwise your code is
  vulnerable to [Cross-Site Scripting][xss]. There are many open source
  sanitization libraries to choose from, both for front end and server-side
  sanitization.

  [xss]: https://owasp.org/www-community/attacks/DOM_Based_XSS

  ```javascript
  import { htmlSafe } from '@ember/template';

  let someTrustedOrSanitizedString = "<div>Hello!</div>"

  htmlSafe(someTrustedorSanitizedString);
  ```

  @for @ember/template
  @class SafeString
  @since 4.12.0
  @public
 */
class SafeString {
  __string;
  constructor(string) {
    this.__string = string;
  }

  /**
    Get the string back to use as a string.
     @public
    @method toString
    @returns {String} The string marked as trusted
   */
  toString() {
    return `${this.__string}`;
  }

  /**
    Get the wrapped string as HTML to use without escaping.
     @public
    @method toHTML
    @returns {String} the trusted string, without any escaping applied
   */
  toHTML() {
    return this.toString();
  }
}
const escape = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#x27;',
  '`': '&#x60;',
  '=': '&#x3D;'
};
const possible = /[&<>"'`=]/;
const badChars = /[&<>"'`=]/g;
function escapeChar(chr) {
  return escape[chr];
}
function escapeExpression(string) {
  let s;
  if (typeof string !== 'string') {
    // don't escape SafeStrings, since they're already safe
    if (isHTMLSafe(string)) {
      return string.toHTML();
    } else if (string === null || string === undefined) {
      return '';
    } else if (!string) {
      return String(string);
    }

    // Force a string conversion as this will be done by the append regardless and
    // the regex test will do this transparently behind the scenes, causing issues if
    // an object's to string has escaped characters in it.
    s = String(string);
  } else {
    s = string;
  }
  if (!possible.test(s)) {
    return s;
  }

  // SAFETY: this is technically a lie, but it's a true lie as long as the
  // invariant it depends on is upheld: `escapeChar` will always return a string
  // as long as its input is one of the characters in `escape`, and it will only
  // be called if it matches one of the characters in the `badChar` regex, which
  // is hand-maintained to match the set escaped. (It would be nice if TS could
  // "see" into the regex to see how this works, but that'd be quite a lot of
  // extra fanciness.)
  return s.replace(badChars, escapeChar);
}

/**
  Use this method to indicate that a string should be rendered as HTML
  when the string is used in a template. To say this another way,
  strings marked with `htmlSafe` will not be HTML escaped.

  A word of warning -   The `htmlSafe` method does not make the string safe;
  it only tells the framework to treat the string as if it is safe to render
  as HTML. If a string contains user inputs or other untrusted
  data, you must sanitize the string before using the `htmlSafe` method.
  Otherwise your code is vulnerable to
  [Cross-Site Scripting](https://owasp.org/www-community/attacks/DOM_Based_XSS).
  There are many open source sanitization libraries to choose from,
  both for front end and server-side sanitization.

  ```javascript
  import { htmlSafe } from '@ember/template';

  const someTrustedOrSanitizedString = "<div>Hello!</div>"

  htmlSafe(someTrustedorSanitizedString)
  ```

  @method htmlSafe
  @for @ember/template
  @param str {String} The string to treat as trusted.
  @static
  @return {SafeString} A string that will not be HTML escaped by Handlebars.
  @public
*/
function htmlSafe(str) {
  if (str === null || str === undefined) {
    str = '';
  } else if (typeof str !== 'string') {
    str = String(str);
  }
  return new SafeString(str);
}

/**
  Detects if a string was decorated using `htmlSafe`.

  ```javascript
  import { htmlSafe, isHTMLSafe } from '@ember/template';

  let plainString = 'plain string';
  let safeString = htmlSafe('<div>someValue</div>');

  isHTMLSafe(plainString); // false
  isHTMLSafe(safeString);  // true
  ```

  @method isHTMLSafe
  @for @ember/template
  @static
  @return {Boolean} `true` if the string was decorated with `htmlSafe`, `false` otherwise.
  @public
*/
function isHTMLSafe(str) {
  return str !== null && typeof str === 'object' && 'toHTML' in str && typeof str.toHTML === 'function';
}
function instrumentationPayload$1(def) {
  // "main" used to be the outlet name, keeping it around for compatibility
  return {
    object: `${def.name}:main`
  };
}
const CAPABILITIES$2 = {
  dynamicLayout: false,
  dynamicTag: false,
  prepareArgs: false,
  createArgs: false,
  attributeHook: false,
  elementHook: false,
  createCaller: false,
  dynamicScope: true,
  updateHook: false,
  createInstance: true,
  wrapped: false,
  willDestroy: false,
  hasSubOwner: false
};
const CAPABILITIES_MASK$1 = capabilityFlagsFrom(CAPABILITIES$2);
class OutletComponentManager {
  create(_owner, definition, _args, env, dynamicScope) {
    let parentStateRef = dynamicScope.get('outletState');
    let currentStateRef = definition.ref;

    // This is the actual primary responsibility of the outlet component –
    // it represents the switching from one route component/template into
    // the next. The rest only exists to support the debug render tree and
    // the old-school (and unreliable) instrumentation.
    dynamicScope.set('outletState', currentStateRef);
    let state = {
      finalize: _instrumentStart('render.outlet', instrumentationPayload$1, definition)
    };
    if (env.debugRenderTree !== undefined) {
      let parentState = valueForRef(parentStateRef);
      let parentOwner = parentState?.render?.owner;
      let currentState = valueForRef(currentStateRef);
      let currentOwner = currentState?.render?.owner;
      if (parentOwner && parentOwner !== currentOwner) {
        let {
          mountPoint
        } = currentOwner;
        if (mountPoint) {
          state.engine = {
            mountPoint,
            instance: currentOwner
          };
        }
      }
    }
    return state;
  }
  getDebugName({
    name
  }) {
    return `{{outlet}} for ${name}`;
  }
  getDebugCustomRenderTree(_definition, state) {
    let nodes = [];
    nodes.push({
      bucket: state,
      type: 'outlet',
      // "main" used to be the outlet name, keeping it around for compatibility
      name: 'main',
      args: EMPTY_ARGS,
      instance: undefined,
      template: undefined
    });
    if (state.engine) {
      nodes.push({
        bucket: state.engine,
        type: 'engine',
        name: state.engine.mountPoint,
        args: EMPTY_ARGS,
        instance: state.engine.instance,
        template: undefined
      });
    }
    return nodes;
  }
  getCapabilities() {
    return CAPABILITIES$2;
  }
  getSelf() {
    return UNDEFINED_REFERENCE;
  }
  didCreate() {}
  didUpdate() {}
  didRenderLayout(state) {
    state.finalize();
  }
  didUpdateLayout() {}
  getDestroyable() {
    return null;
  }
}
const OUTLET_MANAGER = new OutletComponentManager();
const OUTLET_COMPONENT_TEMPLATE = templateFactory(
/*
  <@Component @controller={{@controller}} @model={{@model}} />
*/
{
  "id": "Hacwyo/Q",
  "block": "[[[8,[30,1],null,[[\"@controller\",\"@model\"],[[30,2],[30,3]]],null]],[\"@Component\",\"@controller\",\"@model\"],[]]",
  "moduleName": "/home/runner/work/ember.js/ember.js/packages/@ember/-internals/glimmer/lib/component-managers/outlet.ts",
  "isStrictMode": true
});
class OutletComponent {
  // handle is not used by this custom definition
  handle = -1;
  resolvedName = null;
  manager = OUTLET_MANAGER;
  capabilities = CAPABILITIES_MASK$1;
  compilable;
  constructor(owner, state) {
    this.state = state;
    this.compilable = unwrapTemplate(OUTLET_COMPONENT_TEMPLATE(owner)).asLayout();
  }
}
function createRootOutlet(outletView) {
  return new OutletComponent(outletView.owner, outletView.state);
}
class RootComponentManager extends CurlyComponentManager {
  component;
  constructor(component) {
    super();
    this.component = component;
  }
  create(_owner, _state, _args, {
    isInteractive
  }, dynamicScope) {
    let component = this.component;
    let finalizer = _instrumentStart('render.component', initialRenderInstrumentDetails, component);
    dynamicScope.view = component;
    let hasWrappedElement = component.tagName !== '';

    // We usually do this in the `didCreateElement`, but that hook doesn't fire for tagless components
    if (!hasWrappedElement) {
      if (isInteractive) {
        component.trigger('willRender');
      }
      component._transitionTo('hasElement');
      if (isInteractive) {
        component.trigger('willInsertElement');
      }
    }
    let bucket = new ComponentStateBucket(component, null, CONSTANT_TAG, finalizer, hasWrappedElement, isInteractive);
    consumeTag(component[DIRTY_TAG]);
    return bucket;
  }
}

// ROOT is the top-level template it has nothing but one yield.
// it is supposed to have a dummy element
const ROOT_CAPABILITIES = {
  dynamicLayout: true,
  dynamicTag: true,
  prepareArgs: false,
  createArgs: false,
  attributeHook: true,
  elementHook: true,
  createCaller: true,
  dynamicScope: true,
  updateHook: true,
  createInstance: true,
  wrapped: true,
  willDestroy: false,
  hasSubOwner: false
};
class RootComponentDefinition {
  // handle is not used by this custom definition
  handle = -1;
  resolvedName = '-top-level';
  state;
  manager;
  capabilities = capabilityFlagsFrom(ROOT_CAPABILITIES);
  compilable = null;
  constructor(component) {
    this.manager = new RootComponentManager(component);
    let factory = getFactoryFor(component);
    this.state = factory;
  }
}
function internalHelper(helper) {
  return setInternalHelperManager(helper, {});
}

/**
@module ember
*/
class EachInWrapper {
  constructor(inner) {
    this.inner = inner;
  }
}
const eachIn = internalHelper(({
  positional
}) => {
  const inner = positional[0];
  return createComputeRef(() => {
    let iterable = valueForRef(inner);
    consumeTag(tagForObject(iterable));
    if (isProxy(iterable)) {
      // this is because the each-in doesn't actually get(proxy, 'key') but bypasses it
      // and the proxy's tag is lazy updated on access
      iterable = contentFor(iterable);
    }
    return new EachInWrapper(iterable);
  });
});
function toIterator(iterable) {
  if (iterable instanceof EachInWrapper) {
    return toEachInIterator(iterable.inner);
  } else {
    return toEachIterator(iterable);
  }
}
function toEachInIterator(iterable) {
  if (!isIndexable(iterable)) {
    return null;
  }
  if (Array.isArray(iterable) || isEmberArray(iterable)) {
    return ObjectIterator.fromIndexable(iterable);
  } else if (isNativeIterable(iterable)) {
    return MapLikeNativeIterator.from(iterable);
  } else if (hasForEach(iterable)) {
    return ObjectIterator.fromForEachable(iterable);
  } else {
    return ObjectIterator.fromIndexable(iterable);
  }
}
function toEachIterator(iterable) {
  if (!isObject(iterable)) {
    return null;
  }
  if (Array.isArray(iterable)) {
    return ArrayIterator.from(iterable);
  } else if (isEmberArray(iterable)) {
    return EmberArrayIterator.from(iterable);
  } else if (isNativeIterable(iterable)) {
    return ArrayLikeNativeIterator.from(iterable);
  } else if (hasForEach(iterable)) {
    return ArrayIterator.fromForEachable(iterable);
  } else {
    return null;
  }
}
class BoundedIterator {
  position = 0;
  constructor(length) {
    this.length = length;
  }
  isEmpty() {
    return false;
  }
  memoFor(position) {
    return position;
  }
  next() {
    let {
      length,
      position
    } = this;
    if (position >= length) {
      return null;
    }
    let value = this.valueFor(position);
    let memo = this.memoFor(position);
    this.position++;
    return {
      value,
      memo
    };
  }
}
class ArrayIterator extends BoundedIterator {
  static from(iterable) {
    return iterable.length > 0 ? new this(iterable) : null;
  }
  static fromForEachable(object) {
    let array = [];
    object.forEach(item => array.push(item));
    return this.from(array);
  }
  constructor(array) {
    super(array.length);
    this.array = array;
  }
  valueFor(position) {
    return this.array[position];
  }
}
class EmberArrayIterator extends BoundedIterator {
  static from(iterable) {
    return iterable.length > 0 ? new this(iterable) : null;
  }
  constructor(array) {
    super(array.length);
    this.array = array;
  }
  valueFor(position) {
    return objectAt(this.array, position);
  }
}
class ObjectIterator extends BoundedIterator {
  static fromIndexable(obj) {
    let keys = Object.keys(obj);
    if (keys.length === 0) {
      return null;
    } else {
      let values = [];
      for (let key of keys) {
        let value;
        value = obj[key];

        // Add the tag of the returned value if it is an array, since arrays
        // should always cause updates if they are consumed and then changed
        if (isTracking()) {
          consumeTag(tagFor(obj, key));
          if (Array.isArray(value)) {
            consumeTag(tagFor(value, '[]'));
          }
        }
        values.push(value);
      }
      return new this(keys, values);
    }
  }
  static fromForEachable(obj) {
    let keys = [];
    let values = [];
    let length = 0;
    let isMapLike = false;

    // Not using an arrow function here so we can get an accurate `arguments`
    obj.forEach(function (value, key) {
      isMapLike = isMapLike || arguments.length >= 2;
      if (isMapLike) {
        keys.push(key);
      }
      values.push(value);
      length++;
    });
    if (length === 0) {
      return null;
    } else if (isMapLike) {
      return new this(keys, values);
    } else {
      return new ArrayIterator(values);
    }
  }
  constructor(keys, values) {
    super(values.length);
    this.keys = keys;
    this.values = values;
  }
  valueFor(position) {
    return this.values[position];
  }
  memoFor(position) {
    return this.keys[position];
  }
}
class NativeIterator {
  static from(iterable) {
    let iterator = iterable[Symbol.iterator]();
    let result = iterator.next();
    let {
      done
    } = result;
    if (done) {
      return null;
    } else {
      return new this(iterator, result);
    }
  }
  position = 0;
  constructor(iterable, result) {
    this.iterable = iterable;
    this.result = result;
  }
  isEmpty() {
    return false;
  }
  next() {
    let {
      iterable,
      result,
      position
    } = this;
    if (result.done) {
      return null;
    }
    let value = this.valueFor(result, position);
    let memo = this.memoFor(result, position);
    this.position++;
    this.result = iterable.next();
    return {
      value,
      memo
    };
  }
}
class ArrayLikeNativeIterator extends NativeIterator {
  valueFor(result) {
    return result.value;
  }
  memoFor(_result, position) {
    return position;
  }
}
class MapLikeNativeIterator extends NativeIterator {
  valueFor(result) {
    return result.value[1];
  }
  memoFor(result) {
    return result.value[0];
  }
}
function hasForEach(value) {
  return value != null && typeof value['forEach'] === 'function';
}
function isNativeIterable(value) {
  return value != null && typeof value[Symbol.iterator] === 'function';
}
function isIndexable(value) {
  return value !== null && (typeof value === 'object' || typeof value === 'function');
}
function toBool(predicate) {
  if (isProxy(predicate)) {
    consumeTag(tagForProperty(predicate, 'content'));
    return Boolean(get$1(predicate, 'isTruthy'));
  } else if (isArray$2(predicate)) {
    consumeTag(tagForProperty(predicate, '[]'));
    return predicate.length !== 0;
  } else if (isHTMLSafe(predicate)) {
    return Boolean(predicate.toString());
  } else {
    return Boolean(predicate);
  }
}
setGlobalContext({
  scheduleRevalidate() {
    _backburner.ensureInstance();
  },
  toBool,
  toIterator,
  getProp: _getProp,
  setProp: _setProp,
  getPath: get$1,
  setPath: set,
  scheduleDestroy(destroyable, destructor) {
    schedule('actions', null, destructor, destroyable);
  },
  scheduleDestroyed(finalizeDestructor) {
    schedule('destroy', null, finalizeDestructor);
  }});

///////////

// Define environment delegate

class EmberEnvironmentDelegate {
  enableDebugTooling = ENV._DEBUG_RENDER_TREE;
  constructor(owner, isInteractive) {
    this.owner = owner;
    this.isInteractive = isInteractive;
  }
  onTransactionCommit() {}
}

/**
@module ember
*/
const disallowDynamicResolution = internalHelper(({
  positional,
  named
}) => {
  const nameOrValueRef = positional[0];
  let typeRef = named['type'];
  let locRef = named['loc'];
  let originalRef = named['original'];
  // assert('[BUG] expecting a string literal for the `type` argument', isConstRef(typeRef));
  // assert('[BUG] expecting a string literal for the `loc` argument', isConstRef(locRef));
  // assert('[BUG] expecting a string literal for the `original` argument', isConstRef(originalRef));
  valueForRef(typeRef);
  valueForRef(locRef);
  valueForRef(originalRef);
  return createComputeRef(() => {
    let nameOrValue = valueForRef(nameOrValueRef);
    return nameOrValue;
  });
});
let helper$2;
{
  helper$2 = args => {
    let arg = args.positional[0];
    return arg;
  };
}
const inElementNullCheckHelper = internalHelper(helper$2);
const normalizeClassHelper = internalHelper(({
  positional
}) => {
  return createComputeRef(() => {
    let classNameArg = positional[0];
    let valueArg = positional[1];
    let classNameParts = valueForRef(classNameArg).split('.');
    let className = classNameParts[classNameParts.length - 1];
    let value = valueForRef(valueArg);
    if (value === true) {
      return dasherize$1(className);
    } else if (!value && value !== 0) {
      return '';
    } else {
      return String(value);
    }
  });
});

/**
  @module ember
*/

const resolve = internalHelper(({
  positional
}, owner) => {
  let fullNameRef = positional[0];
  let fullName = valueForRef(fullNameRef);
  return createConstRef(owner.factoryFor(fullName)?.class);
});

/**
@module ember
*/
const trackArray = internalHelper(({
  positional
}) => {
  const inner = positional[0];
  return createComputeRef(() => {
    let iterable = valueForRef(inner);
    if (isObject(iterable)) {
      consumeTag(tagForProperty(iterable, '[]'));
    }
    return iterable;
  });
});

/**
@module ember
*/
const mut = internalHelper(({
  positional
}) => {
  let ref = positional[0];
  return createInvokableRef(ref);
});

/**
@module ember
*/

const readonly = internalHelper(({
  positional
}) => {
  let firstArg = positional[0];
  return createReadOnlyRef(firstArg);
});

/**
@module ember
*/

const unbound = internalHelper(({
  positional,
  named
}) => {
  return createUnboundRef(valueForRef(positional[0]));
});

/**
@module ember
*/

const uniqueId$1 = internalHelper(() => {
  // SAFETY: glimmer-vm should change the signature of createUnboundRef to use a generic
  //         so that the type param to `Reference<?>` can infer from the first argument.
  //
  // NOTE: constRef is an optimization so we don't let the VM create extra wrappers,
  //       tracking frames, etc.
  return createConstRef(uniqueId$1$1());
});

// From https://gist.github.com/selfish/fef2c0ba6cdfe07af76e64cecd74888b
//
// This code should be reasonably fast, and provide a unique value every time
// it's called, which is what we need here. It produces a string formatted as a
// standard UUID, which avoids accidentally turning Ember-specific
// implementation details into an intimate API. It also ensures that the UUID
// always starts with a letter, to avoid creating invalid IDs with a numeric
// digit at the start.
function uniqueId$1$1() {
  // @ts-expect-error this one-liner abuses weird JavaScript semantics that
  // TypeScript (legitimately) doesn't like, but they're nonetheless valid and
  // specced.
  return ([3e7] + -1e3 + -4e3 + -2e3 + -1e11).replace(/[0-3]/g, a => (a * 4 ^ Math.random() * 16 >> (a & 2)).toString(16));
}
const CAPABILITIES$1 = {
  dynamicLayout: true,
  dynamicTag: false,
  prepareArgs: false,
  createArgs: true,
  attributeHook: false,
  elementHook: false,
  createCaller: true,
  dynamicScope: true,
  updateHook: true,
  createInstance: true,
  wrapped: false,
  willDestroy: false,
  hasSubOwner: true
};
class MountManager {
  getDynamicLayout(state) {
    let templateFactory = state.engine.lookup('template:application');
    return unwrapTemplate(templateFactory(state.engine)).asLayout();
  }
  getCapabilities() {
    return CAPABILITIES$1;
  }
  getOwner(state) {
    return state.engine;
  }
  create(owner, {
    name
  }, args, env) {
    let engine = owner.buildChildEngineInstance(name);
    engine.boot();
    let applicationFactory = engine.factoryFor(`controller:application`);
    let controllerFactory = applicationFactory || generateControllerFactory(engine, 'application');
    let controller;
    let self;
    let bucket;
    let modelRef;
    if (args.named.has('model')) {
      modelRef = args.named.get('model');
    }
    if (modelRef === undefined) {
      controller = controllerFactory.create();
      self = createConstRef(controller);
      bucket = {
        engine,
        controller,
        self,
        modelRef
      };
    } else {
      let model = valueForRef(modelRef);
      controller = controllerFactory.create({
        model
      });
      self = createConstRef(controller);
      bucket = {
        engine,
        controller,
        self,
        modelRef
      };
    }
    if (env.debugRenderTree) {
      associateDestroyableChild(engine, controller);
    }
    return bucket;
  }
  getDebugName({
    name
  }) {
    return name;
  }
  getDebugCustomRenderTree(definition, state, args, templateModuleName) {
    return [{
      bucket: state.engine,
      instance: state.engine,
      type: 'engine',
      name: definition.name,
      args
    }, {
      bucket: state.controller,
      instance: state.controller,
      type: 'route-template',
      name: 'application',
      args,
      template: templateModuleName
    }];
  }
  getSelf({
    self
  }) {
    return self;
  }
  getDestroyable(bucket) {
    return bucket.engine;
  }
  didCreate() {}
  didUpdate() {}
  didRenderLayout() {}
  didUpdateLayout() {}
  update(bucket) {
    let {
      controller,
      modelRef
    } = bucket;
    if (modelRef !== undefined) {
      controller.set('model', valueForRef(modelRef));
    }
  }
}
const MOUNT_MANAGER = new MountManager();
class MountDefinition {
  // handle is not used by this custom definition
  handle = -1;
  state;
  manager = MOUNT_MANAGER;
  compilable = null;
  capabilities = capabilityFlagsFrom(CAPABILITIES$1);
  constructor(resolvedName) {
    this.resolvedName = resolvedName;
    this.state = {
      name: resolvedName
    };
  }
}

/**
@module ember
*/

const mountHelper = internalHelper((args, owner) => {
  let nameRef = args.positional[0];
  let captured;
  captured = createCapturedArgs(args.named, EMPTY_POSITIONAL);
  let lastName, lastDef;
  return createComputeRef(() => {
    let name = valueForRef(nameRef);
    if (typeof name === 'string') {
      if (lastName === name) {
        return lastDef;
      }
      lastName = name;
      lastDef = curry(0, new MountDefinition(name), owner, captured, true);
      return lastDef;
    } else {
      lastDef = null;
      lastName = null;
      return null;
    }
  });
});
const CAPABILITIES = {
  dynamicLayout: false,
  dynamicTag: false,
  prepareArgs: false,
  createArgs: true,
  attributeHook: false,
  elementHook: false,
  createCaller: false,
  dynamicScope: false,
  updateHook: false,
  createInstance: true,
  wrapped: false,
  willDestroy: false,
  hasSubOwner: false
};
const CAPABILITIES_MASK = capabilityFlagsFrom(CAPABILITIES);
class RouteTemplateManager {
  create(_owner, _definition, args) {
    let self = args.named.get('controller');
    let controller = valueForRef(self);
    return {
      self,
      controller
    };
  }
  getSelf({
    self
  }) {
    return self;
  }
  getDebugName({
    name
  }) {
    return `route-template (${name})`;
  }
  getDebugCustomRenderTree({
    name,
    templateName
  }, state, args) {
    return [{
      bucket: state,
      type: 'route-template',
      name,
      args,
      instance: state.controller,
      template: templateName
    }];
  }
  getCapabilities() {
    return CAPABILITIES;
  }
  didRenderLayout() {}
  didUpdateLayout() {}
  didCreate() {}
  didUpdate() {}
  getDestroyable() {
    return null;
  }
}
const ROUTE_TEMPLATE_MANAGER = new RouteTemplateManager();

/**
 * This "upgrades" a route template into a invocable component. Conceptually
 * it can be 1:1 for each unique `Template`, but it's also cheap to construct,
 * so unless the stability is desirable for other reasons, it's probably not
 * worth caching this.
 */
class RouteTemplate {
  // handle is not used by this custom definition
  handle = -1;
  resolvedName;
  state;
  manager = ROUTE_TEMPLATE_MANAGER;
  capabilities = CAPABILITIES_MASK;
  compilable;
  constructor(name, template) {
    let unwrapped = unwrapTemplate(template);
    // TODO This actually seems inaccurate – it ultimately came from the
    // outlet's name. Also, setting this overrides `getDebugName()` in that
    // message. Is that desirable?
    this.resolvedName = name;
    this.state = {
      name,
      templateName: unwrapped.moduleName
    };
    this.compilable = unwrapped.asLayout();
  }
}

// TODO a lot these fields are copied from the adjacent existing components
// implementation, haven't looked into who cares about `ComponentDefinition`
// and if it is appropriate here. It seems like this version is intended to
// be used with `curry` which probably isn't necessary here. It could be the
// case that we just want to do something more similar to `InternalComponent`
// (the one we used to implement `Input` and `LinkTo`). For now it follows
// the same pattern to get things going.
function makeRouteTemplate(owner, name, template) {
  let routeTemplate = new RouteTemplate(name, template);
  return curry(0, routeTemplate, owner, null, true);
}

/**
  The `{{outlet}}` helper lets you specify where a child route will render in
  your template. An important use of the `{{outlet}}` helper is in your
  application's `application.hbs` file:

  ```app/templates/application.hbs
  <MyHeader />

  <div class="my-dynamic-content">
    <!-- this content will change based on the current route, which depends on the current URL -->
    {{outlet}}
  </div>

  <MyFooter />
  ```

  See the [routing guide](https://guides.emberjs.com/release/routing/rendering-a-template/) for more
  information on how your `route` interacts with the `{{outlet}}` helper.
  Note: Your content __will not render__ if there isn't an `{{outlet}}` for it.

  @method outlet
  @for Ember.Templates.helpers
  @public
*/
const outletHelper = internalHelper((_args, owner, scope) => {
  let outletRef = createComputeRef(() => {
    let state = valueForRef(scope.get('outletState'));
    return state?.outlets?.main;
  });
  let lastState = null;
  let outlet = null;
  return createComputeRef(() => {
    let outletState = valueForRef(outletRef);
    let state = stateFor(outletRef, outletState);

    // This code is deliberately using the behavior in glimmer-vm where in
    // <@Component />, the component is considered stabled via `===`, and
    // will continue to re-render in-place as long as the `===` holds, but
    // when it changes to a different object, it teardown the old component
    // (running destructors, etc), and render the component in its place (or
    // nothing if the new value is nullish. Here we are carefully exploiting
    // that fact, and returns the same stable object so long as it is the
    // same route, but return a different one when the route changes. On the
    // other hand, changing the model only intentionally do not teardown the
    // component and instead re-render in-place.
    if (!isStable(state, lastState)) {
      lastState = state;
      if (state !== null) {
        // If we are crossing an engine mount point, this is how the owner
        // gets switched.
        let outletOwner = outletState?.render?.owner ?? owner;
        let named = dict();

        // Here we either have a raw template that needs to be normalized,
        // or a component that we can render as-is. `RouteTemplate` upgrades
        // the template into a component so we can have a unified code path.
        // We still store the original `template` value, because we rely on
        // its identity for the stability check, and the `RouteTemplate`
        // wrapper doesn't dedup for us.
        let template = state.template;
        let component;
        if (hasInternalComponentManager(template)) {
          component = template;
        } else {
          component = makeRouteTemplate(outletOwner, state.name, template);
        }

        // Component is stable for the lifetime of the outlet
        named['Component'] = createConstRef(component);

        // Controller is stable for the lifetime of the outlet
        named['controller'] = createConstRef(state.controller);

        // Create a ref for the model
        let modelRef = childRefFromParts(outletRef, ['render', 'model']);

        // Store the value of the model
        let model = valueForRef(modelRef);

        // Create a compute ref which we pass in as the `{{@model}}` reference
        // for the outlet. This ref will update and return the value of the
        // model _until_ the outlet itself changes. Once the outlet changes,
        // dynamic scope also changes, and so the original model ref would not
        // provide the correct updated value. So we stop updating and return
        // the _last_ model value for that outlet.
        named['model'] = createComputeRef(() => {
          if (lastState === state) {
            model = valueForRef(modelRef);
          }
          return model;
        });
        let args = createCapturedArgs(named, EMPTY_POSITIONAL);

        // Package up everything
        outlet = curry(0, new OutletComponent(owner, state), outletOwner, args, true);
      } else {
        outlet = null;
      }
    }
    return outlet;
  });
});
function stateFor(ref, outlet) {
  if (outlet === undefined) return null;
  let render = outlet.render;
  if (render === undefined) return null;
  let template = render.template;
  // The type doesn't actually allow for `null`, but if we make it past this
  // point it is really important that we have _something_ to render. We could
  // assert, but that is probably overly strict for very little to gain.
  if (template === undefined || template === null) return null;
  return {
    ref,
    name: render.name,
    template,
    controller: render.controller
  };
}
function isStable(state, lastState) {
  if (state === null || lastState === null) {
    return false;
  }
  return state.template === lastState.template && state.controller === lastState.controller;
}
function instrumentationPayload(name) {
  return {
    object: `component:${name}`
  };
}
function componentFor(name, owner) {
  let fullName = `component:${name}`;
  return owner.factoryFor(fullName) || null;
}
function lookupComponentPair(owner, name) {
  let component = componentFor(name, owner);
  if (isFactory(component) && component.class) {
    let layout = getComponentTemplate(component.class);
    if (layout !== undefined) {
      return {
        component,
        layout
      };
    }
  }
  if (component === null) {
    return null;
  } else {
    return {
      component,
      layout: null
    };
  }
}
const BUILTIN_KEYWORD_HELPERS = {
  mut,
  readonly,
  unbound,
  '-hash': hash$1,
  '-each-in': eachIn,
  '-normalize-class': normalizeClassHelper,
  '-resolve': resolve,
  '-track-array': trackArray,
  '-mount': mountHelper,
  '-outlet': outletHelper,
  '-in-el-null': inElementNullCheckHelper
};
const BUILTIN_HELPERS = {
  ...BUILTIN_KEYWORD_HELPERS,
  array,
  concat,
  fn,
  get: get,
  hash: hash$1,
  'unique-id': uniqueId$1
};
{
  // Bug: this may be a quirk of our test setup?
  // In prod builds, this is a no-op helper and is unused in practice. We shouldn't need
  // to add it at all, but the current test build doesn't produce a "prod compiler", so
  // we ended up running the debug-build for the template compliler in prod tests. Once
  // that is fixed, this can be removed. For now, this allows the test to work and does
  // not really harm anything, since it's just a no-op pass-through helper and the bytes
  // has to be included anyway. In the future, perhaps we can avoid the latter by using
  // `import(...)`?
  BUILTIN_HELPERS['-disallow-dynamic-resolution'] = disallowDynamicResolution;
}

// With the implementation of RFC #1006(https://rfcs.emberjs.com/id/1006-deprecate-action-template-helper), the `action` modifer was removed. It was the
// only built-in keyword modifier, so this object is currently empty.
const BUILTIN_KEYWORD_MODIFIERS = {};
const BUILTIN_MODIFIERS = {
  ...BUILTIN_KEYWORD_MODIFIERS,
  on: on$1
};
class ResolverImpl {
  componentDefinitionCache = new Map();
  lookupPartial() {
    return null;
  }
  lookupHelper(name, owner) {
    let helper = BUILTIN_HELPERS[name];
    if (helper !== undefined) {
      return helper;
    }
    let factory = owner.factoryFor(`helper:${name}`);
    if (factory === undefined) {
      return null;
    }
    let definition = factory.class;
    if (definition === undefined) {
      return null;
    }
    if (typeof definition === 'function' && isClassicHelper(definition)) {
      // For classic class based helpers, we need to pass the factoryFor result itself rather
      // than the raw value (`factoryFor(...).class`). This is because injections are already
      // bound in the factoryFor result, including type-based injections

      {
        setInternalHelperManager(CLASSIC_HELPER_MANAGER, factory);
      }
      return factory;
    }
    return definition;
  }
  lookupBuiltInHelper(name) {
    return BUILTIN_KEYWORD_HELPERS[name] ?? null;
  }
  lookupModifier(name, owner) {
    let builtin = BUILTIN_MODIFIERS[name];
    if (builtin !== undefined) {
      return builtin;
    }
    let modifier = owner.factoryFor(`modifier:${name}`);
    if (modifier === undefined) {
      return null;
    }
    return modifier.class || null;
  }
  lookupBuiltInModifier(name) {
    return BUILTIN_KEYWORD_MODIFIERS[name] ?? null;
  }
  lookupComponent(name, owner) {
    let pair = lookupComponentPair(owner, name);
    if (pair === null) {
      return null;
    }
    let template = null;
    let key;
    if (pair.component === null) {
      key = template = pair.layout(owner);
    } else {
      key = pair.component;
    }
    let cachedComponentDefinition = this.componentDefinitionCache.get(key);
    if (cachedComponentDefinition !== undefined) {
      return cachedComponentDefinition;
    }
    if (template === null && pair.layout !== null) {
      template = pair.layout(owner);
    }
    let finalizer = _instrumentStart('render.getComponentDefinition', instrumentationPayload, name);
    let definition = null;
    if (pair.component === null) {
      definition = {
        state: templateOnlyComponent(undefined, name),
        manager: TEMPLATE_ONLY_COMPONENT_MANAGER,
        template
      };
    } else {
      let factory = pair.component;
      let ComponentClass = factory.class;
      let manager = getInternalComponentManager(ComponentClass);
      definition = {
        state: isCurlyManager(manager) ? factory : ComponentClass,
        manager,
        template
      };
    }
    finalizer();
    this.componentDefinitionCache.set(key, definition);
    return definition;
  }
}

// We use the `InternalOwner` notion here because we actually need all of its
// API for using with renderers (normally, it will be `EngineInstance`).
// We use `getOwner` from our internal home for it rather than the narrower
// public API for the same reason.
const TOP_LEVEL_NAME = '-top-level';
class OutletView {
  static extend(injections) {
    return class extends OutletView {
      static create(options) {
        if (options) {
          return super.create(Object.assign({}, injections, options));
        } else {
          return super.create(injections);
        }
      }
    };
  }
  static reopenClass(injections) {
    Object.assign(this, injections);
  }
  static create(options) {
    let {
      environment: _environment,
      application: namespace,
      template: templateFactory
    } = options;
    let owner = getOwner$2(options);
    let template = templateFactory(owner);
    return new OutletView(_environment, owner, template, namespace);
  }
  ref;
  state;
  constructor(_environment, owner, template, namespace) {
    this._environment = _environment;
    this.owner = owner;
    this.template = template;
    this.namespace = namespace;
    let outletStateTag = createTag();
    let outletState = {
      outlets: {
        main: undefined
      },
      render: {
        owner: owner,
        name: TOP_LEVEL_NAME,
        controller: undefined,
        model: undefined,
        template
      }
    };
    let ref = this.ref = createComputeRef(() => {
      consumeTag(outletStateTag);
      return outletState;
    }, state => {
      DIRTY_TAG$1(outletStateTag);
      outletState.outlets['main'] = state;
    });
    this.state = {
      ref,
      name: TOP_LEVEL_NAME,
      template,
      controller: undefined
    };
  }
  appendTo(selector) {
    let target;
    if (this._environment.hasDOM) {
      target = typeof selector === 'string' ? document.querySelector(selector) : selector;
    } else {
      target = selector;
    }
    let renderer = this.owner.lookup('renderer:-dom');

    // SAFETY: It's not clear that this cast is safe.
    // The types for appendOutletView may be incorrect or this is a potential bug.
    schedule('render', renderer, 'appendOutletView', this, target);
  }
  rerender() {
    /**/
  }
  setOutletState(state) {
    updateRef(this.ref, state);
  }
  destroy() {
    /**/
  }
}
class DynamicScope {
  constructor(view, outletState) {
    this.view = view;
    this.outletState = outletState;
  }
  child() {
    return new DynamicScope(this.view, this.outletState);
  }
  get(key) {
    return this.outletState;
  }
  set(key, value) {
    this.outletState = value;
    return value;
  }
}
const NO_OP = () => {};

// This wrapper logic prevents us from rerendering in case of a hard failure
// during render. This prevents infinite revalidation type loops from occuring,
// and ensures that errors are not swallowed by subsequent follow on failures.
function errorLoopTransaction(fn) {
  {
    return fn;
  }
}
class RootState {
  id;
  result;
  destroyed;
  render;
  env;
  constructor(root, context, owner, template, self, parentElement, dynamicScope, builder) {
    this.root = root;
    this.id = root instanceof OutletView ? guidFor(root) : getViewId(root);
    this.result = undefined;
    this.destroyed = false;
    this.env = context.env;
    this.render = errorLoopTransaction(() => {
      let layout = unwrapTemplate(template).asLayout();
      let iterator = renderMain(context, owner, self, builder(context.env, {
        element: parentElement,
        nextSibling: null
      }), layout, dynamicScope);
      let result = this.result = iterator.sync();

      // override .render function after initial render
      this.render = errorLoopTransaction(() => result.rerender({
        alwaysRevalidate: false
      }));
    });
  }
  isFor(possibleRoot) {
    return this.root === possibleRoot;
  }
  destroy() {
    let {
      result,
      env
    } = this;
    this.destroyed = true;
    this.root = null;
    this.result = undefined;
    this.render = undefined;
    if (result !== undefined) {
      /*
       Handles these scenarios:
        * When roots are removed during standard rendering process, a transaction exists already
         `.begin()` / `.commit()` are not needed.
       * When roots are being destroyed manually (`component.append(); component.destroy() case), no
         transaction exists already.
       * When roots are being destroyed during `Renderer#destroy`, no transaction exists
        */

      inTransaction(env, () => destroy(result));
    }
  }
}
const renderers = [];
function _resetRenderers() {
  renderers.length = 0;
}
function register(renderer) {
  renderers.push(renderer);
}
function deregister(renderer) {
  let index = renderers.indexOf(renderer);
  renderers.splice(index, 1);
}
function loopBegin() {
  for (let renderer of renderers) {
    renderer._scheduleRevalidate();
  }
}
let renderSettledDeferred = null;
/*
  Returns a promise which will resolve when rendering has settled. Settled in
  this context is defined as when all of the tags in use are "current" (e.g.
  `renderers.every(r => r._isValid())`). When this is checked at the _end_ of
  the run loop, this essentially guarantees that all rendering is completed.

  @method renderSettled
  @returns {Promise<void>} a promise which fulfills when rendering has settled
*/
function renderSettled$2() {
  if (renderSettledDeferred === null) {
    renderSettledDeferred = RSVP.defer();
    // if there is no current runloop, the promise created above will not have
    // a chance to resolve (because its resolved in backburner's "end" event)
    if (!_getCurrentRunLoop()) {
      // ensure a runloop has been kicked off
      _backburner.schedule('actions', null, NO_OP);
    }
  }
  return renderSettledDeferred.promise;
}
function resolveRenderPromise() {
  if (renderSettledDeferred !== null) {
    let resolve = renderSettledDeferred.resolve;
    renderSettledDeferred = null;
    _backburner.join(null, resolve);
  }
}
let loops = 0;
function loopEnd() {
  for (let renderer of renderers) {
    if (!renderer._isValid()) {
      if (loops > ENV._RERENDER_LOOP_LIMIT) {
        loops = 0;
        // TODO: do something better
        renderer.destroy();
        throw new Error('infinite rendering invalidation detected');
      }
      loops++;
      return _backburner.join(null, NO_OP);
    }
  }
  loops = 0;
  resolveRenderPromise();
}
_backburner.on('begin', loopBegin);
_backburner.on('end', loopEnd);
class Renderer {
  _rootTemplate;
  _viewRegistry;
  _roots;
  _removedRoots;
  _builder;
  _inRenderTransaction = false;
  _owner;
  _context;
  _lastRevision = -1;
  _destroyed = false;

  /** @internal */
  _isInteractive;
  _runtimeResolver;
  env;
  static create(props) {
    let {
      _viewRegistry
    } = props;
    let owner = getOwner$2(props);
    let document = owner.lookup('service:-document');
    let env = owner.lookup('-environment:main');
    let rootTemplate = owner.lookup(privatize`template:-root`);
    let builder = owner.lookup('service:-dom-builder');
    return new this(owner, document, env, rootTemplate, _viewRegistry, builder);
  }
  constructor(owner, document, envOptions, rootTemplate, viewRegistry, builder = clientBuilder) {
    this._owner = owner;
    this._rootTemplate = rootTemplate(owner);
    this._viewRegistry = viewRegistry || owner.lookup('-view-registry:main');
    this._roots = [];
    this._removedRoots = [];
    this._builder = builder;
    this._isInteractive = envOptions.isInteractive;
    let sharedArtifacts = artifacts();

    // resolver is exposed for tests
    let resolver = this._runtimeResolver = new ResolverImpl();
    let env = new EmberEnvironmentDelegate(owner, envOptions.isInteractive);
    let options = runtimeOptions({
      document
    }, env, sharedArtifacts, resolver);
    this._context = new EvaluationContextImpl(sharedArtifacts, heap => new RuntimeOpImpl(heap), options);
    this.env = this._context.env;
  }
  get debugRenderTree() {
    let {
      debugRenderTree
    } = this.env;
    return debugRenderTree;
  }

  // renderer HOOKS

  appendOutletView(view, target) {
    // TODO: This bypasses the {{outlet}} syntax so logically duplicates
    // some of the set up code. Since this is all internal (or is it?),
    // we can refactor this to do something more direct/less convoluted
    // and with less setup, but get it working first
    let outlet = createRootOutlet(view);
    let {
      name,
      /* controller, */template
    } = view.state;
    let named = dict();
    named['Component'] = createConstRef(makeRouteTemplate(view.owner, name, template));

    // TODO: is this guaranteed to be undefined? It seems to be the
    // case in the `OutletView` class. Investigate how much that class
    // exists as an internal implementation detail only, or if it was
    // used outside of core. As far as I can tell, test-helpers uses
    // it but only for `setOutletState`.
    // named['controller'] = createConstRef(controller, '@controller');
    // Update: at least according to the debug render tree tests, we
    // appear to always expect this to be undefined. Not a definitive
    // source by any means, but is useful evidence
    named['controller'] = UNDEFINED_REFERENCE;
    named['model'] = UNDEFINED_REFERENCE;
    let args = createCapturedArgs(named, EMPTY_POSITIONAL);
    this._appendDefinition(view, curry(0, outlet, view.owner, args, true), target);
  }
  appendTo(view, target) {
    let definition = new RootComponentDefinition(view);
    this._appendDefinition(view, curry(0, definition, this._owner, null, true), target);
  }
  _appendDefinition(root, definition, target) {
    let self = createConstRef(definition);
    let dynamicScope = new DynamicScope(null, UNDEFINED_REFERENCE);
    let rootState = new RootState(root, this._context, this._owner, this._rootTemplate, self, target, dynamicScope, this._builder);
    this._renderRoot(rootState);
  }
  rerender() {
    this._scheduleRevalidate();
  }
  register(view) {
    let id = getViewId(view);
    this._viewRegistry[id] = view;
  }
  unregister(view) {
    delete this._viewRegistry[getViewId(view)];
  }
  remove(view) {
    view._transitionTo('destroying');
    this.cleanupRootFor(view);
    if (this._isInteractive) {
      view.trigger('didDestroyElement');
    }
  }
  cleanupRootFor(view) {
    // no need to cleanup roots if we have already been destroyed
    if (this._destroyed) {
      return;
    }
    let roots = this._roots;

    // traverse in reverse so we can remove items
    // without mucking up the index
    let i = this._roots.length;
    while (i--) {
      let root = roots[i];
      if (root.isFor(view)) {
        root.destroy();
        roots.splice(i, 1);
      }
    }
  }
  destroy() {
    if (this._destroyed) {
      return;
    }
    this._destroyed = true;
    this._clearAllRoots();
  }
  getElement(view) {
    if (this._isInteractive) {
      return getViewElement(view);
    } else {
      throw new Error('Accessing `this.element` is not allowed in non-interactive environments (such as FastBoot).');
    }
  }
  getBounds(view) {
    let bounds = view[BOUNDS];
    let parentElement = bounds.parentElement();
    let firstNode = bounds.firstNode();
    let lastNode = bounds.lastNode();
    return {
      parentElement,
      firstNode,
      lastNode
    };
  }
  createElement(tagName) {
    return this.env.getAppendOperations().createElement(tagName);
  }
  _renderRoot(root) {
    let {
      _roots: roots
    } = this;
    roots.push(root);
    if (roots.length === 1) {
      register(this);
    }
    this._renderRootsTransaction();
  }
  _renderRoots() {
    let {
      _roots: roots,
      _removedRoots: removedRoots
    } = this;
    let initialRootsLength;
    do {
      initialRootsLength = roots.length;
      inTransaction(this.env, () => {
        // ensure that for the first iteration of the loop
        // each root is processed
        for (let i = 0; i < roots.length; i++) {
          let root = roots[i];
          false && !root && assert$1('has root', root);
          if (root.destroyed) {
            // add to the list of roots to be removed
            // they will be removed from `this._roots` later
            removedRoots.push(root);

            // skip over roots that have been marked as destroyed
            continue;
          }

          // when processing non-initial reflush loops,
          // do not process more roots than needed
          if (i >= initialRootsLength) {
            continue;
          }
          root.render();
        }
        this._lastRevision = valueForTag(CURRENT_TAG);
      });
    } while (roots.length > initialRootsLength);

    // remove any roots that were destroyed during this transaction
    while (removedRoots.length) {
      let root = removedRoots.pop();
      let rootIndex = roots.indexOf(root);
      roots.splice(rootIndex, 1);
    }
    if (this._roots.length === 0) {
      deregister(this);
    }
  }
  _renderRootsTransaction() {
    if (this._inRenderTransaction) {
      // currently rendering roots, a new root was added and will
      // be processed by the existing _renderRoots invocation
      return;
    }

    // used to prevent calling _renderRoots again (see above)
    // while we are actively rendering roots
    this._inRenderTransaction = true;
    let completedWithoutError = false;
    try {
      this._renderRoots();
      completedWithoutError = true;
    } finally {
      if (!completedWithoutError) {
        this._lastRevision = valueForTag(CURRENT_TAG);
      }
      this._inRenderTransaction = false;
    }
  }
  _clearAllRoots() {
    let roots = this._roots;
    for (let root of roots) {
      root.destroy();
    }
    this._removedRoots.length = 0;
    this._roots = [];

    // if roots were present before destroying
    // deregister this renderer instance
    if (roots.length) {
      deregister(this);
    }
  }
  _scheduleRevalidate() {
    _backburner.scheduleOnce('render', this, this._revalidate);
  }
  _isValid() {
    return this._destroyed || this._roots.length === 0 || validateTag(CURRENT_TAG, this._lastRevision);
  }
  _revalidate() {
    if (this._isValid()) {
      return;
    }
    this._renderRootsTransaction();
  }
}
const OutletTemplate = templateFactory(
/*
  {{component (outletHelper)}}
*/
{
  "id": "tiXbzL5t",
  "block": "[[[46,[28,[32,0],null,null],null,null,null]],[],[\"component\"]]",
  "moduleName": "packages/@ember/-internals/glimmer/lib/templates/outlet.hbs",
  "scope": () => [outletHelper],
  "isStrictMode": true
});

/**
@module @ember/application
*/

/**
  The `ApplicationInstance` encapsulates all of the stateful aspects of a
  running `Application`.

  At a high-level, we break application boot into two distinct phases:

  * Definition time, where all of the classes, templates, and other
    dependencies are loaded (typically in the browser).
  * Run time, where we begin executing the application once everything
    has loaded.

  Definition time can be expensive and only needs to happen once since it is
  an idempotent operation. For example, between test runs and FastBoot
  requests, the application stays the same. It is only the state that we want
  to reset.

  That state is what the `ApplicationInstance` manages: it is responsible for
  creating the container that contains all application state, and disposing of
  it once the particular test run or FastBoot request has finished.

  @public
  @class ApplicationInstance
  @extends EngineInstance
*/

class ApplicationInstance extends EngineInstance {
  /**
    The `Application` for which this is an instance.
     @property {Application} application
    @private
  */

  /**
    The root DOM element of the Application as an element or a
    CSS selector.
     @private
    @property {String|DOMElement} rootElement
  */
  rootElement = null;
  init(properties) {
    super.init(properties);
    this.application._watchInstance(this);

    // Register this instance in the per-instance registry.
    //
    // Why do we need to register the instance in the first place?
    // Because we need a good way for the root route (a.k.a ApplicationRoute)
    // to notify us when it has created the root-most view. That view is then
    // appended to the rootElement, in the case of apps, to the fixture harness
    // in tests, or rendered to a string in the case of FastBoot.
    this.register('-application-instance:main', this, {
      instantiate: false
    });
  }

  /**
    Overrides the base `EngineInstance._bootSync` method with concerns relevant
    to booting application (instead of engine) instances.
     This method should only contain synchronous boot concerns. Asynchronous
    boot concerns should eventually be moved to the `boot` method, which
    returns a promise.
     Until all boot code has been made asynchronous, we need to continue to
    expose this method for use *internally* in places where we need to boot an
    instance synchronously.
     @private
  */
  _bootSync(options) {
    if (this._booted) {
      return this;
    }
    options = new _BootOptions(options);
    this.setupRegistry(options);
    if (options.rootElement) {
      this.rootElement = options.rootElement;
    } else {
      this.rootElement = this.application.rootElement;
    }
    if (options.location) {
      set(this.router, 'location', options.location);
    }
    this.application.runInstanceInitializers(this);
    if (options.isInteractive) {
      this.setupEventDispatcher();
    }
    this._booted = true;
    return this;
  }
  setupRegistry(options) {
    this.constructor.setupRegistry(this.__registry__, options);
  }
  _router;
  get router() {
    if (!this._router) {
      let router = this.lookup('router:main');
      this._router = router;
    }
    return this._router;
  }

  /**
    This hook is called by the root-most Route (a.k.a. the ApplicationRoute)
    when it has finished creating the root View. By default, we simply take the
    view and append it to the `rootElement` specified on the Application.
     In cases like FastBoot and testing, we can override this hook and implement
    custom behavior, such as serializing to a string and sending over an HTTP
    socket rather than appending to DOM.
     @param view {Ember.View} the root-most view
    @deprecated
    @private
  */
  didCreateRootView(view) {
    view.appendTo(this.rootElement);
  }

  /**
    Tells the router to start routing. The router will ask the location for the
    current URL of the page to determine the initial URL to start routing to.
    To start the app at a specific URL, call `handleURL` instead.
     @private
  */
  startRouting() {
    this.router.startRouting();
  }

  /**
    Sets up the router, initializing the child router and configuring the
    location before routing begins.
     Because setup should only occur once, multiple calls to `setupRouter`
    beyond the first call have no effect.
     This is commonly used in order to confirm things that rely on the router
    are functioning properly from tests that are primarily rendering related.
     For example, from within [ember-qunit](https://github.com/emberjs/ember-qunit)'s
    `setupRenderingTest` calling `this.owner.setupRouter()` would allow that
    rendering test to confirm that any `<LinkTo></LinkTo>`'s that are rendered
    have the correct URL.
     @public
  */
  setupRouter() {
    this.router.setupRouter();
  }

  /**
    Directs the router to route to a particular URL. This is useful in tests,
    for example, to tell the app to start at a particular URL.
     @param url {String} the URL the router should route to
    @private
  */
  handleURL(url) {
    this.setupRouter();
    return this.router.handleURL(url);
  }

  /**
    @private
  */
  setupEventDispatcher() {
    let dispatcher = this.lookup('event_dispatcher:main');
    let applicationCustomEvents = get$1(this.application, 'customEvents');
    let instanceCustomEvents = get$1(this, 'customEvents');
    let customEvents = Object.assign({}, applicationCustomEvents, instanceCustomEvents);
    dispatcher.setup(customEvents, this.rootElement);
    return dispatcher;
  }

  /**
    Returns the current URL of the app instance. This is useful when your
    app does not update the browsers URL bar (i.e. it uses the `'none'`
    location adapter).
     @public
    @return {String} the current URL
  */
  getURL() {
    return this.router.url;
  }

  // `instance.visit(url)` should eventually replace `instance.handleURL()`;
  // the test helpers can probably be switched to use this implementation too

  /**
    Navigate the instance to a particular URL. This is useful in tests, for
    example, or to tell the app to start at a particular URL. This method
    returns a promise that resolves with the app instance when the transition
    is complete, or rejects if the transition was aborted due to an error.
     @public
    @param url {String} the destination URL
    @return {Promise<ApplicationInstance>}
  */
  visit(url) {
    this.setupRouter();
    let bootOptions = this.__container__.lookup('-environment:main');
    let router = this.router;
    let handleTransitionResolve = () => {
      if (!bootOptions.options.shouldRender) {
        // No rendering is needed, and routing has completed, simply return.
        return this;
      } else {
        // Ensure that the visit promise resolves when all rendering has completed
        return renderSettled$2().then(() => this);
      }
    };
    let handleTransitionReject = error => {
      if (error.error && error.error instanceof Error) {
        throw error.error;
      } else if (error.name === 'TransitionAborted' && router._routerMicrolib.activeTransition) {
        return router._routerMicrolib.activeTransition.then(handleTransitionResolve, handleTransitionReject);
      } else if (error.name === 'TransitionAborted') {
        throw new Error(error.message);
      } else {
        throw error;
      }
    };
    let location = get$1(router, 'location');
    location.setURL(url);

    // getURL returns the set url with the rootURL stripped off
    return router.handleURL(location.getURL()).then(handleTransitionResolve, handleTransitionReject);
  }
  willDestroy() {
    super.willDestroy();
    this.application._unwatchInstance(this);
  }

  /**
   @private
   @method setupRegistry
   @param {Registry} registry
   @param {BootOptions} options
  */
  static setupRegistry(registry, options = {}) {
    let coptions = options instanceof _BootOptions ? options : new _BootOptions(options);
    registry.register('-environment:main', coptions.toEnvironment(), {
      instantiate: false
    });
    registry.register('service:-document', coptions.document, {
      instantiate: false
    });
    super.setupRegistry(registry, coptions);
  }
}

/**
  A list of boot-time configuration options for customizing the behavior of
  an `ApplicationInstance`.

  This is an interface class that exists purely to document the available
  options; you do not need to construct it manually. Simply pass a regular
  JavaScript object containing the desired options into methods that require
  one of these options object:

  ```javascript
  MyApp.visit("/", { location: "none", rootElement: "#container" });
  ```

  Not all combinations of the supported options are valid. See the documentation
  on `Application#visit` for the supported configurations.

  Internal, experimental or otherwise unstable flags are marked as private.

  @class BootOptions
  @namespace ApplicationInstance
  @public
*/
class _BootOptions {
  /**
    Interactive mode: whether we need to set up event delegation and invoke
    lifecycle callbacks on Components.
     @property isInteractive
    @type boolean
    @default auto-detected
    @private
  */
  isInteractive;

  /**
    @property _renderMode
    @type string
    @default undefined
    @private
  */
  _renderMode;

  /**
    Run in a full browser environment.
     When this flag is set to `false`, it will disable most browser-specific
    and interactive features. Specifically:
     * It does not use `jQuery` to append the root view; the `rootElement`
      (either specified as a subsequent option or on the application itself)
      must already be an `Element` in the given `document` (as opposed to a
      string selector).
     * It does not set up an `EventDispatcher`.
     * It does not run any `Component` lifecycle hooks (such as `didInsertElement`).
     * It sets the `location` option to `"none"`. (If you would like to use
      the location adapter specified in the app's router instead, you can also
      specify `{ location: null }` to specifically opt-out.)
     @property isBrowser
    @type boolean
    @default auto-detected
    @public
  */
  isBrowser;

  /**
    If present, overrides the router's `location` property with this
    value. This is useful for environments where trying to modify the
    URL would be inappropriate.
     @property location
    @type string
    @default null
    @public
  */
  location = null;

  /**
    Disable rendering completely.
     When this flag is set to `false`, it will disable the entire rendering
    pipeline. Essentially, this puts the app into "routing-only" mode. No
    templates will be rendered, and no Components will be created.
     @property shouldRender
    @type boolean
    @default true
    @public
  */
  shouldRender;

  /**
    If present, render into the given `Document` object instead of the
    global `window.document` object.
     In practice, this is only useful in non-browser environment or in
    non-interactive mode, because Ember's `jQuery` dependency is
    implicitly bound to the current document, causing event delegation
    to not work properly when the app is rendered into a foreign
    document object (such as an iframe's `contentDocument`).
     In non-browser mode, this could be a "`Document`-like" object as
    Ember only interact with a small subset of the DOM API in non-
    interactive mode. While the exact requirements have not yet been
    formalized, the `SimpleDOM` library's implementation is known to
    work.
     @property document
    @type Document
    @default the global `document` object
    @public
  */
  document;

  /**
    If present, overrides the application's `rootElement` property on
    the instance. This is useful for testing environment, where you
    might want to append the root view to a fixture area.
     In non-browser mode, because Ember does not have access to jQuery,
    this options must be specified as a DOM `Element` object instead of
    a selector string.
     See the documentation on `Application`'s `rootElement` for
    details.
     @property rootElement
    @type String|Element
    @default null
    @public
  */
  rootElement;
  constructor(options = {}) {
    this.isInteractive = Boolean(hasDOM); // This default is overridable below
    this._renderMode = options._renderMode;
    if (options.isBrowser !== undefined) {
      this.isBrowser = Boolean(options.isBrowser);
    } else {
      this.isBrowser = Boolean(hasDOM);
    }
    if (!this.isBrowser) {
      this.isInteractive = false;
      this.location = 'none';
    }
    if (options.shouldRender !== undefined) {
      this.shouldRender = Boolean(options.shouldRender);
    } else {
      this.shouldRender = true;
    }
    if (!this.shouldRender) {
      this.isInteractive = false;
    }
    if (options.document) {
      this.document = options.document;
    } else {
      this.document = typeof document !== 'undefined' ? document : null;
    }
    if (options.rootElement) {
      this.rootElement = options.rootElement;
    }

    // Set these options last to give the user a chance to override the
    // defaults from the "combo" options like `isBrowser` (although in
    // practice, the resulting combination is probably invalid)

    if (options.location !== undefined) {
      this.location = options.location;
    }
    if (options.isInteractive !== undefined) {
      this.isInteractive = Boolean(options.isInteractive);
    }
  }
  toEnvironment() {
    // Do we really want to assign all of this!?
    return {
      ...environment,
      // For compatibility with existing code
      hasDOM: this.isBrowser,
      isInteractive: this.isInteractive,
      _renderMode: this._renderMode,
      options: this
    };
  }
}

/**
  Checks to see if the `methodName` exists on the `obj`.

  ```javascript
  let foo = { bar: function() { return 'bar'; }, baz: null };

  Ember.canInvoke(foo, 'bar'); // true
  Ember.canInvoke(foo, 'baz'); // false
  Ember.canInvoke(foo, 'bat'); // false
  ```

  @method canInvoke
  @for Ember
  @param {Object} obj The object to check for the method
  @param {String} methodName The method name to check for
  @return {Boolean}
  @private
*/
function canInvoke(obj, methodName) {
  return obj != null && typeof obj[methodName] === 'function';
}

/**
@module @ember/application/namespace
*/

class Namespace extends EmberObject {
  static NAMESPACES = NAMESPACES;
  static NAMESPACES_BY_ID = NAMESPACES_BY_ID;
  static processAll = processAllNamespaces;
  static byName = findNamespace;
  init(properties) {
    super.init(properties);
    addNamespace(this);
  }
  toString() {
    let existing_name = get$1(this, 'name') || get$1(this, 'modulePrefix');
    if (existing_name) {
      return existing_name;
    }
    findNamespaces();
    let name = getName(this);
    if (name === undefined) {
      name = guidFor(this);
      setName(this, name);
    }
    return name;
  }
  nameClasses() {
    processNamespace(this);
  }
  destroy() {
    removeNamespace(this);
    return super.destroy();
  }
}

// Declare on the prototype to have a single shared value.
Namespace.prototype.isNamespace = true;

/**
 * A topologically ordered map of key/value pairs with a simple API for adding constraints.
 *
 * Edges can forward reference keys that have not been added yet (the forward reference will
 * map the key to undefined).
 */
var DAG = function () {
  function DAG() {
    this._vertices = new Vertices();
  }
  /**
   * Adds a key/value pair with dependencies on other key/value pairs.
   *
   * @public
   * @param key    The key of the vertex to be added.
   * @param value  The value of that vertex.
   * @param before A key or array of keys of the vertices that must
   *               be visited before this vertex.
   * @param after  An string or array of strings with the keys of the
   *               vertices that must be after this vertex is visited.
   */
  DAG.prototype.add = function (key, value, before, after) {
    if (!key) throw new Error('argument `key` is required');
    var vertices = this._vertices;
    var v = vertices.add(key);
    v.val = value;
    if (before) {
      if (typeof before === "string") {
        vertices.addEdge(v, vertices.add(before));
      } else {
        for (var i = 0; i < before.length; i++) {
          vertices.addEdge(v, vertices.add(before[i]));
        }
      }
    }
    if (after) {
      if (typeof after === "string") {
        vertices.addEdge(vertices.add(after), v);
      } else {
        for (var i = 0; i < after.length; i++) {
          vertices.addEdge(vertices.add(after[i]), v);
        }
      }
    }
  };
  /**
   * @deprecated please use add.
   */
  DAG.prototype.addEdges = function (key, value, before, after) {
    this.add(key, value, before, after);
  };
  /**
   * Visits key/value pairs in topological order.
   *
   * @public
   * @param callback The function to be invoked with each key/value.
   */
  DAG.prototype.each = function (callback) {
    this._vertices.walk(callback);
  };
  /**
   * @deprecated please use each.
   */
  DAG.prototype.topsort = function (callback) {
    this.each(callback);
  };
  return DAG;
}();
/** @private */
var Vertices = function () {
  function Vertices() {
    this.length = 0;
    this.stack = new IntStack();
    this.path = new IntStack();
    this.result = new IntStack();
  }
  Vertices.prototype.add = function (key) {
    if (!key) throw new Error("missing key");
    var l = this.length | 0;
    var vertex;
    for (var i = 0; i < l; i++) {
      vertex = this[i];
      if (vertex.key === key) return vertex;
    }
    this.length = l + 1;
    return this[l] = {
      idx: l,
      key: key,
      val: undefined,
      out: false,
      flag: false,
      length: 0
    };
  };
  Vertices.prototype.addEdge = function (v, w) {
    this.check(v, w.key);
    var l = w.length | 0;
    for (var i = 0; i < l; i++) {
      if (w[i] === v.idx) return;
    }
    w.length = l + 1;
    w[l] = v.idx;
    v.out = true;
  };
  Vertices.prototype.walk = function (cb) {
    this.reset();
    for (var i = 0; i < this.length; i++) {
      var vertex = this[i];
      if (vertex.out) continue;
      this.visit(vertex, "");
    }
    this.each(this.result, cb);
  };
  Vertices.prototype.check = function (v, w) {
    if (v.key === w) {
      throw new Error("cycle detected: " + w + " <- " + w);
    }
    // quick check
    if (v.length === 0) return;
    // shallow check
    for (var i = 0; i < v.length; i++) {
      var key = this[v[i]].key;
      if (key === w) {
        throw new Error("cycle detected: " + w + " <- " + v.key + " <- " + w);
      }
    }
    // deep check
    this.reset();
    this.visit(v, w);
    if (this.path.length > 0) {
      var msg_1 = "cycle detected: " + w;
      this.each(this.path, function (key) {
        msg_1 += " <- " + key;
      });
      throw new Error(msg_1);
    }
  };
  Vertices.prototype.reset = function () {
    this.stack.length = 0;
    this.path.length = 0;
    this.result.length = 0;
    for (var i = 0, l = this.length; i < l; i++) {
      this[i].flag = false;
    }
  };
  Vertices.prototype.visit = function (start, search) {
    var _a = this,
      stack = _a.stack,
      path = _a.path,
      result = _a.result;
    stack.push(start.idx);
    while (stack.length) {
      var index = stack.pop() | 0;
      if (index >= 0) {
        // enter
        var vertex = this[index];
        if (vertex.flag) continue;
        vertex.flag = true;
        path.push(index);
        if (search === vertex.key) break;
        // push exit
        stack.push(~index);
        this.pushIncoming(vertex);
      } else {
        // exit
        path.pop();
        result.push(~index);
      }
    }
  };
  Vertices.prototype.pushIncoming = function (incomming) {
    var stack = this.stack;
    for (var i = incomming.length - 1; i >= 0; i--) {
      var index = incomming[i];
      if (!this[index].flag) {
        stack.push(index);
      }
    }
  };
  Vertices.prototype.each = function (indices, cb) {
    for (var i = 0, l = indices.length; i < l; i++) {
      var vertex = this[indices[i]];
      cb(vertex.key, vertex.val);
    }
  };
  return Vertices;
}();
/** @private */
var IntStack = function () {
  function IntStack() {
    this.length = 0;
  }
  IntStack.prototype.push = function (n) {
    this[this.length++] = n | 0;
  };
  IntStack.prototype.pop = function () {
    return this[--this.length] | 0;
  };
  return IntStack;
}();

/**
@module @ember/debug/container-debug-adapter
*/

/**
  The `ContainerDebugAdapter` helps the container and resolver interface
  with tools that debug Ember such as the
  [Ember Inspector](https://github.com/emberjs/ember-inspector)
  for Chrome and Firefox.

  This class can be extended by a custom resolver implementer
  to override some of the methods with library-specific code.

  The methods likely to be overridden are:

  * `canCatalogEntriesByType`
  * `catalogEntriesByType`

  The adapter will need to be registered
  in the application's container as `container-debug-adapter:main`.

  Example:

  ```javascript
  Application.initializer({
    name: "containerDebugAdapter",

    initialize(application) {
      application.register('container-debug-adapter:main', require('app/container-debug-adapter'));
    }
  });
  ```

  @class ContainerDebugAdapter
  @extends EmberObject
  @since 1.5.0
  @public
*/
class ContainerDebugAdapter extends EmberObject {
  constructor(owner) {
    super(owner);
    this.resolver = getOwner$2(this).lookup('resolver-for-debugging:main');
  }

  /**
    The resolver instance of the application
    being debugged. This property will be injected
    on creation.
     @property resolver
    @public
  */
  resolver;

  /**
    Returns true if it is possible to catalog a list of available
    classes in the resolver for a given type.
     @method canCatalogEntriesByType
    @param {String} type The type. e.g. "model", "controller", "route".
    @return {boolean} whether a list is available for this type.
    @public
  */
  canCatalogEntriesByType(type) {
    if (type === 'model' || type === 'template') {
      return false;
    }
    return true;
  }

  /**
    Returns the available classes a given type.
     @method catalogEntriesByType
    @param {String} type The type. e.g. "model", "controller", "route".
    @return {Array} An array of strings.
    @public
  */
  catalogEntriesByType(type) {
    let namespaces = Namespace.NAMESPACES;
    let types = [];
    let typeSuffixRegex = new RegExp(`${classify$1(type)}$`);
    namespaces.forEach(namespace => {
      for (let key in namespace) {
        if (!Object.prototype.hasOwnProperty.call(namespace, key)) {
          continue;
        }
        if (typeSuffixRegex.test(key)) {
          let klass = namespace[key];
          if (typeOf(klass) === 'class') {
            types.push(dasherize$1(key.replace(typeSuffixRegex, '')));
          }
        }
      }
    });
    return types;
  }
}

const EMPTY_ATTRS = [];
function indexOfAttribute(attributes, namespaceURI, localName) {
  for (let i = 0; i < attributes.length; i++) {
    const attr = attributes[i];
    if (attr.namespaceURI === namespaceURI && attr.localName === localName) {
      return i;
    }
  }
  return -1;
}
function adjustAttrName(namespaceURI, localName) {
  return namespaceURI === "http://www.w3.org/1999/xhtml" /* HTML */ ? localName.toLowerCase() : localName;
}
function getAttribute(attributes, namespaceURI, localName) {
  const index = indexOfAttribute(attributes, namespaceURI, localName);
  return index === -1 ? null : attributes[index].value;
}
function removeAttribute(attributes, namespaceURI, localName) {
  const index = indexOfAttribute(attributes, namespaceURI, localName);
  if (index !== -1) {
    attributes.splice(index, 1);
  }
}
// https://dom.spec.whatwg.org/#dom-element-setattributens
function setAttribute(element, namespaceURI, prefix, localName, value) {
  if (typeof value !== 'string') {
    value = '' + value;
  }
  let {
    attributes
  } = element;
  if (attributes === EMPTY_ATTRS) {
    attributes = element.attributes = [];
  } else {
    const index = indexOfAttribute(attributes, namespaceURI, localName);
    if (index !== -1) {
      attributes[index].value = value;
      return;
    }
  }
  attributes.push({
    localName,
    name: prefix === null ? localName : prefix + ':' + localName,
    namespaceURI,
    prefix,
    specified: true,
    value
  });
}
class ChildNodes {
  constructor(node) {
    this.node = node;
    this.stale = true;
    this._length = 0;
  }
  get length() {
    if (this.stale) {
      this.stale = false;
      let len = 0;
      let child = this.node.firstChild;
      for (; child !== null; len++) {
        this[len] = child;
        child = child.nextSibling;
      }
      const oldLen = this._length;
      this._length = len;
      for (; len < oldLen; len++) {
        delete this[len];
      }
    }
    return this._length;
  }
  item(index) {
    return index < this.length ? this[index] : null;
  }
}
function cloneNode(node, deep) {
  const clone = nodeFrom(node);
  if (deep) {
    let child = node.firstChild;
    let nextChild = child;
    while (child !== null) {
      nextChild = child.nextSibling;
      clone.appendChild(child.cloneNode(true));
      child = nextChild;
    }
  }
  return clone;
}
function nodeFrom(node) {
  let namespaceURI;
  if (node.nodeType === 1 /* ELEMENT_NODE */) {
    namespaceURI = node.namespaceURI;
  }
  const clone = new SimpleNodeImpl(node.ownerDocument, node.nodeType, node.nodeName, node.nodeValue, namespaceURI);
  if (node.nodeType === 1 /* ELEMENT_NODE */) {
    clone.attributes = copyAttrs(node.attributes);
  }
  return clone;
}
function copyAttrs(attrs) {
  if (attrs === EMPTY_ATTRS) {
    return EMPTY_ATTRS;
  }
  const copy = [];
  for (let i = 0; i < attrs.length; i++) {
    const attr = attrs[i];
    copy.push({
      localName: attr.localName,
      name: attr.name,
      namespaceURI: attr.namespaceURI,
      prefix: attr.prefix,
      specified: true,
      value: attr.value
    });
  }
  return copy;
}
function insertBefore(parentNode, newChild, refChild) {
  invalidate(parentNode);
  insertBetween(parentNode, newChild, refChild === null ? parentNode.lastChild : refChild.previousSibling, refChild);
}
function removeChild(parentNode, oldChild) {
  invalidate(parentNode);
  removeBetween(parentNode, oldChild, oldChild.previousSibling, oldChild.nextSibling);
}
function invalidate(parentNode) {
  const childNodes = parentNode._childNodes;
  if (childNodes !== undefined) {
    childNodes.stale = true;
  }
}
function insertBetween(parentNode, newChild, previousSibling, nextSibling) {
  if (newChild.nodeType === 11 /* DOCUMENT_FRAGMENT_NODE */) {
    insertFragment(newChild, parentNode, previousSibling, nextSibling);
    return;
  }
  if (newChild.parentNode !== null) {
    removeChild(newChild.parentNode, newChild);
  }
  newChild.parentNode = parentNode;
  newChild.previousSibling = previousSibling;
  newChild.nextSibling = nextSibling;
  if (previousSibling === null) {
    parentNode.firstChild = newChild;
  } else {
    previousSibling.nextSibling = newChild;
  }
  if (nextSibling === null) {
    parentNode.lastChild = newChild;
  } else {
    nextSibling.previousSibling = newChild;
  }
}
function removeBetween(parentNode, oldChild, previousSibling, nextSibling) {
  oldChild.parentNode = null;
  oldChild.previousSibling = null;
  oldChild.nextSibling = null;
  if (previousSibling === null) {
    parentNode.firstChild = nextSibling;
  } else {
    previousSibling.nextSibling = nextSibling;
  }
  if (nextSibling === null) {
    parentNode.lastChild = previousSibling;
  } else {
    nextSibling.previousSibling = previousSibling;
  }
}
function insertFragment(fragment, parentNode, previousSibling, nextSibling) {
  const firstChild = fragment.firstChild;
  if (firstChild === null) {
    return;
  }
  fragment.firstChild = null;
  fragment.lastChild = null;
  let lastChild = firstChild;
  let newChild = firstChild;
  firstChild.previousSibling = previousSibling;
  if (previousSibling === null) {
    parentNode.firstChild = firstChild;
  } else {
    previousSibling.nextSibling = firstChild;
  }
  while (newChild !== null) {
    newChild.parentNode = parentNode;
    lastChild = newChild;
    newChild = newChild.nextSibling;
  }
  lastChild.nextSibling = nextSibling;
  if (nextSibling === null) {
    parentNode.lastChild = lastChild;
  } else {
    nextSibling.previousSibling = lastChild;
  }
}
function parseQualifiedName(qualifiedName) {
  let localName = qualifiedName;
  let prefix = null;
  const i = qualifiedName.indexOf(':');
  if (i !== -1) {
    prefix = qualifiedName.slice(0, i);
    localName = qualifiedName.slice(i + 1);
  }
  return [prefix, localName];
}
class SimpleNodeImpl {
  constructor(ownerDocument, nodeType, nodeName, nodeValue, namespaceURI) {
    this.ownerDocument = ownerDocument;
    this.nodeType = nodeType;
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    this.namespaceURI = namespaceURI;
    this.parentNode = null;
    this.previousSibling = null;
    this.nextSibling = null;
    this.firstChild = null;
    this.lastChild = null;
    this.attributes = EMPTY_ATTRS;
    /**
     * @internal
     */
    this._childNodes = undefined;
  }
  get tagName() {
    return this.nodeName;
  }
  get childNodes() {
    let children = this._childNodes;
    if (children === undefined) {
      children = this._childNodes = new ChildNodes(this);
    }
    return children;
  }
  cloneNode(deep) {
    return cloneNode(this, deep === true);
  }
  appendChild(newChild) {
    insertBefore(this, newChild, null);
    return newChild;
  }
  insertBefore(newChild, refChild) {
    insertBefore(this, newChild, refChild);
    return newChild;
  }
  removeChild(oldChild) {
    removeChild(this, oldChild);
    return oldChild;
  }
  insertAdjacentHTML(position, html) {
    const raw = new SimpleNodeImpl(this.ownerDocument, -1 /* RAW_NODE */, '#raw', html, void 0);
    let parentNode;
    let nextSibling;
    switch (position) {
      case 'beforebegin':
        parentNode = this.parentNode;
        nextSibling = this;
        break;
      case 'afterbegin':
        parentNode = this;
        nextSibling = this.firstChild;
        break;
      case 'beforeend':
        parentNode = this;
        nextSibling = null;
        break;
      case 'afterend':
        parentNode = this.parentNode;
        nextSibling = this.nextSibling;
        break;
      default:
        throw new Error('invalid position');
    }
    if (parentNode === null) {
      throw new Error(`${position} requires a parentNode`);
    }
    insertBefore(parentNode, raw, nextSibling);
  }
  getAttribute(name) {
    const localName = adjustAttrName(this.namespaceURI, name);
    return getAttribute(this.attributes, null, localName);
  }
  getAttributeNS(namespaceURI, localName) {
    return getAttribute(this.attributes, namespaceURI, localName);
  }
  setAttribute(name, value) {
    const localName = adjustAttrName(this.namespaceURI, name);
    setAttribute(this, null, null, localName, value);
  }
  setAttributeNS(namespaceURI, qualifiedName, value) {
    const [prefix, localName] = parseQualifiedName(qualifiedName);
    setAttribute(this, namespaceURI, prefix, localName, value);
  }
  removeAttribute(name) {
    const localName = adjustAttrName(this.namespaceURI, name);
    removeAttribute(this.attributes, null, localName);
  }
  removeAttributeNS(namespaceURI, localName) {
    removeAttribute(this.attributes, namespaceURI, localName);
  }
  get doctype() {
    return this.firstChild;
  }
  get documentElement() {
    return this.lastChild;
  }
  get head() {
    return this.documentElement.firstChild;
  }
  get body() {
    return this.documentElement.lastChild;
  }
  createElement(name) {
    return new SimpleNodeImpl(this, 1 /* ELEMENT_NODE */, name.toUpperCase(), null, "http://www.w3.org/1999/xhtml" /* HTML */);
  }
  createElementNS(namespace, qualifiedName) {
    // Node name is case-preserving in XML contexts, but returns canonical uppercase form in HTML contexts
    // https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-104682815
    const nodeName = namespace === "http://www.w3.org/1999/xhtml" /* HTML */ ? qualifiedName.toUpperCase() : qualifiedName;
    // we don't care to parse the qualified name because we only support HTML documents
    // which don't support prefixed elements
    return new SimpleNodeImpl(this, 1 /* ELEMENT_NODE */, nodeName, null, namespace);
  }
  createTextNode(text) {
    return new SimpleNodeImpl(this, 3 /* TEXT_NODE */, '#text', text, void 0);
  }
  createComment(text) {
    return new SimpleNodeImpl(this, 8 /* COMMENT_NODE */, '#comment', text, void 0);
  }
  /**
   * Backwards compat
   * @deprecated
   */
  createRawHTMLSection(text) {
    return new SimpleNodeImpl(this, -1 /* RAW_NODE */, '#raw', text, void 0);
  }
  createDocumentFragment() {
    return new SimpleNodeImpl(this, 11 /* DOCUMENT_FRAGMENT_NODE */, '#document-fragment', null, void 0);
  }
}
function createHTMLDocument() {
  // dom.d.ts types ownerDocument as Document but for a document ownerDocument is null
  const document = new SimpleNodeImpl(null, 9 /* DOCUMENT_NODE */, '#document', null, "http://www.w3.org/1999/xhtml" /* HTML */);
  const doctype = new SimpleNodeImpl(document, 10 /* DOCUMENT_TYPE_NODE */, 'html', null, "http://www.w3.org/1999/xhtml" /* HTML */);
  const html = new SimpleNodeImpl(document, 1 /* ELEMENT_NODE */, 'HTML', null, "http://www.w3.org/1999/xhtml" /* HTML */);
  const head = new SimpleNodeImpl(document, 1 /* ELEMENT_NODE */, 'HEAD', null, "http://www.w3.org/1999/xhtml" /* HTML */);
  const body = new SimpleNodeImpl(document, 1 /* ELEMENT_NODE */, 'BODY', null, "http://www.w3.org/1999/xhtml" /* HTML */);
  html.appendChild(head);
  html.appendChild(body);
  document.appendChild(doctype);
  document.appendChild(html);
  return document;
}

class NodeDOMTreeConstruction extends DOMTreeConstruction {
  constructor(doc) {
    super(doc || createHTMLDocument());
  }
  // override to prevent usage of `this.document` until after the constructor
  setupUselessElement() {}
  insertHTMLBefore(parent, reference, html) {
    // eslint-disable-next-line @typescript-eslint/no-deprecated, @typescript-eslint/no-non-null-assertion
    let raw = this.document.createRawHTMLSection(html);
    return parent.insertBefore(raw, reference), new ConcreteBounds(parent, raw, raw);
  }
  // override to avoid SVG detection/work when in node (this is not needed in SSR)
  createElement(tag) {
    return this.document.createElement(tag);
  }
  // override to avoid namespace shenanigans when in node (this is not needed in SSR)
  setAttribute(element, name, value) {
    element.setAttribute(name, value);
  }
}
const NEEDS_EXTRA_CLOSE = new WeakMap();
class SerializeBuilder extends NewTreeBuilder {
  __openBlock() {
    let {
      tagName: tagName
    } = this.element;
    if ("TITLE" !== tagName && "SCRIPT" !== tagName && "STYLE" !== tagName) {
      let depth = this.serializeBlockDepth++;
      this.__appendComment(`%+b:${depth}%`);
    }
    super.__openBlock();
  }
  __closeBlock() {
    let {
      tagName: tagName
    } = this.element;
    if (super.__closeBlock(), "TITLE" !== tagName && "SCRIPT" !== tagName && "STYLE" !== tagName) {
      let depth = --this.serializeBlockDepth;
      this.__appendComment(`%-b:${depth}%`);
    }
  }
  __appendHTML(html) {
    let {
      tagName: tagName
    } = this.element;
    if ("TITLE" === tagName || "SCRIPT" === tagName || "STYLE" === tagName) return super.__appendHTML(html);
    // Do we need to run the html tokenizer here?
    let first = this.__appendComment("%glmr%");
    if ("TABLE" === tagName) {
      let openIndex = html.indexOf("<");
      openIndex > -1 && "tr" === html.slice(openIndex + 1, openIndex + 3) && (html = `<tbody>${html}</tbody>`);
    }
    "" === html ? this.__appendComment("% %") : super.__appendHTML(html);
    let last = this.__appendComment("%glmr%");
    return new ConcreteBounds(this.element, first, last);
  }
  __appendText(string) {
    let {
        tagName: tagName
      } = this.element,
      current = function (cursor) {
        let {
          element: element,
          nextSibling: nextSibling
        } = cursor;
        return null === nextSibling ? element.lastChild : nextSibling.previousSibling;
      }(this);
    return "TITLE" === tagName || "SCRIPT" === tagName || "STYLE" === tagName ? super.__appendText(string) : "" === string ? this.__appendComment("% %") : (current && 3 === current.nodeType && this.__appendComment("%|%"), super.__appendText(string));
  }
  closeElement() {
    return NEEDS_EXTRA_CLOSE.has(this.element) && (NEEDS_EXTRA_CLOSE.delete(this.element), super.closeElement()), super.closeElement();
  }
  openElement(tag) {
    return "tr" === tag && "TBODY" !== this.element.tagName && "THEAD" !== this.element.tagName && "TFOOT" !== this.element.tagName && (this.openElement("tbody"),
    // This prevents the closeBlock comment from being re-parented
    // under the auto inserted tbody. Rehydration builder needs to
    // account for the insertion since it is injected here and not
    // really in the template.
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion -- @fixme
    NEEDS_EXTRA_CLOSE.set(this.constructing, true), this.flushElement(null)), super.openElement(tag);
  }
  pushRemoteElement(element, cursorId, insertBefore = null) {
    let {
        dom: dom
      } = this,
      script = dom.createElement("script");
    return script.setAttribute("glmr", cursorId), dom.insertBefore(element, script, insertBefore), super.pushRemoteElement(element, cursorId, insertBefore);
  }
  constructor(...args) {
    super(...args), this.serializeBlockDepth = 0;
  }
}
function serializeBuilder(env, cursor) {
  return SerializeBuilder.forInitialRender(env, cursor);
}

function setupApplicationRegistry(registry) {
  // because we are using injections we can't use instantiate false
  // we need to use bind() to copy the function so factory for
  // association won't leak
  registry.register('service:-dom-builder', {
    // Additionally, we *must* constrain this to require `props` on create, else
    // we *know* it cannot have an owner.
    create(props) {
      let owner = getOwner$2(props);
      let env = owner.lookup('-environment:main');
      switch (env._renderMode) {
        case 'serialize':
          return serializeBuilder.bind(null);
        case 'rehydrate':
          return rehydrationBuilder.bind(null);
        default:
          return clientBuilder.bind(null);
      }
    }
  });
  registry.register(privatize`template:-root`, RootTemplate);
  registry.register('renderer:-dom', Renderer);
}
function setupEngineRegistry(registry) {
  registry.optionsForType('template', {
    instantiate: false
  });
  registry.register('view:-outlet', OutletView);
  registry.register('template:-outlet', OutletTemplate);
  registry.optionsForType('helper', {
    instantiate: false
  });
  registry.register('component:input', Input);
  registry.register('component:link-to', LinkTo);
  registry.register('component:textarea', Textarea);
}

function props(obj) {
  let properties = [];
  for (let key in obj) {
    properties.push(key);
  }
  return properties;
}

/**
@module @ember/engine
*/

/**
  The `Engine` class contains core functionality for both applications and
  engines.

  Each engine manages a registry that's used for dependency injection and
  exposed through `RegistryProxy`.

  Engines also manage initializers and instance initializers.

  Engines can spawn `EngineInstance` instances via `buildInstance()`.

  @class Engine
  @extends Ember.Namespace
  @uses RegistryProxyMixin
  @public
*/
// eslint-disable-next-line @typescript-eslint/no-empty-object-type

class Engine extends Namespace.extend(RegistryProxyMixin) {
  static initializers = Object.create(null);
  static instanceInitializers = Object.create(null);

  /**
    The goal of initializers should be to register dependencies and injections.
    This phase runs once. Because these initializers may load code, they are
    allowed to defer application readiness and advance it. If you need to access
    the container or store you should use an InstanceInitializer that will be run
    after all initializers and therefore after all code is loaded and the app is
    ready.
     Initializer receives an object which has the following attributes:
    `name`, `before`, `after`, `initialize`. The only required attribute is
    `initialize`, all others are optional.
     * `name` allows you to specify under which name the initializer is registered.
    This must be a unique name, as trying to register two initializers with the
    same name will result in an error.
     ```app/initializer/named-initializer.js
    import { debug } from '@ember/debug';
     export function initialize() {
      debug('Running namedInitializer!');
    }
     export default {
      name: 'named-initializer',
      initialize
    };
    ```
     * `before` and `after` are used to ensure that this initializer is ran prior
    or after the one identified by the value. This value can be a single string
    or an array of strings, referencing the `name` of other initializers.
     An example of ordering initializers, we create an initializer named `first`:
     ```app/initializer/first.js
    import { debug } from '@ember/debug';
     export function initialize() {
      debug('First initializer!');
    }
     export default {
      name: 'first',
      initialize
    };
    ```
     ```bash
    // DEBUG: First initializer!
    ```
     We add another initializer named `second`, specifying that it should run
    after the initializer named `first`:
     ```app/initializer/second.js
    import { debug } from '@ember/debug';
     export function initialize() {
      debug('Second initializer!');
    }
     export default {
      name: 'second',
      after: 'first',
      initialize
    };
    ```
     ```
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    ```
     Afterwards we add a further initializer named `pre`, this time specifying
    that it should run before the initializer named `first`:
     ```app/initializer/pre.js
    import { debug } from '@ember/debug';
     export function initialize() {
      debug('Pre initializer!');
    }
     export default {
      name: 'pre',
      before: 'first',
      initialize
    };
    ```
     ```bash
    // DEBUG: Pre initializer!
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    ```
     Finally we add an initializer named `post`, specifying it should run after
    both the `first` and the `second` initializers:
     ```app/initializer/post.js
    import { debug } from '@ember/debug';
     export function initialize() {
      debug('Post initializer!');
    }
     export default {
      name: 'post',
      after: ['first', 'second'],
      initialize
    };
    ```
     ```bash
    // DEBUG: Pre initializer!
    // DEBUG: First initializer!
    // DEBUG: Second initializer!
    // DEBUG: Post initializer!
    ```
     * `initialize` is a callback function that receives one argument,
      `application`, on which you can operate.
     Example of using `application` to register an adapter:
     ```app/initializer/api-adapter.js
    import ApiAdapter from '../utils/api-adapter';
     export function initialize(application) {
      application.register('api-adapter:main', ApiAdapter);
    }
     export default {
      name: 'post',
      after: ['first', 'second'],
      initialize
    };
    ```
     @method initializer
    @param initializer {Object}
    @public
  */

  static initializer = buildInitializerMethod('initializers');

  /**
    Instance initializers run after all initializers have run. Because
    instance initializers run after the app is fully set up. We have access
    to the store, container, and other items. However, these initializers run
    after code has loaded and are not allowed to defer readiness.
     Instance initializer receives an object which has the following attributes:
    `name`, `before`, `after`, `initialize`. The only required attribute is
    `initialize`, all others are optional.
     * `name` allows you to specify under which name the instanceInitializer is
    registered. This must be a unique name, as trying to register two
    instanceInitializer with the same name will result in an error.
     ```app/initializer/named-instance-initializer.js
    import { debug } from '@ember/debug';
     export function initialize() {
      debug('Running named-instance-initializer!');
    }
     export default {
      name: 'named-instance-initializer',
      initialize
    };
    ```
     * `before` and `after` are used to ensure that this initializer is ran prior
    or after the one identified by the value. This value can be a single string
    or an array of strings, referencing the `name` of other initializers.
     * See Application.initializer for discussion on the usage of before
    and after.
     Example instanceInitializer to preload data into the store.
     ```app/initializer/preload-data.js
     export function initialize(application) {
        var userConfig, userConfigEncoded, store;
        // We have a HTML escaped JSON representation of the user's basic
        // configuration generated server side and stored in the DOM of the main
        // index.html file. This allows the app to have access to a set of data
        // without making any additional remote calls. Good for basic data that is
        // needed for immediate rendering of the page. Keep in mind, this data,
        // like all local models and data can be manipulated by the user, so it
        // should not be relied upon for security or authorization.
         // Grab the encoded data from the meta tag
        userConfigEncoded = document.querySelector('head meta[name=app-user-config]').attr('content');
         // Unescape the text, then parse the resulting JSON into a real object
        userConfig = JSON.parse(unescape(userConfigEncoded));
         // Lookup the store
        store = application.lookup('service:store');
         // Push the encoded JSON into the store
        store.pushPayload(userConfig);
    }
     export default {
      name: 'named-instance-initializer',
      initialize
    };
    ```
     @method instanceInitializer
    @param instanceInitializer
    @public
  */
  static instanceInitializer = buildInitializerMethod('instanceInitializers');

  /**
    This creates a registry with the default Ember naming conventions.
     It also configures the registry:
     * registered views are created every time they are looked up (they are
      not singletons)
    * registered templates are not factories; the registered value is
      returned directly.
    * the router receives the application as its `namespace` property
    * all controllers receive the router as their `target` and `controllers`
      properties
    * all controllers receive the application as their `namespace` property
    * the application view receives the application controller as its
      `controller` property
    * the application view receives the application template as its
      `defaultTemplate` property
     @method buildRegistry
    @static
    @param {Application} namespace the application for which to
      build the registry
    @return {Ember.Registry} the built registry
    @private
  */
  static buildRegistry(namespace) {
    let registry = new Registry({
      resolver: resolverFor(namespace)
    });
    registry.set = set;
    registry.register('application:main', namespace, {
      instantiate: false
    });
    commonSetupRegistry$1(registry);
    setupEngineRegistry(registry);
    return registry;
  }

  /**
    Set this to provide an alternate class to `DefaultResolver`
     @property resolver
    @public
  */

  init(properties) {
    super.init(properties);
    this.buildRegistry();
  }

  /**
    A private flag indicating whether an engine's initializers have run yet.
     @private
    @property _initializersRan
  */
  _initializersRan = false;

  /**
    Ensure that initializers are run once, and only once, per engine.
     @private
    @method ensureInitializers
  */
  ensureInitializers() {
    if (!this._initializersRan) {
      this.runInitializers();
      this._initializersRan = true;
    }
  }

  /**
    Create an EngineInstance for this engine.
     @public
    @method buildInstance
    @return {EngineInstance} the engine instance
  */
  buildInstance(options = {}) {
    this.ensureInitializers();
    return EngineInstance.create({
      ...options,
      base: this
    });
  }

  /**
    Build and configure the registry for the current engine.
     @private
    @method buildRegistry
    @return {Ember.Registry} the configured registry
  */
  buildRegistry() {
    let registry = this.__registry__ = this.constructor.buildRegistry(this);
    return registry;
  }

  /**
    @private
    @method initializer
  */
  initializer(initializer) {
    this.constructor.initializer(initializer);
  }

  /**
    @private
    @method instanceInitializer
  */
  instanceInitializer(initializer) {
    this.constructor.instanceInitializer(initializer);
  }

  /**
    @private
    @method runInitializers
  */
  runInitializers() {
    this._runInitializer('initializers', (name, initializer) => {
      initializer.initialize(this);
    });
  }

  /**
    @private
    @since 1.12.0
    @method runInstanceInitializers
  */
  runInstanceInitializers(instance) {
    this._runInitializer('instanceInitializers', (name, initializer) => {
      initializer.initialize(instance);
    });
  }
  _runInitializer(bucketName, cb) {
    let initializersByName = get$1(this.constructor, bucketName);
    let initializers = props(initializersByName);
    let graph = new DAG();
    let initializer;
    for (let name of initializers) {
      initializer = initializersByName[name];
      graph.add(initializer.name, initializer, initializer.before, initializer.after);
    }
    graph.topsort(cb);
  }
}

/**
  This function defines the default lookup rules for container lookups:

  * templates are looked up on `Ember.TEMPLATES`
  * other names are looked up on the application after classifying the name.
    For example, `controller:post` looks up `App.PostController` by default.
  * if the default lookup fails, look for registered classes on the container

  This allows the application to register default injections in the container
  that could be overridden by the normal naming convention.

  @private
  @method resolverFor
  @param {Ember.Enginer} namespace the namespace to look for classes
  @return {*} the resolved value for a given lookup
*/
function resolverFor(namespace) {
  let ResolverClass = namespace.Resolver;
  let props = {
    namespace
  };
  return ResolverClass.create(props);
}

/** @internal */
function buildInitializerMethod(bucketName, humanName) {
  return function (initializer) {
    // If this is the first initializer being added to a subclass, we are going to reopen the class
    // to make sure we have a new `initializers` object, which extends from the parent class' using
    // prototypal inheritance. Without this, attempting to add initializers to the subclass would
    // pollute the parent class as well as other subclasses.
    // SAFETY: The superclass may be an Engine, we don't call unless we confirmed it was ok.
    let superclass = this.superclass;
    if (superclass[bucketName] !== undefined && superclass[bucketName] === this[bucketName]) {
      let attrs = {
        [bucketName]: Object.create(this[bucketName])
      };
      this.reopenClass(attrs);
    }
    let initializers = this[bucketName];
    initializers[initializer.name] = initializer;
  };
}
function commonSetupRegistry$1(registry) {
  registry.optionsForType('component', {
    singleton: false
  });
  registry.optionsForType('view', {
    singleton: false
  });
  registry.register('controller:basic', Controller, {
    instantiate: false
  });

  // Register the routing service...
  registry.register('service:-routing', RoutingService);

  // DEBUGGING
  registry.register('resolver-for-debugging:main', registry.resolver, {
    instantiate: false
  });
  registry.register('container-debug-adapter:main', ContainerDebugAdapter);
  registry.register('component-lookup:main', ComponentLookup);
}

/**
@module @ember/application
*/

/**
 * @deprecated Use `import { getOwner } from '@ember/owner';` instead.
 */
const getOwner = getOwner$1;

/**
 * @deprecated Use `import { setOwner } from '@ember/owner';` instead.
 */
const setOwner = setOwner$1;

/**
  An instance of `Application` is the starting point for every Ember
  application. It instantiates, initializes and coordinates the
  objects that make up your app.

  Each Ember app has one and only one `Application` object. Although
  Ember CLI creates this object implicitly, the `Application` class
  is defined in the `app/app.js`. You can define a `ready` method on the
  `Application` class, which will be run by Ember when the application is
  initialized.

  ```app/app.js
  export default class App extends Application {
    ready() {
      // your code here
    }
  }
  ```

  Because `Application` ultimately inherits from `Ember.Namespace`, any classes
  you create will have useful string representations when calling `toString()`.
  See the `Ember.Namespace` documentation for more information.

  While you can think of your `Application` as a container that holds the
  other classes in your application, there are several other responsibilities
  going on under-the-hood that you may want to understand. It is also important
  to understand that an `Application` is different from an `ApplicationInstance`.
  Refer to the Guides to understand the difference between these.

  ### Event Delegation

  Ember uses a technique called _event delegation_. This allows the framework
  to set up a global, shared event listener instead of requiring each view to
  do it manually. For example, instead of each view registering its own
  `mousedown` listener on its associated element, Ember sets up a `mousedown`
  listener on the `body`.

  If a `mousedown` event occurs, Ember will look at the target of the event and
  start walking up the DOM node tree, finding corresponding views and invoking
  their `mouseDown` method as it goes.

  `Application` has a number of default events that it listens for, as
  well as a mapping from lowercase events to camel-cased view method names. For
  example, the `keypress` event causes the `keyPress` method on the view to be
  called, the `dblclick` event causes `doubleClick` to be called, and so on.

  If there is a bubbling browser event that Ember does not listen for by
  default, you can specify custom events and their corresponding view method
  names by setting the application's `customEvents` property:

  ```app/app.js
  import Application from '@ember/application';

  export default class App extends Application {
    customEvents = {
      // add support for the paste event
      paste: 'paste'
    }
  }
  ```

  To prevent Ember from setting up a listener for a default event,
  specify the event name with a `null` value in the `customEvents`
  property:

  ```app/app.js
  import Application from '@ember/application';

  export default class App extends Application {
    customEvents = {
      // prevent listeners for mouseenter/mouseleave events
      mouseenter: null,
      mouseleave: null
    }
  }
  ```

  By default, the application sets up these event listeners on the document
  body. However, in cases where you are embedding an Ember application inside
  an existing page, you may want it to set up the listeners on an element
  inside the body.

  For example, if only events inside a DOM element with the ID of `ember-app`
  should be delegated, set your application's `rootElement` property:

  ```app/app.js
  import Application from '@ember/application';

  export default class App extends Application {
    rootElement = '#ember-app'
  }
  ```

  The `rootElement` can be either a DOM element or a CSS selector
  string. Note that *views appended to the DOM outside the root element will
  not receive events.* If you specify a custom root element, make sure you only
  append views inside it!

  To learn more about the events Ember components use, see

  [components/handling-events](https://guides.emberjs.com/release/components/handling-events/#toc_event-names).

  ### Initializers

  To add behavior to the Application's boot process, you can define initializers in
  the `app/initializers` directory, or with `ember generate initializer` using Ember CLI.
  These files should export a named `initialize` function which will receive the created `application`
  object as its first argument.

  ```javascript
  export function initialize(application) {
    // application.inject('route', 'foo', 'service:foo');
  }
  ```

  Application initializers can be used for a variety of reasons including:

  - setting up external libraries
  - injecting dependencies
  - setting up event listeners in embedded apps
  - deferring the boot process using the `deferReadiness` and `advanceReadiness` APIs.

  ### Routing

  In addition to creating your application's router, `Application` is
  also responsible for telling the router when to start routing. Transitions
  between routes can be logged with the `LOG_TRANSITIONS` flag, and more
  detailed intra-transition logging can be logged with
  the `LOG_TRANSITIONS_INTERNAL` flag:

  ```javascript
  import Application from '@ember/application';

  let App = Application.create({
    LOG_TRANSITIONS: true, // basic logging of successful transitions
    LOG_TRANSITIONS_INTERNAL: true // detailed logging of all routing steps
  });
  ```

  By default, the router will begin trying to translate the current URL into
  application state once the browser emits the `DOMContentReady` event. If you
  need to defer routing, you can call the application's `deferReadiness()`
  method. Once routing can begin, call the `advanceReadiness()` method.

  If there is any setup required before routing begins, you can implement a
  `ready()` method on your app that will be invoked immediately before routing
  begins.

  @class Application
  @extends Engine
  @public
*/

class Application extends Engine {
  /**
    This creates a registry with the default Ember naming conventions.
     It also configures the registry:
     * registered views are created every time they are looked up (they are
      not singletons)
    * registered templates are not factories; the registered value is
      returned directly.
    * the router receives the application as its `namespace` property
    * all controllers receive the router as their `target` and `controllers`
      properties
    * all controllers receive the application as their `namespace` property
    * the application view receives the application controller as its
      `controller` property
    * the application view receives the application template as its
      `defaultTemplate` property
     @method buildRegistry
    @static
    @param {Application} namespace the application for which to
      build the registry
    @return {Ember.Registry} the built registry
    @private
  */
  static buildRegistry(namespace) {
    let registry = super.buildRegistry(namespace);
    commonSetupRegistry(registry);
    setupApplicationRegistry(registry);
    return registry;
  }
  static initializer = buildInitializerMethod('initializers');
  static instanceInitializer = buildInitializerMethod('instanceInitializers');

  /**
    The root DOM element of the Application. This can be specified as an
    element or a [selector string](https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors#reference_table_of_selectors).
     This is the element that will be passed to the Application's,
    `eventDispatcher`, which sets up the listeners for event delegation. Every
    view in your application should be a child of the element you specify here.
     @property rootElement
    @type DOMElement
    @default 'body'
    @public
  */

  /**
     @property _document
    @type Document | null
    @default 'window.document'
    @private
  */

  /**
    The `Ember.EventDispatcher` responsible for delegating events to this
    application's views.
     The event dispatcher is created by the application at initialization time
    and sets up event listeners on the DOM element described by the
    application's `rootElement` property.
     See the documentation for `Ember.EventDispatcher` for more information.
     @property eventDispatcher
    @type Ember.EventDispatcher
    @default null
    @public
  */

  /**
    The DOM events for which the event dispatcher should listen.
     By default, the application's `Ember.EventDispatcher` listens
    for a set of standard DOM events, such as `mousedown` and
    `keyup`, and delegates them to your application's `Ember.View`
    instances.
     If you would like additional bubbling events to be delegated to your
    views, set your `Application`'s `customEvents` property
    to a hash containing the DOM event name as the key and the
    corresponding view method name as the value. Setting an event to
    a value of `null` will prevent a default event listener from being
    added for that event.
     To add new events to be listened to:
     ```app/app.js
    import Application from '@ember/application';
     let App = Application.extend({
      customEvents: {
        // add support for the paste event
        paste: 'paste'
      }
    });
    ```
     To prevent default events from being listened to:
     ```app/app.js
    import Application from '@ember/application';
     let App = Application.extend({
      customEvents: {
        // remove support for mouseenter / mouseleave events
        mouseenter: null,
        mouseleave: null
      }
    });
    ```
    @property customEvents
    @type Object
    @default null
    @public
  */

  /**
    Whether the application should automatically start routing and render
    templates to the `rootElement` on DOM ready. While default by true,
    other environments such as FastBoot or a testing harness can set this
    property to `false` and control the precise timing and behavior of the boot
    process.
     @property autoboot
    @type Boolean
    @default true
    @private
  */

  /**
    Whether the application should be configured for the legacy "globals mode".
    Under this mode, the Application object serves as a global namespace for all
    classes.
     ```javascript
    import Application from '@ember/application';
    import Component from '@ember/component';
     let App = Application.create({
      ...
    });
     App.Router.reopen({
      location: 'none'
    });
     App.Router.map({
      ...
    });
     App.MyComponent = Component.extend({
      ...
    });
    ```
     This flag also exposes other internal APIs that assumes the existence of
    a special "default instance", like `App.__container__.lookup(...)`.
     This option is currently not configurable, its value is derived from
    the `autoboot` flag – disabling `autoboot` also implies opting-out of
    globals mode support, although they are ultimately orthogonal concerns.
     Some of the global modes features are already deprecated in 1.x. The
    existence of this flag is to untangle the globals mode code paths from
    the autoboot code paths, so that these legacy features can be reviewed
    for deprecation/removal separately.
     Forcing the (autoboot=true, _globalsMode=false) here and running the tests
    would reveal all the places where we are still relying on these legacy
    behavior internally (mostly just tests).
     @property _globalsMode
    @type Boolean
    @default true
    @private
  */

  /**
    An array of application instances created by `buildInstance()`. Used
    internally to ensure that all instances get destroyed.
     @property _applicationInstances
    @type Array
    @private
  */

  init(properties) {
    super.init(properties);
    this.rootElement ??= 'body';
    this._document ??= null;
    this.eventDispatcher ??= null;
    this.customEvents ??= null;
    this.autoboot ??= true;
    this._document ??= hasDOM ? window.document : null;
    this._globalsMode ??= true;

    // Start off the number of deferrals at 1. This will be decremented by
    // the Application's own `boot` method.
    this._readinessDeferrals = 1;
    this._booted = false;
    this._applicationInstances = new Set();
    this.autoboot = this._globalsMode = Boolean(this.autoboot);
    if (this._globalsMode) {
      this._prepareForGlobalsMode();
    }
    if (this.autoboot) {
      this.waitForDOMReady();
    }
  }

  /**
    Create an ApplicationInstance for this application.
     @public
    @method buildInstance
    @return {ApplicationInstance} the application instance
  */
  buildInstance(options = {}) {
    return ApplicationInstance.create({
      ...options,
      base: this,
      application: this
    });
  }

  /**
    Start tracking an ApplicationInstance for this application.
    Used when the ApplicationInstance is created.
     @private
    @method _watchInstance
  */
  _watchInstance(instance) {
    this._applicationInstances.add(instance);
  }

  /**
    Stop tracking an ApplicationInstance for this application.
    Used when the ApplicationInstance is about to be destroyed.
     @private
    @method _unwatchInstance
  */
  _unwatchInstance(instance) {
    return this._applicationInstances.delete(instance);
  }
  Router;

  /**
    Enable the legacy globals mode by allowing this application to act
    as a global namespace. See the docs on the `_globalsMode` property
    for details.
     Most of these features are already deprecated in 1.x, so we can
    stop using them internally and try to remove them.
     @private
    @method _prepareForGlobalsMode
  */
  _prepareForGlobalsMode() {
    // Create subclass of Router for this Application instance.
    // This is to ensure that someone reopening `App.Router` does not
    // tamper with the default `Router`.
    this.Router = (this.Router || EmberRouter).extend();
    this._buildDeprecatedInstance();
  }
  __deprecatedInstance__;
  __container__;

  /*
    Build the deprecated instance for legacy globals mode support.
    Called when creating and resetting the application.
     This is orthogonal to autoboot: the deprecated instance needs to
    be created at Application construction (not boot) time to expose
    App.__container__. If autoboot sees that this instance exists,
    it will continue booting it to avoid doing unncessary work (as
    opposed to building a new instance at boot time), but they are
    otherwise unrelated.
     @private
    @method _buildDeprecatedInstance
  */
  _buildDeprecatedInstance() {
    // Build a default instance
    let instance = this.buildInstance();

    // Legacy support for App.__container__ and other global methods
    // on App that rely on a single, default instance.
    this.__deprecatedInstance__ = instance;
    this.__container__ = instance.__container__;
  }

  /**
    Automatically kick-off the boot process for the application once the
    DOM has become ready.
     The initialization itself is scheduled on the actions queue which
    ensures that code-loading finishes before booting.
     If you are asynchronously loading code, you should call `deferReadiness()`
    to defer booting, and then call `advanceReadiness()` once all of your code
    has finished loading.
     @private
    @method waitForDOMReady
  */
  waitForDOMReady() {
    const document = this._document;

    // SAFETY: Casting as Document should be safe since we're just reading a property.
    // If it's not actually a Document then it will evaluate false which is fine for our
    // purposes.
    if (document === null || document.readyState !== 'loading') {
      schedule('actions', this, this.domReady);
    } else {
      let callback = () => {
        document.removeEventListener('DOMContentLoaded', callback);
        run$1(this, this.domReady);
      };
      document.addEventListener('DOMContentLoaded', callback);
    }
  }

  /**
    This is the autoboot flow:
     1. Boot the app by calling `this.boot()`
    2. Create an instance (or use the `__deprecatedInstance__` in globals mode)
    3. Boot the instance by calling `instance.boot()`
    4. Invoke the `App.ready()` callback
    5. Kick-off routing on the instance
     Ideally, this is all we would need to do:
     ```javascript
    _autoBoot() {
      this.boot().then(() => {
        let instance = (this._globalsMode) ? this.__deprecatedInstance__ : this.buildInstance();
        return instance.boot();
      }).then((instance) => {
        App.ready();
        instance.startRouting();
      });
    }
    ```
     Unfortunately, we cannot actually write this because we need to participate
    in the "synchronous" boot process. While the code above would work fine on
    the initial boot (i.e. DOM ready), when `App.reset()` is called, we need to
    boot a new instance synchronously (see the documentation on `_bootSync()`
    for details).
     Because of this restriction, the actual logic of this method is located
    inside `didBecomeReady()`.
     @private
    @method domReady
  */
  domReady() {
    if (this.isDestroying || this.isDestroyed) {
      return;
    }
    this._bootSync();

    // Continues to `didBecomeReady`
  }

  /**
    Use this to defer readiness until some condition is true.
     Example:
     ```javascript
    import Application from '@ember/application';
     let App = Application.create();
     App.deferReadiness();
     fetch('/auth-token')
    .then(response => response.json())
    .then(data => {
      App.token = data.token;
      App.advanceReadiness();
    });
    ```
     This allows you to perform asynchronous setup logic and defer
    booting your application until the setup has finished.
     However, if the setup requires a loading UI, it might be better
    to use the router for this purpose.
     @method deferReadiness
    @public
  */
  deferReadiness() {
    this._readinessDeferrals++;
  }

  /**
    Call `advanceReadiness` after any asynchronous setup logic has completed.
    Each call to `deferReadiness` must be matched by a call to `advanceReadiness`
    or the application will never become ready and routing will not begin.
     @method advanceReadiness
    @see {Application#deferReadiness}
    @public
  */
  advanceReadiness() {
    this._readinessDeferrals--;
    if (this._readinessDeferrals === 0) {
      once(this, this.didBecomeReady);
    }
  }
  _bootPromise = null;

  /**
    Initialize the application and return a promise that resolves with the `Application`
    object when the boot process is complete.
     Run any application initializers and run the application load hook. These hooks may
    choose to defer readiness. For example, an authentication hook might want to defer
    readiness until the auth token has been retrieved.
     By default, this method is called automatically on "DOM ready"; however, if autoboot
    is disabled, this is automatically called when the first application instance is
    created via `visit`.
     @public
    @method boot
    @return {Promise<Application,Error>}
  */
  boot() {
    if (this._bootPromise) {
      return this._bootPromise;
    }
    try {
      this._bootSync();
    } catch (_) {
      // Ignore the error: in the asynchronous boot path, the error is already reflected
      // in the promise rejection
    }
    return this._bootPromise;
  }
  _bootResolver = null;

  /**
    Unfortunately, a lot of existing code assumes the booting process is
    "synchronous". Specifically, a lot of tests assumes the last call to
    `app.advanceReadiness()` or `app.reset()` will result in the app being
    fully-booted when the current runloop completes.
     We would like new code (like the `visit` API) to stop making this assumption,
    so we created the asynchronous version above that returns a promise. But until
    we have migrated all the code, we would have to expose this method for use
    *internally* in places where we need to boot an app "synchronously".
     @private
  */
  _bootSync() {
    if (this._booted || this.isDestroying || this.isDestroyed) {
      return;
    }

    // Even though this returns synchronously, we still need to make sure the
    // boot promise exists for book-keeping purposes: if anything went wrong in
    // the boot process, we need to store the error as a rejection on the boot
    // promise so that a future caller of `boot()` can tell what failed.
    let defer = this._bootResolver = RSVP$1.defer();
    this._bootPromise = defer.promise;
    try {
      this.runInitializers();
      runLoadHooks('application', this);
      this.advanceReadiness();
      // Continues to `didBecomeReady`
    } catch (error) {
      // For the asynchronous boot path
      defer.reject(error);

      // For the synchronous boot path
      throw error;
    }
  }

  /**
    Reset the application. This is typically used only in tests. It cleans up
    the application in the following order:
     1. Deactivate existing routes
    2. Destroy all objects in the container
    3. Create a new application container
    4. Re-route to the existing url
     Typical Example:
     ```javascript
    import Application from '@ember/application';
    let App;
     run(function() {
      App = Application.create();
    });
     module('acceptance test', {
      setup: function() {
        App.reset();
      }
    });
     test('first test', function() {
      // App is freshly reset
    });
     test('second test', function() {
      // App is again freshly reset
    });
    ```
     Advanced Example:
     Occasionally you may want to prevent the app from initializing during
    setup. This could enable extra configuration, or enable asserting prior
    to the app becoming ready.
     ```javascript
    import Application from '@ember/application';
    let App;
     run(function() {
      App = Application.create();
    });
     module('acceptance test', {
      setup: function() {
        run(function() {
          App.reset();
          App.deferReadiness();
        });
      }
    });
     test('first test', function() {
      ok(true, 'something before app is initialized');
       run(function() {
        App.advanceReadiness();
      });
       ok(true, 'something after app is initialized');
    });
    ```
     @method reset
    @public
  */
  reset() {
    let instance = this.__deprecatedInstance__;
    this._readinessDeferrals = 1;
    this._bootPromise = null;
    this._bootResolver = null;
    this._booted = false;
    function handleReset() {
      run$1(instance, 'destroy');
      this._buildDeprecatedInstance();
      schedule('actions', this, '_bootSync');
    }
    join(this, handleReset);
  }

  /**
    @private
    @method didBecomeReady
  */
  didBecomeReady() {
    if (this.isDestroying || this.isDestroyed) {
      return;
    }
    try {
      // TODO: Is this still needed for _globalsMode = false?

      // See documentation on `_autoboot()` for details
      if (this.autoboot) {
        let instance;
        if (this._globalsMode) {
          // If we already have the __deprecatedInstance__ lying around, boot it to
          // avoid unnecessary work
          instance = this.__deprecatedInstance__;
          false && !instance && assert$1('expected instance', instance);
        } else {
          // Otherwise, build an instance and boot it. This is currently unreachable,
          // because we forced _globalsMode to === autoboot; but having this branch
          // allows us to locally toggle that flag for weeding out legacy globals mode
          // dependencies independently
          instance = this.buildInstance();
        }
        instance._bootSync();

        // TODO: App.ready() is not called when autoboot is disabled, is this correct?
        this.ready();
        instance.startRouting();
      }

      // For the asynchronous boot path
      this._bootResolver.resolve(this);

      // For the synchronous boot path
      this._booted = true;
    } catch (error) {
      // For the asynchronous boot path
      this._bootResolver.reject(error);

      // For the synchronous boot path
      throw error;
    }
  }

  /**
    Called when the Application has become ready, immediately before routing
    begins. The call will be delayed until the DOM has become ready.
     @event ready
    @public
  */
  ready() {
    return this;
  }

  // This method must be moved to the application instance object
  willDestroy() {
    super.willDestroy();
    if (_loaded['application'] === this) {
      _loaded['application'] = undefined;
    }
    if (this._applicationInstances.size) {
      this._applicationInstances.forEach(i => i.destroy());
      this._applicationInstances.clear();
    }
  }

  /**
    Boot a new instance of `ApplicationInstance` for the current
    application and navigate it to the given `url`. Returns a `Promise` that
    resolves with the instance when the initial routing and rendering is
    complete, or rejects with any error that occurred during the boot process.
     When `autoboot` is disabled, calling `visit` would first cause the
    application to boot, which runs the application initializers.
     This method also takes a hash of boot-time configuration options for
    customizing the instance's behavior. See the documentation on
    `ApplicationInstance.BootOptions` for details.
     `ApplicationInstance.BootOptions` is an interface class that exists
    purely to document the available options; you do not need to construct it
    manually. Simply pass a regular JavaScript object containing of the
    desired options:
     ```javascript
    MyApp.visit("/", { location: "none", rootElement: "#container" });
    ```
     ### Supported Scenarios
     While the `BootOptions` class exposes a large number of knobs, not all
    combinations of them are valid; certain incompatible combinations might
    result in unexpected behavior.
     For example, booting the instance in the full browser environment
    while specifying a foreign `document` object (e.g. `{ isBrowser: true,
    document: iframe.contentDocument }`) does not work correctly today,
    largely due to Ember's jQuery dependency.
     Currently, there are three officially supported scenarios/configurations.
    Usages outside of these scenarios are not guaranteed to work, but please
    feel free to file bug reports documenting your experience and any issues
    you encountered to help expand support.
     #### Browser Applications (Manual Boot)
     The setup is largely similar to how Ember works out-of-the-box. Normally,
    Ember will boot a default instance for your Application on "DOM ready".
    However, you can customize this behavior by disabling `autoboot`.
     For example, this allows you to render a miniture demo of your application
    into a specific area on your marketing website:
     ```javascript
    import MyApp from 'my-app';
     $(function() {
      let App = MyApp.create({ autoboot: false });
       let options = {
        // Override the router's location adapter to prevent it from updating
        // the URL in the address bar
        location: 'none',
         // Override the default `rootElement` on the app to render into a
        // specific `div` on the page
        rootElement: '#demo'
      };
       // Start the app at the special demo URL
      App.visit('/demo', options);
    });
    ```
     Or perhaps you might want to boot two instances of your app on the same
    page for a split-screen multiplayer experience:
     ```javascript
    import MyApp from 'my-app';
     $(function() {
      let App = MyApp.create({ autoboot: false });
       let sessionId = MyApp.generateSessionID();
       let player1 = App.visit(`/matches/join?name=Player+1&session=${sessionId}`, { rootElement: '#left', location: 'none' });
      let player2 = App.visit(`/matches/join?name=Player+2&session=${sessionId}`, { rootElement: '#right', location: 'none' });
       Promise.all([player1, player2]).then(() => {
        // Both apps have completed the initial render
        $('#loading').fadeOut();
      });
    });
    ```
     Do note that each app instance maintains their own registry/container, so
    they will run in complete isolation by default.
     #### Server-Side Rendering (also known as FastBoot)
     This setup allows you to run your Ember app in a server environment using
    Node.js and render its content into static HTML for SEO purposes.
     ```javascript
    const HTMLSerializer = new SimpleDOM.HTMLSerializer(SimpleDOM.voidMap);
     function renderURL(url) {
      let dom = new SimpleDOM.Document();
      let rootElement = dom.body;
      let options = { isBrowser: false, document: dom, rootElement: rootElement };
       return MyApp.visit(options).then(instance => {
        try {
          return HTMLSerializer.serialize(rootElement.firstChild);
        } finally {
          instance.destroy();
        }
      });
    }
    ```
     In this scenario, because Ember does not have access to a global `document`
    object in the Node.js environment, you must provide one explicitly. In practice,
    in the non-browser environment, the stand-in `document` object only needs to
    implement a limited subset of the full DOM API. The `SimpleDOM` library is known
    to work.
     Since there is no DOM access in the non-browser environment, you must also
    specify a DOM `Element` object in the same `document` for the `rootElement` option
    (as opposed to a selector string like `"body"`).
     See the documentation on the `isBrowser`, `document` and `rootElement` properties
    on `ApplicationInstance.BootOptions` for details.
     #### Server-Side Resource Discovery
     This setup allows you to run the routing layer of your Ember app in a server
    environment using Node.js and completely disable rendering. This allows you
    to simulate and discover the resources (i.e. AJAX requests) needed to fulfill
    a given request and eagerly "push" these resources to the client.
     ```app/initializers/network-service.js
    import BrowserNetworkService from 'app/services/network/browser';
    import NodeNetworkService from 'app/services/network/node';
     // Inject a (hypothetical) service for abstracting all AJAX calls and use
    // the appropriate implementation on the client/server. This also allows the
    // server to log all the AJAX calls made during a particular request and use
    // that for resource-discovery purpose.
     export function initialize(application) {
      if (window) { // browser
        application.register('service:network', BrowserNetworkService);
      } else { // node
        application.register('service:network', NodeNetworkService);
      }
    };
     export default {
      name: 'network-service',
      initialize: initialize
    };
    ```
     ```app/routes/post.js
    import Route from '@ember/routing/route';
    import { service } from '@ember/service';
     // An example of how the (hypothetical) service is used in routes.
     export default class IndexRoute extends Route {
      @service network;
       model(params) {
        return this.network.fetch(`/api/posts/${params.post_id}.json`);
      }
       afterModel(post) {
        if (post.isExternalContent) {
          return this.network.fetch(`/api/external/?url=${post.externalURL}`);
        } else {
          return post;
        }
      }
    }
    ```
     ```javascript
    // Finally, put all the pieces together
     function discoverResourcesFor(url) {
      return MyApp.visit(url, { isBrowser: false, shouldRender: false }).then(instance => {
        let networkService = instance.lookup('service:network');
        return networkService.requests; // => { "/api/posts/123.json": "..." }
      });
    }
    ```
     @public
    @method visit
    @param url {String} The initial URL to navigate to
    @param options {ApplicationInstance.BootOptions}
    @return {Promise<ApplicationInstance, Error>}
  */
  visit(url, options) {
    return this.boot().then(() => {
      let instance = this.buildInstance();
      return instance.boot(options).then(() => instance.visit(url)).catch(error => {
        run$1(instance, 'destroy');
        throw error;
      });
    });
  }
}
function commonSetupRegistry(registry) {
  registry.register('router:main', EmberRouter);
  registry.register('-view-registry:main', {
    create() {
      return makeDictionary(null);
    }
  });
  registry.register('route:basic', Route);
  registry.register('event_dispatcher:main', EventDispatcher);
  registry.register('location:hash', HashLocation);
  registry.register('location:history', HistoryLocation);
  registry.register('location:none', NoneLocation);
  registry.register(privatize`-bucket-cache:main`, {
    create() {
      return new BucketCache();
    }
  });
  registry.register('service:router', RouterService);
}

Application.reopen({
  /**
   This property contains the testing helpers for the current application. These
   are created once you call `injectTestHelpers` on your `Application`
   instance. The included helpers are also available on the `window` object by
   default, but can be used from this object on the individual application also.
     @property testHelpers
    @type {Object}
    @default {}
    @public
  */
  testHelpers: {},
  /**
   This property will contain the original methods that were registered
   on the `helperContainer` before `injectTestHelpers` is called.
    When `removeTestHelpers` is called, these methods are restored to the
   `helperContainer`.
     @property originalMethods
    @type {Object}
    @default {}
    @private
    @since 1.3.0
  */
  originalMethods: {},
  /**
  This property indicates whether or not this application is currently in
  testing mode. This is set when `setupForTesting` is called on the current
  application.
   @property testing
  @type {Boolean}
  @default false
  @since 1.3.0
  @public
  */
  testing: false,
  /**
    This hook defers the readiness of the application, so that you can start
    the app when your tests are ready to run. It also sets the router's
    location to 'none', so that the window's location will not be modified
    (preventing both accidental leaking of state between tests and interference
    with your testing framework). `setupForTesting` should only be called after
    setting a custom `router` class (for example `App.Router = Router.extend(`).
     Example:
     ```
    App.setupForTesting();
    ```
     @method setupForTesting
    @public
  */
  setupForTesting() {
    setupForTesting();
    this.testing = true;
    this.resolveRegistration('router:main').reopen({
      location: 'none'
    });
  },
  /**
    This will be used as the container to inject the test helpers into. By
    default the helpers are injected into `window`.
     @property helperContainer
    @type {Object} The object to be used for test helpers.
    @default window
    @since 1.2.0
    @private
  */
  helperContainer: null,
  /**
    This injects the test helpers into the `helperContainer` object. If an object is provided
    it will be used as the helperContainer. If `helperContainer` is not set it will default
    to `window`. If a function of the same name has already been defined it will be cached
    (so that it can be reset if the helper is removed with `unregisterHelper` or
    `removeTestHelpers`).
     Any callbacks registered with `onInjectHelpers` will be called once the
    helpers have been injected.
     Example:
    ```
    App.injectTestHelpers();
    ```
     @method injectTestHelpers
    @public
  */
  injectTestHelpers(helperContainer) {
    if (helperContainer) {
      this.helperContainer = helperContainer;
    } else {
      this.helperContainer = window;
    }
    this.reopen({
      willDestroy() {
        this._super(...arguments);
        this.removeTestHelpers();
      }
    });
    this.testHelpers = {};
    for (let name in helpers) {
      // SAFETY: It is safe to access a property on an object
      this.originalMethods[name] = this.helperContainer[name];
      // SAFETY: It is not quite as safe to do this, but it _seems_ to be ok.
      this.testHelpers[name] = this.helperContainer[name] = helper(this, name);
      // SAFETY: We checked that it exists
      protoWrap(TestPromise.prototype, name, helper(this, name), helpers[name].meta.wait);
    }
    invokeInjectHelpersCallbacks(this);
  },
  /**
    This removes all helpers that have been registered, and resets and functions
    that were overridden by the helpers.
     Example:
     ```javascript
    App.removeTestHelpers();
    ```
     @public
    @method removeTestHelpers
  */
  removeTestHelpers() {
    if (!this.helperContainer) {
      return;
    }
    for (let name in helpers) {
      this.helperContainer[name] = this.originalMethods[name];
      // SAFETY: This is a weird thing, but it's not technically unsafe here.
      delete TestPromise.prototype[name];
      delete this.testHelpers[name];
      delete this.originalMethods[name];
    }
  }
});

// This method is no longer needed
// But still here for backwards compatibility
// of helper chaining
function protoWrap(proto, name, callback, isAsync) {
  // SAFETY: This isn't entirely safe, but it _seems_ to be ok.
  proto[name] = function (...args) {
    if (isAsync) {
      return callback.apply(this, args);
    } else {
      // SAFETY: This is not actually safe.
      return this.then(function () {
        return callback.apply(this, args);
      });
    }
  };
}
function helper(app, name) {
  let helper = helpers[name];
  let fn = helper.method;
  let meta = helper.meta;
  if (!meta.wait) {
    return (...args) => fn.apply(app, [app, ...args]);
  }
  return (...args) => {
    let lastPromise = run(() => resolve$1(getLastPromise()));

    // wait for last helper's promise to resolve and then
    // execute. To be safe, we need to tell the adapter we're going
    // asynchronous here, because fn may not be invoked before we
    // return.
    asyncStart();
    return lastPromise.then(() => fn.apply(app, [app, ...args])).finally(asyncEnd);
  };
}

RSVP$1.configure('async', function (callback, promise) {
  // if schedule will cause autorun, we need to inform adapter
  _backburner.schedule('actions', () => callback(promise));
});

function andThen(app, callback) {
  let wait = app.testHelpers['wait'];
  return wait(callback(app));
}

/**
@module ember
*/
function currentPath(app) {
  let routingService = app.__container__.lookup('service:-routing');
  return get$1(routingService, 'currentPath');
}

/**
@module ember
*/
function currentRouteName(app) {
  let routingService = app.__container__.lookup('service:-routing');
  return get$1(routingService, 'currentRouteName');
}

/**
@module ember
*/
function currentURL(app) {
  let router = app.__container__.lookup('router:main');
  let location = get$1(router, 'location');
  return location.getURL();
}

/**
@module ember
*/
let resume;

/**
 Resumes a test paused by `pauseTest`.

 @method resumeTest
 @return {void}
 @public
*/
function resumeTest$1() {
  resume();
  resume = undefined;
}

/**
 Pauses the current test - this is useful for debugging while testing or for test-driving.
 It allows you to inspect the state of your application at any point.
 Example (The test will pause before clicking the button):

 ```javascript
 visit('/')
 return pauseTest();
 click('.btn');
 ```

 You may want to turn off the timeout before pausing.

 qunit (timeout available to use as of 2.4.0):

 ```
 visit('/');
 assert.timeout(0);
 return pauseTest();
 click('.btn');
 ```

 mocha (timeout happens automatically as of ember-mocha v0.14.0):

 ```
 visit('/');
 this.timeout(0);
 return pauseTest();
 click('.btn');
 ```


 @since 1.9.0
 @method pauseTest
 @return {Object} A promise that will never resolve
 @public
*/
function pauseTest() {
  return new RSVP$1.Promise(resolve => {
    resume = resolve;
  }, 'TestAdapter paused promise');
}

/**
  Loads a route, sets up any controllers, and renders any templates associated
  with the route as though a real user had triggered the route change while
  using your app.

  Example:

  ```javascript
  visit('posts/index').then(function() {
    // assert something
  });
  ```

  @method visit
  @param {String} url the name of the route
  @return {RSVP.Promise<undefined>}
  @public
*/
function visit(app, url) {
  const router = app.__container__.lookup('router:main');
  let shouldHandleURL = false;
  app.boot().then(() => {
    router.location.setURL(url);
    if (shouldHandleURL) {
      run$1(app.__deprecatedInstance__, 'handleURL', url);
    }
  });
  if (app._readinessDeferrals > 0) {
    // SAFETY: This should be safe, though it is odd.
    router.initialURL = url;
    run$1(app, 'advanceReadiness');
    delete router.initialURL;
  } else {
    shouldHandleURL = true;
  }
  let wait = app.testHelpers['wait'];
  return wait();
}

let requests$1 = [];
function pendingRequests$1() {
  return requests$1.length;
}

/**
@module ember
*/
function wait(app, value) {
  return new RSVP$1.Promise(function (resolve) {
    const router = app.__container__.lookup('router:main');
    let watcher = setInterval(() => {
      // 1. If the router is loading, keep polling
      let routerIsLoading = router._routerMicrolib && Boolean(router._routerMicrolib.activeTransition);
      if (routerIsLoading) {
        return;
      }

      // 2. If there are pending Ajax requests, keep polling
      if (pendingRequests$1()) {
        return;
      }

      // 3. If there are scheduled timers or we are inside of a run loop, keep polling
      if (_hasScheduledTimers() || _getCurrentRunLoop()) {
        return;
      }
      if (checkWaiters$1()) {
        return;
      }

      // Stop polling
      clearInterval(watcher);

      // Synchronously resolve the promise
      run$1(null, resolve, value);
    }, 10);
  });
}

registerAsyncHelper('visit', visit);
registerAsyncHelper('wait', wait);
registerAsyncHelper('andThen', andThen);
registerAsyncHelper('pauseTest', pauseTest);
registerHelper('currentRouteName', currentRouteName);
registerHelper('currentPath', currentPath);
registerHelper('currentURL', currentURL);
registerHelper('resumeTest', resumeTest$1);

let name = 'deferReadiness in `testing` mode';
onLoad('Ember.Application', function (ApplicationClass) {
  if (!ApplicationClass.initializers[name]) {
    ApplicationClass.initializer({
      name: name,
      initialize(application) {
        if (application.testing) {
          application.deferReadiness();
        }
      }
    });
  }
});

// to setup initializer

const EmberTesting = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Adapter: Adapter$1,
  QUnitAdapter,
  Test,
  setupForTesting
}, Symbol.toStringTag, {
  value: 'Module'
}));

let registerWaiter;
let _impl;
let testingNotAvailableMessage = () => {
  throw new Error('Attempted to use test utilities, but `ember-testing` was not included');
};
registerWaiter = testingNotAvailableMessage;
function registerTestImplementation(impl) {
  let {
    Test
  } = impl;
  Test.registerAsyncHelper;
  Test.registerHelper;
  registerWaiter = Test.registerWaiter;
  Test.unregisterHelper;
  Test.unregisterWaiter;
  _impl = impl;
}

registerTestImplementation(EmberTesting);

let __resolver__;

/**
  Stores the provided resolver instance so that tests being ran can resolve
  objects in the same way as a normal application.

  Used by `setupContext` and `setupRenderingContext` as a fallback when `setApplication` was _not_ used.

  @public
  @param {Ember.Resolver} resolver the resolver to be used for testing
*/
function setResolver(resolver) {
  __resolver__ = resolver;
}

/**
  Retrieve the resolver instance stored by `setResolver`.

  @public
  @returns {Ember.Resolver} the previously stored resolver
*/
function getResolver() {
  return __resolver__;
}

let __application__;

/**
  Stores the provided application instance so that tests being ran will be aware of the application under test.

  - Required by `setupApplicationContext` method.
  - Used by `setupContext` and `setupRenderingContext` when present.

  @public
  @param {Ember.Application} application the application that will be tested
*/
function setApplication(application) {
  __application__ = application;
  if (!getResolver()) {
    const Resolver = application.Resolver;
    const resolver = Resolver.create({
      namespace: application
    });
    setResolver(resolver);
  }
}

/**
  Retrieve the application instance stored by `setApplication`.

  @public
  @returns {Ember.Application} the previously stored application instance under test
*/
function getApplication() {
  return __application__;
}

// @ts-ignore

/**
  Checks if the currently running Ember version is greater than or equal to the
  specified major and minor version numbers.

  @private
  @param {number} major the major version number to compare
  @param {number} minor the minor version number to compare
  @returns {boolean} true if the Ember version is >= MAJOR.MINOR specified, false otherwise
*/
function hasEmberVersion(major, minor) {
  const numbers = Version.split('-')[0]?.split('.');
  if (!numbers || !numbers[0] || !numbers[1]) {
    throw new Error('`Ember.VERSION` is not set.');
  }
  const actualMajor = parseInt(numbers[0], 10);
  const actualMinor = parseInt(numbers[1], 10);
  return actualMajor > major || actualMajor === major && actualMinor >= minor;
}

/**
 * Adds methods that are normally only on registry to the container. This is largely to support the legacy APIs
 * that are not using `owner` (but are still using `this.container`).
 *
 * @private
 * @param {Object} container  the container to modify
 */
function exposeRegistryMethodsWithoutDeprecations(container) {
  const methods = ['register', 'unregister', 'resolve', 'normalize', 'typeInjection', 'injection', 'factoryInjection', 'factoryTypeInjection', 'has', 'options', 'optionsForType'];
  for (let i = 0, l = methods.length; i < l; i++) {
    const methodName = methods[i];
    if (methodName && methodName in container) {
      const knownMethod = methodName;
      container[knownMethod] = function (...args) {
        return container._registry[knownMethod](...args);
      };
    }
  }
}

// NOTE: this is the same as what `EngineInstance`/`ApplicationInstance`
// implement, and is thus a superset of the `InternalOwner` contract from Ember
// itself.

const Owner = EmberObject.extend(RegistryProxyMixin, ContainerProxyMixin, {
  _emberTestHelpersMockOwner: true,
  /* eslint-disable valid-jsdoc */
  /**
   * Unregister a factory and its instance.
   *
   * Overrides `RegistryProxy#unregister` in order to clear any cached instances
   * of the unregistered factory.
   *
   * @param {string} fullName Name of the factory to unregister.
   *
   * @see {@link https://github.com/emberjs/ember.js/pull/12680}
   * @see {@link https://github.com/emberjs/ember.js/blob/v4.5.0-alpha.5/packages/%40ember/engine/instance.ts#L152-L167}
   */
  /* eslint-enable valid-jsdoc */
  unregister(fullName) {
    // SAFETY: this is always present, but only the stable type definitions from
    // Ember actually preserve it, since it is private API.
    this['__container__'].reset(fullName);

    // We overwrote this method from RegistryProxyMixin.
    // SAFETY: this is always present, but only the stable type definitions from
    // Ember actually preserve it, since it is private API.
    this['__registry__'].unregister(fullName);
  }
});

/**
 * @private
 * @param {Object} resolver the resolver to use with the registry
 * @returns {Object} owner, container, registry
 */
function buildRegistry(resolver) {
  const namespace = new Application();
  // @ts-ignore: this is actually the correcct type, but there was a typo in
  // Ember's docs for many years which meant that there was a matching problem
  // in the types for Ember's definition of `Engine`. Once we require at least
  // Ember 5.1 (in some future breaking change), this ts-ignore can be removed.
  namespace.Resolver = {
    create() {
      return resolver;
    }
  };

  // @ts-ignore: this is private API.
  const fallbackRegistry = Application.buildRegistry(namespace);
  const registry = new Registry({
    fallback: fallbackRegistry
  });

  // @ts-ignore: this is private API.
  ApplicationInstance.setupRegistry(registry);

  // these properties are set on the fallback registry by `buildRegistry`
  // and on the primary registry within the ApplicationInstance constructor
  // but we need to manually recreate them since ApplicationInstance's are not
  // exposed externally
  // @ts-ignore: this is private API.
  registry.normalizeFullName = fallbackRegistry.normalizeFullName;
  // @ts-ignore: this is private API.
  registry.makeToString = fallbackRegistry.makeToString;
  // @ts-ignore: this is private API.
  registry.describe = fallbackRegistry.describe;
  const owner = Owner.create({
    // @ts-ignore -- we do not have type safety for `Object.extend` so the type
    // of `Owner` here is just `EmberObject`, but we *do* constrain it to allow
    // only types from the actual class, so these fields are not accepted.
    // However, we can see that they are valid, based on the definition of
    // `Owner` above given that it fulfills the `InternalOwner` contract and
    // also extends it just as `EngineInstance` does internally.
    //
    // NOTE: we use an `ignore` directive rather than `expect-error` because in
    // *some* versions of the types, we *do* have (at least some of) this
    // safety, and maximal backwards compatibility means we have to account for
    // that.
    __registry__: registry,
    __container__: null
  });

  // @ts-ignore: this is private API.
  const container = registry.container({
    owner: owner
  });
  // @ts-ignore: this is private API.
  owner.__container__ = container;
  exposeRegistryMethodsWithoutDeprecations(container);
  return {
    registry,
    container,
    owner
  };
}

/**
  Creates an "owner" (an object that either _is_ or duck-types like an
  `Ember.ApplicationInstance`) from the provided options.

  If `options.application` is present (e.g. setup by an earlier call to
  `setApplication`) an `Ember.ApplicationInstance` is built via
  `application.buildInstance()`.

  If `options.application` is not present, we fall back to using
  `options.resolver` instead (setup via `setResolver`). This creates a mock
  "owner" by using a custom created combination of `Ember.Registry`,
  `Ember.Container`, `Ember._ContainerProxyMixin`, and
  `Ember._RegistryProxyMixin`.

  @private
  @param {Ember.Application} [application] the Ember.Application to build an instance from
  @param {Ember.Resolver} [resolver] the resolver to use to back a "mock owner"
  @returns {Promise<Ember.ApplicationInstance>} a promise resolving to the generated "owner"
*/
function buildOwner(application, resolver) {
  if (application) {
    // @ts-ignore: this type is correct and will check against Ember 4.12 or 5.1
    // or later. However, the first round of preview types in Ember 4.8 does not
    // include the `visit` API (it was missing for many years!) and therefore
    // there is no way to make this assignable accross all supported versions.
    return application.boot().then(app => app.buildInstance().boot());
  }
  if (!resolver) {
    throw new Error('You must set up the ember-test-helpers environment with either `setResolver` or `setApplication` before running any tests.');
  }
  const {
    owner
  } = buildRegistry(resolver);
  return Promise.resolve(owner);
}

// eslint-disable-next-line require-jsdoc
function isElement$1(target) {
  return target !== null && typeof target === 'object' && Reflect.get(target, 'nodeType') === Node.ELEMENT_NODE;
}

// eslint-disable-next-line require-jsdoc
function isWindow(target) {
  return target instanceof Window;
}

// eslint-disable-next-line require-jsdoc
function isDocument$1(target) {
  return target !== null && typeof target === 'object' && Reflect.get(target, 'nodeType') === Node.DOCUMENT_NODE;
}

// eslint-disable-next-line require-jsdoc
function isContentEditable(element) {
  return 'isContentEditable' in element && element.isContentEditable;
}

const FORM_CONTROL_TAGS = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'];
/**
  @private
  @param {Element} element the element to check
  @returns {boolean} `true` when the element is a form control, `false` otherwise
*/
function isFormControl(element) {
  return !isWindow(element) && !isDocument$1(element) && FORM_CONTROL_TAGS.indexOf(element.tagName) > -1 && element.type !== 'hidden';
}

/* globals Promise */

const nextTick = cb => Promise.resolve().then(cb);
const futureTick = setTimeout;

/**
 Returns whether the passed in string consists only of numeric characters.

 @private
 @param {string} n input string
 @returns {boolean} whether the input string consists only of numeric characters
 */
function isNumeric(n) {
  return !isNaN(parseFloat(n)) && isFinite(Number(n));
}

const TIMEOUTS = [0, 1, 2, 5, 7];
const MAX_TIMEOUT = 10;
/**
  Wait for the provided callback to return a truthy value.

  This does not leverage `settled()`, and as such can be used to manage async
  while _not_ settled (e.g. "loading" or "pending" states).

  @public
  @param {Function} callback the callback to use for testing when waiting should stop
  @param {Object} [options] options used to override defaults
  @param {number} [options.timeout=1000] the maximum amount of time to wait
  @param {string} [options.timeoutMessage='waitUntil timed out'] the message to use in the reject on timeout
  @returns {Promise} resolves with the callback value when it returns a truthy value

  @example
  <caption>
    Waiting until a selected element displays text:
  </caption>
  await waitUntil(function() {
    return find('.my-selector').textContent.includes('something')
  }, { timeout: 2000 })
*/
function waitUntil(callback, options = {}) {
  const timeout = 'timeout' in options ? options.timeout : 1000;
  const timeoutMessage = 'timeoutMessage' in options ? options.timeoutMessage : 'waitUntil timed out';

  // creating this error eagerly so it has the proper invocation stack
  const waitUntilTimedOut = new Error(timeoutMessage);
  return new Promise(function (resolve, reject) {
    let time = 0;

    // eslint-disable-next-line require-jsdoc
    function scheduleCheck(timeoutsIndex) {
      const knownTimeout = TIMEOUTS[timeoutsIndex];
      const interval = knownTimeout === undefined ? MAX_TIMEOUT : knownTimeout;
      futureTick(function () {
        time += interval;
        let value;
        try {
          value = callback();
        } catch (error) {
          reject(error);
          return;
        }
        if (value) {
          resolve(value);
        } else if (time < timeout) {
          scheduleCheck(timeoutsIndex + 1);
        } else {
          reject(waitUntilTimedOut);
          return;
        }
      }, interval);
    }
    scheduleCheck(0);
  });
}

/* globals global */

var global$1 = (() => {
  if (typeof self !== 'undefined') {
    return self;
  } else if (typeof window !== 'undefined') {
    return window;
    // @ts-ignore -- global does not exist
  } else if (typeof global !== 'undefined') {
    // @ts-ignore -- global does not exist
    return global;
  } else {
    return Function('return this')();
  }
})();

class TestMetadata {
  testName;
  setupTypes;
  usedHelpers;
  constructor() {
    this.setupTypes = [];
    this.usedHelpers = [];
  }
  get isRendering() {
    return this.setupTypes.indexOf('setupRenderingContext') > -1 && this.usedHelpers.indexOf('render') > -1;
  }
  get isApplication() {
    return this.setupTypes.indexOf('setupApplicationContext') > -1;
  }
}

// Only export the type side of the item: this way the only way (it is legal) to
// construct it is here, but users can still reference the type.

const TEST_METADATA = new WeakMap();

/**
 * Gets the test metadata associated with the provided test context. Will create
 * a new test metadata object if one does not exist.
 *
 * @param {BaseContext} context the context to use
 * @returns {TestMetadata} the test metadata for the provided context
 */
function getTestMetadata(context) {
  if (!TEST_METADATA.has(context)) {
    TEST_METADATA.set(context, new TestMetadata());
  }
  return TEST_METADATA.get(context);
}

// This provides (when the environment supports) queryParam support for deprecations:
// * squelch deprecations by name via: `/tests/index.html?disabledDeprecations=this-property-fallback,some-other-thing`
// * enable a debuggger when a deprecation by a specific name is encountered via: `/tests/index.html?debugDeprecations=some-other-thing` when the
if (typeof URLSearchParams !== 'undefined') {
  const queryParams = new URLSearchParams(document.location.search.substring(1));
  queryParams.get('disabledDeprecations');
  queryParams.get('debugDeprecations');
}

// This provides (when the environment supports) queryParam support for warnings:
// * squelch warnings by name via: `/tests/index.html?disabledWarnings=this-property-fallback,some-other-thing`
// * enable a debuggger when a warning by a specific name is encountered via: `/tests/index.html?debugWarnings=some-other-thing` when the
if (typeof URLSearchParams !== 'undefined') {
  const queryParams = new URLSearchParams(document.location.search.substring(1));
  queryParams.get('disabledWarnings');
  queryParams.get('debugWarnings');
}

const registeredHooks = new Map();

/**
 * @private
 * @param {string} helperName The name of the test helper in which to run the hook.
 * @param {string} label A label to help identify the hook.
 * @returns {string} The compound key for the helper.
 */
function getHelperKey(helperName, label) {
  return `${helperName}:${label}`;
}

/**
 * Registers a function to be run during the invocation of a test helper.
 *
 * @param {string} helperName The name of the test helper in which to run the hook.
 *                            Test helper names include `blur`, `click`, `doubleClick`, `fillIn`,
 *                            `fireEvent`, `focus`, `render`, `scrollTo`, `select`, `tab`, `tap`, `triggerEvent`,
 *                            `triggerKeyEvent`, `typeIn`, and `visit`.
 * @param {string} label A label to help identify the hook. Built-in labels include `start`, `end`,
 *                       and `targetFound`, the former designating either the start or end of
 *                       the helper invocation.
 * @param {Function} hook The hook function to run when the test helper is invoked.
 * @returns {HookUnregister} An object containing an `unregister` function that unregisters
 *                           the specific hook initially registered to the helper.
 * @example
 * <caption>
 *   Registering a hook for the `end` point of the `click` test helper invocation
 * </caption>
 *
 * const hook = registerHook('click', 'end', () => {
 *   console.log('Running `click:end` test helper hook');
 * });
 *
 * // Unregister the hook at some later point in time
 * hook.unregister();
 */
function registerHook(helperName, label, hook) {
  const helperKey = getHelperKey(helperName, label);
  let hooksForHelper = registeredHooks.get(helperKey);
  if (hooksForHelper === undefined) {
    hooksForHelper = new Set();
    registeredHooks.set(helperKey, hooksForHelper);
  }
  hooksForHelper.add(hook);
  return {
    unregister() {
      hooksForHelper.delete(hook);
    }
  };
}

/**
 * Runs all hooks registered for a specific test helper.
 *
 * @param {string} helperName The name of the test helper in which to run the hook.
 *                            Test helper names include `blur`, `click`, `doubleClick`, `fillIn`,
 *                            `fireEvent`, `focus`, `render`, `scrollTo`, `select`, `tab`, `tap`, `triggerEvent`,
 *                            `triggerKeyEvent`, `typeIn`, and `visit`.
 * @param {string} label A label to help identify the hook. Built-in labels include `start`, `end`,
 *                       and `targetFound`, the former designating either the start or end of
 *                       the helper invocation.
 * @param {unknown[]} args Any arguments originally passed to the test helper.
 * @returns {Promise<void>} A promise representing the serial invocation of the hooks.
 */
function runHooks(helperName, label, ...args) {
  const hooks = registeredHooks.get(getHelperKey(helperName, label)) || new Set();
  const promises = [];
  hooks.forEach(hook => {
    const hookResult = hook(...args);
    promises.push(hookResult);
  });
  return Promise.all(promises).then(() => {});
}

/**
  Set `EmberENV.FEATURES` in your application's `config/environment.js` file
  to enable canary features in your application.

  See the [feature flag guide](https://guides.emberjs.com/release/configuring-ember/feature-flags/)
  for more details.

  @module @ember/canary-features
  @public
*/

const DEFAULT_FEATURES = {
  // FLAG_NAME: true/false
};

/**
  The hash of enabled Canary features. Add to this, any canary features
  before creating your application.

  @class FEATURES
  @static
  @since 1.1.0
  @public
*/
const FEATURES = Object.assign(DEFAULT_FEATURES, ENV.FEATURES);

/**
  Determine whether the specified `feature` is enabled. Used by Ember's
  build tools to exclude experimental features from beta/stable builds.

  You can define the following configuration options:

  * `EmberENV.ENABLE_OPTIONAL_FEATURES` - enable any features that have not been explicitly
    enabled/disabled.

  @method isEnabled
  @param {String} feature The feature to check
  @return {Boolean}
  @since 1.1.0
  @public
*/
function isEnabled(feature) {
  let value = FEATURES[feature];
  if (value === true || value === false) {
    return value;
  } else if (ENV.ENABLE_OPTIONAL_FEATURES) {
    return true;
  } else {
    return false;
  }
}

/**
 @module @ember/utils
*/
/**
  A value is blank if it is empty or a whitespace string.

  ```javascript
  import { isBlank } from '@ember/utils';

  isBlank(null);            // true
  isBlank(undefined);       // true
  isBlank('');              // true
  isBlank([]);              // true
  isBlank('\n\t');          // true
  isBlank('  ');            // true
  isBlank({});              // false
  isBlank('\n\t Hello');    // false
  isBlank('Hello world');   // false
  isBlank([1,2,3]);         // false
  ```

  @method isBlank
  @static
  @for @ember/utils
  @param {Object} obj Value to test
  @return {Boolean}
  @since 1.5.0
  @public
*/
function isBlank(obj) {
  return isEmpty$1(obj) || typeof obj === 'string' && /\S/.test(obj) === false;
}

/**
 @module @ember/utils
*/
/**
  A value is present if it not `isBlank`.

  ```javascript
  isPresent(null);            // false
  isPresent(undefined);       // false
  isPresent('');              // false
  isPresent('  ');            // false
  isPresent('\n\t');          // false
  isPresent([]);              // false
  isPresent({ length: 0 });   // false
  isPresent(false);           // true
  isPresent(true);            // true
  isPresent('string');        // true
  isPresent(0);               // true
  isPresent(function() {});   // true
  isPresent({});              // true
  isPresent('\n\t Hello');    // true
  isPresent([1, 2, 3]);       // true
  ```

  @method isPresent
  @static
  @for @ember/utils
  @param {Object} obj Value to test
  @return {Boolean}
  @since 1.8.0
  @public
*/
function isPresent(obj) {
  return !isBlank(obj);
}

/**
 @module @ember/utils
*/
/**
  Compares two objects, returning true if they are equal.

  ```javascript
  import { isEqual } from '@ember/utils';

  isEqual('hello', 'hello');                   // true
  isEqual(1, 2);                               // false
  ```

  `isEqual` is a more specific comparison than a triple equal comparison.
  It will call the `isEqual` instance method on the objects being
  compared, allowing finer control over when objects should be considered
  equal to each other.

  ```javascript
  import { isEqual } from '@ember/utils';
  import EmberObject from '@ember/object';

  let Person = EmberObject.extend({
    isEqual(other) { return this.ssn == other.ssn; }
  });

  let personA = Person.create({name: 'Muhammad Ali', ssn: '123-45-6789'});
  let personB = Person.create({name: 'Cassius Clay', ssn: '123-45-6789'});

  isEqual(personA, personB); // true
  ```

  Due to the expense of array comparisons, collections will never be equal to
  each other even if each of their items are equal to each other.

  ```javascript
  import { isEqual } from '@ember/utils';

  isEqual([4, 2], [4, 2]);                     // false
  ```

  @method isEqual
  @for @ember/utils
  @static
  @param {Object} a first object to compare
  @param {Object} b second object to compare
  @return {Boolean}
  @public
*/
function isEqual$1(a, b) {
  if (a && typeof a.isEqual === 'function') {
    return a.isEqual(b);
  }
  if (a instanceof Date && b instanceof Date) {
    return a.getTime() === b.getTime();
  }
  return a === b;
}

// STATE within a module is frowned upon, this exists
// to support Ember.TEMPLATES but shield ember internals from this legacy
// global API.

let TEMPLATES = {};
function setTemplates(templates) {
  TEMPLATES = templates;
}
function getTemplates() {
  return TEMPLATES;
}
function getTemplate(name) {
  if (Object.prototype.hasOwnProperty.call(TEMPLATES, name)) {
    return TEMPLATES[name];
  }
}
function hasTemplate(name) {
  return Object.prototype.hasOwnProperty.call(TEMPLATES, name);
}
function setTemplate(name, template) {
  return TEMPLATES[name] = template;
}

/**
   Associate a class with a component manager (an object that is responsible for
   coordinating the lifecycle events that occurs when invoking, rendering and
   re-rendering a component).

   @method setComponentManager
   @param {Function} factory a function to create the owner for an object
   @param {Object} obj the object to associate with the componetn manager
   @return {Object} the same object passed in
   @public
  */
function setComponentManager(manager, obj) {
  return setComponentManager$1(manager, obj);
}

/**
@module @ember/debug/data-adapter
*/

// Represents the base contract for iterables as understood in the GLimmer VM
// historically. This is *not* the public API for it, because there *is* no
// public API for it. Recent versions of Glimmer simply use `Symbol.iterator`,
// but some older consumers still use this basic shape.

function iterate(arr, fn) {
  if (Symbol.iterator in arr) {
    for (let item of arr) {
      fn(item);
    }
  } else {
    // SAFETY: this cast required to work this way to interop between TS 4.8
    // and 4.9. When we drop support for 4.8, it will narrow correctly via the
    // use of the `in` operator above. (Preferably we will solve this by just
    // switching to require `Symbol.iterator` instead.)
    assert$1('', typeof arr.forEach === 'function');
    arr.forEach(fn);
  }
}
class RecordsWatcher {
  recordCaches = new Map();
  added = [];
  updated = [];
  removed = [];
  getCacheForItem(record) {
    let recordCache = this.recordCaches.get(record);
    if (!recordCache) {
      let hasBeenAdded = false;
      recordCache = createCache(() => {
        if (!hasBeenAdded) {
          this.added.push(this.wrapRecord(record));
          hasBeenAdded = true;
        } else {
          this.updated.push(this.wrapRecord(record));
        }
      });
      this.recordCaches.set(record, recordCache);
    }
    return recordCache;
  }
  constructor(records, recordsAdded, recordsUpdated, recordsRemoved, wrapRecord, release) {
    this.wrapRecord = wrapRecord;
    this.release = release;
    this.recordArrayCache = createCache(() => {
      let seen = new Set();

      // Track `[]` for legacy support
      consumeTag(tagFor(records, '[]'));
      iterate(records, record => {
        getValue(this.getCacheForItem(record));
        seen.add(record);
      });

      // Untrack this operation because these records are being removed, they
      // should not be polled again in the future
      untrack(() => {
        this.recordCaches.forEach((_cache, record) => {
          if (!seen.has(record)) {
            this.removed.push(wrapRecord(record));
            this.recordCaches.delete(record);
          }
        });
      });
      if (this.added.length > 0) {
        recordsAdded(this.added);
        this.added = [];
      }
      if (this.updated.length > 0) {
        recordsUpdated(this.updated);
        this.updated = [];
      }
      if (this.removed.length > 0) {
        recordsRemoved(this.removed);
        this.removed = [];
      }
    });
  }
  revalidate() {
    getValue(this.recordArrayCache);
  }
}
class TypeWatcher {
  constructor(records, onChange, release) {
    this.release = release;
    let hasBeenAccessed = false;
    this.cache = createCache(() => {
      // Empty iteration, we're doing this just
      // to track changes to the records array
      iterate(records, () => {});

      // Also track `[]` for legacy support
      consumeTag(tagFor(records, '[]'));
      if (hasBeenAccessed === true) {
        next(onChange);
      } else {
        hasBeenAccessed = true;
      }
    });
    this.release = release;
  }
  revalidate() {
    getValue(this.cache);
  }
}

/**
  The `DataAdapter` helps a data persistence library
  interface with tools that debug Ember such
  as the [Ember Inspector](https://github.com/emberjs/ember-inspector)
  for Chrome and Firefox.

  This class will be extended by a persistence library
  which will override some of the methods with
  library-specific code.

  The methods likely to be overridden are:

  * `getFilters`
  * `detect`
  * `columnsForType`
  * `getRecords`
  * `getRecordColumnValues`
  * `getRecordKeywords`
  * `getRecordFilterValues`
  * `getRecordColor`

  The adapter will need to be registered
  in the application's container as `dataAdapter:main`.

  Example:

  ```javascript
  Application.initializer({
    name: "data-adapter",

    initialize: function(application) {
      application.register('data-adapter:main', DS.DataAdapter);
    }
  });
  ```

  @class DataAdapter
  @extends EmberObject
  @public
*/
class DataAdapter extends EmberObject {
  releaseMethods = A();
  recordsWatchers = new Map();
  typeWatchers = new Map();
  flushWatchers = null;

  // TODO: Revisit this

  constructor(owner) {
    super(owner);
    this.containerDebugAdapter = getOwner$2(this).lookup('container-debug-adapter:main');
  }

  /**
    The container-debug-adapter which is used
    to list all models.
     @property containerDebugAdapter
    @default undefined
    @since 1.5.0
    @public
  **/

  /**
    The number of attributes to send
    as columns. (Enough to make the record
    identifiable).
     @private
    @property attributeLimit
    @default 3
    @since 1.3.0
  */
  attributeLimit = 3;

  /**
     Ember Data > v1.0.0-beta.18
     requires string model names to be passed
     around instead of the actual factories.
      This is a stamp for the Ember Inspector
     to differentiate between the versions
     to be able to support older versions too.
      @public
     @property acceptsModelName
   */
  acceptsModelName = true;

  /**
     Map from records arrays to RecordsWatcher instances
      @private
     @property recordsWatchers
     @since 3.26.0
   */

  /**
    Map from records arrays to TypeWatcher instances
     @private
    @property typeWatchers
    @since 3.26.0
   */

  /**
    Callback that is currently scheduled on backburner end to flush and check
    all active watchers.
     @private
    @property flushWatchers
    @since 3.26.0
    */

  /**
    Stores all methods that clear observers.
    These methods will be called on destruction.
     @private
    @property releaseMethods
    @since 1.3.0
  */

  /**
    Specifies how records can be filtered.
    Records returned will need to have a `filterValues`
    property with a key for every name in the returned array.
     @public
    @method getFilters
    @return {Array} List of objects defining filters.
     The object should have a `name` and `desc` property.
  */
  getFilters() {
    return A();
  }

  /**
    Fetch the model types and observe them for changes.
     @public
    @method watchModelTypes
     @param {Function} typesAdded Callback to call to add types.
    Takes an array of objects containing wrapped types (returned from `wrapModelType`).
     @param {Function} typesUpdated Callback to call when a type has changed.
    Takes an array of objects containing wrapped types.
     @return {Function} Method to call to remove all observers
  */
  watchModelTypes(typesAdded, typesUpdated) {
    let modelTypes = this.getModelTypes();
    let releaseMethods = A();
    let typesToSend;
    typesToSend = modelTypes.map(type => {
      let klass = type.klass;
      let wrapped = this.wrapModelType(klass, type.name);
      releaseMethods.push(this.observeModelType(type.name, typesUpdated));
      return wrapped;
    });
    typesAdded(typesToSend);
    let release = () => {
      releaseMethods.forEach(fn => fn());
      this.releaseMethods.removeObject(release);
    };
    this.releaseMethods.pushObject(release);
    return release;
  }
  _nameToClass(type) {
    if (typeof type === 'string') {
      let owner = getOwner$2(this);
      let Factory = owner.factoryFor(`model:${type}`);
      type = Factory && Factory.class;
    }
    return type;
  }

  /**
    Fetch the records of a given type and observe them for changes.
     @public
    @method watchRecords
     @param {String} modelName The model name.
     @param {Function} recordsAdded Callback to call to add records.
    Takes an array of objects containing wrapped records.
    The object should have the following properties:
      columnValues: {Object} The key and value of a table cell.
      object: {Object} The actual record object.
     @param {Function} recordsUpdated Callback to call when a record has changed.
    Takes an array of objects containing wrapped records.
     @param {Function} recordsRemoved Callback to call when a record has removed.
    Takes an array of objects containing wrapped records.
     @return {Function} Method to call to remove all observers.
  */
  watchRecords(modelName, recordsAdded, recordsUpdated, recordsRemoved) {
    let klass = this._nameToClass(modelName);
    let records = this.getRecords(klass, modelName);
    let {
      recordsWatchers
    } = this;
    let recordsWatcher = recordsWatchers.get(records);
    if (!recordsWatcher) {
      recordsWatcher = new RecordsWatcher(records, recordsAdded, recordsUpdated, recordsRemoved, record => this.wrapRecord(record), () => {
        recordsWatchers.delete(records);
        this.updateFlushWatchers();
      });
      recordsWatchers.set(records, recordsWatcher);
      this.updateFlushWatchers();
      recordsWatcher.revalidate();
    }
    return recordsWatcher.release;
  }
  updateFlushWatchers() {
    if (this.flushWatchers === null) {
      if (this.typeWatchers.size > 0 || this.recordsWatchers.size > 0) {
        this.flushWatchers = () => {
          this.typeWatchers.forEach(watcher => watcher.revalidate());
          this.recordsWatchers.forEach(watcher => watcher.revalidate());
        };
        _backburner.on('end', this.flushWatchers);
      }
    } else if (this.typeWatchers.size === 0 && this.recordsWatchers.size === 0) {
      _backburner.off('end', this.flushWatchers);
      this.flushWatchers = null;
    }
  }

  /**
    Clear all observers before destruction
    @private
    @method willDestroy
  */
  willDestroy() {
    this._super(...arguments);
    this.typeWatchers.forEach(watcher => watcher.release());
    this.recordsWatchers.forEach(watcher => watcher.release());
    this.releaseMethods.forEach(fn => fn());
    if (this.flushWatchers) {
      _backburner.off('end', this.flushWatchers);
    }
  }

  /**
    Detect whether a class is a model.
     Test that against the model class
    of your persistence library.
     @public
    @method detect
    @return boolean Whether the class is a model class or not.
  */
  detect(_klass) {
    return false;
  }

  /**
    Get the columns for a given model type.
     @public
    @method columnsForType
    @return {Array} An array of columns of the following format:
     name: {String} The name of the column.
     desc: {String} Humanized description (what would show in a table column name).
  */
  columnsForType(_klass) {
    return A();
  }

  /**
    Adds observers to a model type class.
     @private
    @method observeModelType
    @param {String} modelName The model type name.
    @param {Function} typesUpdated Called when a type is modified.
    @return {Function} The function to call to remove observers.
  */

  observeModelType(modelName, typesUpdated) {
    let klass = this._nameToClass(modelName);
    let records = this.getRecords(klass, modelName);
    let onChange = () => {
      typesUpdated([this.wrapModelType(klass, modelName)]);
    };
    let {
      typeWatchers
    } = this;
    let typeWatcher = typeWatchers.get(records);
    if (!typeWatcher) {
      typeWatcher = new TypeWatcher(records, onChange, () => {
        typeWatchers.delete(records);
        this.updateFlushWatchers();
      });
      typeWatchers.set(records, typeWatcher);
      this.updateFlushWatchers();
      typeWatcher.revalidate();
    }
    return typeWatcher.release;
  }

  /**
    Wraps a given model type and observes changes to it.
     @private
    @method wrapModelType
    @param {Class} klass A model class.
    @param {String} modelName Name of the class.
    @return {Object} The wrapped type has the following format:
      name: {String} The name of the type.
      count: {Integer} The number of records available.
      columns: {Columns} An array of columns to describe the record.
      object: {Class} The actual Model type class.
  */
  wrapModelType(klass, name) {
    let records = this.getRecords(klass, name);
    return {
      name,
      count: get$1(records, 'length'),
      columns: this.columnsForType(klass),
      object: klass
    };
  }

  /**
    Fetches all models defined in the application.
     @private
    @method getModelTypes
    @return {Array} Array of model types.
  */
  getModelTypes() {
    let containerDebugAdapter = this.containerDebugAdapter;
    let stringTypes = containerDebugAdapter.canCatalogEntriesByType('model') ? containerDebugAdapter.catalogEntriesByType('model') : this._getObjectsOnNamespaces();

    // New adapters return strings instead of classes.
    let klassTypes = stringTypes.map(name => {
      return {
        klass: this._nameToClass(name),
        name
      };
    });
    return klassTypes.filter(type => this.detect(type.klass));
  }

  /**
    Loops over all namespaces and all objects
    attached to them.
     @private
    @method _getObjectsOnNamespaces
    @return {Array} Array of model type strings.
  */
  _getObjectsOnNamespaces() {
    let namespaces = Namespace.NAMESPACES;
    let types = [];
    namespaces.forEach(namespace => {
      for (let key in namespace) {
        if (!Object.prototype.hasOwnProperty.call(namespace, key)) {
          continue;
        }
        // Even though we will filter again in `getModelTypes`,
        // we should not call `lookupFactory` on non-models
        if (!this.detect(namespace[key])) {
          continue;
        }
        let name = dasherize$1(key);
        types.push(name);
      }
    });
    return types;
  }

  /**
    Fetches all loaded records for a given type.
     @public
    @method getRecords
    @return {Array} An array of records.
     This array will be observed for changes,
     so it should update when new records are added/removed.
  */
  getRecords(_klass, _name) {
    return A();
  }

  /**
    Wraps a record and observers changes to it.
     @private
    @method wrapRecord
    @param {Object} record The record instance.
    @return {Object} The wrapped record. Format:
    columnValues: {Array}
    searchKeywords: {Array}
  */
  wrapRecord(record) {
    return {
      object: record,
      columnValues: this.getRecordColumnValues(record),
      searchKeywords: this.getRecordKeywords(record),
      filterValues: this.getRecordFilterValues(record),
      color: this.getRecordColor(record)
    };
  }

  /**
    Gets the values for each column.
     @public
    @method getRecordColumnValues
    @return {Object} Keys should match column names defined
    by the model type.
  */
  getRecordColumnValues(_record) {
    return {};
  }

  /**
    Returns keywords to match when searching records.
     @public
    @method getRecordKeywords
    @return {Array} Relevant keywords for search.
  */
  getRecordKeywords(_record) {
    return A();
  }

  /**
    Returns the values of filters defined by `getFilters`.
     @public
    @method getRecordFilterValues
    @param {Object} record The record instance.
    @return {Object} The filter values.
  */
  getRecordFilterValues(_record) {
    return {};
  }

  /**
    Each record can have a color that represents its state.
     @public
    @method getRecordColor
    @param {Object} record The record instance
    @return {String} The records color.
      Possible options: black, red, blue, green.
  */
  getRecordColor(_record) {
    return null;
  }
}

const ARRAY_OBSERVER_MAPPING = {
  willChange: '_arrangedContentArrayWillChange',
  didChange: '_arrangedContentArrayDidChange'
};
function customTagForArrayProxy(proxy, key) {
  if (key === '[]') {
    proxy._revalidate();
    return proxy._arrTag;
  } else if (key === 'length') {
    proxy._revalidate();
    return proxy._lengthTag;
  }
  return tagFor(proxy, key);
}

/**
  An ArrayProxy wraps any other object that implements `Array` and/or
  `MutableArray,` forwarding all requests. This makes it very useful for
  a number of binding use cases or other cases where being able to swap
  out the underlying array is useful.

  A simple example of usage:

  ```javascript
  import { A } from '@ember/array';
  import ArrayProxy from '@ember/array/proxy';

  let pets = ['dog', 'cat', 'fish'];
  let ap = ArrayProxy.create({ content: A(pets) });

  ap.get('firstObject');                        // 'dog'
  ap.set('content', ['amoeba', 'paramecium']);
  ap.get('firstObject');                        // 'amoeba'
  ```

  This class can also be useful as a layer to transform the contents of
  an array, as they are accessed. This can be done by overriding
  `objectAtContent`:

  ```javascript
  import { A } from '@ember/array';
  import ArrayProxy from '@ember/array/proxy';

  let pets = ['dog', 'cat', 'fish'];
  let ap = ArrayProxy.create({
      content: A(pets),
      objectAtContent: function(idx) {
          return this.get('content').objectAt(idx).toUpperCase();
      }
  });

  ap.get('firstObject'); // . 'DOG'
  ```

  When overriding this class, it is important to place the call to
  `_super` *after* setting `content` so the internal observers have
  a chance to fire properly:

  ```javascript
  import { A } from '@ember/array';
  import ArrayProxy from '@ember/array/proxy';

  export default ArrayProxy.extend({
    init() {
      this.set('content', A(['dog', 'cat', 'fish']));
      this._super(...arguments);
    }
  });
  ```

  @class ArrayProxy
  @extends EmberObject
  @uses MutableArray
  @public
*/

class ArrayProxy extends EmberObject {
  /*
    `this._objectsDirtyIndex` determines which indexes in the `this._objects`
    cache are dirty.
     If `this._objectsDirtyIndex === -1` then no indexes are dirty.
    Otherwise, an index `i` is dirty if `i >= this._objectsDirtyIndex`.
     Calling `objectAt` with a dirty index will cause the `this._objects`
    cache to be recomputed.
  */
  /** @internal */
  _objectsDirtyIndex = 0;
  /** @internal */
  _objects = null;

  /** @internal */
  _lengthDirty = true;
  /** @internal */
  _length = 0;

  /** @internal */
  _arrangedContent = null;
  /** @internal */
  _arrangedContentIsUpdating = false;
  /** @internal */
  _arrangedContentTag = null;
  /** @internal */
  _arrangedContentRevision = null;
  /** @internal */
  _lengthTag = null;
  /** @internal */
  _arrTag = null;
  init(props) {
    super.init(props);
    setCustomTagFor(this, customTagForArrayProxy);
  }
  [PROPERTY_DID_CHANGE]() {
    this._revalidate();
  }
  willDestroy() {
    this._removeArrangedContentArrayObserver();
  }
  objectAtContent(idx) {
    let arrangedContent = get$1(this, 'arrangedContent');
    return objectAt(arrangedContent, idx);
  }

  // See additional docs for `replace` from `MutableArray`:
  // https://api.emberjs.com/ember/release/classes/MutableArray/methods/replace?anchor=replace
  replace(idx, amt, objects) {
    this.replaceContent(idx, amt, objects);
  }
  replaceContent(idx, amt, objects) {
    let content = get$1(this, 'content');
    replace(content, idx, amt, objects);
  }

  // Overriding objectAt is not supported.
  objectAt(idx) {
    this._revalidate();
    if (this._objects === null) {
      this._objects = [];
    }
    if (this._objectsDirtyIndex !== -1 && idx >= this._objectsDirtyIndex) {
      let arrangedContent = get$1(this, 'arrangedContent');
      if (arrangedContent) {
        let length = this._objects.length = get$1(arrangedContent, 'length');
        for (let i = this._objectsDirtyIndex; i < length; i++) {
          // SAFETY: This is expected to only ever return an instance of T. In other words, there should
          // be no gaps in the array. Unfortunately, we can't actually assert for it since T could include
          // any types, including null or undefined.
          this._objects[i] = this.objectAtContent(i);
        }
      } else {
        this._objects.length = 0;
      }
      this._objectsDirtyIndex = -1;
    }
    return this._objects[idx];
  }

  // Overriding length is not supported.
  get length() {
    this._revalidate();
    if (this._lengthDirty) {
      let arrangedContent = get$1(this, 'arrangedContent');
      this._length = arrangedContent ? get$1(arrangedContent, 'length') : 0;
      this._lengthDirty = false;
    }
    consumeTag(this._lengthTag);
    return this._length;
  }
  set length(value) {
    let length = this.length;
    let removedCount = length - value;
    let added;
    if (removedCount === 0) {
      return;
    } else if (removedCount < 0) {
      added = new Array(-removedCount);
      removedCount = 0;
    }
    let content = get$1(this, 'content');
    if (content) {
      replace(content, value, removedCount, added);
      this._invalidate();
    }
  }
  _updateArrangedContentArray(arrangedContent) {
    let oldLength = this._objects === null ? 0 : this._objects.length;
    let newLength = arrangedContent ? get$1(arrangedContent, 'length') : 0;
    this._removeArrangedContentArrayObserver();
    arrayContentWillChange(this, 0, oldLength, newLength);
    this._invalidate();
    arrayContentDidChange(this, 0, oldLength, newLength, false);
    this._addArrangedContentArrayObserver(arrangedContent);
  }
  _addArrangedContentArrayObserver(arrangedContent) {
    if (arrangedContent && !arrangedContent.isDestroyed) {
      addArrayObserver(arrangedContent, this, ARRAY_OBSERVER_MAPPING);
      this._arrangedContent = arrangedContent;
    }
  }
  _removeArrangedContentArrayObserver() {
    if (this._arrangedContent) {
      removeArrayObserver(this._arrangedContent, this, ARRAY_OBSERVER_MAPPING);
    }
  }
  _arrangedContentArrayWillChange() {}
  _arrangedContentArrayDidChange(_proxy, idx, removedCnt, addedCnt) {
    arrayContentWillChange(this, idx, removedCnt, addedCnt);
    let dirtyIndex = idx;
    if (dirtyIndex < 0) {
      let length = get$1(this._arrangedContent, 'length');
      dirtyIndex += length + removedCnt - addedCnt;
    }
    if (this._objectsDirtyIndex === -1 || this._objectsDirtyIndex > dirtyIndex) {
      this._objectsDirtyIndex = dirtyIndex;
    }
    this._lengthDirty = true;
    arrayContentDidChange(this, idx, removedCnt, addedCnt, false);
  }
  _invalidate() {
    this._objectsDirtyIndex = 0;
    this._lengthDirty = true;
  }
  _revalidate() {
    if (this._arrangedContentIsUpdating === true) return;
    if (this._arrangedContentTag === null || !validateTag(this._arrangedContentTag, this._arrangedContentRevision)) {
      let arrangedContent = this.get('arrangedContent');
      if (this._arrangedContentTag === null) {
        // This is the first time the proxy has been setup, only add the observer
        // don't trigger any events
        this._addArrangedContentArrayObserver(arrangedContent);
      } else {
        this._arrangedContentIsUpdating = true;
        this._updateArrangedContentArray(arrangedContent);
        this._arrangedContentIsUpdating = false;
      }
      let arrangedContentTag = this._arrangedContentTag = tagFor(this, 'arrangedContent');
      this._arrangedContentRevision = valueForTag(this._arrangedContentTag);
      if (isObject(arrangedContent)) {
        this._lengthTag = combine([arrangedContentTag, tagForProperty(arrangedContent, 'length')]);
        this._arrTag = combine([arrangedContentTag, tagForProperty(arrangedContent, '[]')]);
      } else {
        this._lengthTag = this._arrTag = arrangedContentTag;
      }
    }
  }
}
ArrayProxy.reopen(MutableArray, {
  arrangedContent: alias('content')
});

/**
@module @ember/object/proxy
*/

/**
  `ObjectProxy` forwards all properties not defined by the proxy itself
  to a proxied `content` object.

  ```javascript
  import EmberObject from '@ember/object';
  import ObjectProxy from '@ember/object/proxy';

  let exampleObject = EmberObject.create({
    name: 'Foo'
  });

  let exampleProxy = ObjectProxy.create({
    content: exampleObject
  });

  // Access and change existing properties
  exampleProxy.get('name');          // 'Foo'
  exampleProxy.set('name', 'Bar');
  exampleObject.get('name');         // 'Bar'

  // Create new 'description' property on `exampleObject`
  exampleProxy.set('description', 'Foo is a whizboo baz');
  exampleObject.get('description');  // 'Foo is a whizboo baz'
  ```

  While `content` is unset, setting a property to be delegated will throw an
  Error.

  ```javascript
  import ObjectProxy from '@ember/object/proxy';

  let exampleProxy = ObjectProxy.create({
    content: null,
    flag: null
  });
  exampleProxy.set('flag', true);
  exampleProxy.get('flag');         // true
  exampleProxy.get('foo');          // undefined
  exampleProxy.set('foo', 'data');  // throws Error
  ```

  Delegated properties can be bound to and will change when content is updated.

  Computed properties on the proxy itself can depend on delegated properties.

  ```javascript
  import { computed } from '@ember/object';
  import ObjectProxy from '@ember/object/proxy';

  ProxyWithComputedProperty = ObjectProxy.extend({
    fullName: computed('firstName', 'lastName', function() {
      var firstName = this.get('firstName'),
          lastName = this.get('lastName');
      if (firstName && lastName) {
        return firstName + ' ' + lastName;
      }
      return firstName || lastName;
    })
  });

  let exampleProxy = ProxyWithComputedProperty.create();

  exampleProxy.get('fullName');  // undefined
  exampleProxy.set('content', {
    firstName: 'Tom', lastName: 'Dale'
  }); // triggers property change for fullName on proxy

  exampleProxy.get('fullName');  // 'Tom Dale'
  ```

  @class ObjectProxy
  @extends EmberObject
  @uses Ember.ProxyMixin
  @public
*/

// eslint-disable-next-line @typescript-eslint/no-unused-vars
class ObjectProxy extends FrameworkObject {}
ObjectProxy.PrototypeMixin.reopen(ProxyMixin);

/**
  @module @ember/object/promise-proxy-mixin
*/

function tap(proxy, promise) {
  setProperties(proxy, {
    isFulfilled: false,
    isRejected: false
  });
  return promise.then(value => {
    if (!proxy.isDestroyed && !proxy.isDestroying) {
      setProperties(proxy, {
        content: value,
        isFulfilled: true
      });
    }
    return value;
  }, reason => {
    if (!proxy.isDestroyed && !proxy.isDestroying) {
      setProperties(proxy, {
        reason,
        isRejected: true
      });
    }
    throw reason;
  }, 'Ember: PromiseProxy');
}

/**
  A low level mixin making ObjectProxy promise-aware.

  ```javascript
  import { resolve } from 'rsvp';
  import $ from 'jquery';
  import ObjectProxy from '@ember/object/proxy';
  import PromiseProxyMixin from '@ember/object/promise-proxy-mixin';

  let ObjectPromiseProxy = ObjectProxy.extend(PromiseProxyMixin);

  let proxy = ObjectPromiseProxy.create({
    promise: resolve($.getJSON('/some/remote/data.json'))
  });

  proxy.then(function(json){
     // the json
  }, function(reason) {
     // the reason why you have no json
  });
  ```

  the proxy has bindable attributes which
  track the promises life cycle

  ```javascript
  proxy.get('isPending')   //=> true
  proxy.get('isSettled')  //=> false
  proxy.get('isRejected')  //=> false
  proxy.get('isFulfilled') //=> false
  ```

  When the $.getJSON completes, and the promise is fulfilled
  with json, the life cycle attributes will update accordingly.
  Note that $.getJSON doesn't return an ECMA specified promise,
  it is useful to wrap this with an `RSVP.resolve` so that it behaves
  as a spec compliant promise.

  ```javascript
  proxy.get('isPending')   //=> false
  proxy.get('isSettled')   //=> true
  proxy.get('isRejected')  //=> false
  proxy.get('isFulfilled') //=> true
  ```

  As the proxy is an ObjectProxy, and the json now its content,
  all the json properties will be available directly from the proxy.

  ```javascript
  // Assuming the following json:
  {
    firstName: 'Stefan',
    lastName: 'Penner'
  }

  // both properties will accessible on the proxy
  proxy.get('firstName') //=> 'Stefan'
  proxy.get('lastName')  //=> 'Penner'
  ```

  @class PromiseProxyMixin
  @public
*/

const PromiseProxyMixin = Mixin.create({
  reason: null,
  isPending: computed('isSettled', function () {
    return !get$1(this, 'isSettled');
  }).readOnly(),
  isSettled: computed('isRejected', 'isFulfilled', function () {
    return get$1(this, 'isRejected') || get$1(this, 'isFulfilled');
  }).readOnly(),
  isRejected: false,
  isFulfilled: false,
  promise: computed({
    get() {
      throw new Error("PromiseProxy's promise must be set");
    },
    set(_key, promise) {
      return tap(this, promise);
    }
  }),
  then: promiseAlias('then'),
  catch: promiseAlias('catch'),
  finally: promiseAlias('finally')
});
function promiseAlias(name) {
  return function (...args) {
    let promise = get$1(this, 'promise');

    // We need this cast because `Parameters` is deferred so that it is not
    // possible for TS to see it will always produce the right type. However,
    // since `AnyFn` has a rest type, it is allowed. See discussion on [this
    // issue](https://github.com/microsoft/TypeScript/issues/47615).
    return promise[name](...args);
  };
}

/**
  @module @ember/routing
*/

/**
  Finds a controller instance.

  @for Ember
  @method controllerFor
  @private
*/
function controllerFor(container, controllerName, lookupOptions) {
  return container.lookup(`controller:${controllerName}`, lookupOptions);
}

/**
  Ember manages the lifecycles and lifetimes of many built in constructs, such
  as components, and does so in a hierarchical way - when a parent component is
  destroyed, all of its children are destroyed as well.

  This destroyables API exposes the basic building blocks for destruction:

  * registering a function to be ran when an object is destroyed
  * checking if an object is in a destroying state
  * associate an object as a child of another so that the child object will be destroyed
    when the associated parent object is destroyed.

  @module @ember/destroyable
  @public
*/

/**
  This function is used to associate a destroyable object with a parent. When the parent
  is destroyed, all registered children will also be destroyed.

  ```js
  class CustomSelect extends Component {
    constructor(...args) {
      super(...args);

      // obj is now a child of the component. When the component is destroyed,
      // obj will also be destroyed, and have all of its destructors triggered.
      this.obj = associateDestroyableChild(this, {});
    }
  }
  ```

  Returns the associated child for convenience.

  @method associateDestroyableChild
  @for @ember/destroyable
  @param {Object|Function} parent the destroyable to entangle the child destroyables lifetime with
  @param {Object|Function} child the destroyable to be entangled with the parents lifetime
  @returns {Object|Function} the child argument
  @static
  @public
*/

/**
 Receives a destroyable, and returns true if the destroyable has begun destroying. Otherwise returns
 false.

  ```js
  let obj = {};
  isDestroying(obj); // false
  destroy(obj);
  isDestroying(obj); // true
  // ...sometime later, after scheduled destruction
  isDestroyed(obj); // true
  isDestroying(obj); // true
  ```

  @method isDestroying
  @for @ember/destroyable
  @param {Object|Function} destroyable the object to check
  @returns {Boolean}
  @static
  @public
*/

/**
  Receives a destroyable, and returns true if the destroyable has finished destroying. Otherwise
  returns false.

  ```js
  let obj = {};

  isDestroyed(obj); // false
  destroy(obj);

  // ...sometime later, after scheduled destruction

  isDestroyed(obj); // true
  ```

  @method isDestroyed
  @for @ember/destroyable
  @param {Object|Function} destroyable the object to check
  @returns {Boolean}
  @static
  @public
*/

/**
  Initiates the destruction of a destroyable object. It runs all associated destructors, and then
  destroys all children recursively.

  ```js
  let obj = {};

  registerDestructor(obj, () => console.log('destroyed!'));

  destroy(obj); // this will schedule the destructor to be called

  // ...some time later, during scheduled destruction

  // destroyed!
  ```

  Destruction via `destroy()` follows these steps:

  1, Mark the destroyable such that `isDestroying(destroyable)` returns `true`
  2, Call `destroy()` on each of the destroyable's associated children
  3, Schedule calling the destroyable's destructors
  4, Schedule setting destroyable such that `isDestroyed(destroyable)` returns `true`

  This results in the entire tree of destroyables being first marked as destroying,
  then having all of their destructors called, and finally all being marked as isDestroyed.
  There won't be any in between states where some items are marked as `isDestroying` while
  destroying, while others are not.

  @method destroy
  @for @ember/destroyable
  @param {Object|Function} destroyable the object to destroy
  @static
  @public
*/

/**
  This function asserts that all objects which have associated destructors or associated children
  have been destroyed at the time it is called. It is meant to be a low level hook that testing
  frameworks can use to hook into and validate that all destroyables have in fact been destroyed.

  This function requires that `enableDestroyableTracking` was called previously, and is only
  available in non-production builds.

  @method assertDestroyablesDestroyed
  @for @ember/destroyable
  @static
  @public
*/

/**
  This function instructs the destroyable system to keep track of all destroyables (their
  children, destructors, etc). This enables a future usage of `assertDestroyablesDestroyed`
  to be used to ensure that all destroyable tasks (registered destructors and associated children)
  have completed when `assertDestroyablesDestroyed` is called.

  @method enableDestroyableTracking
  @for @ember/destroyable
  @static
  @public
*/

/**
  Receives a destroyable object and a destructor function, and associates the
  function with it. When the destroyable is destroyed with destroy, or when its
  parent is destroyed, the destructor function will be called.

  ```js
  import Component from '@glimmer/component';
  import { registerDestructor } from '@ember/destroyable';

  class Modal extends Component {
    @service resize;

    constructor(...args) {
      super(...args);

      this.resize.register(this, this.layout);

      registerDestructor(this, () => this.resize.unregister(this));
    }
  }
  ```

  Multiple destructors can be associated with a given destroyable, and they can be
  associated over time, allowing libraries to dynamically add destructors as needed.
  `registerDestructor` also returns the associated destructor function, for convenience.

  The destructor function is passed a single argument, which is the destroyable itself.
  This allows the function to be reused multiple times for many destroyables, rather
  than creating a closure function per destroyable.

  ```js
  import Component from '@glimmer/component';
  import { registerDestructor } from '@ember/destroyable';

  function unregisterResize(instance) {
    instance.resize.unregister(instance);
  }

  class Modal extends Component {
    @service resize;

    constructor(...args) {
      super(...args);

      this.resize.register(this, this.layout);

      registerDestructor(this, unregisterResize);
    }
  }
  ```

  @method registerDestructor
  @for @ember/destroyable
  @param {Object|Function} destroyable the destroyable to register the destructor function with
  @param {Function} destructor the destructor to run when the destroyable object is destroyed
  @static
  @public
*/
function registerDestructor(destroyable, destructor) {
  return registerDestructor$1(destroyable, destructor);
}

/**
  Receives a destroyable and a destructor function, and de-associates the destructor
  from the destroyable.

  ```js
  import Component from '@glimmer/component';
  import { registerDestructor, unregisterDestructor } from '@ember/destroyable';

  class Modal extends Component {
    @service modals;

    constructor(...args) {
      super(...args);

      this.modals.add(this);

      this.modalDestructor = registerDestructor(this, () => this.modals.remove(this));
    }

    @action pinModal() {
      unregisterDestructor(this, this.modalDestructor);
    }
  }
  ```

  @method unregisterDestructor
  @for @ember/destroyable
  @param {Object|Function} destroyable the destroyable to unregister the destructor function from
  @param {Function} destructor the destructor to remove from the destroyable
  @static
  @public
*/
function unregisterDestructor(destroyable, destructor) {
  return unregisterDestructor$1(destroyable, destructor);
}

/**
@module ember
*/

let Ember;
(function (_Ember) {
  _Ember.isNamespace = true;
  function toString() {
    return 'Ember';
  }
  _Ember.toString = toString;
  _Ember.Container = Container;
  _Ember.Registry = Registry;
  // ****@ember/-internals/glimmer****
  // Partially re-exported from @glimmer/manager
  _Ember._setComponentManager = setComponentManager;
  _Ember._componentManagerCapabilities = componentCapabilities;
  _Ember._modifierManagerCapabilities = modifierCapabilities;
  _Ember.meta = meta$1;
  _Ember._createCache = createCache;
  _Ember._cacheGetValue = getValue;
  _Ember._cacheIsConst = isConst;
  _Ember._descriptor = nativeDescDecorator;
  _Ember._getPath = _getPath;
  _Ember._setClassicDecorator = setClassicDecorator;
  _Ember._tracked = tracked;
  _Ember.beginPropertyChanges = beginPropertyChanges;
  _Ember.changeProperties = changeProperties;
  _Ember.endPropertyChanges = endPropertyChanges;
  _Ember.hasListeners = hasListeners;
  _Ember.libraries = LIBRARIES;
  _Ember._ContainerProxyMixin = ContainerProxyMixin;
  _Ember._ProxyMixin = ProxyMixin;
  _Ember._RegistryProxyMixin = RegistryProxyMixin;
  _Ember.ActionHandler = ActionHandler;
  _Ember.Comparable = Comparable;
  // ****@ember/-internals/view****
  _Ember.ComponentLookup = ComponentLookup;
  _Ember.EventDispatcher = EventDispatcher;
  _Ember._Cache = Cache$1;
  _Ember.GUID_KEY = GUID_KEY;
  _Ember.canInvoke = canInvoke;
  _Ember.generateGuid = generateGuid;
  _Ember.guidFor = guidFor;
  _Ember.uuid = uuid$1;
  _Ember.wrap = wrap;
  _Ember.getOwner = getOwner;
  _Ember.onLoad = onLoad;
  _Ember.runLoadHooks = runLoadHooks;
  _Ember.setOwner = setOwner;
  _Ember.Application = Application;
  // ****@ember/application/instance****
  _Ember.ApplicationInstance = ApplicationInstance;
  // // ****@ember/application/namespace****
  _Ember.Namespace = Namespace;
  // ****@ember/array****
  _Ember.A = A;
  _Ember.Array = EmberArray;
  _Ember.NativeArray = NativeArray;
  _Ember.isArray = isArray$2;
  _Ember.makeArray = makeArray;
  _Ember.MutableArray = MutableArray;
  // ****@ember/array/proxy****
  _Ember.ArrayProxy = ArrayProxy;
  // ****@ember/canary-features****
  _Ember.FEATURES = {
    isEnabled,
    ...FEATURES
  };
  _Ember._Input = Input;
  _Ember.Component = Component;
  // // ****@ember/component/helper****
  _Ember.Helper = Helper;
  // ****@ember/controller****
  _Ember.Controller = Controller;
  _Ember.ControllerMixin = ControllerMixin;
  // ****@ember/debug****
  _Ember._captureRenderTree = captureRenderTree;
  _Ember.assert = assert$1;
  _Ember.warn = warn;
  _Ember.debug = debug;
  _Ember.deprecate = deprecate;
  _Ember.deprecateFunc = deprecateFunc;
  _Ember.runInDebug = runInDebug;
  _Ember.inspect = inspect;
  _Ember.Debug = {
    registerDeprecationHandler: registerHandler$1,
    registerWarnHandler: registerHandler,
    // ****@ember/-internals/metal****
    isComputed: isComputed
  };
  _Ember.ContainerDebugAdapter = ContainerDebugAdapter;
  // ****@ember/debug/data-adapter****
  _Ember.DataAdapter = DataAdapter;
  // ****@ember/destroyable****
  _Ember._assertDestroyablesDestroyed = assertDestroyablesDestroyed;
  _Ember._associateDestroyableChild = associateDestroyableChild;
  _Ember._enableDestroyableTracking = enableDestroyableTracking;
  _Ember._isDestroying = isDestroying;
  _Ember._isDestroyed = isDestroyed;
  _Ember._registerDestructor = registerDestructor;
  _Ember._unregisterDestructor = unregisterDestructor;
  _Ember.destroy = destroy;
  _Ember.Engine = Engine;
  // ****@ember/engine/instance****
  _Ember.EngineInstance = EngineInstance;
  // ****@ember/enumerable****
  _Ember.Enumerable = Enumerable;
  // ****@ember/enumerable/mutable****
  _Ember.MutableEnumerable = MutableEnumerable;
  // ****@ember/instrumentation****
  /** @private */
  _Ember.instrument = instrument;
  _Ember.subscribe = subscribe;
  _Ember.Instrumentation = {
    instrument: instrument,
    subscribe: subscribe,
    unsubscribe: unsubscribe,
    reset: reset
  };
  _Ember.Object = EmberObject;
  _Ember._action = action;
  _Ember.computed = computed;
  _Ember.defineProperty = defineProperty;
  _Ember.get = get$1;
  _Ember.getProperties = getProperties;
  _Ember.notifyPropertyChange = notifyPropertyChange;
  _Ember.observer = observer;
  _Ember.set = set;
  _Ember.trySet = trySet;
  _Ember.setProperties = setProperties;
  _Ember.cacheFor = getCachedValueFor;
  _Ember._dependentKeyCompat = dependentKeyCompat;
  _Ember.ComputedProperty = ComputedProperty;
  _Ember.expandProperties = expandProperties;
  _Ember.CoreObject = CoreObject;
  // ****@ember/object/evented****
  _Ember.Evented = Evented;
  _Ember.on = on$3;
  _Ember.addListener = addListener;
  _Ember.removeListener = removeListener;
  _Ember.sendEvent = sendEvent;
  _Ember.Mixin = Mixin;
  _Ember.mixin = mixin;
  _Ember.Observable = Observable;
  // ****@ember/object/observers****
  _Ember.addObserver = addObserver;
  _Ember.removeObserver = removeObserver;
  _Ember.PromiseProxyMixin = PromiseProxyMixin;
  // ****@ember/object/proxy****
  _Ember.ObjectProxy = ObjectProxy;
  // ****@ember/routing/-internals****
  _Ember.RouterDSL = DSLImpl;
  _Ember.controllerFor = controllerFor;
  _Ember.generateController = generateController;
  _Ember.generateControllerFactory = generateControllerFactory;
  _Ember.HashLocation = HashLocation;
  // ****@ember/routing/history-location****
  _Ember.HistoryLocation = HistoryLocation;
  // ****@ember/routing/none-location****
  _Ember.NoneLocation = NoneLocation;
  // ****@ember/routing/route****
  _Ember.Route = Route;
  // ****@ember/routing/router****
  _Ember.Router = EmberRouter;
  // // ****@ember/runloop****
  _Ember.run = run$1;
  _Ember.Service = Service;
  // ****@ember/utils****
  _Ember.compare = compare;
  _Ember.isBlank = isBlank;
  _Ember.isEmpty = isEmpty$1;
  _Ember.isEqual = isEqual$1;
  _Ember.isNone = isNone;
  _Ember.isPresent = isPresent;
  _Ember.typeOf = typeOf;
  _Ember.VERSION = Version;
  _Ember.ViewUtils = {
    // ****@ember/-internals/views****
    getChildViews: getChildViews,
    getElementView: getElementView,
    getRootViews: getRootViews,
    getViewBounds: getViewBounds,
    getViewBoundingClientRect: getViewBoundingClientRect,
    getViewClientRects: getViewClientRects,
    getViewElement: getViewElement,
    isSimpleClick: isSimpleClick,
    // ****@ember/-internals/glimmer****
    isSerializationFirstNode
  };
  _Ember._getComponentTemplate = getComponentTemplate;
  _Ember._helperManagerCapabilities = helperCapabilities;
  _Ember._setComponentTemplate = setComponentTemplate;
  _Ember._setHelperManager = setHelperManager;
  _Ember._setModifierManager = setModifierManager$1;
  _Ember._templateOnlyComponent = templateOnlyComponent;
  _Ember._invokeHelper = invokeHelper;
  _Ember._hash = hash$1;
  _Ember._array = array;
  _Ember._concat = concat;
  _Ember._get = get;
  _Ember._on = on$1;
  _Ember._fn = fn;
  _Ember._Backburner = Backburner;
  // // ****@ember/controller, @ember/service****
  /**
    Namespace for injection helper methods.
     @class inject
    @namespace Ember
    @static
    @public
  */
  function inject$1() {
  }
  _Ember.inject = inject$1;
  // ****@ember/controller****
  inject$1.controller = inject;
  // ****@ember/service****
  inject$1.service = service;
  _Ember.__loader = {
    get require() {
      return globalThis.require;
    },
    get define() {
      return globalThis.define;
    },
    get registry() {
      let g = globalThis;
      return g.requirejs?.entries ?? g.require.entries;
    }
  };

  // ------------------------------------------------------------------------ //
  // These properties are assigned to the namespace with getters (and, in some
  // cases setters) with `Object.defineProperty` below.
  // ------------------------------------------------------------------------ //

  // ****@ember/-internals/environment****

  /**
    A function may be assigned to `Ember.onerror` to be called when Ember
    internals encounter an error. This is useful for specialized error handling
    and reporting code.
     ```javascript
     Ember.onerror = function(error) {
      const payload = {
        stack: error.stack,
        otherInformation: 'whatever app state you want to provide'
      };
       fetch('/report-error', {
        method: 'POST',
        body: JSON.stringify(payload)
      });
    };
    ```
     Internally, `Ember.onerror` is used as Backburner's error handler.
     @event onerror
    @for Ember
    @param {Error} error the error object
    @public
  */
  // ****@ember/-internals/error-handling****

  /**
    Whether searching on the global for new Namespace instances is enabled.
     This is only exported here as to not break any addons.  Given the new
    visit API, you will have issues if you treat this as a indicator of
    booted.
     Internally this is only exposing a flag in Namespace.
     @property BOOTED
    @for Ember
    @type Boolean
    @private
  */

  /**
    Global hash of shared templates. This will automatically be populated
    by the build tools so that you can store your Handlebars templates in
    separate files that get loaded into JavaScript at buildtime.
     @property TEMPLATES
    @for Ember
    @type Object
    @private
  */
})(Ember || (Ember = {})); // This syntax is not reliably implemented by TypeScript transpilers, but
// we need to re-export the`RSVP` *namespace* for type compatibility.
// To achieve this, we use a type-only `declare namespace` block to get the
// types to behave correctly, and separately set the `RSVP` property on the
// `Ember` object dynamically. (The types behave correctly because of
// namespace merging semantics.)
// eslint-disable-next-line @typescript-eslint/no-namespace
Reflect.set(Ember, 'RSVP', RSVP$1);
Object.defineProperty(Ember, 'ENV', {
  get: getENV,
  enumerable: false
});
Object.defineProperty(Ember, 'lookup', {
  get: getLookup,
  set: setLookup,
  enumerable: false
});
Object.defineProperty(Ember, 'onerror', {
  get: getOnerror,
  set: setOnerror,
  enumerable: false
});
Object.defineProperty(Ember, 'testing', {
  get: isTesting,
  set: setTesting,
  enumerable: false
});
Object.defineProperty(Ember, 'BOOTED', {
  configurable: false,
  enumerable: false,
  get: isSearchDisabled,
  set: setSearchDisabled
});
Object.defineProperty(Ember, 'TEMPLATES', {
  get: getTemplates,
  set: setTemplates,
  configurable: false,
  enumerable: false
});
Object.defineProperty(Ember, 'TEMPLATES', {
  get: getTemplates,
  set: setTemplates,
  configurable: false,
  enumerable: false
});

// ****@ember/debug****
Object.defineProperty(Ember, 'testing', {
  get: isTesting,
  set: setTesting,
  enumerable: false
});
runLoadHooks('Ember.Application', Application);
let EmberHandlebars = {
  template: templateFactory,
  Utils: {
    escapeExpression
  }
};
let EmberHTMLBars = {
  template: templateFactory
};
function defineEmberTemplateCompilerLazyLoad(key) {
  Object.defineProperty(Ember, key, {
    configurable: true,
    enumerable: true,
    get() {
      return key === 'Handlebars' ? EmberHandlebars : EmberHTMLBars;
    }
  });
}
defineEmberTemplateCompilerLazyLoad('HTMLBars');
defineEmberTemplateCompilerLazyLoad('Handlebars');

// do this to ensure that Ember.Test is defined properly on the global
// if it is present.
function defineEmberTestingLazyLoad(key) {
  Object.defineProperty(Ember, key, {
    configurable: true,
    enumerable: true,
    get() {
      if (_impl) {
        let {
          Test,
          Adapter,
          QUnitAdapter,
          setupForTesting
        } = _impl;

        // @ts-expect-error We should not do this
        Test.Adapter = Adapter;
        // @ts-expect-error We should not do this
        Test.QUnitAdapter = QUnitAdapter;
        Object.defineProperty(Ember, 'Test', {
          configurable: true,
          writable: true,
          enumerable: true,
          value: Test
        });
        Object.defineProperty(Ember, 'setupForTesting', {
          configurable: true,
          writable: true,
          enumerable: true,
          value: setupForTesting
        });
        return key === 'Test' ? Test : setupForTesting;
      }
      return undefined;
    }
  });
}
defineEmberTestingLazyLoad('Test');
defineEmberTestingLazyLoad('setupForTesting');

// @ts-expect-error Per types, runLoadHooks requires a second parameter. Should we loosen types?
runLoadHooks('Ember');
const doNotUseThis = Ember;

const index = new Proxy(doNotUseThis, {
  get(target, key, receiver) {
    // We don't have symbol exports, so this is probably fine.
    if (typeof key === 'string') {
      deprecateUntil(`importing ${key} from the 'ember' barrel file is deprecated.`, DEPRECATIONS.DEPRECATE_IMPORT_EMBER(key));
    }
    return Reflect.get(target, key, receiver);
  },
  getOwnPropertyDescriptor(target, key) {
    if (typeof key === 'string') {
      deprecateUntil(`importing ${key} from the 'ember' barrel file is deprecated.`, DEPRECATIONS.DEPRECATE_IMPORT_EMBER(key));
    }
    return Object.getOwnPropertyDescriptor(target, key);
  }
});

// this ensures that if @ember/test-waiters exists in multiple places in the
// build output we will still use a single map of waiters (there really should
// only be one of them, or else `settled` will not work at all)
const WAITERS = function () {
  const HAS_SYMBOL = typeof Symbol !== 'undefined';
  let symbolName = 'TEST_WAITERS';
  let symbol = HAS_SYMBOL ? Symbol.for(symbolName) : symbolName;
  let global = getGlobal();
  let waiters = global[symbol];
  if (waiters === undefined) {
    waiters = global[symbol] = new Map();
  }
  return waiters;
}();
function indexable(input) {
  return input;
}
function getGlobal() {
  // eslint-disable-next-line node/no-unsupported-features/es-builtins
  if (typeof globalThis !== 'undefined') return indexable(globalThis);
  if (typeof self !== 'undefined') return indexable(self);
  if (typeof window !== 'undefined') return indexable(window);
  if (typeof global !== 'undefined') return indexable(global);
  throw new Error('unable to locate global object');
}
/**
 * Backwards compatibility with legacy waiters system.
 *
 * We want to always register a waiter using the legacy waiter system, as right
 * now if consumers are not on the right version of @ember/test-helpers, using
 * this addon will result in none of these waiters waiting.
 */
// eslint-disable-next-line ember/new-module-imports

if (index.Test) {
  registerWaiter(() => !hasPendingWaiters());
}
/**
 * Gets the current state of all waiters. Any waiters whose
 * `waitUntil` method returns false will be considered `pending`.
 *
 * @returns {PendingWaiterState} An object containing a count of all waiters
 * pending and a `waiters` object containing the name of all pending waiters
 * and their debug info.
 */

function getPendingWaiterState() {
  let result = {
    pending: 0,
    waiters: {}
  };
  WAITERS.forEach(waiter => {
    if (!waiter.waitUntil()) {
      result.pending++;
      let debugInfo = waiter.debugInfo();
      result.waiters[waiter.name] = debugInfo || true;
    }
  });
  return result;
}
/**
 * Determines if there are any pending waiters.
 *
 * @returns {boolean} `true` if there are pending waiters, otherwise `false`.
 */

function hasPendingWaiters() {
  let state = getPendingWaiterState();
  return state.pending > 0;
}

const debugInfoHelpers = new Set();

// @ts-ignore: this is private API. This import will work Ember 5.1+ since it
// "provides" this public API, but does not for earlier versions. As a result,
// this type will be `any`.
const PENDING_AJAX_REQUESTS = 'Pending AJAX requests';
const PENDING_TEST_WAITERS = 'Pending test waiters';
const SCHEDULED_ASYNC = 'Scheduled async';
const SCHEDULED_AUTORUN = 'Scheduled autorun';

/**
 * The base functionality which may be present on the `SettledState` interface
 * in the `settled` module (**not** the one in this module).
 */

/**
 * Determines if the `getDebugInfo` method is available in the
 * running verison of backburner.
 *
 * @returns {boolean} True if `getDebugInfo` is present in backburner, otherwise false.
 */
function backburnerDebugInfoAvailable() {
  return typeof _backburner.getDebugInfo === 'function';
}

/**
 * Retrieves debug information from backburner's current deferred actions queue (runloop instance).
 * If the `getDebugInfo` method isn't available, it returns `null`.
 *
 * @public
 * @returns {MaybeDebugInfo | null} Backburner debugInfo or, if the getDebugInfo method is not present, null
 */
function getDebugInfo() {
  return _backburner.DEBUG === true && backburnerDebugInfoAvailable() ? _backburner.getDebugInfo() : null;
}

/**
 * Encapsulates debug information for an individual test. Aggregates information
 * from:
 * - info provided by getSettledState
 *    - hasPendingTimers
 *    - hasRunLoop
 *    - hasPendingWaiters
 *    - hasPendingRequests
 * - info provided by backburner's getDebugInfo method (timers, schedules, and stack trace info)
 *
 */
class TestDebugInfo {
  _settledState;
  _debugInfo;
  _summaryInfo = undefined;
  constructor(settledState, debugInfo = getDebugInfo()) {
    this._settledState = settledState;
    this._debugInfo = debugInfo;
  }
  get summary() {
    if (!this._summaryInfo) {
      this._summaryInfo = {
        ...this._settledState
      };
      if (this._debugInfo) {
        this._summaryInfo.autorunStackTrace = this._debugInfo.autorun && this._debugInfo.autorun.stack;
        this._summaryInfo.pendingTimersCount = this._debugInfo.timers.length;
        this._summaryInfo.hasPendingTimers = this._settledState.hasPendingTimers && this._summaryInfo.pendingTimersCount > 0;
        this._summaryInfo.pendingTimersStackTraces = this._debugInfo.timers.map(timer => timer.stack);
        this._summaryInfo.pendingScheduledQueueItemCount = this._debugInfo.instanceStack.filter(isNotNullable).reduce((total, item) => {
          Object.values(item).forEach(queueItems => {
            // SAFETY: this cast is required for versions of Ember which do
            // not supply a correct definition of these types. It should
            // also be compatible with the version where Ember *does* supply
            // the types correctly.
            total += queueItems?.length ?? 0;
          });
          return total;
        }, 0);
        this._summaryInfo.pendingScheduledQueueItemStackTraces = this._debugInfo.instanceStack.filter(isNotNullable).reduce((stacks, deferredActionQueues) => {
          Object.values(deferredActionQueues).forEach(queueItems => {
            // SAFETY: this cast is required for versions of Ember which do
            // not supply a correct definition of these types. It should
            // also be compatible with the version where Ember *does* supply
            // the types correctly.
            queueItems?.forEach(queueItem => queueItem.stack && stacks.push(queueItem.stack));
          });
          return stacks;
        }, []);
      }
      if (this._summaryInfo.hasPendingTestWaiters) {
        this._summaryInfo.pendingTestWaiterInfo = getPendingWaiterState();
      }
    }
    return this._summaryInfo;
  }
  toConsole(_console = console) {
    const summary = this.summary;
    if (summary.hasPendingRequests) {
      _console.log(PENDING_AJAX_REQUESTS);
    }
    if (summary.hasPendingLegacyWaiters) {
      _console.log(PENDING_TEST_WAITERS);
    }
    if (summary.hasPendingTestWaiters) {
      if (!summary.hasPendingLegacyWaiters) {
        _console.log(PENDING_TEST_WAITERS);
      }
      Object.keys(summary.pendingTestWaiterInfo.waiters).forEach(waiterName => {
        const waiterDebugInfo = summary.pendingTestWaiterInfo.waiters[waiterName];
        if (Array.isArray(waiterDebugInfo)) {
          _console.group(waiterName);
          waiterDebugInfo.forEach(debugInfo => {
            _console.log(`${debugInfo.label ? debugInfo.label : 'stack'}: ${debugInfo.stack}`);
          });
          _console.groupEnd();
        } else {
          _console.log(waiterName);
        }
      });
    }
    if (summary.hasPendingTimers || summary.pendingScheduledQueueItemCount > 0) {
      _console.group(SCHEDULED_ASYNC);
      summary.pendingTimersStackTraces.forEach(timerStack => {
        _console.log(timerStack);
      });
      summary.pendingScheduledQueueItemStackTraces.forEach(scheduleQueueItemStack => {
        _console.log(scheduleQueueItemStack);
      });
      _console.groupEnd();
    }
    if (summary.hasRunLoop && summary.pendingTimersCount === 0 && summary.pendingScheduledQueueItemCount === 0) {
      _console.log(SCHEDULED_AUTORUN);
      if (summary.autorunStackTrace) {
        _console.log(summary.autorunStackTrace);
      }
    }
    debugInfoHelpers.forEach(helper => {
      helper.log();
    });
  }
  _formatCount(title, count) {
    return `${title}: ${count}`;
  }
}

// eslint-disable-next-line require-jsdoc, @typescript-eslint/no-empty-object-type
function isNotNullable(value) {
  return value != null;
}

const CAN_USE_ROUTER_EVENTS = hasEmberVersion(3, 6);
let routerTransitionsPending = null;
const ROUTER = new WeakMap();

/**
  Determines if we have any pending router transitions (used to determine `settled` state)

  @public
  @returns {(boolean|null)} if there are pending transitions
*/
function hasPendingTransitions() {
  if (CAN_USE_ROUTER_EVENTS) {
    return routerTransitionsPending;
  }
  const context = getContext();

  // there is no current context, we cannot check
  if (context === undefined) {
    return null;
  }
  const router = ROUTER.get(context);
  if (router === undefined) {
    // if there is no router (e.g. no `visit` calls made yet), we cannot
    // check for pending transitions but this is explicitly not an error
    // condition
    return null;
  }
  const routerMicrolib = router._routerMicrolib || router.router;
  if (routerMicrolib === undefined) {
    return null;
  }
  return !!routerMicrolib.activeTransition;
}
hasEmberVersion(2, 13);

// @ts-ignore: this is private API. This import will work Ember 5.1+ since it
// "provides" this public API, but does not for earlier versions. As a result,
// this type will be `any`.
let requests;
const checkWaiters = Test.checkWaiters;

/**
  @private
  @returns {number} the count of pending requests
*/
function pendingRequests() {
  const localRequestsPending = requests !== undefined ? requests.length : 0;
  const internalRequestsPending = pendingRequests$1();
  return localRequestsPending + internalRequestsPending;
}

/**
  @private
  @param {Event} event (unused)
  @param {XMLHTTPRequest} xhr the XHR that has initiated a request
*/
function incrementAjaxPendingRequests(event, xhr) {
  requests.push(xhr);
}

/**
  @private
  @param {Event} event (unused)
  @param {XMLHTTPRequest} xhr the XHR that has initiated a request
*/
function decrementAjaxPendingRequests(event, xhr) {
  // In most Ember versions to date (current version is 2.16) RSVP promises are
  // configured to flush in the actions queue of the Ember run loop, however it
  // is possible that in the future this changes to use "true" micro-task
  // queues.
  //
  // The entire point here, is that _whenever_ promises are resolved will be
  // before the next run of the JS event loop. Then in the next event loop this
  // counter will decrement. In the specific case of AJAX, this means that any
  // promises chained off of `$.ajax` will properly have their `.then` called
  // _before_ this is decremented (and testing continues)
  nextTick(() => {
    for (let i = 0; i < requests.length; i++) {
      if (xhr === requests[i]) {
        requests.splice(i, 1);
      }
    }
  });
}

/**
  Clears listeners that were previously setup for `ajaxSend` and `ajaxComplete`.

  @private
*/
function _teardownAJAXHooks() {
  // jQuery will not invoke `ajaxComplete` if
  //    1. `transport.send` throws synchronously and
  //    2. it has an `error` option which also throws synchronously

  // We can no longer handle any remaining requests
  requests = [];
  if (typeof globalThis.jQuery === 'undefined') {
    return;
  }
  globalThis.jQuery(document).off('ajaxSend', incrementAjaxPendingRequests);
  globalThis.jQuery(document).off('ajaxComplete', decrementAjaxPendingRequests);
}

/**
  Sets up listeners for `ajaxSend` and `ajaxComplete`.

  @private
*/
function _setupAJAXHooks() {
  requests = [];
  if (typeof globalThis.jQuery === 'undefined') {
    return;
  }
  globalThis.jQuery(document).on('ajaxSend', incrementAjaxPendingRequests);
  globalThis.jQuery(document).on('ajaxComplete', decrementAjaxPendingRequests);
}
/**
  Check various settledness metrics, and return an object with the following properties:

  - `hasRunLoop` - Checks if a run-loop has been started. If it has, this will
    be `true` otherwise it will be `false`.
  - `hasPendingTimers` - Checks if there are scheduled timers in the run-loop.
    These pending timers are primarily registered by `Ember.run.schedule`. If
    there are pending timers, this will be `true`, otherwise `false`.
  - `hasPendingWaiters` - Checks if any registered test waiters are still
    pending (e.g. the waiter returns `true`). If there are pending waiters,
    this will be `true`, otherwise `false`.
  - `hasPendingRequests` - Checks if there are pending AJAX requests (based on
    `ajaxSend` / `ajaxComplete` events triggered by `jQuery.ajax`). If there
    are pending requests, this will be `true`, otherwise `false`.
  - `hasPendingTransitions` - Checks if there are pending route transitions. If the
    router has not been instantiated / setup for the test yet this will return `null`,
    if there are pending transitions, this will be `true`, otherwise `false`.
  - `pendingRequestCount` - The count of pending AJAX requests.
  - `debugInfo` - Debug information that's combined with info return from backburner's
    getDebugInfo method.
  - `isRenderPending` - Checks if there are any pending render operations. This will be true as long
    as there are tracked values in the template that have not been rerendered yet.

  @public
  @returns {Object} object with properties for each of the metrics used to determine settledness
*/
function getSettledState() {
  const hasPendingTimers = _backburner.hasTimers();
  const hasRunLoop = Boolean(_backburner.currentInstance);
  const hasPendingLegacyWaiters = checkWaiters();
  const hasPendingTestWaiters = hasPendingWaiters();
  const pendingRequestCount = pendingRequests();
  const hasPendingRequests = pendingRequestCount > 0;
  // TODO: Ideally we'd have a function in Ember itself that can synchronously identify whether
  // or not there are any pending render operations, but this will have to suffice for now
  const isRenderPending = !!hasRunLoop;
  return {
    hasPendingTimers,
    hasRunLoop,
    hasPendingWaiters: hasPendingLegacyWaiters || hasPendingTestWaiters,
    hasPendingRequests,
    hasPendingTransitions: hasPendingTransitions(),
    isRenderPending,
    pendingRequestCount,
    debugInfo: new TestDebugInfo({
      hasPendingTimers,
      hasRunLoop,
      hasPendingLegacyWaiters,
      hasPendingTestWaiters,
      hasPendingRequests,
      isRenderPending
    })
  };
}

/**
  Checks various settledness metrics (via `getSettledState()`) to determine if things are settled or not.

  Settled generally means that there are no pending timers, no pending waiters,
  no pending AJAX requests, and no current run loop. However, new settledness
  metrics may be added and used as they become available.

  @public
  @returns {boolean} `true` if settled, `false` otherwise
*/
function isSettled() {
  const {
    hasPendingTimers,
    hasRunLoop,
    hasPendingRequests,
    hasPendingWaiters,
    hasPendingTransitions,
    isRenderPending
  } = getSettledState();
  if (hasPendingTimers || hasRunLoop || hasPendingRequests || hasPendingWaiters || hasPendingTransitions || isRenderPending) {
    return false;
  }
  return true;
}

/**
  Returns a promise that resolves when in a settled state (see `isSettled` for
  a definition of "settled state").

  @public
  @returns {Promise<void>} resolves when settled
*/
function settled() {
  return waitUntil(isSettled, {
    timeout: Infinity
  }).then(() => {});
}
const cachedOnerror = new Map();

/**
 * Resets `Ember.onerror` to the value it originally was at the start of the test run.
 * If there is no context or cached value this is a no-op.
 *
 * @public
 *
 * @example
 *
 * import { resetOnerror } from '@ember/test-helpers';
 *
 * QUnit.testDone(function() {
 *   resetOnerror();
 * })
 */
function resetOnerror() {
  const context = getContext();
  if (context && cachedOnerror.has(context)) {
    setOnerror(cachedOnerror.get(context));
  }
}

/**
 * Caches the current value of Ember.onerror. When `setupOnerror` is called without a value
 * or when `resetOnerror` is called the value will be set to what was cached here.
 *
 * @private
 * @param {BaseContext} context the text context
 */
function _prepareOnerror(context) {
  if (cachedOnerror.has(context)) {
    throw new Error('_prepareOnerror should only be called once per-context');
  }

  // SAFETY: getOnerror doesn't have correct types
  cachedOnerror.set(context, getOnerror());
}

/**
 * Removes the cached value of Ember.onerror.
 *
 * @private
 * @param {BaseContext} context the text context
 */
function _cleanupOnerror(context) {
  resetOnerror();
  cachedOnerror.delete(context);
}

/**
 * The public API for the test context, which test authors can depend on being
 * available.
 *
 * Note: this is *not* user-constructible; it becomes available by calling
 * `setupContext()` with a base context object.
 */

// eslint-disable-next-line require-jsdoc
function isTestContext(context) {
  const maybeContext = context;
  return typeof maybeContext['pauseTest'] === 'function' && typeof maybeContext['resumeTest'] === 'function';
}

/**
  @private
  @param {Object} it the global object to test
  @returns {Boolean} it exists
*/
function check(it) {
  // Math is known to exist as a global in every environment.
  return it && it.Math === Math && it;
}
const globalObject = check(typeof globalThis == 'object' && globalThis) || check(typeof window === 'object' && window) || check(typeof self === 'object' && self) ||
// @ts-ignore -- global does not exist
check(typeof global$1 === 'object' && global$1);

/**
  Stores the provided context as the "global testing context".

  Generally setup automatically by `setupContext`.

  @public
  @param {Object} context the context to use
*/
function setContext(context) {
  globalObject.__test_context__ = context;
}

/**
  Retrieve the "global testing context" as stored by `setContext`.

  @public
  @returns {Object} the previously stored testing context
*/
function getContext() {
  return globalObject.__test_context__;
}

/**
  Clear the "global testing context".

  Generally invoked from `teardownContext`.

  @public
*/
function unsetContext() {
  globalObject.__test_context__ = undefined;
}

/**
  Resumes a test previously paused by `await pauseTest()`.

  @public
*/
function resumeTest() {
  const context = getContext();
  if (!context || !isTestContext(context)) {
    throw new Error('Cannot call `resumeTest` without having first called `setupTest` or `setupRenderingTest`.');
  }
  context.resumeTest();
}

/**
  Used by test framework addons to setup the provided context for testing.

  Responsible for:

  - sets the "global testing context" to the provided context (`setContext`)
  - create an owner object and set it on the provided context (e.g. `this.owner`)
  - setup `this.set`, `this.setProperties`, `this.get`, and `this.getProperties` to the provided context
  - setting up AJAX listeners
  - setting up `pauseTest` (also available as `this.pauseTest()`) and `resumeTest` helpers

  @public
  @param {Object} base the context to setup
  @param {Object} [options] options used to override defaults
  @param {Resolver} [options.resolver] a resolver to use for customizing normal resolution
  @returns {Promise<Object>} resolves with the context that was setup
*/
function setupContext(base, options = {}) {
  const context = base;

  // SAFETY: this is intimate API *designed* for us to override.
  setTesting(true);
  setContext(context);
  const testMetadata = getTestMetadata(context);
  testMetadata.setupTypes.push('setupContext');
  _backburner.DEBUG = true;
  _prepareOnerror(context);
  return Promise.resolve().then(() => {
    const application = getApplication();
    if (application) {
      return application.boot().then(() => {});
    }
    return;
  }).then(() => {
    const {
      resolver
    } = options;

    // This handles precedence, specifying a specific option of
    // resolver always trumps whatever is auto-detected, then we fallback to
    // the suite-wide registrations
    //
    // At some later time this can be extended to support specifying a custom
    // engine or application...
    if (resolver) {
      return buildOwner(null, resolver);
    }
    return buildOwner(getApplication(), getResolver());
  }).then(owner => {
    Object.defineProperty(context, 'owner', {
      configurable: true,
      enumerable: true,
      value: owner,
      writable: false
    });
    setOwner(context, owner);
    Object.defineProperty(context, 'set', {
      configurable: true,
      enumerable: true,
      // SAFETY: in all of these `defineProperty` calls, we can't actually guarantee any safety w.r.t. the corresponding field's type in `TestContext`
      value(key, value) {
        const ret = run$1(function () {
          return set(context, key, value);
        });
        return ret;
      },
      writable: false
    });
    Object.defineProperty(context, 'setProperties', {
      configurable: true,
      enumerable: true,
      // SAFETY: in all of these `defineProperty` calls, we can't actually guarantee any safety w.r.t. the corresponding field's type in `TestContext`
      value(hash) {
        const ret = run$1(function () {
          return setProperties(context, hash);
        });
        return ret;
      },
      writable: false
    });
    Object.defineProperty(context, 'get', {
      configurable: true,
      enumerable: true,
      value(key) {
        return get$1(context, key);
      },
      writable: false
    });
    Object.defineProperty(context, 'getProperties', {
      configurable: true,
      enumerable: true,
      // SAFETY: in all of these `defineProperty` calls, we can't actually guarantee any safety w.r.t. the corresponding field's type in `TestContext`
      value(...args) {
        return getProperties(context, args);
      },
      writable: false
    });
    let resume;
    context['resumeTest'] = function resumeTest() {
      resume();
      global$1.resumeTest = resume = undefined;
    };
    context['pauseTest'] = function pauseTest() {
      console.info('Testing paused. Use `resumeTest()` to continue.'); // eslint-disable-line no-console

      return new Promise(resolve => {
        resume = resolve;
        global$1.resumeTest = resumeTest;
      });
    };
    _setupAJAXHooks();
    return context;
  });
}

/**
  Used by test framework addons to tear down the provided context after testing is completed.

  Responsible for:

  - un-setting the "global testing context" (`unsetContext`)
  - destroy the contexts owner object
  - remove AJAX listeners

  @public
  @param {Object} context the context to setup
  @param {Object} [options] options used to override defaults
  @param {boolean} [options.waitForSettled=true] should the teardown wait for `settled()`ness
  @returns {Promise<void>} resolves when settled
*/
function teardownContext(context, {
  waitForSettled = true
} = {}) {
  return Promise.resolve().then(() => {
    _cleanupOnerror(context);
    _teardownAJAXHooks();
    setTesting(false);
    unsetContext();
    destroy(context.owner);
  }).finally(() => {
    if (waitForSettled) {
      return settled();
    }
    return;
  });
}

/**
  Get the root element of the application under test (usually `#ember-testing`)

  @public
  @returns {Element} the root element

  @example
  <caption>
    Getting the root element of the application and checking that it is equal
    to the element with id 'ember-testing'.
  </caption>
  assert.equal(getRootElement(), document.querySelector('#ember-testing'));
*/
function getRootElement$1() {
  const context = getContext();
  if (!context || !isTestContext(context) || !context.owner) {
    throw new Error('Must setup rendering context before attempting to interact with elements.');
  }
  const owner = context.owner;
  let rootElement;
  // When the host app uses `setApplication` (instead of `setResolver`) the owner has
  // a `rootElement` set on it with the element or id to be used
  if (owner && owner._emberTestHelpersMockOwner === undefined) {
    rootElement = owner.rootElement;
  } else {
    rootElement = '#ember-testing';
  }
  if (rootElement instanceof Window) {
    rootElement = rootElement.document;
  }
  if (isElement$1(rootElement) || isDocument$1(rootElement)) {
    return rootElement;
  } else if (typeof rootElement === 'string') {
    const _rootElement = document.querySelector(rootElement);
    if (_rootElement) {
      return _rootElement;
    }
    throw new Error(`Application.rootElement (${rootElement}) not found`);
  } else {
    throw new Error('Application.rootElement must be an element or a selector string');
  }
}

// @ts-ignore: types for this API is not consistently available (via transitive
// deps) and we do not currently want to make it an explicit dependency. It
// does, however, consistently work at runtime. :sigh:

/**
 * We should ultimately get a new API from @glimmer/runtime that provides this functionality
 * (see https://github.com/emberjs/rfcs/pull/785 for more info).
 * @private
 * @param {Object} maybeComponent The thing you think might be a component
 * @returns {boolean} True if it's a component, false if not
 */
function isComponent(maybeComponent) {
  return !!getInternalComponentManager(maybeComponent);
}

const OUTLET_TEMPLATE = templateFactory(
/*
  {{outlet}}
*/
{
  "id": "XccCVFFi",
  "block": "[[[46,[28,[37,1],null,null],null,null,null]],[],[\"component\",\"-outlet\"]]",
  "moduleName": "/Users/thomas/code/hokulea/aria-voyager/node_modules/.pnpm/@ember+test-helpers@5.2.2_@babel+core@7.28.0_@glint+template@1.6.0-alpha.2/node_modules/@ember/test-helpers/dist/setup-rendering-context.js",
  "isStrictMode": false
});
const EMPTY_TEMPLATE = templateFactory(
/*
  
*/
{
  "id": "Sg5b2yIV",
  "block": "[[],[],[]]",
  "moduleName": "/Users/thomas/code/hokulea/aria-voyager/node_modules/.pnpm/@ember+test-helpers@5.2.2_@babel+core@7.28.0_@glint+template@1.6.0-alpha.2/node_modules/@ember/test-helpers/dist/setup-rendering-context.js",
  "isStrictMode": false
});
const INVOKE_PROVIDED_COMPONENT = templateFactory(
/*
  <this.ProvidedComponent />
*/
{
  "id": "5ITAhEWF",
  "block": "[[[8,[30,0,[\"ProvidedComponent\"]],null,null,null]],[],[]]",
  "moduleName": "/Users/thomas/code/hokulea/aria-voyager/node_modules/.pnpm/@ember+test-helpers@5.2.2_@babel+core@7.28.0_@glint+template@1.6.0-alpha.2/node_modules/@ember/test-helpers/dist/setup-rendering-context.js",
  "isStrictMode": false
});
const hasCalledSetupRenderingContext = Symbol();
//  Isolates the notion of transforming a TextContext into a RenderingTestContext.
// eslint-disable-next-line require-jsdoc
function prepare(context) {
  context[hasCalledSetupRenderingContext] = true;
  return context;
}

// eslint-disable-next-line require-jsdoc
function isRenderingTestContext(context) {
  return isTestContext(context) && hasCalledSetupRenderingContext in context;
}

/**
  @private
  @param {Ember.ApplicationInstance} owner the current owner instance
  @param {string} templateFullName the fill template name
  @returns {Template} the template representing `templateFullName`
*/
function lookupTemplate(owner, templateFullName) {
  const template = owner.lookup(templateFullName);
  if (typeof template === 'function') return template(owner);
  return template;
}

/**
  @private
  @param {Ember.ApplicationInstance} owner the current owner instance
  @returns {Template} a template representing {{outlet}}
*/
function lookupOutletTemplate(owner) {
  let OutletTemplate = lookupTemplate(owner, 'template:-outlet');
  if (!OutletTemplate) {
    owner.register('template:-outlet', OUTLET_TEMPLATE);
    OutletTemplate = lookupTemplate(owner, 'template:-outlet');
  }
  return OutletTemplate;
}
let templateId = 0;
/**
  Renders the provided template and appends it to the DOM.

  @public
  @param {Template|Component} templateFactoryOrComponent the component (or template) to render
  @param {RenderOptions} options options hash containing engine owner ({ owner: engineOwner })
  @returns {Promise<void>} resolves when settled

  @example
  <caption>
    Render a div element with the class 'container'.
  </caption>
  await render(hbs`<div class="container"></div>`);
*/
function render(templateFactoryOrComponent, options) {
  let context = getContext();
  if (!templateFactoryOrComponent) {
    throw new Error('you must pass a template to `render()`');
  }
  return Promise.resolve().then(() => runHooks('render', 'start')).then(() => {
    if (!context || !isRenderingTestContext(context)) {
      throw new Error('Cannot call `render` without having first called `setupRenderingContext`.');
    }
    const {
      owner
    } = context;
    const testMetadata = getTestMetadata(context);
    testMetadata.usedHelpers.push('render');

    // SAFETY: this is all wildly unsafe, because it is all using private API.
    // At some point we should define a path forward for this kind of internal
    // API. For now, just flagging it as *NOT* being safe!
    const toplevelView = owner.lookup('-top-level-view:main');
    const OutletTemplate = lookupOutletTemplate(owner);
    const ownerToRenderFrom = owner;
    if (isComponent(templateFactoryOrComponent)) {
      context = {
        ProvidedComponent: templateFactoryOrComponent
      };
      templateFactoryOrComponent = INVOKE_PROVIDED_COMPONENT;
    }
    templateId += 1;
    const templateFullName = `template:-undertest-${templateId}`;
    ownerToRenderFrom.register(templateFullName, templateFactoryOrComponent);
    const template = lookupTemplate(ownerToRenderFrom, templateFullName);
    const outletState = {
      render: {
        owner,
        // always use the host app owner for application outlet
        into: undefined,
        outlet: 'main',
        name: 'application',
        controller: undefined,
        ViewClass: undefined,
        template: OutletTemplate
      },
      outlets: {
        main: {
          render: {
            owner: ownerToRenderFrom,
            // the actual owner to be used for any lookups
            into: undefined,
            outlet: 'main',
            name: 'index',
            controller: context,
            ViewClass: undefined,
            template,
            outlets: {}
          },
          outlets: {}
        }
      }
    };
    toplevelView.setOutletState(outletState);

    // returning settled here because the actual rendering does not happen until
    // the renderer detects it is dirty (which happens on backburner's end
    // hook), see the following implementation details:
    //
    // * [view:outlet](https://github.com/emberjs/ember.js/blob/f94a4b6aef5b41b96ef2e481f35e07608df01440/packages/ember-glimmer/lib/views/outlet.js#L129-L145) manually dirties its own tag upon `setOutletState`
    // * [backburner's custom end hook](https://github.com/emberjs/ember.js/blob/f94a4b6aef5b41b96ef2e481f35e07608df01440/packages/ember-glimmer/lib/renderer.js#L145-L159) detects that the current revision of the root is no longer the latest, and triggers a new rendering transaction
    return settled();
  }).then(() => runHooks('render', 'end'));
}

/**
  Used by test framework addons to setup the provided context for rendering.

  `setupContext` must have been ran on the provided context
  prior to calling `setupRenderingContext`.

  Responsible for:

  - Setup the basic framework used for rendering by the
    `render` helper.
  - Ensuring the event dispatcher is properly setup.
  - Setting `this.element` to the root element of the testing
    container (things rendered via `render` will go _into_ this
    element).

  @public
  @param {TestContext} context the context to setup for rendering
  @returns {Promise<RenderingTestContext>} resolves with the context that was setup

  @example
  <caption>
    Rendering out a paragraph element containing the content 'hello', and then clearing that content via clearRender.
  </caption>

  await render(hbs`<p>Hello!</p>`);
  assert.equal(this.element.textContent, 'Hello!', 'has rendered content');
  await clearRender();
  assert.equal(this.element.textContent, '', 'has rendered content');
*/
function setupRenderingContext(context) {
  const testMetadata = getTestMetadata(context);
  testMetadata.setupTypes.push('setupRenderingContext');
  const renderingContext = prepare(context);
  return Promise.resolve().then(() => {
    const {
      owner
    } = renderingContext;

    // When the host app uses `setApplication` (instead of `setResolver`) the event dispatcher has
    // already been setup via `applicationInstance.boot()` in `./build-owner`. If using
    // `setResolver` (instead of `setApplication`) a "mock owner" is created by extending
    // `Ember._ContainerProxyMixin` and `Ember._RegistryProxyMixin` in this scenario we need to
    // manually start the event dispatcher.
    if (owner._emberTestHelpersMockOwner) {
      const dispatcher = owner.lookup('event_dispatcher:main') || EventDispatcher.create();
      dispatcher.setup({}, '#ember-testing');
    }
    const OutletView = owner.factoryFor ? owner.factoryFor('view:-outlet') : owner._lookupFactory('view:-outlet');
    const environment = owner.lookup('-environment:main');
    const template = owner.lookup('template:-outlet');
    const toplevelView = OutletView.create({
      template,
      environment
    });
    owner.register('-top-level-view:main', {
      create() {
        return toplevelView;
      }
    });

    // initially render a simple empty template
    return render(EMPTY_TEMPLATE).then(() => {
      run$1(toplevelView, 'appendTo', getRootElement$1());
      return settled();
    });
  }).then(() => {
    Object.defineProperty(renderingContext, 'element', {
      configurable: true,
      enumerable: true,
      // In older Ember versions (2.4) the element itself is not stable,
      // and therefore we cannot update the `this.element` until after the
      // rendering is completed
      value: getRootElement$1(),
      writable: false
    });
    return renderingContext;
  });
}

function esCompat(m) {
  return m?.__esModule ? m : {
    default: m,
    ...m
  };
}

const _importSync20$1 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  Component,
  DOMChanges,
  DOMTreeConstruction,
  Helper,
  Input,
  LinkTo,
  NodeDOMTreeConstruction,
  OutletView,
  Renderer,
  RootTemplate,
  SafeString,
  Textarea,
  _resetRenderers,
  componentCapabilities,
  escapeExpression,
  getTemplate,
  getTemplates,
  hasTemplate,
  helper: helper$1,
  htmlSafe,
  isHTMLSafe,
  isSerializationFirstNode,
  modifierCapabilities,
  renderSettled: renderSettled$2,
  setComponentManager,
  setTemplate,
  setTemplates,
  setupApplicationRegistry,
  setupEngineRegistry,
  template: templateFactory,
  templateCacheCounters,
  uniqueId: uniqueId$1$1
}, Symbol.toStringTag, { value: 'Module' }));

let renderSettled;
{
  //@ts-ignore
  renderSettled = esCompat(_importSync20$1).renderSettled;
}
var renderSettled$1 = renderSettled;

/**
  Returns a promise which will resolve when rendering has completed. In
  this context, rendering is completed when all auto-tracked state that is
  consumed in the template (including any tracked state in models, services,
  etc.  that are then used in a template) has been updated in the DOM.

  For example, in a test you might want to update some tracked state and
  then run some assertions after rendering has completed. You _could_ use
  `await settled()` in that location, but in some contexts you don't want to
  wait for full settledness (which includes test waiters, pending AJAX/fetch,
  run loops, etc) but instead only want to know when that updated value has
  been rendered in the DOM. **THAT** is what `await rerender()` is _perfect_
  for.
  @public
  @returns {Promise<void>} a promise which fulfills when rendering has completed
*/
function rerender() {
  return renderSettled$1();
}

// Private API
const VALID = Object.freeze({
  isValid: true,
  message: null
});
const INVALID = Object.freeze({
  isValid: false,
  message: 'error handler should have re-thrown the provided error'
});

/**
 * Validate the provided error handler to confirm that it properly re-throws
 * errors when `Ember.testing` is true.
 *
 * This is intended to be used by test framework hosts (or other libraries) to
 * ensure that `Ember.onerror` is properly configured. Without a check like
 * this, `Ember.onerror` could _easily_ swallow all errors and make it _seem_
 * like everything is just fine (and have green tests) when in reality
 * everything is on fire...
 *
 * @public
 * @param {Function} [callback=Ember.onerror] the callback to validate
 * @returns {Object} object with `isValid` and `message`
 *
 * @example <caption>Example implementation for `ember-qunit`</caption>
 *
 * import { validateErrorHandler } from '@ember/test-helpers';
 *
 * test('Ember.onerror is functioning properly', function(assert) {
 *   let result = validateErrorHandler();
 *   assert.ok(result.isValid, result.message);
 * });
 */
function validateErrorHandler(callback = getOnerror()) {
  if (callback === undefined || callback === null) {
    return VALID;
  }
  const error = new Error('Error handler validation error!');
  const originalEmberTesting = isTesting();
  setTesting(true);
  try {
    callback(error);
  } catch (e) {
    if (e === error) {
      return VALID;
    }
  } finally {
    setTesting(originalEmberTesting);
  }
  return INVALID;
}

const IS_DESCRIPTOR = '__dom_element_descriptor_is_descriptor__';

/**
 * Determine if the argument is an {@link IDOMElementDescriptor}.
 *
 * This does not check if the argument is registered, just that it's type is
 * {@link IDOMElementDescriptor}.
 */
function isDescriptor(target) {
  return Boolean(typeof target === 'object' && target && IS_DESCRIPTOR in target);
}

/**
 * Get the registry instance.
 *
 * We store it on the window to ensure that if some dependency/hoisting horkage
 * results in the presence of multiple copies of this library, they are all
 * using the same registry.
 *
 * @returns the registry
 */
function getRegistry() {
  const win = window;
  win.domElementDescriptorsRegistry = win.domElementDescriptorsRegistry || new WeakMap();
  return win.domElementDescriptorsRegistry;
}
/**
 * Register or explicitly unregister descriptor data.
 *
 * Note that descriptor data does not need to be unregistered, the
 * un-registration functionality exists for cases when the descriptor is known
 * to no longer be valid.
 *
 * @param descriptor the DOM element descriptor
 * @param data the descriptor's data, or null to un-register
 */
function registerDescriptorData(descriptor, data) {
  if (data) {
    getRegistry().set(descriptor, data);
  } else {
    getRegistry().delete(descriptor);
  }
}
/**
 * Look up registered descriptor data
 *
 * @param descriptor the descriptor
 * @returns the descriptor's data, or null if none is set
 */
function lookupDescriptorData(descriptor) {
  return getRegistry().get(descriptor) || null;
}

/**
 * Given a descriptor or descriptor data, get the single/first element it would
 * match.
 *
 * This is analogous to `querySelector()`, and is meant to be used by DOM helper
 * libraries to resolve the targets of single-element operations.
 *
 * @param target the descriptor or descriptor data
 * @returns the resolved DOM element, or null if no element matched
 */
function resolveDOMElement(target) {
  let data = isDescriptor(target) ? lookupDescriptorData(target) : target;
  if (!data) {
    return null;
  }
  if (data.element !== undefined) {
    return data.element;
  } else {
    for (let element of data.elements || []) {
      return element;
    }
    return null;
  }
}
/**
 * Given a descriptor or descriptor data, get the elements it would match.
 *
 * This is analogous to `querySelectorAll()`, and is meant to be used by DOM
 * helper libraries to resolve the targets of multi-element operations.
 *
 * @param target the descriptor or descriptor data
 * @returns the resolved DOM elements (possibly none)
 */
function resolveDOMElements(target) {
  let data = isDescriptor(target) ? lookupDescriptorData(target) : target;
  if (!data) {
    return [];
  }
  if (data.elements) {
    return Array.from(data.elements);
  } else {
    let element = data.element;
    return element ? [element] : [];
  }
}
/**
 * Get the description of the given descriptor or descriptor data, if it has one
 *
 * @param target the descriptor or descriptor data
 * @returns the description or `undefined` if it doesn't have a description
 */
function resolveDescription(target) {
  let data = isDescriptor(target) ? lookupDescriptorData(target) : target;
  return data?.description;
}

/**
 * Create a descriptor from descriptor data
 *
 * This is a convenience method for creating a descriptor associated with some
 * descriptor data. This is intended for cases where a consumer of a DOM helper
 * library want to create an ad-hoc descriptor from an element or list of
 * elements to pass to a DOM helper.
 *
 * @param data the descriptor data
 * @returns a new DOM element descriptor associated with the descriptor data
 *
 * @example
 *
 * let element = someOtherLibrary.getGraphElement();
 * let descriptor = createDescriptor({ element, description: 'graph element' });
 *
 * await click(descriptor);
 * assert.dom(descriptor).hasClass('selected');
 */
function createDescriptor$1(data) {
  let descriptor = {
    [IS_DESCRIPTOR]: true
  };
  registerDescriptorData(descriptor, data);
  return descriptor;
}

/**
  Used internally by the DOM interaction helpers to find one element.

  @private
  @param {string|Element} target the element or selector to retrieve
  @returns {Element} the target or selector
*/
function getElement$1(target) {
  if (typeof target === 'string') {
    const rootElement = getRootElement$1();
    return rootElement.querySelector(target);
  } else if (isElement$1(target) || isDocument$1(target)) {
    return target;
  } else if (target instanceof Window) {
    return target.document;
  } else {
    const descriptorData = lookupDescriptorData(target);
    if (descriptorData) {
      return resolveDOMElement(descriptorData);
    } else {
      throw new Error('Must use an element, selector string, or DOM element descriptor');
    }
  }
}

/**
  Used internally by the DOM interaction helpers to find either window or an element.

  @private
  @param {string|Element} target the window, an element or selector to retrieve
  @returns {Element|Window} the target or selector
*/
function getWindowOrElement(target) {
  if (isWindow(target)) {
    return target;
  }
  return getElement$1(target);
}

// eslint-disable-next-line @typescript-eslint/no-empty-object-type

// eslint-disable-next-line require-jsdoc
function tuple(...args) {
  return args;
}

/**
 * Logs a debug message to the console if the `testHelperLogging` query
 * parameter is set.
 *
 * @private
 * @param {string} helperName Name of the helper
 * @param {string|Element} target The target element or selector
 */
function log(helperName, target, ...args) {
  if (loggingEnabled()) {
    // eslint-disable-next-line no-console
    console.log(`${helperName}(${[elementToString$1(target), ...args.filter(Boolean)].join(', ')})`);
  }
}

/**
 * Returns whether the test helper logging is enabled or not via the
 * `testHelperLogging` query parameter.
 *
 * @private
 * @returns {boolean} true if enabled
 */
function loggingEnabled() {
  return typeof location !== 'undefined' && location.search.indexOf('testHelperLogging') !== -1;
}

/**
 * This generates a human-readable description to a DOM element.
 *
 * @private
 * @param {*} el The element that should be described
 * @returns {string} A human-readable description
 */
function elementToString$1(el) {
  let desc;
  if (el instanceof NodeList) {
    if (el.length === 0) {
      return 'empty NodeList';
    }
    desc = Array.prototype.slice.call(el, 0, 5).map(elementToString$1).join(', ');
    return el.length > 5 ? `${desc}... (+${el.length - 5} more)` : desc;
  }
  if (!(el instanceof HTMLElement || el instanceof SVGElement)) {
    return String(el);
  }
  desc = el.tagName.toLowerCase();
  if (el.id) {
    desc += `#${el.id}`;
  }
  if (el.className && !(el.className instanceof SVGAnimatedString)) {
    desc += `.${String(el.className).replace(/\s+/g, '.')}`;
  }
  Array.prototype.forEach.call(el.attributes, function (attr) {
    if (attr.name !== 'class' && attr.name !== 'id') {
      desc += `[${attr.name}${attr.value ? `="${attr.value}"]` : ']'}`;
    }
  });
  return desc;
}

registerHook('fireEvent', 'start', target => {
  log('fireEvent', target);
});

// eslint-disable-next-line require-jsdoc
const MOUSE_EVENT_CONSTRUCTOR = (() => {
  try {
    new MouseEvent('test');
    return true;
  } catch {
    return false;
  }
})();
const DEFAULT_EVENT_OPTIONS = {
  bubbles: true,
  cancelable: true
};
const KEYBOARD_EVENT_TYPES = tuple('keydown', 'keypress', 'keyup');
// eslint-disable-next-line require-jsdoc
function isKeyboardEventType(eventType) {
  return KEYBOARD_EVENT_TYPES.indexOf(eventType) > -1;
}
const MOUSE_EVENT_TYPES = tuple('click', 'mousedown', 'mouseup', 'dblclick', 'mouseenter', 'mouseleave', 'mousemove', 'mouseout', 'mouseover');
// eslint-disable-next-line require-jsdoc
function isMouseEventType(eventType) {
  return MOUSE_EVENT_TYPES.indexOf(eventType) > -1;
}
const FILE_SELECTION_EVENT_TYPES = tuple('change');
// eslint-disable-next-line require-jsdoc
function isFileSelectionEventType(eventType) {
  return FILE_SELECTION_EVENT_TYPES.indexOf(eventType) > -1;
}

// eslint-disable-next-line require-jsdoc
function isFileSelectionInput(element) {
  return element.files;
}
/**
  Internal helper used to build and dispatch events throughout the other DOM helpers.

  @private
  @param {Element} element the element to dispatch the event to
  @param {string} eventType the type of event
  @param {Object} [options] additional properties to be set on the event
  @returns {Event} the event that was dispatched
*/
function fireEvent(element, eventType, options = {}) {
  return Promise.resolve().then(() => runHooks('fireEvent', 'start', element)).then(() => runHooks(`fireEvent:${eventType}`, 'start', element)).then(() => {
    if (!element) {
      throw new Error('Must pass an element to `fireEvent`');
    }
    let event;
    if (isKeyboardEventType(eventType)) {
      event = _buildKeyboardEvent(eventType, options);
    } else if (isMouseEventType(eventType)) {
      let rect;
      if (element instanceof Window && element.document.documentElement) {
        rect = element.document.documentElement.getBoundingClientRect();
      } else if (isDocument$1(element)) {
        rect = element.documentElement.getBoundingClientRect();
      } else if (isElement$1(element)) {
        rect = element.getBoundingClientRect();
      } else {
        return;
      }
      const x = rect.left + 1;
      const y = rect.top + 1;
      const simulatedCoordinates = {
        screenX: x + 5,
        // Those numbers don't really mean anything.
        screenY: y + 95,
        // They're just to make the screenX/Y be different of clientX/Y..
        clientX: x,
        clientY: y,
        ...options
      };
      event = buildMouseEvent(eventType, simulatedCoordinates);
    } else if (isFileSelectionEventType(eventType) && isFileSelectionInput(element)) {
      event = buildFileEvent(eventType, element, options);
    } else {
      event = buildBasicEvent(eventType, options);
    }
    element.dispatchEvent(event);
    return event;
  }).then(event => runHooks(`fireEvent:${eventType}`, 'end', element).then(() => event)).then(event => runHooks('fireEvent', 'end', element).then(() => event));
}

// eslint-disable-next-line require-jsdoc
function buildBasicEvent(type, options = {}) {
  const event = document.createEvent('Events');
  const bubbles = options.bubbles !== undefined ? options.bubbles : true;
  const cancelable = options.cancelable !== undefined ? options.cancelable : true;
  delete options.bubbles;
  delete options.cancelable;

  // bubbles and cancelable are readonly, so they can be
  // set when initializing event
  event.initEvent(type, bubbles, cancelable);
  for (const prop in options) {
    event[prop] = options[prop];
  }
  return event;
}

// eslint-disable-next-line require-jsdoc
function buildMouseEvent(type, options = {}) {
  let event;
  const eventOpts = {
    view: window,
    ...DEFAULT_EVENT_OPTIONS,
    ...options
  };
  if (MOUSE_EVENT_CONSTRUCTOR) {
    event = new MouseEvent(type, eventOpts);
  } else {
    try {
      event = document.createEvent('MouseEvents');
      event.initMouseEvent(type, eventOpts.bubbles, eventOpts.cancelable, window, eventOpts.detail, eventOpts.screenX, eventOpts.screenY, eventOpts.clientX, eventOpts.clientY, eventOpts.ctrlKey, eventOpts.altKey, eventOpts.shiftKey, eventOpts.metaKey, eventOpts.button, eventOpts.relatedTarget);
    } catch {
      event = buildBasicEvent(type, options);
    }
  }
  return event;
}

// @private
// eslint-disable-next-line require-jsdoc
function _buildKeyboardEvent(type, options = {}) {
  const eventOpts = {
    ...DEFAULT_EVENT_OPTIONS,
    ...options
  };
  let event;
  let eventMethodName;
  try {
    event = new KeyboardEvent(type, eventOpts);

    // Property definitions are required for B/C for keyboard event usage
    // If this properties are not defined, when listening for key events
    // keyCode/which will be 0. Also, keyCode and which now are string
    // and if app compare it with === with integer key definitions,
    // there will be a fail.
    //
    // https://w3c.github.io/uievents/#interface-keyboardevent
    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent
    Object.defineProperty(event, 'keyCode', {
      get() {
        return parseInt(eventOpts.keyCode);
      }
    });
    Object.defineProperty(event, 'which', {
      get() {
        return parseInt(eventOpts.which);
      }
    });
    return event;
  } catch {
    // left intentionally blank
  }
  try {
    event = document.createEvent('KeyboardEvents');
    eventMethodName = 'initKeyboardEvent';
  } catch {
    // left intentionally blank
  }
  if (!event) {
    try {
      event = document.createEvent('KeyEvents');
      eventMethodName = 'initKeyEvent';
    } catch {
      // left intentionally blank
    }
  }
  if (event && eventMethodName) {
    event[eventMethodName](type, eventOpts.bubbles, eventOpts.cancelable, window, eventOpts.ctrlKey, eventOpts.altKey, eventOpts.shiftKey, eventOpts.metaKey, eventOpts.keyCode, eventOpts.charCode);
  } else {
    event = buildBasicEvent(type, options);
  }
  return event;
}

// eslint-disable-next-line require-jsdoc
function buildFileEvent(type, element, options = {}) {
  const event = buildBasicEvent(type);
  const files = options.files;
  if (Array.isArray(options)) {
    throw new Error('Please pass an object with a files array to `triggerEvent` instead of passing the `options` param as an array to.');
  }
  if (Array.isArray(files)) {
    Object.defineProperty(files, 'item', {
      value(index) {
        return typeof index === 'number' ? this[index] : null;
      },
      configurable: true
    });
    Object.defineProperty(element, 'files', {
      value: files,
      configurable: true
    });
    const elementProto = Object.getPrototypeOf(element);
    const valueProp = Object.getOwnPropertyDescriptor(elementProto, 'value');
    Object.defineProperty(element, 'value', {
      configurable: true,
      get() {
        return valueProp.get.call(element);
      },
      set(value) {
        valueProp.set.call(element, value);

        // We are sure that the value is empty here.
        // For a non-empty value the original setter must raise an exception.
        Object.defineProperty(element, 'files', {
          configurable: true,
          value: []
        });
      }
    });
  }
  Object.defineProperty(event, 'target', {
    value: element
  });
  return event;
}

// For reference:
// https://html.spec.whatwg.org/multipage/interaction.html#the-tabindex-attribute
const FOCUSABLE_TAGS = ['A', 'SUMMARY'];
// eslint-disable-next-line require-jsdoc
function isFocusableElement(element) {
  return FOCUSABLE_TAGS.indexOf(element.tagName) > -1;
}

/**
  @private
  @param {Element} element the element to check
  @returns {boolean} `true` when the element is focusable, `false` otherwise
*/
function isFocusable(element) {
  if (isWindow(element)) {
    return false;
  }
  if (isDocument$1(element)) {
    return false;
  }
  if (isFormControl(element)) {
    return !element.disabled;
  }
  if (isContentEditable(element) || isFocusableElement(element)) {
    return true;
  }
  return element.hasAttribute('tabindex');
}

/**
  Used internally by the DOM interaction helpers to get a description of a
  target for debug/error messaging.

  @private
  @param {Target} target the target
  @returns {string} a description of the target
*/
function getDescription$1(target) {
  const data = isDescriptor(target) ? lookupDescriptorData(target) : null;
  if (data) {
    return data.description || '<unknown descriptor>';
  } else {
    return `${target}`;
  }
}

registerHook('blur', 'start', target => {
  log('blur', target);
});

/**
  @private
  @param {Element} element the element to trigger events on
  @param {Element} relatedTarget the element that is focused after blur
  @return {Promise<Event | void>} resolves when settled
*/
function __blur__(element, relatedTarget = null) {
  if (!isFocusable(element)) {
    throw new Error(`${element} is not focusable`);
  }
  const browserIsNotFocused = document.hasFocus && !document.hasFocus();
  const needsCustomEventOptions = relatedTarget !== null;
  if (!needsCustomEventOptions) {
    // makes `document.activeElement` be `body`.
    // If the browser is focused, it also fires a blur event
    element.blur();
  }

  // Chrome/Firefox does not trigger the `blur` event if the window
  // does not have focus. If the document does not have focus then
  // fire `blur` event via native event.
  const options = {
    relatedTarget
  };
  return browserIsNotFocused || needsCustomEventOptions ? Promise.resolve().then(() => fireEvent(element, 'blur', {
    bubbles: false,
    ...options
  })).then(() => fireEvent(element, 'focusout', options)) : Promise.resolve();
}

registerHook('focus', 'start', target => {
  log('focus', target);
});
/**
   Get the closest focusable ancestor of a given element (or the element itself
   if it's focusable)

   @private
   @param {Element} element the element to trigger events on
   @returns {HTMLElement|SVGElement|null} the focusable element/ancestor or null
   if there is none
 */
function getClosestFocusable(element) {
  if (isDocument$1(element)) {
    return null;
  }
  let maybeFocusable = element;
  while (maybeFocusable && !isFocusable(maybeFocusable)) {
    maybeFocusable = maybeFocusable.parentElement;
  }
  return maybeFocusable;
}

/**
  @private
  @param {Element} element the element to trigger events on
  @return {Promise<FocusRecord | Event | void>} resolves when settled
*/
function __focus__(element) {
  return Promise.resolve().then(() => {
    const focusTarget = getClosestFocusable(element);
    const previousFocusedElement = document.activeElement && document.activeElement !== focusTarget && isFocusable(document.activeElement) ? document.activeElement : null;

    // fire __blur__ manually with the null relatedTarget when the target is not focusable
    // and there was a previously focused element
    return !focusTarget && previousFocusedElement ? __blur__(previousFocusedElement, null).then(() => Promise.resolve({
      focusTarget,
      previousFocusedElement
    })) : Promise.resolve({
      focusTarget,
      previousFocusedElement
    });
  }).then(({
    focusTarget,
    previousFocusedElement
  }) => {
    if (!focusTarget) {
      throw new Error('There was a previously focused element');
    }
    const browserIsNotFocused = !document?.hasFocus();

    // fire __blur__ manually with the correct relatedTarget when the browser is not
    // already in focus and there was a previously focused element
    return previousFocusedElement && browserIsNotFocused ? __blur__(previousFocusedElement, focusTarget).then(() => Promise.resolve({
      focusTarget
    })) : Promise.resolve({
      focusTarget
    });
  }).then(({
    focusTarget
  }) => {
    // makes `document.activeElement` be `element`. If the browser is focused, it also fires a focus event
    focusTarget.focus();

    // Firefox does not trigger the `focusin` event if the window
    // does not have focus. If the document does not have focus then
    // fire `focusin` event as well.
    const browserIsFocused = document?.hasFocus();
    return browserIsFocused ? Promise.resolve() :
    // if the browser is not focused the previous `el.focus()` didn't fire an event, so we simulate it
    Promise.resolve().then(() => fireEvent(focusTarget, 'focus', {
      bubbles: false
    })).then(() => fireEvent(focusTarget, 'focusin')).then(() => settled());
  }).catch(() => {});
}

/**
  Focus the specified target.

  Sends a number of events intending to simulate a "real" user focusing an
  element.

  The following events are triggered (in order):

  - `focus`
  - `focusin`

  The exact listing of events that are triggered may change over time as needed
  to continue to emulate how actual browsers handle focusing a given element.

  @public
  @param {string|Element|IDOMElementDescriptor} target the element, selector, or descriptor to focus
  @return {Promise<void>} resolves when the application is settled

  @example
  <caption>
    Emulating focusing an input using `focus`
  </caption>

  focus('input');
*/
function focus(target) {
  return Promise.resolve().then(() => runHooks('focus', 'start', target)).then(() => {
    if (!target) {
      throw new Error('Must pass an element, selector, or descriptor to `focus`.');
    }
    const element = getElement$1(target);
    if (!element) {
      const description = getDescription$1(target);
      throw new Error(`Element not found when calling \`focus('${description}')\`.`);
    }
    if (!isFocusable(element)) {
      throw new Error(`${element} is not focusable`);
    }
    return __focus__(element).then(settled);
  }).then(() => runHooks('focus', 'end', target));
}

const PRIMARY_BUTTON = 1;
const MAIN_BUTTON_PRESSED = 0;
registerHook('click', 'start', target => {
  log('click', target);
});

/**
 * Represent a particular mouse button being clicked.
 * See https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons for available options.
 */
const DEFAULT_CLICK_OPTIONS = {
  buttons: PRIMARY_BUTTON,
  button: MAIN_BUTTON_PRESSED
};

/**
  @private
  @param {Element} element the element to click on
  @param {MouseEventInit} options the options to be merged into the mouse events
  @return {Promise<Event | void>} resolves when settled
*/
function __click__(element, options) {
  return Promise.resolve().then(() => fireEvent(element, 'mousedown', options)).then(mouseDownEvent => !isWindow(element) && !mouseDownEvent?.defaultPrevented ? __focus__(element) : Promise.resolve()).then(() => fireEvent(element, 'mouseup', options)).then(() => fireEvent(element, 'click', options));
}

/**
  Clicks on the specified target.

  Sends a number of events intending to simulate a "real" user clicking on an
  element.

  For non-focusable elements the following events are triggered (in order):

  - `mousedown`
  - `mouseup`
  - `click`

  For focusable (e.g. form control) elements the following events are triggered
  (in order):

  - `mousedown`
  - `focus`
  - `focusin`
  - `mouseup`
  - `click`

  The exact listing of events that are triggered may change over time as needed
  to continue to emulate how actual browsers handle clicking a given element.

  Use the `options` hash to change the parameters of the [MouseEvents](https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent).
  You can use this to specify modifier keys as well.

  @public
  @param {string|Element|IDOMElementDescriptor} target the element, selector, or descriptor to click on
  @param {MouseEventInit} _options the options to be merged into the mouse events.
  @return {Promise<void>} resolves when settled

  @example
  <caption>
    Emulating clicking a button using `click`
  </caption>
  click('button');

  @example
  <caption>
    Emulating clicking a button and pressing the `shift` key simultaneously using `click` with `options`.
  </caption>

  click('button', { shiftKey: true });
*/
function click(target, _options = {}) {
  const options = {
    ...DEFAULT_CLICK_OPTIONS,
    ..._options
  };
  return Promise.resolve().then(() => runHooks('click', 'start', target, _options)).then(() => {
    if (!target) {
      throw new Error('Must pass an element, selector, or descriptor to `click`.');
    }
    const element = getWindowOrElement(target);
    if (!element) {
      const description = getDescription$1(target);
      throw new Error(`Element not found when calling \`click('${description}')\`.`);
    }
    if (isFormControl(element) && element.disabled) {
      throw new Error(`Can not \`click\` disabled ${element}`);
    }
    return __click__(element, options).then(settled);
  }).then(() => runHooks('click', 'end', target, _options));
}

registerHook('doubleClick', 'start', target => {
  log('doubleClick', target);
});

registerHook('tab', 'start', target => {
  log('tab', target);
});

registerHook('tap', 'start', target => {
  log('tap', target);
});

registerHook('triggerEvent', 'start', (target, eventType) => {
  log('triggerEvent', target, eventType);
});

/**
 * Triggers an event on the specified target.
 *
 * @public
 * @param {string|Element|IDOMElementDescriptor} target the element, selector, or descriptor to trigger the event on
 * @param {string} eventType the type of event to trigger
 * @param {Object} options additional properties to be set on the event
 * @return {Promise<void>} resolves when the application is settled
 *
 * @example
 * <caption>
 * Using `triggerEvent` to upload a file
 *
 * When using `triggerEvent` to upload a file the `eventType` must be `change` and you must pass the
 * `options` param as an object with a key `files` containing an array of
 * [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob).
 * </caption>
 *
 * triggerEvent(
 *   'input.fileUpload',
 *   'change',
 *   { files: [new Blob(['Ember Rules!'])] }
 * );
 *
 *
 * @example
 * <caption>
 * Using `triggerEvent` to upload a dropped file
 *
 * When using `triggerEvent` to handle a dropped (via drag-and-drop) file, the `eventType` must be `drop`. Assuming your `drop` event handler uses the [DataTransfer API](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer),
 * you must pass the `options` param as an object with a key of `dataTransfer`. The `options.dataTransfer`     object should have a `files` key, containing an array of [File](https://developer.mozilla.org/en-US/docs/Web/API/File).
 * </caption>
 *
 * triggerEvent(
 *   '[data-test-drop-zone]',
 *   'drop',
 *   {
 *     dataTransfer: {
 *       files: [new File(['Ember Rules!'], 'ember-rules.txt')]
 *     }
 *   }
 * )
 */
function triggerEvent(target, eventType, options) {
  return Promise.resolve().then(() => {
    return runHooks('triggerEvent', 'start', target, eventType, options);
  }).then(() => {
    if (!target) {
      throw new Error('Must pass an element, selector, or descriptor to `triggerEvent`.');
    }
    if (!eventType) {
      throw new Error(`Must provide an \`eventType\` to \`triggerEvent\``);
    }
    const element = getWindowOrElement(target);
    if (!element) {
      const description = getDescription$1(target);
      throw new Error(`Element not found when calling \`triggerEvent('${description}', ...)\`.`);
    }
    if (isFormControl(element) && element.disabled) {
      throw new Error(`Can not \`triggerEvent\` on disabled ${element}`);
    }
    return fireEvent(element, eventType, options).then(settled);
  }).then(() => {
    return runHooks('triggerEvent', 'end', target, eventType, options);
  });
}

registerHook('triggerKeyEvent', 'start', (target, eventType, key) => {
  log('triggerKeyEvent', target, eventType, key);
});
const DEFAULT_MODIFIERS = Object.freeze({
  ctrlKey: false,
  altKey: false,
  shiftKey: false,
  metaKey: false
});

// This is not a comprehensive list, but it is better than nothing.
const keyFromKeyCode = {
  8: 'Backspace',
  9: 'Tab',
  13: 'Enter',
  16: 'Shift',
  17: 'Control',
  18: 'Alt',
  20: 'CapsLock',
  27: 'Escape',
  32: ' ',
  37: 'ArrowLeft',
  38: 'ArrowUp',
  39: 'ArrowRight',
  40: 'ArrowDown',
  48: '0',
  49: '1',
  50: '2',
  51: '3',
  52: '4',
  53: '5',
  54: '6',
  55: '7',
  56: '8',
  57: '9',
  65: 'a',
  66: 'b',
  67: 'c',
  68: 'd',
  69: 'e',
  70: 'f',
  71: 'g',
  72: 'h',
  73: 'i',
  74: 'j',
  75: 'k',
  76: 'l',
  77: 'm',
  78: 'n',
  79: 'o',
  80: 'p',
  81: 'q',
  82: 'r',
  83: 's',
  84: 't',
  85: 'u',
  86: 'v',
  87: 'w',
  88: 'x',
  89: 'y',
  90: 'z',
  91: 'Meta',
  93: 'Meta',
  // There is two keys that map to meta,
  186: ';',
  187: '=',
  188: ',',
  189: '-',
  190: '.',
  191: '/',
  219: '[',
  220: '\\',
  221: ']',
  222: "'"
};
const keyFromKeyCodeWithShift = {
  48: ')',
  49: '!',
  50: '@',
  51: '#',
  52: '$',
  53: '%',
  54: '^',
  55: '&',
  56: '*',
  57: '(',
  186: ':',
  187: '+',
  188: '<',
  189: '_',
  190: '>',
  191: '?',
  219: '{',
  220: '|',
  221: '}',
  222: '"'
};

/**
  Calculates the value of KeyboardEvent#key given a keycode and the modifiers.
  Note that this works if the key is pressed in combination with the shift key, but it cannot
  detect if caps lock is enabled.
  @param {number} keycode The keycode of the event.
  @param {object} modifiers The modifiers of the event.
  @returns {string} The key string for the event.
 */
function keyFromKeyCodeAndModifiers(keycode, modifiers) {
  if (keycode > 64 && keycode < 91) {
    if (modifiers.shiftKey) {
      return String.fromCharCode(keycode);
    } else {
      return String.fromCharCode(keycode).toLocaleLowerCase();
    }
  }
  return modifiers.shiftKey && keyFromKeyCodeWithShift[keycode] || keyFromKeyCode[keycode];
}

/**
 * Infers the keycode from the given key
 * @param {string} key The KeyboardEvent#key string
 * @returns {number} The keycode for the given key
 */
function keyCodeFromKey(key) {
  const keys = Object.keys(keyFromKeyCode);
  const keyCode = keys.find(keyCode => keyFromKeyCode[Number(keyCode)] === key) || keys.find(keyCode => keyFromKeyCode[Number(keyCode)] === key.toLowerCase());
  return keyCode !== undefined ? parseInt(keyCode) : undefined;
}

/**
  @private
  @param {Element | Document} element the element to trigger the key event on
  @param {'keydown' | 'keyup' | 'keypress'} eventType the type of event to trigger
  @param {number|string} key the `keyCode`(number) or `key`(string) of the event being triggered
  @param {Object} [modifiers] the state of various modifier keys
  @return {Promise<Event>} resolves when settled
 */
function __triggerKeyEvent__(element, eventType, key, modifiers = DEFAULT_MODIFIERS) {
  return Promise.resolve().then(() => {
    let props;
    if (typeof key === 'number') {
      props = {
        keyCode: key,
        which: key,
        key: keyFromKeyCodeAndModifiers(key, modifiers),
        ...modifiers
      };
    } else if (typeof key === 'string' && key.length !== 0) {
      const firstCharacter = key[0];
      if (!firstCharacter || firstCharacter !== firstCharacter.toUpperCase()) {
        throw new Error(`Must provide a \`key\` to \`triggerKeyEvent\` that starts with an uppercase character but you passed \`${key}\`.`);
      }
      if (isNumeric(key) && key.length > 1) {
        throw new Error(`Must provide a numeric \`keyCode\` to \`triggerKeyEvent\` but you passed \`${key}\` as a string.`);
      }
      const keyCode = keyCodeFromKey(key);
      props = {
        keyCode,
        which: keyCode,
        key,
        ...modifiers
      };
    } else {
      throw new Error(`Must provide a \`key\` or \`keyCode\` to \`triggerKeyEvent\``);
    }
    return fireEvent(element, eventType, props);
  });
}

/**
  Triggers a keyboard event of given type in the target element.
  It also requires the developer to provide either a string with the [`key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)
  or the numeric [`keyCode`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode) of the pressed key.
  Optionally the user can also provide a POJO with extra modifiers for the event.

  @public
  @param {string|Element|IDOMElementDescriptor} target the element, selector, or descriptor to trigger the event on
  @param {'keydown' | 'keyup' | 'keypress'} eventType the type of event to trigger
  @param {number|string} key the `keyCode`(number) or `key`(string) of the event being triggered
  @param {Object} [modifiers] the state of various modifier keys
  @param {boolean} [modifiers.ctrlKey=false] if true the generated event will indicate the control key was pressed during the key event
  @param {boolean} [modifiers.altKey=false] if true the generated event will indicate the alt key was pressed during the key event
  @param {boolean} [modifiers.shiftKey=false] if true the generated event will indicate the shift key was pressed during the key event
  @param {boolean} [modifiers.metaKey=false] if true the generated event will indicate the meta key was pressed during the key event
  @return {Promise<void>} resolves when the application is settled unless awaitSettled is false

  @example
  <caption>
    Emulating pressing the `ENTER` key on a button using `triggerKeyEvent`
  </caption>
  triggerKeyEvent('button', 'keydown', 'Enter');
*/
function triggerKeyEvent(target, eventType, key, modifiers = DEFAULT_MODIFIERS) {
  return Promise.resolve().then(() => {
    return runHooks('triggerKeyEvent', 'start', target, eventType, key);
  }).then(() => {
    if (!target) {
      throw new Error('Must pass an element, selector, or descriptor to `triggerKeyEvent`.');
    }
    const element = getElement$1(target);
    if (!element) {
      const description = getDescription$1(target);
      throw new Error(`Element not found when calling \`triggerKeyEvent('${description}')\`.`);
    }
    if (!isKeyboardEventType(eventType)) {
      const validEventTypes = KEYBOARD_EVENT_TYPES.join(', ');
      throw new Error(`Must provide an \`eventType\` of ${validEventTypes} to \`triggerKeyEvent\` but you passed \`${eventType}\`.`);
    }
    if (isFormControl(element) && element.disabled) {
      throw new Error(`Can not \`triggerKeyEvent\` on disabled ${element}`);
    }
    return __triggerKeyEvent__(element, eventType, key, modifiers).then(settled);
  }).then(() => runHooks('triggerKeyEvent', 'end', target, eventType, key));
}

registerHook('fillIn', 'start', (target, text) => {
  log('fillIn', target, text);
});

registerHook('typeIn', 'start', (target, text) => {
  log('typeIn', target, text);
});

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var qunit$1 = {exports: {}};

var hasRequiredQunit;

function requireQunit () {
	if (hasRequiredQunit) return qunit$1.exports;
	hasRequiredQunit = 1;
	(function (module, exports) {
		var define_process_env_default = {};
		/*!
		 * QUnit 2.24.1
		 * https://qunitjs.com/
		 *
		 * Copyright OpenJS Foundation and other contributors
		 * Released under the MIT license
		 * https://jquery.org/license
		 */
		(function() {
		  function _arrayLikeToArray(r, a) {
		    (null == a || a > r.length) && (a = r.length);
		    for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
		    return n;
		  }
		  function _arrayWithHoles(r) {
		    if (Array.isArray(r)) return r;
		  }
		  function _arrayWithoutHoles(r) {
		    if (Array.isArray(r)) return _arrayLikeToArray(r);
		  }
		  function _classCallCheck(a, n) {
		    if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function");
		  }
		  function _defineProperties(e, r) {
		    for (var t = 0; t < r.length; t++) {
		      var o = r[t];
		      o.enumerable = o.enumerable || false, o.configurable = true, "value" in o && (o.writable = true), Object.defineProperty(e, _toPropertyKey(o.key), o);
		    }
		  }
		  function _createClass(e, r, t) {
		    return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", {
		      writable: false
		    }), e;
		  }
		  function _iterableToArray(r) {
		    if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
		  }
		  function _iterableToArrayLimit(r, l) {
		    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
		    if (null != t) {
		      var e, n, i, u, a = [], f = true, o = false;
		      try {
		        if (i = (t = t.call(r)).next, 0 === l) {
		          if (Object(t) !== t) return;
		          f = false;
		        } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true) ;
		      } catch (r2) {
		        o = true, n = r2;
		      } finally {
		        try {
		          if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return;
		        } finally {
		          if (o) throw n;
		        }
		      }
		      return a;
		    }
		  }
		  function _nonIterableRest() {
		    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
		  }
		  function _nonIterableSpread() {
		    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
		  }
		  function _slicedToArray(r, e) {
		    return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
		  }
		  function _toConsumableArray(r) {
		    return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
		  }
		  function _toPrimitive(t, r) {
		    if ("object" != typeof t || !t) return t;
		    var e = t[Symbol.toPrimitive];
		    if (void 0 !== e) {
		      var i = e.call(t, r);
		      if ("object" != typeof i) return i;
		      throw new TypeError("@@toPrimitive must return a primitive value.");
		    }
		    return (String )(t);
		  }
		  function _toPropertyKey(t) {
		    var i = _toPrimitive(t, "string");
		    return "symbol" == typeof i ? i : i + "";
		  }
		  function _typeof(o) {
		    "@babel/helpers - typeof";
		    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
		      return typeof o2;
		    } : function(o2) {
		      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
		    }, _typeof(o);
		  }
		  function _unsupportedIterableToArray(r, a) {
		    if (r) {
		      if ("string" == typeof r) return _arrayLikeToArray(r, a);
		      var t = {}.toString.call(r).slice(8, -1);
		      return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
		    }
		  }
		  function getGlobalThis() {
		    if (typeof globalThis !== "undefined") {
		      return globalThis;
		    }
		    if (typeof self !== "undefined") {
		      return self;
		    }
		    if (typeof window$1 !== "undefined") {
		      return window$1;
		    }
		    if (typeof commonjsGlobal !== "undefined") {
		      return commonjsGlobal;
		    }
		    throw new Error("Unable to locate global object");
		  }
		  var g = getGlobalThis();
		  var console$1 = g.console;
		  var setTimeout$1 = g.setTimeout;
		  var clearTimeout = g.clearTimeout;
		  var process$1 = g.process;
		  var window$1 = g.window;
		  var document = window$1 && window$1.document;
		  var navigator = window$1 && window$1.navigator;
		  var localSessionStorage = function() {
		    var x = "qunit-test-string";
		    try {
		      g.sessionStorage.setItem(x, x);
		      g.sessionStorage.removeItem(x);
		      return g.sessionStorage;
		    } catch (e) {
		      return void 0;
		    }
		  }();
		  var StringMap = typeof g.Map === "function" && typeof g.Map.prototype.keys === "function" && typeof g.Symbol === "function" && _typeof(g.Symbol.iterator) === "symbol" ? g.Map : function StringMap2(input) {
		    var _this = this;
		    var store = /* @__PURE__ */ Object.create(null);
		    var hasOwn2 = Object.prototype.hasOwnProperty;
		    this.has = function(strKey) {
		      return hasOwn2.call(store, strKey);
		    };
		    this.get = function(strKey) {
		      return store[strKey];
		    };
		    this.set = function(strKey, val) {
		      if (!hasOwn2.call(store, strKey)) {
		        this.size++;
		      }
		      store[strKey] = val;
		      return this;
		    };
		    this.delete = function(strKey) {
		      if (hasOwn2.call(store, strKey)) {
		        delete store[strKey];
		        this.size--;
		      }
		    };
		    this.forEach = function(callback) {
		      for (var strKey in store) {
		        callback(store[strKey], strKey);
		      }
		    };
		    this.keys = function() {
		      return Object.keys(store);
		    };
		    this.clear = function() {
		      store = /* @__PURE__ */ Object.create(null);
		      this.size = 0;
		    };
		    this.size = 0;
		    if (input) {
		      input.forEach(function(val, strKey) {
		        _this.set(strKey, val);
		      });
		    }
		  };
		  var StringSet = typeof g.Set === "function" && typeof g.Set.prototype.values === "function" ? g.Set : function(input) {
		    var set = /* @__PURE__ */ Object.create(null);
		    if (Array.isArray(input)) {
		      input.forEach(function(item) {
		        set[item] = true;
		      });
		    }
		    return {
		      add: function add(value) {
		        set[value] = true;
		      },
		      has: function has(value) {
		        return value in set;
		      },
		      get size() {
		        return Object.keys(set).length;
		      }
		    };
		  };
		  var toString = Object.prototype.toString;
		  var hasOwn$1 = Object.prototype.hasOwnProperty;
		  var performance = {
		    // eslint-disable-next-line compat/compat -- Checked
		    now: window$1 && window$1.performance && window$1.performance.now ? window$1.performance.now.bind(window$1.performance) : Date.now
		  };
		  function diff$1(a, b) {
		    return a.filter(function(a2) {
		      return b.indexOf(a2) === -1;
		    });
		  }
		  var inArray = Array.prototype.includes ? function(elem, array) {
		    return array.includes(elem);
		  } : function(elem, array) {
		    return array.indexOf(elem) !== -1;
		  };
		  function objectValues(obj) {
		    var allowArray = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
		    var vals = allowArray && is("array", obj) ? [] : {};
		    for (var key in obj) {
		      if (hasOwn$1.call(obj, key)) {
		        var val = obj[key];
		        vals[key] = val === Object(val) ? objectValues(val, allowArray) : val;
		      }
		    }
		    return vals;
		  }
		  function objectValuesSubset(obj, model) {
		    if (obj !== Object(obj)) {
		      return obj;
		    }
		    var subset = {};
		    for (var key in model) {
		      if (hasOwn$1.call(model, key) && hasOwn$1.call(obj, key)) {
		        subset[key] = objectValuesSubset(obj[key], model[key]);
		      }
		    }
		    return subset;
		  }
		  function extend(a, b, undefOnly) {
		    for (var prop in b) {
		      if (hasOwn$1.call(b, prop)) {
		        if (b[prop] === void 0) {
		          delete a[prop];
		        } else if (!(undefOnly && typeof a[prop] !== "undefined")) {
		          a[prop] = b[prop];
		        }
		      }
		    }
		    return a;
		  }
		  function objectType(obj) {
		    if (typeof obj === "undefined") {
		      return "undefined";
		    }
		    if (obj === null) {
		      return "null";
		    }
		    var match = toString.call(obj).match(/^\[object\s(.*)\]$/);
		    var type = match && match[1];
		    switch (type) {
		      case "Number":
		        if (isNaN(obj)) {
		          return "nan";
		        }
		        return "number";
		      case "String":
		      case "Boolean":
		      case "Array":
		      case "Set":
		      case "Map":
		      case "Date":
		      case "RegExp":
		      case "Function":
		      case "Symbol":
		        return type.toLowerCase();
		      default:
		        return _typeof(obj);
		    }
		  }
		  function is(type, obj) {
		    return objectType(obj) === type;
		  }
		  function generateHash(module2, testName) {
		    var str = module2 + "" + testName;
		    var hash = 0;
		    for (var i = 0; i < str.length; i++) {
		      hash = (hash << 5) - hash + str.charCodeAt(i);
		      hash |= 0;
		    }
		    var hex = (4294967296 + hash).toString(16);
		    if (hex.length < 8) {
		      hex = "0000000" + hex;
		    }
		    return hex.slice(-8);
		  }
		  function errorString(error) {
		    var resultErrorString = String(error);
		    if (resultErrorString.slice(0, 7) === "[object") {
		      return (error.name || "Error") + (error.message ? ": ".concat(error.message) : "");
		    } else {
		      return resultErrorString;
		    }
		  }
		  function escapeText(str) {
		    if (!str) {
		      return "";
		    }
		    return ("" + str).replace(/['"<>&]/g, function(s) {
		      switch (s) {
		        case "'":
		          return "&#039;";
		        case '"':
		          return "&quot;";
		        case "<":
		          return "&lt;";
		        case ">":
		          return "&gt;";
		        case "&":
		          return "&amp;";
		      }
		    });
		  }
		  var BOXABLE_TYPES = new StringSet(["boolean", "number", "string"]);
		  var memory = [];
		  function useStrictEquality(a, b) {
		    return a === b;
		  }
		  function useObjectValueEquality(a, b) {
		    return a === b || a.valueOf() === b.valueOf();
		  }
		  function compareConstructors(a, b) {
		    return getConstructor(a) === getConstructor(b);
		  }
		  function getConstructor(obj) {
		    var proto = Object.getPrototypeOf(obj);
		    return !proto || proto.constructor === null ? Object : obj.constructor;
		  }
		  function getRegExpFlags(regexp) {
		    return "flags" in regexp ? regexp.flags : regexp.toString().match(/[gimuy]*$/)[0];
		  }
		  var objTypeCallbacks = {
		    undefined: useStrictEquality,
		    null: useStrictEquality,
		    // Handle boxed boolean
		    boolean: useObjectValueEquality,
		    number: function number(a, b) {
		      return a === b || a.valueOf() === b.valueOf() || isNaN(a.valueOf()) && isNaN(b.valueOf());
		    },
		    // Handle boxed string
		    string: useObjectValueEquality,
		    symbol: useStrictEquality,
		    date: useObjectValueEquality,
		    nan: function nan() {
		      return true;
		    },
		    regexp: function regexp(a, b) {
		      return a.source === b.source && // Include flags in the comparison
		      getRegExpFlags(a) === getRegExpFlags(b);
		    },
		    // identical reference only
		    function: useStrictEquality,
		    array: function array(a, b) {
		      if (a.length !== b.length) {
		        return false;
		      }
		      for (var i = 0; i < a.length; i++) {
		        if (!typeEquiv(a[i], b[i])) {
		          return false;
		        }
		      }
		      return true;
		    },
		    // Define sets a and b to be equivalent if for each element aVal in a, there
		    // is some element bVal in b such that aVal and bVal are equivalent. Element
		    // repetitions are not counted, so these are equivalent:
		    // a = new Set( [ X={}, Y=[], Y ] );
		    // b = new Set( [ Y, X, X ] );
		    set: function set(a, b) {
		      if (a.size !== b.size) {
		        return false;
		      }
		      var outerEq = true;
		      a.forEach(function(aVal) {
		        if (!outerEq) {
		          return;
		        }
		        var innerEq = false;
		        b.forEach(function(bVal) {
		          if (innerEq) {
		            return;
		          }
		          var originalMemory = memory;
		          memory = [];
		          if (typeEquiv(bVal, aVal)) {
		            innerEq = true;
		          }
		          memory = originalMemory;
		        });
		        if (!innerEq) {
		          outerEq = false;
		        }
		      });
		      return outerEq;
		    },
		    // Define maps a and b to be equivalent if for each key-value pair (aKey, aVal)
		    // in a, there is some key-value pair (bKey, bVal) in b such that
		    // [ aKey, aVal ] and [ bKey, bVal ] are equivalent. Key repetitions are not
		    // counted, so these are equivalent:
		    // a = new Map( [ [ {}, 1 ], [ {}, 1 ], [ [], 1 ] ] );
		    // b = new Map( [ [ {}, 1 ], [ [], 1 ], [ [], 1 ] ] );
		    map: function map(a, b) {
		      if (a.size !== b.size) {
		        return false;
		      }
		      var outerEq = true;
		      a.forEach(function(aVal, aKey) {
		        if (!outerEq) {
		          return;
		        }
		        var innerEq = false;
		        b.forEach(function(bVal, bKey) {
		          if (innerEq) {
		            return;
		          }
		          var originalMemory = memory;
		          memory = [];
		          if (objTypeCallbacks.array([bVal, bKey], [aVal, aKey])) {
		            innerEq = true;
		          }
		          memory = originalMemory;
		        });
		        if (!innerEq) {
		          outerEq = false;
		        }
		      });
		      return outerEq;
		    }
		  };
		  var entryTypeCallbacks = {
		    undefined: useStrictEquality,
		    null: useStrictEquality,
		    boolean: useStrictEquality,
		    number: function number(a, b) {
		      return a === b || isNaN(a) && isNaN(b);
		    },
		    string: useStrictEquality,
		    symbol: useStrictEquality,
		    function: useStrictEquality,
		    object: function object(a, b) {
		      if (memory.some(function(pair) {
		        return pair.a === a && pair.b === b;
		      })) {
		        return true;
		      }
		      memory.push({
		        a,
		        b
		      });
		      var aObjType = objectType(a);
		      var bObjType = objectType(b);
		      if (aObjType !== "object" || bObjType !== "object") {
		        return aObjType === bObjType && objTypeCallbacks[aObjType](a, b);
		      }
		      if (compareConstructors(a, b) === false) {
		        return false;
		      }
		      var aProperties = [];
		      var bProperties = [];
		      for (var i in a) {
		        aProperties.push(i);
		        if (a.constructor !== Object && typeof a.constructor !== "undefined" && typeof a[i] === "function" && typeof b[i] === "function" && a[i].toString() === b[i].toString()) {
		          continue;
		        }
		        if (!typeEquiv(a[i], b[i])) {
		          return false;
		        }
		      }
		      for (var _i in b) {
		        bProperties.push(_i);
		      }
		      return objTypeCallbacks.array(aProperties.sort(), bProperties.sort());
		    }
		  };
		  function typeEquiv(a, b) {
		    if (a === b) {
		      return true;
		    }
		    var aType = _typeof(a);
		    var bType = _typeof(b);
		    if (aType !== bType) {
		      return (aType === "object" && BOXABLE_TYPES.has(objectType(a)) ? a.valueOf() : a) === (bType === "object" && BOXABLE_TYPES.has(objectType(b)) ? b.valueOf() : b);
		    }
		    return entryTypeCallbacks[aType](a, b);
		  }
		  function innerEquiv(a, b) {
		    var res = typeEquiv(a, b);
		    memory = [];
		    return res;
		  }
		  function equiv(a, b) {
		    if (arguments.length === 2) {
		      return a === b || innerEquiv(a, b);
		    }
		    var i = arguments.length - 1;
		    while (i > 0) {
		      if (!innerEquiv(arguments[i - 1], arguments[i])) {
		        return false;
		      }
		      i--;
		    }
		    return true;
		  }
		  var config = {
		    // HTML Reporter: Modify document.title when suite is done
		    altertitle: true,
		    // TODO: Move here from /src/core.js in QUnit 3.
		    // autostart: true,
		    // HTML Reporter: collapse every test except the first failing test
		    // If false, all failing tests will be expanded
		    collapse: true,
		    countStepsAsOne: false,
		    // TODO: Make explicit in QUnit 3.
		    // current: undefined,
		    // whether or not to fail when there are zero tests
		    // defaults to `true`
		    failOnZeroTests: true,
		    // Select by pattern or case-insensitive substring match against "moduleName: testName"
		    filter: void 0,
		    // TODO: Make explicit in QUnit 3.
		    // fixture: undefined,
		    // Depth up-to which object will be dumped
		    maxDepth: 5,
		    // Select case-insensitive match of the module name
		    module: void 0,
		    // HTML Reporter: Select module/test by array of internal IDs
		    moduleId: void 0,
		    // By default, run previously failed tests first
		    // very useful in combination with "Hide passed tests" checked
		    reorder: true,
		    reporters: {},
		    // When enabled, all tests must call expect()
		    requireExpects: false,
		    // By default, scroll to top of the page when suite is done
		    scrolltop: true,
		    // TODO: Make explicit in QUnit 3.
		    // seed: undefined,
		    // The storage module to use for reordering tests
		    storage: localSessionStorage,
		    testId: void 0,
		    // The updateRate controls how often QUnit will yield the main thread
		    // between tests. This is mainly for the benefit of the HTML Reporter,
		    // so that the browser can visually paint DOM changes with test results.
		    // This also helps avoid causing browsers to prompt a warning about
		    // long-running scripts.
		    // TODO: Move here from /src/core.js in QUnit 3.
		    // updateRate: 1000,
		    // HTML Reporter: List of URL parameters that are given visual controls
		    urlConfig: [],
		    // Internal: The first unnamed module
		    //
		    // By being defined as the intial value for currentModule, it is the
		    // receptacle and implied parent for any global tests. It is as if we
		    // called `QUnit.module( "" );` before any other tests were defined.
		    //
		    // If we reach begin() and no tests were put in it, we dequeue it as if it
		    // never existed, and in that case never expose it to the events and
		    // callbacks API.
		    //
		    // When global tests are defined, then this unnamed module will execute
		    // as any other module, including moduleStart/moduleDone events etc.
		    //
		    // Since this module isn't explicitly created by the user, they have no
		    // access to add hooks for it. The hooks object is defined to comply
		    // with internal expectations of test.js, but they will be empty.
		    // To apply hooks, place tests explicitly in a QUnit.module(), and use
		    // its hooks accordingly.
		    //
		    // For global hooks that apply to all tests and all modules, use QUnit.hooks.
		    //
		    // NOTE: This is *not* a "global module". It is not an ancestor of all modules
		    // and tests. It is merely the parent for any tests defined globally,
		    // before the first QUnit.module(). As such, the events for this unnamed
		    // module will fire as normal, right after its last test, and *not* at
		    // the end of the test run.
		    //
		    // NOTE: This also should probably also not become a global module, unless
		    // we keep it out of the public API. For example, it would likely not
		    // improve the user interface and plugin behaviour if all modules became
		    // wrapped between the start and end events of this module, and thus
		    // needlessly add indentation, indirection, or other visible noise.
		    // Unit tests for the callbacks API would detect that as a regression.
		    currentModule: {
		      name: "",
		      tests: [],
		      childModules: [],
		      testsRun: 0,
		      testsIgnored: 0,
		      hooks: {
		        before: [],
		        beforeEach: [],
		        afterEach: [],
		        after: []
		      }
		    },
		    // Internal: Exposed to make resets easier
		    // Ref https://github.com/qunitjs/qunit/pull/1598
		    globalHooks: {},
		    // Internal: ProcessingQueue singleton, created in /src/core.js
		    pq: null,
		    // Internal: Created in /src/core.js
		    // TODO: Move definitions here in QUnit 3.0.
		    // started: 0,
		    // Internal state
		    _event_listeners: /* @__PURE__ */ Object.create(null),
		    _event_memory: {},
		    _deprecated_timeout_shown: false,
		    _deprecated_countEachStep_shown: false,
		    blocking: true,
		    callbacks: {},
		    modules: [],
		    queue: [],
		    stats: {
		      all: 0,
		      bad: 0,
		      testCount: 0
		    }
		  };
		  function readFlatPreconfigBoolean(val, dest) {
		    if (typeof val === "boolean" || typeof val === "string" && val !== "") {
		      config[dest] = val === true || val === "true";
		    }
		  }
		  function readFlatPreconfigNumber(val, dest) {
		    if (typeof val === "number" || typeof val === "string" && /^[0-9]+$/.test(val)) {
		      config[dest] = +val;
		    }
		  }
		  function readFlatPreconfigString(val, dest) {
		    if (typeof val === "string" && val !== "") {
		      config[dest] = val;
		    }
		  }
		  function readFlatPreconfigStringOrBoolean(val, dest) {
		    if (typeof val === "boolean" || typeof val === "string" && val !== "") {
		      config[dest] = val;
		    }
		  }
		  function readFlatPreconfigStringArray(val, dest) {
		    if (typeof val === "string" && val !== "") {
		      config[dest] = [val];
		    }
		  }
		  function readFlatPreconfig(obj) {
		    readFlatPreconfigBoolean(obj.qunit_config_altertitle, "altertitle");
		    readFlatPreconfigBoolean(obj.qunit_config_autostart, "autostart");
		    readFlatPreconfigBoolean(obj.qunit_config_collapse, "collapse");
		    readFlatPreconfigBoolean(obj.qunit_config_failonzerotests, "failOnZeroTests");
		    readFlatPreconfigString(obj.qunit_config_filter, "filter");
		    readFlatPreconfigString(obj.qunit_config_fixture, "fixture");
		    readFlatPreconfigBoolean(obj.qunit_config_hidepassed, "hidepassed");
		    readFlatPreconfigNumber(obj.qunit_config_maxdepth, "maxDepth");
		    readFlatPreconfigString(obj.qunit_config_module, "module");
		    readFlatPreconfigStringArray(obj.qunit_config_moduleid, "moduleId");
		    readFlatPreconfigBoolean(obj.qunit_config_noglobals, "noglobals");
		    readFlatPreconfigBoolean(obj.qunit_config_notrycatch, "notrycatch");
		    readFlatPreconfigBoolean(obj.qunit_config_reorder, "reorder");
		    readFlatPreconfigBoolean(obj.qunit_config_requireexpects, "requireExpects");
		    readFlatPreconfigBoolean(obj.qunit_config_scrolltop, "scrolltop");
		    readFlatPreconfigStringOrBoolean(obj.qunit_config_seed, "seed");
		    readFlatPreconfigStringArray(obj.qunit_config_testid, "testId");
		    readFlatPreconfigNumber(obj.qunit_config_testtimeout, "testTimeout");
		    var reporterKeys = {
		      qunit_config_reporters_console: "console",
		      qunit_config_reporters_tap: "tap"
		    };
		    for (var key in reporterKeys) {
		      var val = obj[key];
		      if (typeof val === "boolean" || typeof val === "string" && val !== "") {
		        var dest = reporterKeys[key];
		        config.reporters[dest] = val === true || val === "true" || val === "1";
		      }
		    }
		  }
		  if (process$1 && "env" in process$1) {
		    readFlatPreconfig(process$1.env);
		  }
		  readFlatPreconfig(g);
		  var preConfig = g && g.QUnit && !g.QUnit.version && g.QUnit.config;
		  if (preConfig) {
		    extend(config, preConfig);
		  }
		  config.modules.push(config.currentModule);
		  if (config.seed === "true" || config.seed === true) {
		    config.seed = (Math.random().toString(36) + "0000000000").slice(2, 12);
		  }
		  var dump = function() {
		    function quote(str) {
		      return '"' + str.toString().replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"';
		    }
		    function literal(o) {
		      return o + "";
		    }
		    function join(pre, arr, post) {
		      var s = dump2.separator();
		      var inner = dump2.indent(1);
		      if (arr.join) {
		        arr = arr.join("," + s + inner);
		      }
		      if (!arr) {
		        return pre + post;
		      }
		      var base = dump2.indent();
		      return [pre, inner + arr, base + post].join(s);
		    }
		    function array(arr, stack) {
		      if (dump2.maxDepth && dump2.depth > dump2.maxDepth) {
		        return "[object Array]";
		      }
		      this.up();
		      var i = arr.length;
		      var ret = new Array(i);
		      while (i--) {
		        ret[i] = this.parse(arr[i], void 0, stack);
		      }
		      this.down();
		      return join("[", ret, "]");
		    }
		    function isArray(obj) {
		      return (
		        // Native Arrays
		        toString.call(obj) === "[object Array]" || // NodeList objects
		        typeof obj.length === "number" && obj.item !== void 0 && (obj.length ? obj.item(0) === obj[0] : obj.item(0) === null && obj[0] === void 0)
		      );
		    }
		    var reName = /^function (\w+)/;
		    var dump2 = {
		      // The objType is used mostly internally, you can fix a (custom) type in advance
		      parse: function parse(obj, objType, stack) {
		        stack = stack || [];
		        var objIndex = stack.indexOf(obj);
		        if (objIndex !== -1) {
		          return "recursion(".concat(objIndex - stack.length, ")");
		        }
		        objType = objType || this.typeOf(obj);
		        var parser = this.parsers[objType];
		        var parserType = _typeof(parser);
		        if (parserType === "function") {
		          stack.push(obj);
		          var res = parser.call(this, obj, stack);
		          stack.pop();
		          return res;
		        }
		        if (parserType === "string") {
		          return parser;
		        }
		        return "[ERROR: Missing QUnit.dump formatter for type " + objType + "]";
		      },
		      typeOf: function typeOf(obj) {
		        var type;
		        if (obj === null) {
		          type = "null";
		        } else if (typeof obj === "undefined") {
		          type = "undefined";
		        } else if (is("regexp", obj)) {
		          type = "regexp";
		        } else if (is("date", obj)) {
		          type = "date";
		        } else if (is("function", obj)) {
		          type = "function";
		        } else if (obj.setInterval !== void 0 && obj.document !== void 0 && obj.nodeType === void 0) {
		          type = "window";
		        } else if (obj.nodeType === 9) {
		          type = "document";
		        } else if (obj.nodeType) {
		          type = "node";
		        } else if (isArray(obj)) {
		          type = "array";
		        } else if (obj.constructor === Error.prototype.constructor) {
		          type = "error";
		        } else {
		          type = _typeof(obj);
		        }
		        return type;
		      },
		      separator: function separator() {
		        if (this.multiline) {
		          return this.HTML ? "<br />" : "\n";
		        } else {
		          return this.HTML ? "&#160;" : " ";
		        }
		      },
		      // Extra can be a number, shortcut for increasing-calling-decreasing
		      indent: function indent(extra) {
		        if (!this.multiline) {
		          return "";
		        }
		        var chr = this.indentChar;
		        if (this.HTML) {
		          chr = chr.replace(/\t/g, "   ").replace(/ /g, "&#160;");
		        }
		        return new Array(this.depth + (extra || 0)).join(chr);
		      },
		      up: function up(a) {
		        this.depth += a || 1;
		      },
		      down: function down(a) {
		        this.depth -= a || 1;
		      },
		      setParser: function setParser(name, parser) {
		        this.parsers[name] = parser;
		      },
		      // The next 3 are exposed so you can use them
		      quote,
		      literal,
		      join,
		      depth: 1,
		      maxDepth: config.maxDepth,
		      // This is the list of parsers, to modify them, use dump.setParser
		      parsers: {
		        window: "[Window]",
		        document: "[Document]",
		        error: function error(_error) {
		          return 'Error("' + _error.message + '")';
		        },
		        // This has been unused since QUnit 1.0.0.
		        // @todo Deprecate and remove.
		        unknown: "[Unknown]",
		        null: "null",
		        undefined: "undefined",
		        function: function _function(fn) {
		          var ret = "function";
		          var name = "name" in fn ? fn.name : (reName.exec(fn) || [])[1];
		          if (name) {
		            ret += " " + name;
		          }
		          ret += "(";
		          ret = [ret, dump2.parse(fn, "functionArgs"), "){"].join("");
		          return join(ret, dump2.parse(fn, "functionCode"), "}");
		        },
		        array,
		        nodelist: array,
		        arguments: array,
		        object: function object(map, stack) {
		          var ret = [];
		          if (dump2.maxDepth && dump2.depth > dump2.maxDepth) {
		            return "[object Object]";
		          }
		          dump2.up();
		          var keys = [];
		          for (var key in map) {
		            keys.push(key);
		          }
		          var nonEnumerableProperties = ["message", "name"];
		          for (var i in nonEnumerableProperties) {
		            var _key = nonEnumerableProperties[i];
		            if (_key in map && !inArray(_key, keys)) {
		              keys.push(_key);
		            }
		          }
		          keys.sort();
		          for (var _i = 0; _i < keys.length; _i++) {
		            var _key2 = keys[_i];
		            var val = map[_key2];
		            ret.push(dump2.parse(_key2, "key") + ": " + dump2.parse(val, void 0, stack));
		          }
		          dump2.down();
		          return join("{", ret, "}");
		        },
		        node: function node(_node) {
		          var open = dump2.HTML ? "&lt;" : "<";
		          var close = dump2.HTML ? "&gt;" : ">";
		          var tag = _node.nodeName.toLowerCase();
		          var ret = open + tag;
		          var attrs = _node.attributes;
		          if (attrs) {
		            for (var i = 0; i < attrs.length; i++) {
		              var val = attrs[i].nodeValue;
		              if (val && val !== "inherit") {
		                ret += " " + attrs[i].nodeName + "=" + dump2.parse(val, "attribute");
		              }
		            }
		          }
		          ret += close;
		          if (_node.nodeType === 3 || _node.nodeType === 4) {
		            ret += _node.nodeValue;
		          }
		          return ret + open + "/" + tag + close;
		        },
		        // Function calls it internally, it's the arguments part of the function
		        functionArgs: function functionArgs(fn) {
		          var l = fn.length;
		          if (!l) {
		            return "";
		          }
		          var args = new Array(l);
		          while (l--) {
		            args[l] = String.fromCharCode(97 + l);
		          }
		          return " " + args.join(", ") + " ";
		        },
		        // Object calls it internally, the key part of an item in a map
		        key: quote,
		        // Function calls it internally, it's the content of the function
		        functionCode: "[code]",
		        // Node calls it internally, it's a html attribute value
		        attribute: quote,
		        string: quote,
		        date: quote,
		        regexp: literal,
		        number: literal,
		        boolean: literal,
		        symbol: function symbol(sym) {
		          return sym.toString();
		        }
		      },
		      // If true, entities are escaped ( <, >, \t, space and \n )
		      HTML: false,
		      // Indentation unit
		      indentChar: "  ",
		      // If true, items in a collection, are separated by a \n, else just a space.
		      multiline: true
		    };
		    return dump2;
		  }();
		  var Logger = {
		    warn: console$1 ? Function.prototype.bind.call(console$1.warn || console$1.log, console$1) : function() {
		    }
		  };
		  var SuiteReport = /* @__PURE__ */ function() {
		    function SuiteReport2(name, parentSuite) {
		      _classCallCheck(this, SuiteReport2);
		      this.name = name;
		      this.fullName = parentSuite ? parentSuite.fullName.concat(name) : [];
		      this.globalFailureCount = 0;
		      this.tests = [];
		      this.childSuites = [];
		      if (parentSuite) {
		        parentSuite.pushChildSuite(this);
		      }
		    }
		    return _createClass(SuiteReport2, [{
		      key: "start",
		      value: function start(recordTime) {
		        if (recordTime) {
		          this._startTime = performance.now();
		        }
		        return {
		          name: this.name,
		          fullName: this.fullName.slice(),
		          tests: this.tests.map(function(test2) {
		            return test2.start();
		          }),
		          childSuites: this.childSuites.map(function(suite) {
		            return suite.start();
		          }),
		          testCounts: {
		            total: this.getTestCounts().total
		          }
		        };
		      }
		    }, {
		      key: "end",
		      value: function end(recordTime) {
		        if (recordTime) {
		          this._endTime = performance.now();
		        }
		        return {
		          name: this.name,
		          fullName: this.fullName.slice(),
		          tests: this.tests.map(function(test2) {
		            return test2.end();
		          }),
		          childSuites: this.childSuites.map(function(suite) {
		            return suite.end();
		          }),
		          testCounts: this.getTestCounts(),
		          runtime: this.getRuntime(),
		          status: this.getStatus()
		        };
		      }
		    }, {
		      key: "pushChildSuite",
		      value: function pushChildSuite(suite) {
		        this.childSuites.push(suite);
		      }
		    }, {
		      key: "pushTest",
		      value: function pushTest(test2) {
		        this.tests.push(test2);
		      }
		    }, {
		      key: "getRuntime",
		      value: function getRuntime() {
		        return Math.round(this._endTime - this._startTime);
		      }
		    }, {
		      key: "getTestCounts",
		      value: function getTestCounts() {
		        var counts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
		          passed: 0,
		          failed: 0,
		          skipped: 0,
		          todo: 0,
		          total: 0
		        };
		        counts.failed += this.globalFailureCount;
		        counts.total += this.globalFailureCount;
		        counts = this.tests.reduce(function(counts2, test2) {
		          if (test2.valid) {
		            counts2[test2.getStatus()]++;
		            counts2.total++;
		          }
		          return counts2;
		        }, counts);
		        return this.childSuites.reduce(function(counts2, suite) {
		          return suite.getTestCounts(counts2);
		        }, counts);
		      }
		    }, {
		      key: "getStatus",
		      value: function getStatus() {
		        var _this$getTestCounts = this.getTestCounts(), total = _this$getTestCounts.total, failed = _this$getTestCounts.failed, skipped = _this$getTestCounts.skipped, todo = _this$getTestCounts.todo;
		        if (failed) {
		          return "failed";
		        } else {
		          if (skipped === total) {
		            return "skipped";
		          } else if (todo === total) {
		            return "todo";
		          } else {
		            return "passed";
		          }
		        }
		      }
		    }]);
		  }();
		  var moduleStack = [];
		  var runSuite = new SuiteReport();
		  function isParentModuleInQueue() {
		    var modulesInQueue = config.modules.filter(function(module2) {
		      return !module2.ignored;
		    }).map(function(module2) {
		      return module2.moduleId;
		    });
		    return moduleStack.some(function(module2) {
		      return modulesInQueue.includes(module2.moduleId);
		    });
		  }
		  function createModule(name, testEnvironment, modifiers) {
		    var parentModule = moduleStack.length ? moduleStack.slice(-1)[0] : null;
		    var moduleName = parentModule !== null ? [parentModule.name, name].join(" > ") : name;
		    var parentSuite = parentModule ? parentModule.suiteReport : runSuite;
		    var skip = parentModule !== null && parentModule.skip || modifiers.skip;
		    var todo = parentModule !== null && parentModule.todo || modifiers.todo;
		    var env = {};
		    if (parentModule) {
		      extend(env, parentModule.testEnvironment);
		    }
		    extend(env, testEnvironment);
		    var module2 = {
		      name: moduleName,
		      parentModule,
		      hooks: {
		        before: [],
		        beforeEach: [],
		        afterEach: [],
		        after: []
		      },
		      testEnvironment: env,
		      tests: [],
		      moduleId: generateHash(moduleName),
		      testsRun: 0,
		      testsIgnored: 0,
		      childModules: [],
		      suiteReport: new SuiteReport(name, parentSuite),
		      // Initialised by test.js when the module start executing,
		      // i.e. before the first test in this module (or a child).
		      stats: null,
		      // Pass along `skip` and `todo` properties from parent module, in case
		      // there is one, to childs. And use own otherwise.
		      // This property will be used to mark own tests and tests of child suites
		      // as either `skipped` or `todo`.
		      skip,
		      todo: skip ? false : todo,
		      ignored: modifiers.ignored || false
		    };
		    if (parentModule) {
		      parentModule.childModules.push(module2);
		    }
		    config.modules.push(module2);
		    return module2;
		  }
		  function setHookFromEnvironment(hooks2, environment, name) {
		    var potentialHook = environment[name];
		    if (typeof potentialHook === "function") {
		      hooks2[name].push(potentialHook);
		    }
		    delete environment[name];
		  }
		  function makeSetHook(module2, hookName) {
		    return function setHook(callback) {
		      if (config.currentModule !== module2) {
		        Logger.warn("The `" + hookName + "` hook was called inside the wrong module (`" + config.currentModule.name + "`). Instead, use hooks provided by the callback to the containing module (`" + module2.name + "`). This will become an error in QUnit 3.0.");
		      }
		      module2.hooks[hookName].push(callback);
		    };
		  }
		  function processModule(name, options, scope) {
		    var modifiers = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
		    if (typeof options === "function") {
		      scope = options;
		      options = void 0;
		    }
		    var module2 = createModule(name, options, modifiers);
		    var testEnvironment = module2.testEnvironment;
		    var hooks2 = module2.hooks;
		    setHookFromEnvironment(hooks2, testEnvironment, "before");
		    setHookFromEnvironment(hooks2, testEnvironment, "beforeEach");
		    setHookFromEnvironment(hooks2, testEnvironment, "afterEach");
		    setHookFromEnvironment(hooks2, testEnvironment, "after");
		    var moduleFns = {
		      before: makeSetHook(module2, "before"),
		      beforeEach: makeSetHook(module2, "beforeEach"),
		      afterEach: makeSetHook(module2, "afterEach"),
		      after: makeSetHook(module2, "after")
		    };
		    var prevModule = config.currentModule;
		    config.currentModule = module2;
		    if (typeof scope === "function") {
		      moduleStack.push(module2);
		      try {
		        var cbReturnValue = scope.call(module2.testEnvironment, moduleFns);
		        if (cbReturnValue && typeof cbReturnValue.then === "function") {
		          Logger.warn("Returning a promise from a module callback is not supported. Instead, use hooks for async behavior. This will become an error in QUnit 3.0.");
		        }
		      } finally {
		        moduleStack.pop();
		        config.currentModule = module2.parentModule || prevModule;
		      }
		    }
		  }
		  var focused$1 = false;
		  function module$1(name, options, scope) {
		    var ignored = focused$1 && !isParentModuleInQueue();
		    processModule(name, options, scope, {
		      ignored
		    });
		  }
		  module$1.only = function() {
		    if (!focused$1) {
		      config.modules.length = 0;
		      config.queue.length = 0;
		      config.currentModule.ignored = true;
		    }
		    focused$1 = true;
		    processModule.apply(void 0, arguments);
		  };
		  module$1.skip = function(name, options, scope) {
		    if (focused$1) {
		      return;
		    }
		    processModule(name, options, scope, {
		      skip: true
		    });
		  };
		  module$1.if = function(name, condition, options, scope) {
		    if (focused$1) {
		      return;
		    }
		    processModule(name, options, scope, {
		      skip: !condition
		    });
		  };
		  module$1.todo = function(name, options, scope) {
		    if (focused$1) {
		      return;
		    }
		    processModule(name, options, scope, {
		      todo: true
		    });
		  };
		  function qunitFileName() {
		    var error = new Error();
		    if (!error.stack) {
		      try {
		        throw error;
		      } catch (err) {
		        error = err;
		      }
		    }
		    return (error.stack || "").replace(/^error$\n/im, "").split("\n")[0].replace(/(:\d+)+\)?/g, "").replace(/.+[/\\]/, "");
		  }
		  var fileName = qunitFileName();
		  function annotateStacktrace(stack, formatInternal) {
		    var eToString = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
		    var frames = stack.split("\n");
		    var annotated = [];
		    if (eToString && eToString.indexOf(frames[0]) !== -1) {
		      annotated.push(frames.shift());
		    }
		    var initialInternal = true;
		    for (var i = 0; i < frames.length; i++) {
		      var frame = frames[i];
		      var isInternal = fileName && frame.indexOf(fileName) !== -1 || // Support Node 16+: ESM-style
		      // "at wrap (node:internal/modules/cjs/loader:1)"
		      frame.indexOf("node:internal/") !== -1 || // Support Node 12-14 (CJS-style)
		      // "at load (internal/modules/cjs/loader.js:7)"
		      frame.match(/^\s+at .+\(internal[^)]*\)$/) || // Support Node 10
		      // "at listOnTimeout (timers.js:263)"
		      // Avoid matching "(C:)" on Windows
		      // Avoid matching "(http:)"
		      frame.match(/^\s+at .+\([a-z]+\.js[:\d]*\)$/);
		      if (!isInternal) {
		        initialInternal = false;
		      }
		      if (!initialInternal) {
		        annotated.push(isInternal ? formatInternal(frame) : frame);
		      }
		    }
		    return annotated.join("\n");
		  }
		  function extractStacktrace(e, offset) {
		    offset = offset === void 0 ? 4 : offset;
		    if (e && e.stack) {
		      var stack = e.stack.split("\n");
		      if (/^error$/i.test(stack[0])) {
		        stack.shift();
		      }
		      if (fileName) {
		        var include = [];
		        for (var i = offset; i < stack.length; i++) {
		          if (stack[i].indexOf(fileName) !== -1) {
		            break;
		          }
		          include.push(stack[i]);
		        }
		        if (include.length) {
		          return include.join("\n");
		        }
		      }
		      return stack[offset];
		    }
		  }
		  function sourceFromStacktrace(offset) {
		    var error = new Error();
		    if (!error.stack) {
		      try {
		        throw error;
		      } catch (err) {
		        error = err;
		      }
		    }
		    return extractStacktrace(error, offset);
		  }
		  var Assert = /* @__PURE__ */ function() {
		    function Assert2(testContext) {
		      _classCallCheck(this, Assert2);
		      this.test = testContext;
		    }
		    return _createClass(Assert2, [{
		      key: "timeout",
		      value: function timeout(duration) {
		        if (typeof duration !== "number") {
		          throw new Error("You must pass a number as the duration to assert.timeout");
		        }
		        this.test.timeout = duration;
		        if (config.timeout) {
		          clearTimeout(config.timeout);
		          config.timeout = null;
		          if (config.timeoutHandler && this.test.timeout > 0) {
		            this.test.internalResetTimeout(this.test.timeout);
		          }
		        }
		      }
		      // Documents a "step", which is a string value, in a test as a passing assertion
		    }, {
		      key: "step",
		      value: function step(message) {
		        var assertionMessage = message;
		        var result = !!message;
		        this.test.steps.push(message);
		        if (typeof message === "undefined" || message === "") {
		          assertionMessage = "You must provide a message to assert.step";
		        } else if (typeof message !== "string") {
		          assertionMessage = "You must provide a string value to assert.step";
		          result = false;
		        }
		        this.pushResult({
		          result,
		          message: assertionMessage
		        });
		      }
		      // Verifies the steps in a test match a given array of string values
		    }, {
		      key: "verifySteps",
		      value: function verifySteps(steps, message) {
		        var actualStepsClone = this.test.steps.slice();
		        this.deepEqual(actualStepsClone, steps, message);
		        this.test.stepsCount += this.test.steps.length;
		        this.test.steps.length = 0;
		      }
		    }, {
		      key: "expect",
		      value: function expect(asserts) {
		        if (arguments.length === 1) {
		          this.test.expected = asserts;
		        } else {
		          return this.test.expected;
		        }
		      }
		      // Create a new async pause and return a new function that can release the pause.
		    }, {
		      key: "async",
		      value: function async(count) {
		        if (count === void 0) {
		          count = 1;
		        } else if (typeof count !== "number") {
		          throw new TypeError("async takes number as an input");
		        }
		        var requiredCalls = count;
		        return this.test.internalStop(requiredCalls);
		      }
		    }, {
		      key: "closeTo",
		      value: function closeTo(actual, expected, delta, message) {
		        if (typeof delta !== "number") {
		          throw new TypeError("closeTo() requires a delta argument");
		        }
		        this.pushResult({
		          result: Math.abs(actual - expected) <= delta,
		          actual,
		          expected,
		          message: message || "value should be within ".concat(delta, " inclusive")
		        });
		      }
		      // Alias of pushResult.
		    }, {
		      key: "push",
		      value: function push(result, actual, expected, message, negative) {
		        var currentAssert = this instanceof Assert2 ? this : config.current.assert;
		        return currentAssert.pushResult({
		          result,
		          actual,
		          expected,
		          message,
		          negative
		        });
		      }
		      // Public API to internal test.pushResult()
		    }, {
		      key: "pushResult",
		      value: function pushResult(resultInfo) {
		        var assert = this;
		        var currentTest = assert instanceof Assert2 && assert.test || config.current;
		        if (!currentTest) {
		          throw new Error("assertion outside test context, in " + sourceFromStacktrace(2));
		        }
		        if (!(assert instanceof Assert2)) {
		          assert = currentTest.assert;
		        }
		        return assert.test.pushResult(resultInfo);
		      }
		    }, {
		      key: "ok",
		      value: function ok(result, message) {
		        if (!message) {
		          message = result ? "okay" : "failed, expected argument to be truthy, was: ".concat(dump.parse(result));
		        }
		        this.pushResult({
		          result: !!result,
		          actual: result,
		          expected: true,
		          message
		        });
		      }
		    }, {
		      key: "notOk",
		      value: function notOk(result, message) {
		        if (!message) {
		          message = !result ? "okay" : "failed, expected argument to be falsy, was: ".concat(dump.parse(result));
		        }
		        this.pushResult({
		          result: !result,
		          actual: result,
		          expected: false,
		          message
		        });
		      }
		    }, {
		      key: "true",
		      value: function _true(result, message) {
		        this.pushResult({
		          result: result === true,
		          actual: result,
		          expected: true,
		          message
		        });
		      }
		    }, {
		      key: "false",
		      value: function _false(result, message) {
		        this.pushResult({
		          result: result === false,
		          actual: result,
		          expected: false,
		          message
		        });
		      }
		    }, {
		      key: "equal",
		      value: function equal(actual, expected, message) {
		        this.pushResult({
		          // eslint-disable-next-line eqeqeq
		          result: expected == actual,
		          actual,
		          expected,
		          message
		        });
		      }
		    }, {
		      key: "notEqual",
		      value: function notEqual(actual, expected, message) {
		        this.pushResult({
		          // eslint-disable-next-line eqeqeq
		          result: expected != actual,
		          actual,
		          expected,
		          message,
		          negative: true
		        });
		      }
		    }, {
		      key: "propEqual",
		      value: function propEqual(actual, expected, message) {
		        actual = objectValues(actual);
		        expected = objectValues(expected);
		        this.pushResult({
		          result: equiv(actual, expected),
		          actual,
		          expected,
		          message
		        });
		      }
		    }, {
		      key: "notPropEqual",
		      value: function notPropEqual(actual, expected, message) {
		        actual = objectValues(actual);
		        expected = objectValues(expected);
		        this.pushResult({
		          result: !equiv(actual, expected),
		          actual,
		          expected,
		          message,
		          negative: true
		        });
		      }
		    }, {
		      key: "propContains",
		      value: function propContains(actual, expected, message) {
		        actual = objectValuesSubset(actual, expected);
		        expected = objectValues(expected, false);
		        this.pushResult({
		          result: equiv(actual, expected),
		          actual,
		          expected,
		          message
		        });
		      }
		    }, {
		      key: "notPropContains",
		      value: function notPropContains(actual, expected, message) {
		        actual = objectValuesSubset(actual, expected);
		        expected = objectValues(expected);
		        this.pushResult({
		          result: !equiv(actual, expected),
		          actual,
		          expected,
		          message,
		          negative: true
		        });
		      }
		    }, {
		      key: "deepEqual",
		      value: function deepEqual(actual, expected, message) {
		        this.pushResult({
		          result: equiv(actual, expected),
		          actual,
		          expected,
		          message
		        });
		      }
		    }, {
		      key: "notDeepEqual",
		      value: function notDeepEqual(actual, expected, message) {
		        this.pushResult({
		          result: !equiv(actual, expected),
		          actual,
		          expected,
		          message,
		          negative: true
		        });
		      }
		    }, {
		      key: "strictEqual",
		      value: function strictEqual(actual, expected, message) {
		        this.pushResult({
		          result: expected === actual,
		          actual,
		          expected,
		          message
		        });
		      }
		    }, {
		      key: "notStrictEqual",
		      value: function notStrictEqual(actual, expected, message) {
		        this.pushResult({
		          result: expected !== actual,
		          actual,
		          expected,
		          message,
		          negative: true
		        });
		      }
		    }, {
		      key: "throws",
		      value: function throws(block, expected, message) {
		        var _validateExpectedExce = validateExpectedExceptionArgs(expected, message, "throws");
		        var _validateExpectedExce2 = _slicedToArray(_validateExpectedExce, 2);
		        expected = _validateExpectedExce2[0];
		        message = _validateExpectedExce2[1];
		        var currentTest = this instanceof Assert2 && this.test || config.current;
		        if (typeof block !== "function") {
		          currentTest.assert.pushResult({
		            result: false,
		            actual: block,
		            message: 'The value provided to `assert.throws` in "' + currentTest.testName + '" was not a function.'
		          });
		          return;
		        }
		        var actual;
		        var result = false;
		        currentTest.ignoreGlobalErrors = true;
		        try {
		          block.call(currentTest.testEnvironment);
		        } catch (e) {
		          actual = e;
		        }
		        currentTest.ignoreGlobalErrors = false;
		        if (actual) {
		          var _validateException = validateException(actual, expected, message);
		          var _validateException2 = _slicedToArray(_validateException, 3);
		          result = _validateException2[0];
		          expected = _validateException2[1];
		          message = _validateException2[2];
		        }
		        currentTest.assert.pushResult({
		          result,
		          // undefined if it didn't throw
		          actual: actual && errorString(actual),
		          expected,
		          message
		        });
		      }
		    }, {
		      key: "rejects",
		      value: function rejects(promise, expected, message) {
		        var _validateExpectedExce3 = validateExpectedExceptionArgs(expected, message, "rejects");
		        var _validateExpectedExce4 = _slicedToArray(_validateExpectedExce3, 2);
		        expected = _validateExpectedExce4[0];
		        message = _validateExpectedExce4[1];
		        var currentTest = this instanceof Assert2 && this.test || config.current;
		        var then = promise && promise.then;
		        if (typeof then !== "function") {
		          currentTest.assert.pushResult({
		            result: false,
		            message: 'The value provided to `assert.rejects` in "' + currentTest.testName + '" was not a promise.',
		            actual: promise
		          });
		          return;
		        }
		        var done = this.async();
		        return then.call(promise, function handleFulfillment() {
		          currentTest.assert.pushResult({
		            result: false,
		            message: 'The promise returned by the `assert.rejects` callback in "' + currentTest.testName + '" did not reject.',
		            actual: promise
		          });
		          done();
		        }, function handleRejection(actual) {
		          var result;
		          var _validateException3 = validateException(actual, expected, message);
		          var _validateException4 = _slicedToArray(_validateException3, 3);
		          result = _validateException4[0];
		          expected = _validateException4[1];
		          message = _validateException4[2];
		          currentTest.assert.pushResult({
		            result,
		            // leave rejection value of undefined as-is
		            actual: actual && errorString(actual),
		            expected,
		            message
		          });
		          done();
		        });
		      }
		    }]);
		  }();
		  function validateExpectedExceptionArgs(expected, message, assertionMethod) {
		    var expectedType = objectType(expected);
		    if (expectedType === "string") {
		      if (message === void 0) {
		        message = expected;
		        expected = void 0;
		        return [expected, message];
		      } else {
		        throw new Error("assert." + assertionMethod + " does not accept a string value for the expected argument.\nUse a non-string object value (e.g. RegExp or validator function) instead if necessary.");
		      }
		    }
		    var valid = !expected || // TODO: be more explicit here
		    expectedType === "regexp" || expectedType === "function" || expectedType === "object";
		    if (!valid) {
		      throw new Error("Invalid expected value type (" + expectedType + ") provided to assert." + assertionMethod + ".");
		    }
		    return [expected, message];
		  }
		  function validateException(actual, expected, message) {
		    var result = false;
		    var expectedType = objectType(expected);
		    if (!expected) {
		      result = true;
		    } else if (expectedType === "regexp") {
		      result = expected.test(errorString(actual));
		      expected = String(expected);
		    } else if (expectedType === "function" && expected.prototype !== void 0 && actual instanceof expected) {
		      result = true;
		    } else if (expectedType === "object") {
		      result = actual instanceof expected.constructor && actual.name === expected.name && actual.message === expected.message;
		      expected = errorString(expected);
		    } else if (expectedType === "function") {
		      try {
		        result = expected.call({}, actual) === true;
		        expected = null;
		      } catch (e) {
		        expected = errorString(e);
		      }
		    }
		    return [result, expected, message];
		  }
		  Assert.prototype.raises = Assert.prototype["throws"];
		  var SUPPORTED_EVENTS = ["error", "runStart", "suiteStart", "testStart", "assertion", "testEnd", "suiteEnd", "runEnd"];
		  var MEMORY_EVENTS = ["error", "runEnd"];
		  function emit(eventName, data) {
		    if (typeof eventName !== "string") {
		      throw new TypeError("eventName must be a string when emitting an event");
		    }
		    var originalCallbacks = config._event_listeners[eventName];
		    var callbacks = originalCallbacks ? _toConsumableArray(originalCallbacks) : [];
		    for (var i = 0; i < callbacks.length; i++) {
		      callbacks[i](data);
		    }
		    if (inArray(eventName, MEMORY_EVENTS)) {
		      config._event_memory[eventName] = data;
		    }
		  }
		  function on(eventName, callback) {
		    if (typeof eventName !== "string") {
		      throw new TypeError("eventName must be a string when registering a listener");
		    } else if (!inArray(eventName, SUPPORTED_EVENTS)) {
		      var events = SUPPORTED_EVENTS.join(", ");
		      throw new Error('"'.concat(eventName, '" is not a valid event; must be one of: ').concat(events, "."));
		    } else if (typeof callback !== "function") {
		      throw new TypeError("callback must be a function when registering a listener");
		    }
		    var listeners = config._event_listeners[eventName] || (config._event_listeners[eventName] = []);
		    if (!inArray(callback, listeners)) {
		      listeners.push(callback);
		      if (config._event_memory[eventName] !== void 0) {
		        callback(config._event_memory[eventName]);
		      }
		    }
		  }
		  var commonjsGlobal$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof commonjsGlobal !== "undefined" ? commonjsGlobal : typeof self !== "undefined" ? self : {};
		  function commonjsRequire(path) {
		    throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
		  }
		  var promisePolyfill = {
		    exports: {}
		  };
		  (function() {
		    var globalNS = function() {
		      if (typeof globalThis !== "undefined") {
		        return globalThis;
		      }
		      if (typeof self !== "undefined") {
		        return self;
		      }
		      if (typeof window !== "undefined") {
		        return window;
		      }
		      if (typeof commonjsGlobal$1 !== "undefined") {
		        return commonjsGlobal$1;
		      }
		      throw new Error("unable to locate global object");
		    }();
		    if (typeof globalNS["Promise"] === "function") {
		      promisePolyfill.exports = globalNS["Promise"];
		      return;
		    }
		    function finallyConstructor(callback) {
		      var constructor = this.constructor;
		      return this.then(function(value) {
		        return constructor.resolve(callback()).then(function() {
		          return value;
		        });
		      }, function(reason) {
		        return constructor.resolve(callback()).then(function() {
		          return constructor.reject(reason);
		        });
		      });
		    }
		    function allSettled(arr) {
		      var P = this;
		      return new P(function(resolve2, reject2) {
		        if (!(arr && typeof arr.length !== "undefined")) {
		          return reject2(new TypeError(_typeof(arr) + " " + arr + " is not iterable(cannot read property Symbol(Symbol.iterator))"));
		        }
		        var args = Array.prototype.slice.call(arr);
		        if (args.length === 0) return resolve2([]);
		        var remaining = args.length;
		        function res(i2, val) {
		          if (val && (_typeof(val) === "object" || typeof val === "function")) {
		            var then = val.then;
		            if (typeof then === "function") {
		              then.call(val, function(val2) {
		                res(i2, val2);
		              }, function(e) {
		                args[i2] = {
		                  status: "rejected",
		                  reason: e
		                };
		                if (--remaining === 0) {
		                  resolve2(args);
		                }
		              });
		              return;
		            }
		          }
		          args[i2] = {
		            status: "fulfilled",
		            value: val
		          };
		          if (--remaining === 0) {
		            resolve2(args);
		          }
		        }
		        for (var i = 0; i < args.length; i++) {
		          res(i, args[i]);
		        }
		      });
		    }
		    var setTimeoutFunc = setTimeout;
		    function isArray(x) {
		      return Boolean(x && typeof x.length !== "undefined");
		    }
		    function noop() {
		    }
		    function bind(fn, thisArg) {
		      return function() {
		        fn.apply(thisArg, arguments);
		      };
		    }
		    function Promise2(fn) {
		      if (!(this instanceof Promise2)) throw new TypeError("Promises must be constructed via new");
		      if (typeof fn !== "function") throw new TypeError("not a function");
		      this._state = 0;
		      this._handled = false;
		      this._value = void 0;
		      this._deferreds = [];
		      doResolve(fn, this);
		    }
		    function handle(self2, deferred) {
		      while (self2._state === 3) {
		        self2 = self2._value;
		      }
		      if (self2._state === 0) {
		        self2._deferreds.push(deferred);
		        return;
		      }
		      self2._handled = true;
		      Promise2._immediateFn(function() {
		        var cb = self2._state === 1 ? deferred.onFulfilled : deferred.onRejected;
		        if (cb === null) {
		          (self2._state === 1 ? resolve : reject)(deferred.promise, self2._value);
		          return;
		        }
		        var ret;
		        try {
		          ret = cb(self2._value);
		        } catch (e) {
		          reject(deferred.promise, e);
		          return;
		        }
		        resolve(deferred.promise, ret);
		      });
		    }
		    function resolve(self2, newValue) {
		      try {
		        if (newValue === self2) throw new TypeError("A promise cannot be resolved with itself.");
		        if (newValue && (_typeof(newValue) === "object" || typeof newValue === "function")) {
		          var then = newValue.then;
		          if (newValue instanceof Promise2) {
		            self2._state = 3;
		            self2._value = newValue;
		            finale(self2);
		            return;
		          } else if (typeof then === "function") {
		            doResolve(bind(then, newValue), self2);
		            return;
		          }
		        }
		        self2._state = 1;
		        self2._value = newValue;
		        finale(self2);
		      } catch (e) {
		        reject(self2, e);
		      }
		    }
		    function reject(self2, newValue) {
		      self2._state = 2;
		      self2._value = newValue;
		      finale(self2);
		    }
		    function finale(self2) {
		      if (self2._state === 2 && self2._deferreds.length === 0) {
		        Promise2._immediateFn(function() {
		          if (!self2._handled) {
		            Promise2._unhandledRejectionFn(self2._value);
		          }
		        });
		      }
		      for (var i = 0, len = self2._deferreds.length; i < len; i++) {
		        handle(self2, self2._deferreds[i]);
		      }
		      self2._deferreds = null;
		    }
		    function Handler(onFulfilled, onRejected, promise) {
		      this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
		      this.onRejected = typeof onRejected === "function" ? onRejected : null;
		      this.promise = promise;
		    }
		    function doResolve(fn, self2) {
		      var done = false;
		      try {
		        fn(function(value) {
		          if (done) return;
		          done = true;
		          resolve(self2, value);
		        }, function(reason) {
		          if (done) return;
		          done = true;
		          reject(self2, reason);
		        });
		      } catch (ex) {
		        if (done) return;
		        done = true;
		        reject(self2, ex);
		      }
		    }
		    Promise2.prototype["catch"] = function(onRejected) {
		      return this.then(null, onRejected);
		    };
		    Promise2.prototype.then = function(onFulfilled, onRejected) {
		      var prom = new this.constructor(noop);
		      handle(this, new Handler(onFulfilled, onRejected, prom));
		      return prom;
		    };
		    Promise2.prototype["finally"] = finallyConstructor;
		    Promise2.all = function(arr) {
		      return new Promise2(function(resolve2, reject2) {
		        if (!isArray(arr)) {
		          return reject2(new TypeError("Promise.all accepts an array"));
		        }
		        var args = Array.prototype.slice.call(arr);
		        if (args.length === 0) return resolve2([]);
		        var remaining = args.length;
		        function res(i2, val) {
		          try {
		            if (val && (_typeof(val) === "object" || typeof val === "function")) {
		              var then = val.then;
		              if (typeof then === "function") {
		                then.call(val, function(val2) {
		                  res(i2, val2);
		                }, reject2);
		                return;
		              }
		            }
		            args[i2] = val;
		            if (--remaining === 0) {
		              resolve2(args);
		            }
		          } catch (ex) {
		            reject2(ex);
		          }
		        }
		        for (var i = 0; i < args.length; i++) {
		          res(i, args[i]);
		        }
		      });
		    };
		    Promise2.allSettled = allSettled;
		    Promise2.resolve = function(value) {
		      if (value && _typeof(value) === "object" && value.constructor === Promise2) {
		        return value;
		      }
		      return new Promise2(function(resolve2) {
		        resolve2(value);
		      });
		    };
		    Promise2.reject = function(value) {
		      return new Promise2(function(resolve2, reject2) {
		        reject2(value);
		      });
		    };
		    Promise2.race = function(arr) {
		      return new Promise2(function(resolve2, reject2) {
		        if (!isArray(arr)) {
		          return reject2(new TypeError("Promise.race accepts an array"));
		        }
		        for (var i = 0, len = arr.length; i < len; i++) {
		          Promise2.resolve(arr[i]).then(resolve2, reject2);
		        }
		      });
		    };
		    if (typeof setImmediate === "function") {
		      var setImmediateFunc = setImmediate;
		      Promise2._immediateFn = function(fn) {
		        setImmediateFunc(fn);
		      };
		    } else {
		      Promise2._immediateFn = function(fn) {
		        setTimeoutFunc(fn, 0);
		      };
		    }
		    Promise2._unhandledRejectionFn = function _unhandledRejectionFn(err) {
		      if (typeof console !== "undefined" && console) {
		        console.warn("Possible Unhandled Promise Rejection:", err);
		      }
		    };
		    promisePolyfill.exports = Promise2;
		  })();
		  var _Promise = promisePolyfill.exports;
		  function registerLoggingCallbacks(obj) {
		    var callbackNames = ["begin", "done", "log", "testStart", "testDone", "moduleStart", "moduleDone"];
		    function registerLoggingCallback(key2) {
		      return function loggingCallback(callback) {
		        if (typeof callback !== "function") {
		          throw new Error("Callback parameter must be a function");
		        }
		        config.callbacks[key2].push(callback);
		      };
		    }
		    for (var i = 0; i < callbackNames.length; i++) {
		      var key = callbackNames[i];
		      if (typeof config.callbacks[key] === "undefined") {
		        config.callbacks[key] = [];
		      }
		      obj[key] = registerLoggingCallback(key);
		    }
		  }
		  function runLoggingCallbacks(key, args) {
		    var callbacks = config.callbacks[key];
		    if (key === "log") {
		      callbacks.map(function(callback) {
		        return callback(args);
		      });
		      return;
		    }
		    var promiseChain = _Promise.resolve();
		    callbacks.forEach(function(callback) {
		      promiseChain = promiseChain.then(function() {
		        return _Promise.resolve(callback(args));
		      });
		    });
		    return promiseChain;
		  }
		  var TestReport = /* @__PURE__ */ function() {
		    function TestReport2(name, suite, options) {
		      _classCallCheck(this, TestReport2);
		      this.name = name;
		      this.suiteName = suite.name;
		      this.fullName = suite.fullName.concat(name);
		      this.runtime = 0;
		      this.assertions = [];
		      this.skipped = !!options.skip;
		      this.todo = !!options.todo;
		      this.valid = options.valid;
		      this._startTime = 0;
		      this._endTime = 0;
		      suite.pushTest(this);
		    }
		    return _createClass(TestReport2, [{
		      key: "start",
		      value: function start(recordTime) {
		        if (recordTime) {
		          this._startTime = performance.now();
		        }
		        return {
		          name: this.name,
		          suiteName: this.suiteName,
		          fullName: this.fullName.slice()
		        };
		      }
		    }, {
		      key: "end",
		      value: function end(recordTime) {
		        if (recordTime) {
		          this._endTime = performance.now();
		        }
		        return extend(this.start(), {
		          runtime: this.getRuntime(),
		          status: this.getStatus(),
		          errors: this.getFailedAssertions(),
		          assertions: this.getAssertions()
		        });
		      }
		    }, {
		      key: "pushAssertion",
		      value: function pushAssertion(assertion) {
		        this.assertions.push(assertion);
		      }
		    }, {
		      key: "getRuntime",
		      value: function getRuntime() {
		        return Math.round(this._endTime - this._startTime);
		      }
		    }, {
		      key: "getStatus",
		      value: function getStatus() {
		        if (this.skipped) {
		          return "skipped";
		        }
		        var testPassed = this.getFailedAssertions().length > 0 ? this.todo : !this.todo;
		        if (!testPassed) {
		          return "failed";
		        } else if (this.todo) {
		          return "todo";
		        } else {
		          return "passed";
		        }
		      }
		    }, {
		      key: "getFailedAssertions",
		      value: function getFailedAssertions() {
		        return this.assertions.filter(function(assertion) {
		          return !assertion.passed;
		        });
		      }
		    }, {
		      key: "getAssertions",
		      value: function getAssertions() {
		        return this.assertions.slice();
		      }
		      // Remove actual and expected values from assertions. This is to prevent
		      // leaking memory throughout a test suite.
		    }, {
		      key: "slimAssertions",
		      value: function slimAssertions() {
		        this.assertions = this.assertions.map(function(assertion) {
		          delete assertion.actual;
		          delete assertion.expected;
		          return assertion;
		        });
		      }
		    }]);
		  }();
		  function Test(settings) {
		    this.expected = null;
		    this.assertions = [];
		    this.module = config.currentModule;
		    this.steps = [];
		    this.stepsCount = 0;
		    this.timeout = void 0;
		    this.data = void 0;
		    this.withData = false;
		    this.pauses = new StringMap();
		    this.nextPauseId = 1;
		    this.stackOffset = 3;
		    extend(this, settings);
		    if (this.module.skip) {
		      this.skip = true;
		      this.todo = false;
		    } else if (this.module.todo && !this.skip) {
		      this.todo = true;
		    }
		    if (config.pq.finished) {
		      Logger.warn("Unexpected test after runEnd. This is unstable and will fail in QUnit 3.0.");
		      return;
		    }
		    if (!this.skip && typeof this.callback !== "function") {
		      var method = this.todo ? "QUnit.todo" : "QUnit.test";
		      throw new TypeError("You must provide a callback to ".concat(method, '("').concat(this.testName, '")'));
		    }
		    for (var i = 0, l = this.module.tests; i < l.length; i++) {
		      if (this.module.tests[i].name === this.testName) {
		        this.testName += " ";
		      }
		    }
		    this.testId = generateHash(this.module.name, this.testName);
		    ++Test.count;
		    this.errorForStack = new Error();
		    if (this.callback && this.callback.validTest) {
		      this.errorForStack.stack = void 0;
		    }
		    this.testReport = new TestReport(this.testName, this.module.suiteReport, {
		      todo: this.todo,
		      skip: this.skip,
		      valid: this.valid()
		    });
		    this.module.tests.push({
		      name: this.testName,
		      testId: this.testId,
		      skip: !!this.skip
		    });
		    if (this.skip) {
		      this.callback = function() {
		      };
		      this.async = false;
		      this.expected = 0;
		    } else {
		      this.assert = new Assert(this);
		    }
		  }
		  Test.count = 0;
		  function getNotStartedModules(startModule) {
		    var module2 = startModule;
		    var modules = [];
		    while (module2 && module2.testsRun === 0) {
		      modules.push(module2);
		      module2 = module2.parentModule;
		    }
		    return modules.reverse();
		  }
		  Test.prototype = {
		    // Use a getter to avoid computing a stack trace (which can be expensive),
		    // This is displayed by the HTML Reporter, but most other integrations do
		    // not access it.
		    get stack() {
		      return extractStacktrace(this.errorForStack, this.stackOffset);
		    },
		    before: function before() {
		      var _this = this;
		      var module2 = this.module;
		      var notStartedModules = getNotStartedModules(module2);
		      var moduleStartChain = _Promise.resolve();
		      notStartedModules.forEach(function(startModule) {
		        moduleStartChain = moduleStartChain.then(function() {
		          startModule.stats = {
		            all: 0,
		            bad: 0,
		            started: performance.now()
		          };
		          emit("suiteStart", startModule.suiteReport.start(true));
		          return runLoggingCallbacks("moduleStart", {
		            name: startModule.name,
		            tests: startModule.tests
		          });
		        });
		      });
		      return moduleStartChain.then(function() {
		        config.current = _this;
		        _this.testEnvironment = extend({}, module2.testEnvironment);
		        _this.started = performance.now();
		        emit("testStart", _this.testReport.start(true));
		        return runLoggingCallbacks("testStart", {
		          name: _this.testName,
		          module: module2.name,
		          testId: _this.testId,
		          previousFailure: _this.previousFailure
		        }).then(function() {
		          if (!config.pollution) {
		            saveGlobal();
		          }
		        });
		      });
		    },
		    run: function run2() {
		      config.current = this;
		      if (config.notrycatch) {
		        runTest(this);
		        return;
		      }
		      try {
		        runTest(this);
		      } catch (e) {
		        this.pushFailure("Died on test #" + (this.assertions.length + 1) + ": " + (e.message || e) + "\n" + this.stack, extractStacktrace(e, 0));
		        saveGlobal();
		        if (config.blocking) {
		          internalRecover(this);
		        }
		      }
		      function runTest(test2) {
		        var promise;
		        if (test2.withData) {
		          promise = test2.callback.call(test2.testEnvironment, test2.assert, test2.data);
		        } else {
		          promise = test2.callback.call(test2.testEnvironment, test2.assert);
		        }
		        test2.resolvePromise(promise);
		        if (test2.timeout === 0 && test2.pauses.size > 0) {
		          pushFailure("Test did not finish synchronously even though assert.timeout( 0 ) was used.", sourceFromStacktrace(2));
		        }
		      }
		    },
		    after: function after() {
		      checkPollution();
		    },
		    queueGlobalHook: function queueGlobalHook(hook, hookName) {
		      var _this2 = this;
		      var runHook = function runHook2() {
		        config.current = _this2;
		        var promise;
		        if (config.notrycatch) {
		          promise = hook.call(_this2.testEnvironment, _this2.assert);
		        } else {
		          try {
		            promise = hook.call(_this2.testEnvironment, _this2.assert);
		          } catch (error) {
		            _this2.pushFailure("Global " + hookName + " failed on " + _this2.testName + ": " + errorString(error), extractStacktrace(error, 0));
		            return;
		          }
		        }
		        _this2.resolvePromise(promise, hookName);
		      };
		      return runHook;
		    },
		    queueHook: function queueHook(hook, hookName, hookOwner) {
		      var _this3 = this;
		      var callHook = function callHook2() {
		        var promise = hook.call(_this3.testEnvironment, _this3.assert);
		        _this3.resolvePromise(promise, hookName);
		      };
		      var runHook = function runHook2() {
		        if (hookName === "before") {
		          if (hookOwner.testsRun !== 0) {
		            return;
		          }
		          _this3.preserveEnvironment = true;
		        }
		        if (hookName === "after" && !lastTestWithinModuleExecuted(hookOwner) && (config.queue.length > 0 || config.pq.taskCount() > 2)) {
		          return;
		        }
		        config.current = _this3;
		        if (config.notrycatch) {
		          callHook();
		          return;
		        }
		        try {
		          callHook();
		        } catch (error) {
		          _this3.pushFailure(hookName + " failed on " + _this3.testName + ": " + (error.message || error), extractStacktrace(error, 0));
		        }
		      };
		      return runHook;
		    },
		    // Currently only used for module level hooks, can be used to add global level ones
		    hooks: function hooks2(handler) {
		      var hooks3 = [];
		      function processGlobalhooks(test2) {
		        if ((handler === "beforeEach" || handler === "afterEach") && config.globalHooks[handler]) {
		          for (var i = 0; i < config.globalHooks[handler].length; i++) {
		            hooks3.push(test2.queueGlobalHook(config.globalHooks[handler][i], handler));
		          }
		        }
		      }
		      function processHooks(test2, module2) {
		        if (module2.parentModule) {
		          processHooks(test2, module2.parentModule);
		        }
		        if (module2.hooks[handler].length) {
		          for (var i = 0; i < module2.hooks[handler].length; i++) {
		            hooks3.push(test2.queueHook(module2.hooks[handler][i], handler, module2));
		          }
		        }
		      }
		      if (!this.skip) {
		        processGlobalhooks(this);
		        processHooks(this, this.module);
		      }
		      return hooks3;
		    },
		    finish: function finish() {
		      config.current = this;
		      if (setTimeout$1) {
		        clearTimeout(this.timeout);
		        config.timeoutHandler = null;
		      }
		      this.callback = void 0;
		      if (this.steps.length) {
		        var stepsList = this.steps.join(", ");
		        this.pushFailure("Expected assert.verifySteps() to be called before end of test " + "after using assert.step(). Unverified steps: ".concat(stepsList), this.stack);
		      }
		      if (!config._deprecated_countEachStep_shown && !config.countStepsAsOne && this.expected !== null && this.stepsCount) {
		        config._deprecated_countEachStep_shown = true;
		        if (config.requireExpects) {
		          Logger.warn("Counting each assert.step() for assert.expect() is changing in QUnit 3.0. You can enable QUnit.config.countStepsAsOne to prepare for the upgrade. https://qunitjs.com/api/assert/expect/");
		        } else {
		          Logger.warn("Counting each assert.step() for assert.expect() is changing in QUnit 3.0. Omit assert.expect() from tests that use assert.step(), or enable QUnit.config.countStepsAsOne to prepare for the upgrade. https://qunitjs.com/api/assert/expect/");
		        }
		      }
		      var actualCountForExpect = config.countStepsAsOne ? this.assertions.length - this.stepsCount : this.assertions.length;
		      if (config.requireExpects && this.expected === null) {
		        this.pushFailure("Expected number of assertions to be defined, but expect() was not called.", this.stack);
		      } else if (this.expected !== null && this.expected !== actualCountForExpect && this.stepsCount && this.expected === this.assertions.length - this.stepsCount && !config.countStepsAsOne) {
		        this.pushFailure("Expected " + this.expected + " assertions, but " + actualCountForExpect + " were run\nIt looks like you might prefer to enable QUnit.config.countStepsAsOne, which will become the default in QUnit 3.0. https://qunitjs.com/api/assert/expect/", this.stack);
		      } else if (this.expected !== null && this.expected !== actualCountForExpect && this.stepsCount && this.expected === this.assertions.length && config.countStepsAsOne) {
		        this.pushFailure("Expected " + this.expected + " assertions, but " + actualCountForExpect + " were run\nRemember that with QUnit.config.countStepsAsOne and in QUnit 3.0, steps no longer count as separate assertions. https://qunitjs.com/api/assert/expect/", this.stack);
		      } else if (this.expected !== null && this.expected !== actualCountForExpect) {
		        this.pushFailure("Expected " + this.expected + " assertions, but " + actualCountForExpect + " were run", this.stack);
		      } else if (this.expected === null && !actualCountForExpect) {
		        this.pushFailure("Expected at least one assertion, but none were run - call expect(0) to accept zero assertions.", this.stack);
		      }
		      var module2 = this.module;
		      var moduleName = module2.name;
		      var testName = this.testName;
		      var skipped = !!this.skip;
		      var todo = !!this.todo;
		      var bad = 0;
		      var storage = config.storage;
		      this.runtime = Math.round(performance.now() - this.started);
		      config.stats.all += this.assertions.length;
		      config.stats.testCount += 1;
		      module2.stats.all += this.assertions.length;
		      for (var i = 0; i < this.assertions.length; i++) {
		        if (!this.assertions[i].result) {
		          bad++;
		          config.stats.bad++;
		          module2.stats.bad++;
		        }
		      }
		      if (skipped) {
		        incrementTestsIgnored(module2);
		      } else {
		        incrementTestsRun(module2);
		      }
		      if (storage) {
		        if (bad) {
		          storage.setItem("qunit-test-" + moduleName + "-" + testName, bad);
		        } else {
		          storage.removeItem("qunit-test-" + moduleName + "-" + testName);
		        }
		      }
		      emit("testEnd", this.testReport.end(true));
		      this.testReport.slimAssertions();
		      var test2 = this;
		      return runLoggingCallbacks("testDone", {
		        name: testName,
		        module: moduleName,
		        skipped,
		        todo,
		        failed: bad,
		        passed: this.assertions.length - bad,
		        total: this.assertions.length,
		        runtime: skipped ? 0 : this.runtime,
		        // HTML Reporter use
		        assertions: this.assertions,
		        testId: this.testId,
		        // Source of Test
		        // generating stack trace is expensive, so using a getter will help defer this until we need it
		        get source() {
		          return test2.stack;
		        }
		      }).then(function() {
		        if (allTestsExecuted(module2)) {
		          var completedModules = [module2];
		          var parent = module2.parentModule;
		          while (parent && allTestsExecuted(parent)) {
		            completedModules.push(parent);
		            parent = parent.parentModule;
		          }
		          var moduleDoneChain = _Promise.resolve();
		          completedModules.forEach(function(completedModule) {
		            moduleDoneChain = moduleDoneChain.then(function() {
		              return logSuiteEnd(completedModule);
		            });
		          });
		          return moduleDoneChain;
		        }
		      }).then(function() {
		        config.current = void 0;
		      });
		      function logSuiteEnd(module3) {
		        var modules = [module3];
		        while (modules.length) {
		          var nextModule = modules.shift();
		          nextModule.hooks = {};
		          modules.push.apply(modules, _toConsumableArray(nextModule.childModules));
		        }
		        emit("suiteEnd", module3.suiteReport.end(true));
		        return runLoggingCallbacks("moduleDone", {
		          name: module3.name,
		          tests: module3.tests,
		          failed: module3.stats.bad,
		          passed: module3.stats.all - module3.stats.bad,
		          total: module3.stats.all,
		          runtime: Math.round(performance.now() - module3.stats.started)
		        });
		      }
		    },
		    preserveTestEnvironment: function preserveTestEnvironment() {
		      if (this.preserveEnvironment) {
		        this.module.testEnvironment = this.testEnvironment;
		        this.testEnvironment = extend({}, this.module.testEnvironment);
		      }
		    },
		    queue: function queue() {
		      var test2 = this;
		      if (!this.valid()) {
		        incrementTestsIgnored(this.module);
		        return;
		      }
		      function runTest() {
		        return [function() {
		          return test2.before();
		        }].concat(_toConsumableArray(test2.hooks("before")), [function() {
		          test2.preserveTestEnvironment();
		        }], _toConsumableArray(test2.hooks("beforeEach")), [function() {
		          test2.run();
		        }], _toConsumableArray(test2.hooks("afterEach").reverse()), _toConsumableArray(test2.hooks("after").reverse()), [function() {
		          test2.after();
		        }, function() {
		          return test2.finish();
		        }]);
		      }
		      var previousFailCount = config.storage && +config.storage.getItem("qunit-test-" + this.module.name + "-" + this.testName);
		      var prioritize = config.reorder && !!previousFailCount;
		      this.previousFailure = !!previousFailCount;
		      config.pq.add(runTest, prioritize);
		    },
		    pushResult: function pushResult(resultInfo) {
		      if (this !== config.current) {
		        var message = resultInfo && resultInfo.message || "";
		        var testName = this && this.testName || "";
		        var error = "Assertion occurred after test finished.\n> Test: " + testName + "\n> Message: " + message + "\n";
		        throw new Error(error);
		      }
		      var details = {
		        module: this.module.name,
		        name: this.testName,
		        result: resultInfo.result,
		        message: resultInfo.message,
		        actual: resultInfo.actual,
		        testId: this.testId,
		        negative: resultInfo.negative || false,
		        runtime: Math.round(performance.now() - this.started),
		        todo: !!this.todo
		      };
		      if (hasOwn$1.call(resultInfo, "expected")) {
		        details.expected = resultInfo.expected;
		      }
		      if (!resultInfo.result) {
		        var source = resultInfo.source || sourceFromStacktrace();
		        if (source) {
		          details.source = source;
		        }
		      }
		      this.logAssertion(details);
		      this.assertions.push({
		        result: !!resultInfo.result,
		        message: resultInfo.message
		      });
		    },
		    pushFailure: function pushFailure2(message, source) {
		      if (!(this instanceof Test)) {
		        throw new Error("pushFailure() assertion outside test context, was " + sourceFromStacktrace(2));
		      }
		      this.pushResult({
		        result: false,
		        message: message || "error",
		        source
		      });
		    },
		    /**
		     * Log assertion details using both the old QUnit.log interface and
		     * QUnit.on( "assertion" ) interface.
		     *
		     * @private
		     */
		    logAssertion: function logAssertion(details) {
		      runLoggingCallbacks("log", details);
		      var assertion = {
		        passed: details.result,
		        actual: details.actual,
		        expected: details.expected,
		        message: details.message,
		        stack: details.source,
		        todo: details.todo
		      };
		      this.testReport.pushAssertion(assertion);
		      emit("assertion", assertion);
		    },
		    /**
		     * Reset config.timeout with a new timeout duration.
		     *
		     * @param {number} timeoutDuration
		     */
		    internalResetTimeout: function internalResetTimeout(timeoutDuration) {
		      clearTimeout(config.timeout);
		      config.timeout = setTimeout$1(config.timeoutHandler(timeoutDuration), timeoutDuration);
		    },
		    /**
		     * Create a new async pause and return a new function that can release the pause.
		     *
		     * This mechanism is internally used by:
		     *
		     * - explicit async pauses, created by calling `assert.async()`,
		     * - implicit async pauses, created when `QUnit.test()` or module hook callbacks
		     *   use async-await or otherwise return a Promise.
		     *
		     * Happy scenario:
		     *
		     * - Pause is created by calling internalStop().
		     *
		     *   Pause is released normally by invoking release() during the same test.
		     *
		     *   The release() callback lets internal processing resume.
		     *
		     * Failure scenarios:
		     *
		     * - The test fails due to an uncaught exception.
		     *
		     *   In this case, Test.run() will call internalRecover() which empties the clears all
		     *   async pauses and sets the cancelled flag, which means we silently ignore any
		     *   late calls to the resume() callback, as we will have moved on to a different
		     *   test by then, and we don't want to cause an extra "release during a different test"
		     *   errors that the developer isn't really responsible for. This can happen when a test
		     *   correctly schedules a call to release(), but also causes an uncaught error. The
		     *   uncaught error means we will no longer wait for the release (as it might not arrive).
		     *
		     * - Pause is never released, or called an insufficient number of times.
		     *
		     *   Our timeout handler will kill the pause and resume test processing, basically
		     *   like internalRecover(), but for one pause instead of any/all.
		     *
		     *   Here, too, any late calls to resume() will be silently ignored to avoid
		     *   extra errors. We tolerate this since the original test will have already been
		     *   marked as failure.
		     *
		     *   TODO: QUnit 3 will enable timeouts by default <https://github.com/qunitjs/qunit/issues/1483>,
		     *   but right now a test will hang indefinitely if async pauses are not released,
		     *   unless QUnit.config.testTimeout or assert.timeout() is used.
		     *
		     * - Pause is spontaneously released during a different test,
		     *   or when no test is currently running.
		     *
		     *   This is close to impossible because this error only happens if the original test
		     *   succesfully finished first (since other failure scenarios kill pauses and ignore
		     *   late calls). It can happen if a test ended exactly as expected, but has some
		     *   external or shared state continuing to hold a reference to the release callback,
		     *   and either the same test scheduled another call to it in the future, or a later test
		     *   causes it to be called through some shared state.
		     *
		     * - Pause release() is called too often, during the same test.
		     *
		     *   This simply throws an error, after which uncaught error handling picks it up
		     *   and processing resumes.
		     *
		     * @param {number} [requiredCalls=1]
		     */
		    internalStop: function internalStop() {
		      var requiredCalls = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
		      config.blocking = true;
		      var test2 = this;
		      var pauseId = this.nextPauseId++;
		      var pause = {
		        cancelled: false,
		        remaining: requiredCalls
		      };
		      test2.pauses.set(pauseId, pause);
		      function release() {
		        if (pause.cancelled) {
		          return;
		        }
		        if (config.current === void 0) {
		          throw new Error("Unexpected release of async pause after tests finished.\n" + "> Test: ".concat(test2.testName, " [async #").concat(pauseId, "]"));
		        }
		        if (config.current !== test2) {
		          throw new Error("Unexpected release of async pause during a different test.\n" + "> Test: ".concat(test2.testName, " [async #").concat(pauseId, "]"));
		        }
		        if (pause.remaining <= 0) {
		          throw new Error("Tried to release async pause that was already released.\n" + "> Test: ".concat(test2.testName, " [async #").concat(pauseId, "]"));
		        }
		        pause.remaining--;
		        if (pause.remaining === 0) {
		          test2.pauses.delete(pauseId);
		        }
		        internalStart(test2);
		      }
		      if (setTimeout$1) {
		        var timeoutDuration;
		        if (typeof test2.timeout === "number") {
		          timeoutDuration = test2.timeout;
		        } else if (typeof config.testTimeout === "number") {
		          timeoutDuration = config.testTimeout;
		        }
		        if (typeof timeoutDuration === "number" && timeoutDuration > 0) {
		          config.timeoutHandler = function(timeout) {
		            return function() {
		              config.timeout = null;
		              pause.cancelled = true;
		              test2.pauses.delete(pauseId);
		              test2.pushFailure("Test took longer than ".concat(timeout, "ms; test timed out."), sourceFromStacktrace(2));
		              internalRecover(test2);
		            };
		          };
		          clearTimeout(config.timeout);
		          config.timeout = setTimeout$1(config.timeoutHandler(timeoutDuration), timeoutDuration);
		        } else {
		          clearTimeout(config.timeout);
		          config.timeout = setTimeout$1(function() {
		            config.timeout = null;
		            if (!config._deprecated_timeout_shown) {
		              config._deprecated_timeout_shown = true;
		              Logger.warn('Test "'.concat(test2.testName, '" took longer than 3000ms, but no timeout was set. Set QUnit.config.testTimeout or call assert.timeout() to avoid a timeout in QUnit 3. https://qunitjs.com/api/config/testTimeout/'));
		            }
		          }, 3e3);
		        }
		      }
		      return release;
		    },
		    resolvePromise: function resolvePromise(promise, phase) {
		      if (promise != null) {
		        var _test = this;
		        var then = promise.then;
		        if (typeof then === "function") {
		          var resume = _test.internalStop();
		          var resolve = function resolve2() {
		            resume();
		          };
		          if (config.notrycatch) {
		            then.call(promise, resolve);
		          } else {
		            var reject = function reject2(error) {
		              var message = "Promise rejected " + (!phase ? "during" : phase.replace(/Each$/, "")) + ' "' + _test.testName + '": ' + (error && error.message || error);
		              _test.pushFailure(message, extractStacktrace(error, 0));
		              saveGlobal();
		              internalRecover(_test);
		            };
		            then.call(promise, resolve, reject);
		          }
		        }
		      }
		    },
		    valid: function valid() {
		      if (this.callback && this.callback.validTest) {
		        return true;
		      }
		      function moduleChainIdMatch(testModule, selectedId) {
		        return (
		          // undefined or empty array
		          !selectedId || !selectedId.length || inArray(testModule.moduleId, selectedId) || testModule.parentModule && moduleChainIdMatch(testModule.parentModule, selectedId)
		        );
		      }
		      if (!moduleChainIdMatch(this.module, config.moduleId)) {
		        return false;
		      }
		      if (config.testId && config.testId.length && !inArray(this.testId, config.testId)) {
		        return false;
		      }
		      function moduleChainNameMatch(testModule, selectedModule2) {
		        if (!selectedModule2) {
		          return true;
		        }
		        var testModuleName = testModule.name ? testModule.name.toLowerCase() : null;
		        if (testModuleName === selectedModule2) {
		          return true;
		        } else if (testModule.parentModule) {
		          return moduleChainNameMatch(testModule.parentModule, selectedModule2);
		        } else {
		          return false;
		        }
		      }
		      var selectedModule = config.module && config.module.toLowerCase();
		      if (!moduleChainNameMatch(this.module, selectedModule)) {
		        return false;
		      }
		      var filter = config.filter;
		      if (!filter) {
		        return true;
		      }
		      var regexFilter = /^(!?)\/([\w\W]*)\/(i?$)/.exec(filter);
		      var fullName = this.module.name + ": " + this.testName;
		      return regexFilter ? this.regexFilter(!!regexFilter[1], regexFilter[2], regexFilter[3], fullName) : this.stringFilter(filter, fullName);
		    },
		    regexFilter: function regexFilter(exclude, pattern, flags, fullName) {
		      var regex = new RegExp(pattern, flags);
		      var match = regex.test(fullName);
		      return match !== exclude;
		    },
		    stringFilter: function stringFilter(filter, fullName) {
		      filter = filter.toLowerCase();
		      fullName = fullName.toLowerCase();
		      var include = filter.charAt(0) !== "!";
		      if (!include) {
		        filter = filter.slice(1);
		      }
		      if (fullName.indexOf(filter) !== -1) {
		        return include;
		      }
		      return !include;
		    }
		  };
		  function pushFailure() {
		    if (!config.current) {
		      throw new Error("pushFailure() assertion outside test context, in " + sourceFromStacktrace(2));
		    }
		    var currentTest = config.current;
		    return currentTest.pushFailure.apply(currentTest, arguments);
		  }
		  function saveGlobal() {
		    config.pollution = [];
		    if (config.noglobals) {
		      for (var key in g) {
		        if (hasOwn$1.call(g, key)) {
		          if (/^qunit-test-output/.test(key)) {
		            continue;
		          }
		          config.pollution.push(key);
		        }
		      }
		    }
		  }
		  function checkPollution() {
		    var old = config.pollution;
		    saveGlobal();
		    var newGlobals = diff$1(config.pollution, old);
		    if (newGlobals.length > 0) {
		      pushFailure("Introduced global variable(s): " + newGlobals.join(", "));
		    }
		    var deletedGlobals = diff$1(old, config.pollution);
		    if (deletedGlobals.length > 0) {
		      pushFailure("Deleted global variable(s): " + deletedGlobals.join(", "));
		    }
		  }
		  var focused = false;
		  function addTest(settings) {
		    if (focused || config.currentModule.ignored) {
		      return;
		    }
		    var newTest = new Test(settings);
		    newTest.queue();
		  }
		  function addOnlyTest(settings) {
		    if (config.currentModule.ignored) {
		      return;
		    }
		    if (!focused) {
		      config.queue.length = 0;
		      focused = true;
		    }
		    var newTest = new Test(settings);
		    newTest.queue();
		  }
		  function test(testName, callback) {
		    addTest({
		      testName,
		      callback
		    });
		  }
		  function makeEachTestName(testName, argument) {
		    return "".concat(testName, " [").concat(argument, "]");
		  }
		  var rNonObviousStr = /[\x00-\x1F\x7F\xA0]/;
		  function runEach(data, eachFn) {
		    if (Array.isArray(data)) {
		      for (var i = 0; i < data.length; i++) {
		        var value = data[i];
		        var valueType = _typeof(value);
		        var testKey = i;
		        if (valueType === "string" && value.length <= 40 && !rNonObviousStr.test(value) && !/\s*\d+: /.test(value)) {
		          testKey = value;
		        } else if (valueType === "string" || valueType === "number" || valueType === "boolean" || valueType === "undefined" || value === null) {
		          var valueForName = String(value);
		          if (!rNonObviousStr.test(valueForName)) {
		            testKey = i + ": " + (valueForName.length <= 30 ? valueForName : valueForName.slice(0, 29) + "…");
		          }
		        }
		        eachFn(value, testKey);
		      }
		    } else if (_typeof(data) === "object" && data !== null) {
		      for (var key in data) {
		        eachFn(data[key], key);
		      }
		    } else {
		      throw new Error("test.each() expects an array or object as input, but\nfound ".concat(_typeof(data), " instead."));
		    }
		  }
		  extend(test, {
		    todo: function todo(testName, callback) {
		      addTest({
		        testName,
		        callback,
		        todo: true
		      });
		    },
		    skip: function skip(testName) {
		      addTest({
		        testName,
		        skip: true
		      });
		    },
		    if: function _if(testName, condition, callback) {
		      addTest({
		        testName,
		        callback,
		        skip: !condition
		      });
		    },
		    only: function only(testName, callback) {
		      addOnlyTest({
		        testName,
		        callback
		      });
		    },
		    each: function each(testName, dataset, callback) {
		      runEach(dataset, function(data, testKey) {
		        addTest({
		          testName: makeEachTestName(testName, testKey),
		          callback,
		          withData: true,
		          stackOffset: 5,
		          data
		        });
		      });
		    }
		  });
		  test.todo.each = function(testName, dataset, callback) {
		    runEach(dataset, function(data, testKey) {
		      addTest({
		        testName: makeEachTestName(testName, testKey),
		        callback,
		        todo: true,
		        withData: true,
		        stackOffset: 5,
		        data
		      });
		    });
		  };
		  test.skip.each = function(testName, dataset) {
		    runEach(dataset, function(_, testKey) {
		      addTest({
		        testName: makeEachTestName(testName, testKey),
		        stackOffset: 5,
		        skip: true
		      });
		    });
		  };
		  test.if.each = function(testName, condition, dataset, callback) {
		    runEach(dataset, function(data, testKey) {
		      addTest({
		        testName: makeEachTestName(testName, testKey),
		        callback,
		        withData: true,
		        stackOffset: 5,
		        skip: !condition,
		        data: condition ? data : void 0
		      });
		    });
		  };
		  test.only.each = function(testName, dataset, callback) {
		    runEach(dataset, function(data, testKey) {
		      addOnlyTest({
		        testName: makeEachTestName(testName, testKey),
		        callback,
		        withData: true,
		        stackOffset: 5,
		        data
		      });
		    });
		  };
		  function internalRecover(test2) {
		    test2.pauses.forEach(function(pause) {
		      pause.cancelled = true;
		    });
		    test2.pauses.clear();
		    internalStart(test2);
		  }
		  function internalStart(test2) {
		    if (test2.pauses.size > 0) {
		      return;
		    }
		    if (setTimeout$1) {
		      clearTimeout(config.timeout);
		      config.timeout = setTimeout$1(function() {
		        if (test2.pauses.size > 0) {
		          return;
		        }
		        clearTimeout(config.timeout);
		        config.timeout = null;
		        config.blocking = false;
		        config.pq.advance();
		      });
		    } else {
		      config.blocking = false;
		      config.pq.advance();
		    }
		  }
		  function collectTests(module2) {
		    var tests = [].concat(module2.tests);
		    var modules = _toConsumableArray(module2.childModules);
		    while (modules.length) {
		      var nextModule = modules.shift();
		      tests.push.apply(tests, nextModule.tests);
		      modules.push.apply(modules, _toConsumableArray(nextModule.childModules));
		    }
		    return tests;
		  }
		  function allTestsExecuted(module2) {
		    return module2.testsRun + module2.testsIgnored === collectTests(module2).length;
		  }
		  function lastTestWithinModuleExecuted(module2) {
		    return module2.testsRun === collectTests(module2).filter(function(test2) {
		      return !test2.skip;
		    }).length - 1;
		  }
		  function incrementTestsRun(module2) {
		    module2.testsRun++;
		    while (module2 = module2.parentModule) {
		      module2.testsRun++;
		    }
		  }
		  function incrementTestsIgnored(module2) {
		    module2.testsIgnored++;
		    while (module2 = module2.parentModule) {
		      module2.testsIgnored++;
		    }
		  }
		  function exportQUnit(QUnit2) {
		    var exportedModule = false;
		    if (window$1 && document) {
		      if (window$1.QUnit && window$1.QUnit.version) {
		        throw new Error("QUnit has already been defined.");
		      }
		      window$1.QUnit = QUnit2;
		      exportedModule = true;
		    }
		    if (module && module.exports) {
		      module.exports = QUnit2;
		      module.exports.QUnit = QUnit2;
		      exportedModule = true;
		    }
		    if (exports) {
		      exports.QUnit = QUnit2;
		      exportedModule = true;
		    }
		    if (!exportedModule) {
		      g.QUnit = QUnit2;
		    }
		  }
		  var ConsoleReporter = /* @__PURE__ */ function() {
		    function ConsoleReporter2(runner) {
		      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
		      _classCallCheck(this, ConsoleReporter2);
		      this.log = options.log || Function.prototype.bind.call(console$1.log, console$1);
		      runner.on("error", this.onError.bind(this));
		      runner.on("runStart", this.onRunStart.bind(this));
		      runner.on("testStart", this.onTestStart.bind(this));
		      runner.on("testEnd", this.onTestEnd.bind(this));
		      runner.on("runEnd", this.onRunEnd.bind(this));
		    }
		    return _createClass(ConsoleReporter2, [{
		      key: "onError",
		      value: function onError(error) {
		        this.log("error", error);
		      }
		    }, {
		      key: "onRunStart",
		      value: function onRunStart(runStart) {
		        this.log("runStart", runStart);
		      }
		    }, {
		      key: "onTestStart",
		      value: function onTestStart(test2) {
		        this.log("testStart", test2);
		      }
		    }, {
		      key: "onTestEnd",
		      value: function onTestEnd(test2) {
		        this.log("testEnd", test2);
		      }
		    }, {
		      key: "onRunEnd",
		      value: function onRunEnd(runEnd) {
		        this.log("runEnd", runEnd);
		      }
		    }], [{
		      key: "init",
		      value: function init2(runner, options) {
		        return new ConsoleReporter2(runner, options);
		      }
		    }]);
		  }();
		  var nativePerf = window$1 && typeof window$1.performance !== "undefined" && // eslint-disable-next-line compat/compat -- Checked
		  typeof window$1.performance.mark === "function" && // eslint-disable-next-line compat/compat -- Checked
		  typeof window$1.performance.measure === "function" ? window$1.performance : void 0;
		  var perf = {
		    measure: nativePerf ? function(comment, startMark, endMark) {
		      try {
		        nativePerf.measure(comment, startMark, endMark);
		      } catch (ex) {
		        Logger.warn("performance.measure could not be executed because of ", ex.message);
		      }
		    } : function() {
		    },
		    mark: nativePerf ? nativePerf.mark.bind(nativePerf) : function() {
		    }
		  };
		  var PerfReporter = /* @__PURE__ */ function() {
		    function PerfReporter2(runner) {
		      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
		      _classCallCheck(this, PerfReporter2);
		      this.perf = options.perf || perf;
		      runner.on("runStart", this.onRunStart.bind(this));
		      runner.on("runEnd", this.onRunEnd.bind(this));
		      runner.on("suiteStart", this.onSuiteStart.bind(this));
		      runner.on("suiteEnd", this.onSuiteEnd.bind(this));
		      runner.on("testStart", this.onTestStart.bind(this));
		      runner.on("testEnd", this.onTestEnd.bind(this));
		    }
		    return _createClass(PerfReporter2, [{
		      key: "onRunStart",
		      value: function onRunStart() {
		        this.perf.mark("qunit_suite_0_start");
		      }
		    }, {
		      key: "onSuiteStart",
		      value: function onSuiteStart(suiteStart) {
		        var suiteLevel = suiteStart.fullName.length;
		        this.perf.mark("qunit_suite_".concat(suiteLevel, "_start"));
		      }
		    }, {
		      key: "onSuiteEnd",
		      value: function onSuiteEnd(suiteEnd) {
		        var suiteLevel = suiteEnd.fullName.length;
		        var suiteName = suiteEnd.fullName.join(" – ");
		        this.perf.mark("qunit_suite_".concat(suiteLevel, "_end"));
		        this.perf.measure("QUnit Test Suite: ".concat(suiteName), "qunit_suite_".concat(suiteLevel, "_start"), "qunit_suite_".concat(suiteLevel, "_end"));
		      }
		    }, {
		      key: "onTestStart",
		      value: function onTestStart() {
		        this.perf.mark("qunit_test_start");
		      }
		    }, {
		      key: "onTestEnd",
		      value: function onTestEnd(testEnd) {
		        this.perf.mark("qunit_test_end");
		        var testName = testEnd.fullName.join(" – ");
		        this.perf.measure("QUnit Test: ".concat(testName), "qunit_test_start", "qunit_test_end");
		      }
		    }, {
		      key: "onRunEnd",
		      value: function onRunEnd() {
		        this.perf.mark("qunit_suite_0_end");
		        this.perf.measure("QUnit Test Run", "qunit_suite_0_start", "qunit_suite_0_end");
		      }
		    }], [{
		      key: "init",
		      value: function init2(runner, options) {
		        return new PerfReporter2(runner, options);
		      }
		    }]);
		  }();
		  var FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM, isTTY = true;
		  if (typeof process !== "undefined") {
		    var _ref = define_process_env_default || {};
		    FORCE_COLOR = _ref.FORCE_COLOR;
		    NODE_DISABLE_COLORS = _ref.NODE_DISABLE_COLORS;
		    NO_COLOR = _ref.NO_COLOR;
		    TERM = _ref.TERM;
		    isTTY = process.stdout && process.stdout.isTTY;
		  }
		  var $ = {
		    enabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== "dumb" && (FORCE_COLOR != null && FORCE_COLOR !== "0" || isTTY),
		    // modifiers
		    reset: init(0, 0),
		    bold: init(1, 22),
		    dim: init(2, 22),
		    italic: init(3, 23),
		    underline: init(4, 24),
		    inverse: init(7, 27),
		    hidden: init(8, 28),
		    strikethrough: init(9, 29),
		    // colors
		    black: init(30, 39),
		    red: init(31, 39),
		    green: init(32, 39),
		    yellow: init(33, 39),
		    blue: init(34, 39),
		    magenta: init(35, 39),
		    cyan: init(36, 39),
		    white: init(37, 39),
		    gray: init(90, 39),
		    grey: init(90, 39),
		    // background colors
		    bgBlack: init(40, 49),
		    bgRed: init(41, 49),
		    bgGreen: init(42, 49),
		    bgYellow: init(43, 49),
		    bgBlue: init(44, 49),
		    bgMagenta: init(45, 49),
		    bgCyan: init(46, 49),
		    bgWhite: init(47, 49)
		  };
		  function run(arr, str) {
		    var i = 0, tmp, beg = "", end = "";
		    for (; i < arr.length; i++) {
		      tmp = arr[i];
		      beg += tmp.open;
		      end += tmp.close;
		      if (!!~str.indexOf(tmp.close)) {
		        str = str.replace(tmp.rgx, tmp.close + tmp.open);
		      }
		    }
		    return beg + str + end;
		  }
		  function chain(has, keys) {
		    var ctx = {
		      has,
		      keys
		    };
		    ctx.reset = $.reset.bind(ctx);
		    ctx.bold = $.bold.bind(ctx);
		    ctx.dim = $.dim.bind(ctx);
		    ctx.italic = $.italic.bind(ctx);
		    ctx.underline = $.underline.bind(ctx);
		    ctx.inverse = $.inverse.bind(ctx);
		    ctx.hidden = $.hidden.bind(ctx);
		    ctx.strikethrough = $.strikethrough.bind(ctx);
		    ctx.black = $.black.bind(ctx);
		    ctx.red = $.red.bind(ctx);
		    ctx.green = $.green.bind(ctx);
		    ctx.yellow = $.yellow.bind(ctx);
		    ctx.blue = $.blue.bind(ctx);
		    ctx.magenta = $.magenta.bind(ctx);
		    ctx.cyan = $.cyan.bind(ctx);
		    ctx.white = $.white.bind(ctx);
		    ctx.gray = $.gray.bind(ctx);
		    ctx.grey = $.grey.bind(ctx);
		    ctx.bgBlack = $.bgBlack.bind(ctx);
		    ctx.bgRed = $.bgRed.bind(ctx);
		    ctx.bgGreen = $.bgGreen.bind(ctx);
		    ctx.bgYellow = $.bgYellow.bind(ctx);
		    ctx.bgBlue = $.bgBlue.bind(ctx);
		    ctx.bgMagenta = $.bgMagenta.bind(ctx);
		    ctx.bgCyan = $.bgCyan.bind(ctx);
		    ctx.bgWhite = $.bgWhite.bind(ctx);
		    return ctx;
		  }
		  function init(open, close) {
		    var blk = {
		      open: "\x1B[".concat(open, "m"),
		      close: "\x1B[".concat(close, "m"),
		      rgx: new RegExp("\\x1b\\[".concat(close, "m"), "g")
		    };
		    return function(txt) {
		      if (this !== void 0 && this.has !== void 0) {
		        !!~this.has.indexOf(open) || (this.has.push(open), this.keys.push(blk));
		        return txt === void 0 ? this : $.enabled ? run(this.keys, txt + "") : txt + "";
		      }
		      return txt === void 0 ? chain([open], [blk]) : $.enabled ? run([blk], txt + "") : txt + "";
		    };
		  }
		  function prettyYamlValue(value) {
		    var indent = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;
		    if (value === void 0) {
		      value = String(value);
		    }
		    if (typeof value === "number" && !isFinite(value)) {
		      value = String(value);
		    }
		    if (typeof value === "number") {
		      return JSON.stringify(value);
		    }
		    if (typeof value === "string") {
		      var rSpecialJson = /['"\\/[{}\]\r\n]/;
		      var rSpecialYaml = /[-?:,[\]{}#&*!|=>'"%@`]/;
		      var rUntrimmed = /(^\s|\s$)/;
		      var rNumerical = /^[\d._-]+$/;
		      var rBool = /^(true|false|y|n|yes|no|on|off)$/i;
		      if (value === "" || rSpecialJson.test(value) || rSpecialYaml.test(value[0]) || rUntrimmed.test(value) || rNumerical.test(value) || rBool.test(value)) {
		        if (!/\n/.test(value)) {
		          return JSON.stringify(value);
		        }
		        var _prefix = new Array(indent * 2 + 1).join(" ");
		        var trailingLinebreakMatch = value.match(/\n+$/);
		        var trailingLinebreaks = trailingLinebreakMatch ? trailingLinebreakMatch[0].length : 0;
		        if (trailingLinebreaks === 1) {
		          var lines = value.replace(/\n$/, "").split("\n").map(function(line) {
		            return _prefix + line;
		          });
		          return "|\n" + lines.join("\n");
		        } else {
		          var _lines = value.split("\n").map(function(line) {
		            return _prefix + line;
		          });
		          return "|+\n" + _lines.join("\n");
		        }
		      } else {
		        return value;
		      }
		    }
		    var prefix = new Array(indent + 1).join(" ");
		    return JSON.stringify(decycledShallowClone(value), null, 2).split("\n").map(function(line, i) {
		      return i === 0 ? line : prefix + line;
		    }).join("\n");
		  }
		  function decycledShallowClone(object) {
		    var ancestors = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
		    if (ancestors.indexOf(object) !== -1) {
		      return "[Circular]";
		    }
		    var type = Object.prototype.toString.call(object).replace(/^\[.+\s(.+?)]$/, "$1").toLowerCase();
		    var clone;
		    switch (type) {
		      case "array":
		        ancestors.push(object);
		        clone = object.map(function(element) {
		          return decycledShallowClone(element, ancestors);
		        });
		        ancestors.pop();
		        break;
		      case "object":
		        ancestors.push(object);
		        clone = {};
		        Object.keys(object).forEach(function(key) {
		          clone[key] = decycledShallowClone(object[key], ancestors);
		        });
		        ancestors.pop();
		        break;
		      default:
		        clone = object;
		    }
		    return clone;
		  }
		  var TapReporter = /* @__PURE__ */ function() {
		    function TapReporter2(runner) {
		      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
		      _classCallCheck(this, TapReporter2);
		      this.log = options.log || Function.prototype.bind.call(console$1.log, console$1);
		      this.testCount = 0;
		      this.started = false;
		      this.ended = false;
		      this.bailed = false;
		      runner.on("error", this.onError.bind(this));
		      runner.on("runStart", this.onRunStart.bind(this));
		      runner.on("testEnd", this.onTestEnd.bind(this));
		      runner.on("runEnd", this.onRunEnd.bind(this));
		    }
		    return _createClass(TapReporter2, [{
		      key: "onRunStart",
		      value: function onRunStart(_runSuite) {
		        if (!this.started) {
		          this.log("TAP version 13");
		          this.started = true;
		        }
		      }
		    }, {
		      key: "onError",
		      value: function onError(error) {
		        if (this.bailed) {
		          return;
		        }
		        this.bailed = true;
		        if (!this.ended) {
		          this.onRunStart();
		          this.testCount = this.testCount + 1;
		          this.log("not ok ".concat(this.testCount, " ").concat($.red("global failure")));
		          this.logError(error);
		        }
		        this.log("Bail out! " + errorString(error).split("\n")[0]);
		        if (this.ended) {
		          this.logError(error);
		        }
		      }
		    }, {
		      key: "onTestEnd",
		      value: function onTestEnd(test2) {
		        var _this = this;
		        this.testCount = this.testCount + 1;
		        if (test2.status === "passed") {
		          this.log("ok ".concat(this.testCount, " ").concat(test2.fullName.join(" > ")));
		        } else if (test2.status === "skipped") {
		          this.log("ok ".concat(this.testCount, " ").concat($.yellow(test2.fullName.join(" > ")), " # SKIP"));
		        } else if (test2.status === "todo") {
		          this.log("not ok ".concat(this.testCount, " ").concat($.cyan(test2.fullName.join(" > ")), " # TODO"));
		          test2.errors.forEach(function(error) {
		            return _this.logAssertion(error, "todo");
		          });
		        } else {
		          this.log("not ok ".concat(this.testCount, " ").concat($.red(test2.fullName.join(" > "))));
		          test2.errors.forEach(function(error) {
		            return _this.logAssertion(error);
		          });
		        }
		      }
		    }, {
		      key: "onRunEnd",
		      value: function onRunEnd(runEnd) {
		        this.ended = true;
		        this.log("1..".concat(runEnd.testCounts.total));
		        this.log("# pass ".concat(runEnd.testCounts.passed));
		        this.log("# ".concat($.yellow("skip ".concat(runEnd.testCounts.skipped))));
		        this.log("# ".concat($.cyan("todo ".concat(runEnd.testCounts.todo))));
		        this.log("# ".concat($.red("fail ".concat(runEnd.testCounts.failed))));
		      }
		    }, {
		      key: "logAssertion",
		      value: function logAssertion(error, severity) {
		        var out = "  ---";
		        out += "\n  message: ".concat(prettyYamlValue(error.message || "failed"));
		        out += "\n  severity: ".concat(prettyYamlValue(severity || "failed"));
		        var hasAny = error.expected !== void 0 || error.actual !== void 0;
		        if (hasAny) {
		          out += "\n  actual  : ".concat(prettyYamlValue(error.actual));
		          out += "\n  expected: ".concat(prettyYamlValue(error.expected));
		        }
		        if (error.stack) {
		          var fmtStack = annotateStacktrace(error.stack, $.grey);
		          if (fmtStack.length) {
		            out += "\n  stack: ".concat(prettyYamlValue(fmtStack + "\n"));
		          }
		        }
		        out += "\n  ...";
		        this.log(out);
		      }
		    }, {
		      key: "logError",
		      value: function logError(error) {
		        var out = "  ---";
		        out += "\n  message: ".concat(prettyYamlValue(errorString(error)));
		        out += "\n  severity: ".concat(prettyYamlValue("failed"));
		        if (error && error.stack) {
		          var fmtStack = annotateStacktrace(error.stack, $.grey, error.toString());
		          if (fmtStack.length) {
		            out += "\n  stack: ".concat(prettyYamlValue(fmtStack + "\n"));
		          }
		        }
		        out += "\n  ...";
		        this.log(out);
		      }
		    }], [{
		      key: "init",
		      value: function init2(runner, options) {
		        return new TapReporter2(runner, options);
		      }
		    }]);
		  }();
		  var reporters = {
		    console: ConsoleReporter,
		    perf: PerfReporter,
		    tap: TapReporter
		  };
		  function makeAddGlobalHook(hookName) {
		    return function addGlobalHook(callback) {
		      if (!config.globalHooks[hookName]) {
		        config.globalHooks[hookName] = [];
		      }
		      config.globalHooks[hookName].push(callback);
		    };
		  }
		  var hooks = {
		    beforeEach: makeAddGlobalHook("beforeEach"),
		    afterEach: makeAddGlobalHook("afterEach")
		  };
		  function unitSamplerGenerator(seed) {
		    var sample = parseInt(generateHash(seed), 16) || -1;
		    return function() {
		      sample ^= sample << 13;
		      sample ^= sample >>> 17;
		      sample ^= sample << 5;
		      if (sample < 0) {
		        sample += 4294967296;
		      }
		      return sample / 4294967296;
		    };
		  }
		  var ProcessingQueue = /* @__PURE__ */ function() {
		    function ProcessingQueue2(test2) {
		      _classCallCheck(this, ProcessingQueue2);
		      this.test = test2;
		      this.priorityCount = 0;
		      this.unitSampler = null;
		      this.taskQueue = [];
		      this.finished = false;
		    }
		    return _createClass(ProcessingQueue2, [{
		      key: "advance",
		      value: function advance() {
		        this.advanceTaskQueue();
		        if (!this.taskQueue.length && !config.blocking && !config.current) {
		          this.advanceTestQueue();
		        }
		      }
		      /**
		       * Advances the taskQueue with an increased depth
		       */
		    }, {
		      key: "advanceTaskQueue",
		      value: function advanceTaskQueue() {
		        var start = performance.now();
		        config.depth = (config.depth || 0) + 1;
		        this.processTaskQueue(start);
		        config.depth--;
		      }
		      /**
		       * Process the first task on the taskQueue as a promise.
		       * Each task is a function added by Test#queue() in /src/test.js
		       */
		    }, {
		      key: "processTaskQueue",
		      value: function processTaskQueue(start) {
		        var _this = this;
		        if (this.taskQueue.length && !config.blocking) {
		          var elapsedTime = performance.now() - start;
		          if (!setTimeout$1 || config.updateRate <= 0 || elapsedTime < config.updateRate) {
		            var task = this.taskQueue.shift();
		            _Promise.resolve(task()).then(function() {
		              if (!_this.taskQueue.length) {
		                _this.advance();
		              } else {
		                _this.processTaskQueue(start);
		              }
		            });
		          } else {
		            setTimeout$1(function() {
		              _this.advance();
		            });
		          }
		        }
		      }
		      /**
		       * Advance the testQueue to the next test to process. Call done() if testQueue completes.
		       */
		    }, {
		      key: "advanceTestQueue",
		      value: function advanceTestQueue() {
		        if (!config.blocking && !config.queue.length && config.depth === 0) {
		          this.done();
		          return;
		        }
		        var testTasks = config.queue.shift();
		        this.addToTaskQueue(testTasks());
		        if (this.priorityCount > 0) {
		          this.priorityCount--;
		        }
		        this.advance();
		      }
		      /**
		       * Enqueue the tasks for a test into the task queue.
		       * @param {Array} tasksArray
		       */
		    }, {
		      key: "addToTaskQueue",
		      value: function addToTaskQueue(tasksArray) {
		        var _this$taskQueue;
		        (_this$taskQueue = this.taskQueue).push.apply(_this$taskQueue, _toConsumableArray(tasksArray));
		      }
		      /**
		       * Return the number of tasks remaining in the task queue to be processed.
		       * @return {number}
		       */
		    }, {
		      key: "taskCount",
		      value: function taskCount() {
		        return this.taskQueue.length;
		      }
		      /**
		       * Adds a test to the TestQueue for execution.
		       * @param {Function} testTasksFunc
		       * @param {boolean} prioritize
		       */
		    }, {
		      key: "add",
		      value: function add(testTasksFunc, prioritize) {
		        if (prioritize) {
		          config.queue.splice(this.priorityCount++, 0, testTasksFunc);
		        } else if (config.seed) {
		          if (!this.unitSampler) {
		            this.unitSampler = unitSamplerGenerator(config.seed);
		          }
		          var index = Math.floor(this.unitSampler() * (config.queue.length - this.priorityCount + 1));
		          config.queue.splice(this.priorityCount + index, 0, testTasksFunc);
		        } else {
		          config.queue.push(testTasksFunc);
		        }
		      }
		      /**
		       * This function is called when the ProcessingQueue is done processing all
		       * items. It handles emitting the final run events.
		       */
		    }, {
		      key: "done",
		      value: function done() {
		        if (config.stats.testCount === 0 && config.failOnZeroTests === true) {
		          var error;
		          if (config.filter && config.filter.length) {
		            error = new Error('No tests matched the filter "'.concat(config.filter, '".'));
		          } else if (config.module && config.module.length) {
		            error = new Error('No tests matched the module "'.concat(config.module, '".'));
		          } else if (config.moduleId && config.moduleId.length) {
		            error = new Error('No tests matched the moduleId "'.concat(config.moduleId, '".'));
		          } else if (config.testId && config.testId.length) {
		            error = new Error('No tests matched the testId "'.concat(config.testId, '".'));
		          } else {
		            error = new Error("No tests were run.");
		          }
		          this.test("global failure", extend(function(assert) {
		            assert.pushResult({
		              result: false,
		              message: error.message,
		              source: error.stack
		            });
		          }, {
		            validTest: true
		          }));
		          this.advance();
		          return;
		        }
		        var storage = config.storage;
		        var runtime = Math.round(performance.now() - config.started);
		        var passed = config.stats.all - config.stats.bad;
		        this.finished = true;
		        emit("runEnd", runSuite.end(true));
		        runLoggingCallbacks("done", {
		          // @deprecated since 2.19.0 Use done() without `details` parameter,
		          // or use `QUnit.on('runEnd')` instead. Parameter to be replaced in
		          // QUnit 3.0 with test counts.
		          passed,
		          failed: config.stats.bad,
		          total: config.stats.all,
		          runtime
		        }).then(function() {
		          if (storage && config.stats.bad === 0) {
		            for (var i = storage.length - 1; i >= 0; i--) {
		              var key = storage.key(i);
		              if (key.indexOf("qunit-test-") === 0) {
		                storage.removeItem(key);
		              }
		            }
		          }
		        });
		      }
		    }]);
		  }();
		  function onUncaughtException(error) {
		    if (config.current) {
		      config.current.assert.pushResult({
		        result: false,
		        message: "global failure: ".concat(errorString(error)),
		        // We could let callers specify an offset to subtract a number of frames via
		        // sourceFromStacktrace, in case they are a wrapper further away from the error
		        // handler, and thus reduce some noise in the stack trace. However, we're not
		        // doing this right now because it would almost never be used in practice given
		        // the vast majority of error values will be Error objects, and thus have their
		        // own stack trace already.
		        source: error && error.stack || sourceFromStacktrace(2)
		      });
		    } else {
		      runSuite.globalFailureCount++;
		      config.stats.bad++;
		      config.stats.all++;
		      emit("error", error);
		    }
		  }
		  function onWindowError(details) {
		    Logger.warn("QUnit.onError is deprecated and will be removed in QUnit 3.0. Please use QUnit.onUncaughtException instead.");
		    if (config.current && config.current.ignoreGlobalErrors) {
		      return true;
		    }
		    var err = new Error(details.message);
		    err.stack = details.stacktrace || details.fileName + ":" + details.lineNumber;
		    onUncaughtException(err);
		    return false;
		  }
		  function DiffMatchPatch() {
		  }
		  var DIFF_DELETE = -1;
		  var DIFF_INSERT = 1;
		  var DIFF_EQUAL = 0;
		  var hasOwn = Object.prototype.hasOwnProperty;
		  DiffMatchPatch.prototype.DiffMain = function(text1, text2, optChecklines) {
		    var deadline = Date.now() + 1e3;
		    if (text1 === null || text2 === null) {
		      throw new Error("Cannot diff null input.");
		    }
		    if (text1 === text2) {
		      if (text1) {
		        return [[DIFF_EQUAL, text1]];
		      }
		      return [];
		    }
		    if (typeof optChecklines === "undefined") {
		      optChecklines = true;
		    }
		    var commonlength = this.diffCommonPrefix(text1, text2);
		    var commonprefix = text1.substring(0, commonlength);
		    text1 = text1.substring(commonlength);
		    text2 = text2.substring(commonlength);
		    commonlength = this.diffCommonSuffix(text1, text2);
		    var commonsuffix = text1.substring(text1.length - commonlength);
		    text1 = text1.substring(0, text1.length - commonlength);
		    text2 = text2.substring(0, text2.length - commonlength);
		    var diffs = this.diffCompute(text1, text2, optChecklines, deadline);
		    if (commonprefix) {
		      diffs.unshift([DIFF_EQUAL, commonprefix]);
		    }
		    if (commonsuffix) {
		      diffs.push([DIFF_EQUAL, commonsuffix]);
		    }
		    this.diffCleanupMerge(diffs);
		    return diffs;
		  };
		  DiffMatchPatch.prototype.diffCleanupEfficiency = function(diffs) {
		    var changes, equalities, equalitiesLength, lastequality, pointer, preIns, preDel, postIns, postDel;
		    changes = false;
		    equalities = [];
		    equalitiesLength = 0;
		    lastequality = null;
		    pointer = 0;
		    preIns = false;
		    preDel = false;
		    postIns = false;
		    postDel = false;
		    while (pointer < diffs.length) {
		      if (diffs[pointer][0] === DIFF_EQUAL) {
		        if (diffs[pointer][1].length < 4 && (postIns || postDel)) {
		          equalities[equalitiesLength++] = pointer;
		          preIns = postIns;
		          preDel = postDel;
		          lastequality = diffs[pointer][1];
		        } else {
		          equalitiesLength = 0;
		          lastequality = null;
		        }
		        postIns = postDel = false;
		      } else {
		        if (diffs[pointer][0] === DIFF_DELETE) {
		          postDel = true;
		        } else {
		          postIns = true;
		        }
		        if (lastequality && (preIns && preDel && postIns && postDel || lastequality.length < 2 && preIns + preDel + postIns + postDel === 3)) {
		          diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]);
		          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
		          equalitiesLength--;
		          lastequality = null;
		          if (preIns && preDel) {
		            postIns = postDel = true;
		            equalitiesLength = 0;
		          } else {
		            equalitiesLength--;
		            pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
		            postIns = postDel = false;
		          }
		          changes = true;
		        }
		      }
		      pointer++;
		    }
		    if (changes) {
		      this.diffCleanupMerge(diffs);
		    }
		  };
		  DiffMatchPatch.prototype.diffPrettyHtml = function(diffs) {
		    var html = [];
		    for (var x = 0; x < diffs.length; x++) {
		      var op = diffs[x][0];
		      var data = diffs[x][1];
		      switch (op) {
		        case DIFF_INSERT:
		          html[x] = "<ins>" + escapeText(data) + "</ins>";
		          break;
		        case DIFF_DELETE:
		          html[x] = "<del>" + escapeText(data) + "</del>";
		          break;
		        case DIFF_EQUAL:
		          html[x] = "<span>" + escapeText(data) + "</span>";
		          break;
		      }
		    }
		    return html.join("");
		  };
		  DiffMatchPatch.prototype.diffCommonPrefix = function(text1, text2) {
		    var pointermid, pointermax, pointermin, pointerstart;
		    if (!text1 || !text2 || text1.charAt(0) !== text2.charAt(0)) {
		      return 0;
		    }
		    pointermin = 0;
		    pointermax = Math.min(text1.length, text2.length);
		    pointermid = pointermax;
		    pointerstart = 0;
		    while (pointermin < pointermid) {
		      if (text1.substring(pointerstart, pointermid) === text2.substring(pointerstart, pointermid)) {
		        pointermin = pointermid;
		        pointerstart = pointermin;
		      } else {
		        pointermax = pointermid;
		      }
		      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
		    }
		    return pointermid;
		  };
		  DiffMatchPatch.prototype.diffCommonSuffix = function(text1, text2) {
		    var pointermid, pointermax, pointermin, pointerend;
		    if (!text1 || !text2 || text1.charAt(text1.length - 1) !== text2.charAt(text2.length - 1)) {
		      return 0;
		    }
		    pointermin = 0;
		    pointermax = Math.min(text1.length, text2.length);
		    pointermid = pointermax;
		    pointerend = 0;
		    while (pointermin < pointermid) {
		      if (text1.substring(text1.length - pointermid, text1.length - pointerend) === text2.substring(text2.length - pointermid, text2.length - pointerend)) {
		        pointermin = pointermid;
		        pointerend = pointermin;
		      } else {
		        pointermax = pointermid;
		      }
		      pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);
		    }
		    return pointermid;
		  };
		  DiffMatchPatch.prototype.diffCompute = function(text1, text2, checklines, deadline) {
		    var diffs, longtext, shorttext, i, hm, text1A, text2A, text1B, text2B, midCommon, diffsA, diffsB;
		    if (!text1) {
		      return [[DIFF_INSERT, text2]];
		    }
		    if (!text2) {
		      return [[DIFF_DELETE, text1]];
		    }
		    longtext = text1.length > text2.length ? text1 : text2;
		    shorttext = text1.length > text2.length ? text2 : text1;
		    i = longtext.indexOf(shorttext);
		    if (i !== -1) {
		      diffs = [[DIFF_INSERT, longtext.substring(0, i)], [DIFF_EQUAL, shorttext], [DIFF_INSERT, longtext.substring(i + shorttext.length)]];
		      if (text1.length > text2.length) {
		        diffs[0][0] = diffs[2][0] = DIFF_DELETE;
		      }
		      return diffs;
		    }
		    if (shorttext.length === 1) {
		      return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
		    }
		    hm = this.diffHalfMatch(text1, text2);
		    if (hm) {
		      text1A = hm[0];
		      text1B = hm[1];
		      text2A = hm[2];
		      text2B = hm[3];
		      midCommon = hm[4];
		      diffsA = this.DiffMain(text1A, text2A, checklines, deadline);
		      diffsB = this.DiffMain(text1B, text2B, checklines, deadline);
		      return diffsA.concat([[DIFF_EQUAL, midCommon]], diffsB);
		    }
		    if (checklines && text1.length > 100 && text2.length > 100) {
		      return this.diffLineMode(text1, text2, deadline);
		    }
		    return this.diffBisect(text1, text2, deadline);
		  };
		  DiffMatchPatch.prototype.diffHalfMatch = function(text1, text2) {
		    var longtext, shorttext, dmp, text1A, text2B, text2A, text1B, midCommon, hm1, hm2, hm;
		    longtext = text1.length > text2.length ? text1 : text2;
		    shorttext = text1.length > text2.length ? text2 : text1;
		    if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {
		      return null;
		    }
		    dmp = this;
		    function diffHalfMatchI(longtext2, shorttext2, i) {
		      var seed, j, bestCommon, prefixLength, suffixLength, bestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB;
		      seed = longtext2.substring(i, i + Math.floor(longtext2.length / 4));
		      j = -1;
		      bestCommon = "";
		      while ((j = shorttext2.indexOf(seed, j + 1)) !== -1) {
		        prefixLength = dmp.diffCommonPrefix(longtext2.substring(i), shorttext2.substring(j));
		        suffixLength = dmp.diffCommonSuffix(longtext2.substring(0, i), shorttext2.substring(0, j));
		        if (bestCommon.length < suffixLength + prefixLength) {
		          bestCommon = shorttext2.substring(j - suffixLength, j) + shorttext2.substring(j, j + prefixLength);
		          bestLongtextA = longtext2.substring(0, i - suffixLength);
		          bestLongtextB = longtext2.substring(i + prefixLength);
		          bestShorttextA = shorttext2.substring(0, j - suffixLength);
		          bestShorttextB = shorttext2.substring(j + prefixLength);
		        }
		      }
		      if (bestCommon.length * 2 >= longtext2.length) {
		        return [bestLongtextA, bestLongtextB, bestShorttextA, bestShorttextB, bestCommon];
		      } else {
		        return null;
		      }
		    }
		    hm1 = diffHalfMatchI(longtext, shorttext, Math.ceil(longtext.length / 4));
		    hm2 = diffHalfMatchI(longtext, shorttext, Math.ceil(longtext.length / 2));
		    if (!hm1 && !hm2) {
		      return null;
		    } else if (!hm2) {
		      hm = hm1;
		    } else if (!hm1) {
		      hm = hm2;
		    } else {
		      hm = hm1[4].length > hm2[4].length ? hm1 : hm2;
		    }
		    if (text1.length > text2.length) {
		      text1A = hm[0];
		      text1B = hm[1];
		      text2A = hm[2];
		      text2B = hm[3];
		    } else {
		      text2A = hm[0];
		      text2B = hm[1];
		      text1A = hm[2];
		      text1B = hm[3];
		    }
		    midCommon = hm[4];
		    return [text1A, text1B, text2A, text2B, midCommon];
		  };
		  DiffMatchPatch.prototype.diffLineMode = function(text1, text2, deadline) {
		    var a, diffs, linearray, pointer, countInsert, countDelete, textInsert, textDelete, j;
		    a = this.diffLinesToChars(text1, text2);
		    text1 = a.chars1;
		    text2 = a.chars2;
		    linearray = a.lineArray;
		    diffs = this.DiffMain(text1, text2, false, deadline);
		    this.diffCharsToLines(diffs, linearray);
		    this.diffCleanupSemantic(diffs);
		    diffs.push([DIFF_EQUAL, ""]);
		    pointer = 0;
		    countDelete = 0;
		    countInsert = 0;
		    textDelete = "";
		    textInsert = "";
		    while (pointer < diffs.length) {
		      switch (diffs[pointer][0]) {
		        case DIFF_INSERT:
		          countInsert++;
		          textInsert += diffs[pointer][1];
		          break;
		        case DIFF_DELETE:
		          countDelete++;
		          textDelete += diffs[pointer][1];
		          break;
		        case DIFF_EQUAL:
		          if (countDelete >= 1 && countInsert >= 1) {
		            diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert);
		            pointer = pointer - countDelete - countInsert;
		            a = this.DiffMain(textDelete, textInsert, false, deadline);
		            for (j = a.length - 1; j >= 0; j--) {
		              diffs.splice(pointer, 0, a[j]);
		            }
		            pointer = pointer + a.length;
		          }
		          countInsert = 0;
		          countDelete = 0;
		          textDelete = "";
		          textInsert = "";
		          break;
		      }
		      pointer++;
		    }
		    diffs.pop();
		    return diffs;
		  };
		  DiffMatchPatch.prototype.diffBisect = function(text1, text2, deadline) {
		    var text1Length, text2Length, maxD, vOffset, vLength, v1, v2, x, delta, front, k1start, k1end, k2start, k2end, k2Offset, k1Offset, x1, x2, y1, y2, d, k1, k2;
		    text1Length = text1.length;
		    text2Length = text2.length;
		    maxD = Math.ceil((text1Length + text2Length) / 2);
		    vOffset = maxD;
		    vLength = 2 * maxD;
		    v1 = new Array(vLength);
		    v2 = new Array(vLength);
		    for (x = 0; x < vLength; x++) {
		      v1[x] = -1;
		      v2[x] = -1;
		    }
		    v1[vOffset + 1] = 0;
		    v2[vOffset + 1] = 0;
		    delta = text1Length - text2Length;
		    front = delta % 2 !== 0;
		    k1start = 0;
		    k1end = 0;
		    k2start = 0;
		    k2end = 0;
		    for (d = 0; d < maxD; d++) {
		      if (Date.now() > deadline) {
		        break;
		      }
		      for (k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {
		        k1Offset = vOffset + k1;
		        if (k1 === -d || k1 !== d && v1[k1Offset - 1] < v1[k1Offset + 1]) {
		          x1 = v1[k1Offset + 1];
		        } else {
		          x1 = v1[k1Offset - 1] + 1;
		        }
		        y1 = x1 - k1;
		        while (x1 < text1Length && y1 < text2Length && text1.charAt(x1) === text2.charAt(y1)) {
		          x1++;
		          y1++;
		        }
		        v1[k1Offset] = x1;
		        if (x1 > text1Length) {
		          k1end += 2;
		        } else if (y1 > text2Length) {
		          k1start += 2;
		        } else if (front) {
		          k2Offset = vOffset + delta - k1;
		          if (k2Offset >= 0 && k2Offset < vLength && v2[k2Offset] !== -1) {
		            x2 = text1Length - v2[k2Offset];
		            if (x1 >= x2) {
		              return this.diffBisectSplit(text1, text2, x1, y1, deadline);
		            }
		          }
		        }
		      }
		      for (k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {
		        k2Offset = vOffset + k2;
		        if (k2 === -d || k2 !== d && v2[k2Offset - 1] < v2[k2Offset + 1]) {
		          x2 = v2[k2Offset + 1];
		        } else {
		          x2 = v2[k2Offset - 1] + 1;
		        }
		        y2 = x2 - k2;
		        while (x2 < text1Length && y2 < text2Length && text1.charAt(text1Length - x2 - 1) === text2.charAt(text2Length - y2 - 1)) {
		          x2++;
		          y2++;
		        }
		        v2[k2Offset] = x2;
		        if (x2 > text1Length) {
		          k2end += 2;
		        } else if (y2 > text2Length) {
		          k2start += 2;
		        } else if (!front) {
		          k1Offset = vOffset + delta - k2;
		          if (k1Offset >= 0 && k1Offset < vLength && v1[k1Offset] !== -1) {
		            x1 = v1[k1Offset];
		            y1 = vOffset + x1 - k1Offset;
		            x2 = text1Length - x2;
		            if (x1 >= x2) {
		              return this.diffBisectSplit(text1, text2, x1, y1, deadline);
		            }
		          }
		        }
		      }
		    }
		    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];
		  };
		  DiffMatchPatch.prototype.diffBisectSplit = function(text1, text2, x, y, deadline) {
		    var text1a, text1b, text2a, text2b, diffs, diffsb;
		    text1a = text1.substring(0, x);
		    text2a = text2.substring(0, y);
		    text1b = text1.substring(x);
		    text2b = text2.substring(y);
		    diffs = this.DiffMain(text1a, text2a, false, deadline);
		    diffsb = this.DiffMain(text1b, text2b, false, deadline);
		    return diffs.concat(diffsb);
		  };
		  DiffMatchPatch.prototype.diffCleanupSemantic = function(diffs) {
		    var changes = false;
		    var equalities = [];
		    var equalitiesLength = 0;
		    var lastequality = null;
		    var pointer = 0;
		    var lengthInsertions1 = 0;
		    var lengthDeletions1 = 0;
		    var lengthInsertions2 = 0;
		    var lengthDeletions2 = 0;
		    while (pointer < diffs.length) {
		      if (diffs[pointer][0] === DIFF_EQUAL) {
		        equalities[equalitiesLength++] = pointer;
		        lengthInsertions1 = lengthInsertions2;
		        lengthDeletions1 = lengthDeletions2;
		        lengthInsertions2 = 0;
		        lengthDeletions2 = 0;
		        lastequality = diffs[pointer][1];
		      } else {
		        if (diffs[pointer][0] === DIFF_INSERT) {
		          lengthInsertions2 += diffs[pointer][1].length;
		        } else {
		          lengthDeletions2 += diffs[pointer][1].length;
		        }
		        if (lastequality && lastequality.length <= Math.max(lengthInsertions1, lengthDeletions1) && lastequality.length <= Math.max(lengthInsertions2, lengthDeletions2)) {
		          diffs.splice(equalities[equalitiesLength - 1], 0, [DIFF_DELETE, lastequality]);
		          diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;
		          equalitiesLength--;
		          equalitiesLength--;
		          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;
		          lengthInsertions1 = 0;
		          lengthDeletions1 = 0;
		          lengthInsertions2 = 0;
		          lengthDeletions2 = 0;
		          lastequality = null;
		          changes = true;
		        }
		      }
		      pointer++;
		    }
		    if (changes) {
		      this.diffCleanupMerge(diffs);
		    }
		    var deletion, insertion, overlapLength1, overlapLength2;
		    pointer = 1;
		    while (pointer < diffs.length) {
		      if (diffs[pointer - 1][0] === DIFF_DELETE && diffs[pointer][0] === DIFF_INSERT) {
		        deletion = diffs[pointer - 1][1];
		        insertion = diffs[pointer][1];
		        overlapLength1 = this.diffCommonOverlap(deletion, insertion);
		        overlapLength2 = this.diffCommonOverlap(insertion, deletion);
		        if (overlapLength1 >= overlapLength2) {
		          if (overlapLength1 >= deletion.length / 2 || overlapLength1 >= insertion.length / 2) {
		            diffs.splice(pointer, 0, [DIFF_EQUAL, insertion.substring(0, overlapLength1)]);
		            diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlapLength1);
		            diffs[pointer + 1][1] = insertion.substring(overlapLength1);
		            pointer++;
		          }
		        } else {
		          if (overlapLength2 >= deletion.length / 2 || overlapLength2 >= insertion.length / 2) {
		            diffs.splice(pointer, 0, [DIFF_EQUAL, deletion.substring(0, overlapLength2)]);
		            diffs[pointer - 1][0] = DIFF_INSERT;
		            diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlapLength2);
		            diffs[pointer + 1][0] = DIFF_DELETE;
		            diffs[pointer + 1][1] = deletion.substring(overlapLength2);
		            pointer++;
		          }
		        }
		        pointer++;
		      }
		      pointer++;
		    }
		  };
		  DiffMatchPatch.prototype.diffCommonOverlap = function(text1, text2) {
		    var text1Length = text1.length;
		    var text2Length = text2.length;
		    if (text1Length === 0 || text2Length === 0) {
		      return 0;
		    }
		    if (text1Length > text2Length) {
		      text1 = text1.substring(text1Length - text2Length);
		    } else if (text1Length < text2Length) {
		      text2 = text2.substring(0, text1Length);
		    }
		    var textLength = Math.min(text1Length, text2Length);
		    if (text1 === text2) {
		      return textLength;
		    }
		    var best = 0;
		    var length = 1;
		    while (true) {
		      var pattern = text1.substring(textLength - length);
		      var found = text2.indexOf(pattern);
		      if (found === -1) {
		        return best;
		      }
		      length += found;
		      if (found === 0 || text1.substring(textLength - length) === text2.substring(0, length)) {
		        best = length;
		        length++;
		      }
		    }
		  };
		  DiffMatchPatch.prototype.diffLinesToChars = function(text1, text2) {
		    var lineArray = [];
		    var lineHash = {};
		    lineArray[0] = "";
		    function diffLinesToCharsMunge(text) {
		      var chars = "";
		      var lineStart = 0;
		      var lineEnd = -1;
		      var lineArrayLength = lineArray.length;
		      while (lineEnd < text.length - 1) {
		        lineEnd = text.indexOf("\n", lineStart);
		        if (lineEnd === -1) {
		          lineEnd = text.length - 1;
		        }
		        var line = text.substring(lineStart, lineEnd + 1);
		        lineStart = lineEnd + 1;
		        if (hasOwn.call(lineHash, line)) {
		          chars += String.fromCharCode(lineHash[line]);
		        } else {
		          chars += String.fromCharCode(lineArrayLength);
		          lineHash[line] = lineArrayLength;
		          lineArray[lineArrayLength++] = line;
		        }
		      }
		      return chars;
		    }
		    var chars1 = diffLinesToCharsMunge(text1);
		    var chars2 = diffLinesToCharsMunge(text2);
		    return {
		      chars1,
		      chars2,
		      lineArray
		    };
		  };
		  DiffMatchPatch.prototype.diffCharsToLines = function(diffs, lineArray) {
		    for (var x = 0; x < diffs.length; x++) {
		      var chars = diffs[x][1];
		      var text = [];
		      for (var y = 0; y < chars.length; y++) {
		        text[y] = lineArray[chars.charCodeAt(y)];
		      }
		      diffs[x][1] = text.join("");
		    }
		  };
		  DiffMatchPatch.prototype.diffCleanupMerge = function(diffs) {
		    diffs.push([DIFF_EQUAL, ""]);
		    var pointer = 0;
		    var countDelete = 0;
		    var countInsert = 0;
		    var textDelete = "";
		    var textInsert = "";
		    while (pointer < diffs.length) {
		      switch (diffs[pointer][0]) {
		        case DIFF_INSERT:
		          countInsert++;
		          textInsert += diffs[pointer][1];
		          pointer++;
		          break;
		        case DIFF_DELETE:
		          countDelete++;
		          textDelete += diffs[pointer][1];
		          pointer++;
		          break;
		        case DIFF_EQUAL:
		          if (countDelete + countInsert > 1) {
		            if (countDelete !== 0 && countInsert !== 0) {
		              var commonlength = this.diffCommonPrefix(textInsert, textDelete);
		              if (commonlength !== 0) {
		                if (pointer - countDelete - countInsert > 0 && diffs[pointer - countDelete - countInsert - 1][0] === DIFF_EQUAL) {
		                  diffs[pointer - countDelete - countInsert - 1][1] += textInsert.substring(0, commonlength);
		                } else {
		                  diffs.splice(0, 0, [DIFF_EQUAL, textInsert.substring(0, commonlength)]);
		                  pointer++;
		                }
		                textInsert = textInsert.substring(commonlength);
		                textDelete = textDelete.substring(commonlength);
		              }
		              commonlength = this.diffCommonSuffix(textInsert, textDelete);
		              if (commonlength !== 0) {
		                diffs[pointer][1] = textInsert.substring(textInsert.length - commonlength) + diffs[pointer][1];
		                textInsert = textInsert.substring(0, textInsert.length - commonlength);
		                textDelete = textDelete.substring(0, textDelete.length - commonlength);
		              }
		            }
		            if (countDelete === 0) {
		              diffs.splice(pointer - countInsert, countDelete + countInsert, [DIFF_INSERT, textInsert]);
		            } else if (countInsert === 0) {
		              diffs.splice(pointer - countDelete, countDelete + countInsert, [DIFF_DELETE, textDelete]);
		            } else {
		              diffs.splice(pointer - countDelete - countInsert, countDelete + countInsert, [DIFF_DELETE, textDelete], [DIFF_INSERT, textInsert]);
		            }
		            pointer = pointer - countDelete - countInsert + (countDelete ? 1 : 0) + (countInsert ? 1 : 0) + 1;
		          } else if (pointer !== 0 && diffs[pointer - 1][0] === DIFF_EQUAL) {
		            diffs[pointer - 1][1] += diffs[pointer][1];
		            diffs.splice(pointer, 1);
		          } else {
		            pointer++;
		          }
		          countInsert = 0;
		          countDelete = 0;
		          textDelete = "";
		          textInsert = "";
		          break;
		      }
		    }
		    if (diffs[diffs.length - 1][1] === "") {
		      diffs.pop();
		    }
		    var changes = false;
		    pointer = 1;
		    while (pointer < diffs.length - 1) {
		      if (diffs[pointer - 1][0] === DIFF_EQUAL && diffs[pointer + 1][0] === DIFF_EQUAL) {
		        var diffPointer = diffs[pointer][1];
		        var position = diffPointer.substring(diffPointer.length - diffs[pointer - 1][1].length);
		        if (position === diffs[pointer - 1][1]) {
		          diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);
		          diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];
		          diffs.splice(pointer - 1, 1);
		          changes = true;
		        } else if (diffPointer.substring(0, diffs[pointer + 1][1].length) === diffs[pointer + 1][1]) {
		          diffs[pointer - 1][1] += diffs[pointer + 1][1];
		          diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];
		          diffs.splice(pointer + 1, 1);
		          changes = true;
		        }
		      }
		      pointer++;
		    }
		    if (changes) {
		      this.diffCleanupMerge(diffs);
		    }
		  };
		  function diff(o, n) {
		    var diff2, output, text;
		    diff2 = new DiffMatchPatch();
		    output = diff2.DiffMain(o, n);
		    diff2.diffCleanupEfficiency(output);
		    text = diff2.diffPrettyHtml(output);
		    return text;
		  }
		  var QUnit = {};
		  config.currentModule.suiteReport = runSuite;
		  config.pq = new ProcessingQueue(test);
		  var globalStartCalled = false;
		  var runStarted = false;
		  QUnit.isLocal = window$1 && window$1.location && window$1.location.protocol === "file:";
		  QUnit.version = "2.24.1";
		  extend(QUnit, {
		    config,
		    diff,
		    dump,
		    equiv,
		    reporters,
		    hooks,
		    is,
		    objectType,
		    on,
		    onError: onWindowError,
		    onUncaughtException,
		    pushFailure,
		    assert: Assert.prototype,
		    module: module$1,
		    test,
		    // alias other test flavors for easy access
		    todo: test.todo,
		    skip: test.skip,
		    only: test.only,
		    start: function start(count) {
		      if (config.current) {
		        throw new Error("QUnit.start cannot be called inside a test context.");
		      }
		      var globalStartAlreadyCalled = globalStartCalled;
		      globalStartCalled = true;
		      if (runStarted) {
		        throw new Error("Called start() while test already started running");
		      }
		      if (globalStartAlreadyCalled || count > 1) {
		        throw new Error("Called start() outside of a test context too many times");
		      }
		      if (config.autostart) {
		        throw new Error("Called start() outside of a test context when QUnit.config.autostart was true");
		      }
		      if (!config.pageLoaded) {
		        config.autostart = true;
		        if (!document) {
		          QUnit.autostart();
		        }
		        return;
		      }
		      scheduleBegin();
		    },
		    onUnhandledRejection: function onUnhandledRejection(reason) {
		      Logger.warn("QUnit.onUnhandledRejection is deprecated and will be removed in QUnit 3.0. Please use QUnit.onUncaughtException instead.");
		      onUncaughtException(reason);
		    },
		    extend: function extend$1() {
		      Logger.warn("QUnit.extend is deprecated and will be removed in QUnit 3.0. Please use Object.assign instead.");
		      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
		        args[_key] = arguments[_key];
		      }
		      return extend.apply(this, args);
		    },
		    load: function load() {
		      Logger.warn("QUnit.load is deprecated and will be removed in QUnit 3.0. https://qunitjs.com/api/QUnit/load/");
		      QUnit.autostart();
		    },
		    /**
		     * @internal
		     */
		    autostart: function autostart() {
		      config.pageLoaded = true;
		      extend(config, {
		        started: 0,
		        updateRate: 1e3,
		        autostart: true,
		        filter: ""
		      }, true);
		      if (!runStarted) {
		        config.blocking = false;
		        if (config.autostart) {
		          scheduleBegin();
		        }
		      }
		    },
		    stack: function stack(offset) {
		      offset = (offset || 0) + 2;
		      var source = sourceFromStacktrace(offset);
		      return source;
		    }
		  });
		  registerLoggingCallbacks(QUnit);
		  function scheduleBegin() {
		    runStarted = true;
		    if (setTimeout$1) {
		      setTimeout$1(function() {
		        begin();
		      });
		    } else {
		      begin();
		    }
		  }
		  function unblockAndAdvanceQueue() {
		    config.blocking = false;
		    config.pq.advance();
		  }
		  function begin() {
		    if (config.started) {
		      unblockAndAdvanceQueue();
		      return;
		    }
		    if (config.reporters.console) {
		      reporters.console.init(QUnit);
		    }
		    if (config.reporters.tap) {
		      reporters.tap.init(QUnit);
		    }
		    config.started = performance.now();
		    if (config.modules[0].name === "" && config.modules[0].tests.length === 0) {
		      config.modules.shift();
		    }
		    var modulesLog = [];
		    for (var i = 0; i < config.modules.length; i++) {
		      if (config.modules[i].name !== "") {
		        modulesLog.push({
		          name: config.modules[i].name,
		          moduleId: config.modules[i].moduleId,
		          // Added in QUnit 1.16.0 for internal use by html-reporter,
		          // but no longer used since QUnit 2.7.0.
		          // @deprecated Kept unofficially to be removed in QUnit 3.0.
		          tests: config.modules[i].tests
		        });
		      }
		    }
		    emit("runStart", runSuite.start(true));
		    runLoggingCallbacks("begin", {
		      totalTests: Test.count,
		      modules: modulesLog
		    }).then(unblockAndAdvanceQueue);
		  }
		  exportQUnit(QUnit);
		  (function() {
		    if (!window$1 || !document) {
		      return;
		    }
		    var config2 = QUnit.config;
		    var hasOwn2 = Object.prototype.hasOwnProperty;
		    function storeFixture() {
		      if (hasOwn2.call(config2, "fixture")) {
		        return;
		      }
		      var fixture = document.getElementById("qunit-fixture");
		      if (fixture) {
		        config2.fixture = fixture.cloneNode(true);
		      }
		    }
		    QUnit.begin(storeFixture);
		    function resetFixture() {
		      if (config2.fixture == null) {
		        return;
		      }
		      var fixture = document.getElementById("qunit-fixture");
		      var resetFixtureType = _typeof(config2.fixture);
		      if (resetFixtureType === "string") {
		        var newFixture = document.createElement("div");
		        newFixture.setAttribute("id", "qunit-fixture");
		        newFixture.innerHTML = config2.fixture;
		        fixture.parentNode.replaceChild(newFixture, fixture);
		      } else {
		        var clonedFixture = config2.fixture.cloneNode(true);
		        fixture.parentNode.replaceChild(clonedFixture, fixture);
		      }
		    }
		    QUnit.testStart(resetFixture);
		  })();
		  (function() {
		    var location = typeof window$1 !== "undefined" && window$1.location;
		    if (!location) {
		      return;
		    }
		    var urlParams = getUrlParams();
		    QUnit.urlParams = urlParams;
		    QUnit.config.filter = urlParams.filter;
		    if (/^[0-9]+$/.test(urlParams.maxDepth)) {
		      QUnit.config.maxDepth = QUnit.dump.maxDepth = +urlParams.maxDepth;
		    }
		    QUnit.config.module = urlParams.module;
		    QUnit.config.moduleId = [].concat(urlParams.moduleId || []);
		    QUnit.config.testId = [].concat(urlParams.testId || []);
		    if (urlParams.seed === "true" || urlParams.seed === true) {
		      QUnit.config.seed = (Math.random().toString(36) + "0000000000").slice(2, 12);
		    } else if (urlParams.seed) {
		      QUnit.config.seed = urlParams.seed;
		    }
		    QUnit.config.urlConfig.push({
		      id: "hidepassed",
		      label: "Hide passed tests",
		      tooltip: "Only show tests and assertions that fail. Stored as query-strings."
		    }, {
		      id: "noglobals",
		      label: "Check for Globals",
		      tooltip: "Enabling this will test if any test introduces new properties on the global object (`window` in Browsers). Stored as query-strings."
		    }, {
		      id: "notrycatch",
		      label: "No try-catch",
		      tooltip: "Enabling this will run tests outside of a try-catch block. Makes debugging exceptions in IE reasonable. Stored as query-strings."
		    });
		    QUnit.begin(function() {
		      var urlConfig = QUnit.config.urlConfig;
		      for (var i = 0; i < urlConfig.length; i++) {
		        var option = QUnit.config.urlConfig[i];
		        if (typeof option !== "string") {
		          option = option.id;
		        }
		        if (QUnit.config[option] === void 0) {
		          QUnit.config[option] = urlParams[option];
		        }
		      }
		    });
		    function getUrlParams() {
		      var urlParams2 = /* @__PURE__ */ Object.create(null);
		      var params = location.search.slice(1).split("&");
		      var length = params.length;
		      for (var i = 0; i < length; i++) {
		        if (params[i]) {
		          var param = params[i].split("=");
		          var name = decodeQueryParam(param[0]);
		          var value = param.length === 1 || decodeQueryParam(param.slice(1).join("="));
		          if (name in urlParams2) {
		            urlParams2[name] = [].concat(urlParams2[name], value);
		          } else {
		            urlParams2[name] = value;
		          }
		        }
		      }
		      return urlParams2;
		    }
		    function decodeQueryParam(param) {
		      return decodeURIComponent(param.replace(/\+/g, "%20"));
		    }
		  })();
		  var fuzzysort$1 = {
		    exports: {}
		  };
		  (function(module2) {
		    (function(root, UMD) {
		      if (module2.exports) module2.exports = UMD();
		      else root.fuzzysort = UMD();
		    })(commonjsGlobal$1, function UMD() {
		      function fuzzysortNew(instanceOptions) {
		        var fuzzysort2 = {
		          single: function single(search, target, options) {
		            if (search == "farzher") return {
		              target: "farzher was here (^-^*)/",
		              score: 0,
		              indexes: [0, 1, 2, 3, 4, 5, 6]
		            };
		            if (!search) return null;
		            if (!isObj(search)) search = fuzzysort2.getPreparedSearch(search);
		            if (!target) return null;
		            if (!isObj(target)) target = fuzzysort2.getPrepared(target);
		            var allowTypo = options && options.allowTypo !== void 0 ? options.allowTypo : instanceOptions && instanceOptions.allowTypo !== void 0 ? instanceOptions.allowTypo : true;
		            var algorithm = allowTypo ? fuzzysort2.algorithm : fuzzysort2.algorithmNoTypo;
		            return algorithm(search, target, search[0]);
		          },
		          go: function go(search, targets, options) {
		            if (search == "farzher") return [{
		              target: "farzher was here (^-^*)/",
		              score: 0,
		              indexes: [0, 1, 2, 3, 4, 5, 6],
		              obj: targets ? targets[0] : null
		            }];
		            if (!search) return noResults;
		            search = fuzzysort2.prepareSearch(search);
		            var searchLowerCode = search[0];
		            var threshold = options && options.threshold || instanceOptions && instanceOptions.threshold || -9007199254740991;
		            var limit = options && options.limit || instanceOptions && instanceOptions.limit || 9007199254740991;
		            var allowTypo = options && options.allowTypo !== void 0 ? options.allowTypo : instanceOptions && instanceOptions.allowTypo !== void 0 ? instanceOptions.allowTypo : true;
		            var algorithm = allowTypo ? fuzzysort2.algorithm : fuzzysort2.algorithmNoTypo;
		            var resultsLen = 0;
		            var limitedCount = 0;
		            var targetsLen = targets.length;
		            if (options && options.keys) {
		              var scoreFn = options.scoreFn || defaultScoreFn;
		              var keys = options.keys;
		              var keysLen = keys.length;
		              for (var i = targetsLen - 1; i >= 0; --i) {
		                var obj = targets[i];
		                var objResults = new Array(keysLen);
		                for (var keyI = keysLen - 1; keyI >= 0; --keyI) {
		                  var key = keys[keyI];
		                  var target = getValue(obj, key);
		                  if (!target) {
		                    objResults[keyI] = null;
		                    continue;
		                  }
		                  if (!isObj(target)) target = fuzzysort2.getPrepared(target);
		                  objResults[keyI] = algorithm(search, target, searchLowerCode);
		                }
		                objResults.obj = obj;
		                var score = scoreFn(objResults);
		                if (score === null) continue;
		                if (score < threshold) continue;
		                objResults.score = score;
		                if (resultsLen < limit) {
		                  q.add(objResults);
		                  ++resultsLen;
		                } else {
		                  ++limitedCount;
		                  if (score > q.peek().score) q.replaceTop(objResults);
		                }
		              }
		            } else if (options && options.key) {
		              var key = options.key;
		              for (var i = targetsLen - 1; i >= 0; --i) {
		                var obj = targets[i];
		                var target = getValue(obj, key);
		                if (!target) continue;
		                if (!isObj(target)) target = fuzzysort2.getPrepared(target);
		                var result = algorithm(search, target, searchLowerCode);
		                if (result === null) continue;
		                if (result.score < threshold) continue;
		                result = {
		                  target: result.target,
		                  _targetLowerCodes: null,
		                  _nextBeginningIndexes: null,
		                  score: result.score,
		                  indexes: result.indexes,
		                  obj
		                };
		                if (resultsLen < limit) {
		                  q.add(result);
		                  ++resultsLen;
		                } else {
		                  ++limitedCount;
		                  if (result.score > q.peek().score) q.replaceTop(result);
		                }
		              }
		            } else {
		              for (var i = targetsLen - 1; i >= 0; --i) {
		                var target = targets[i];
		                if (!target) continue;
		                if (!isObj(target)) target = fuzzysort2.getPrepared(target);
		                var result = algorithm(search, target, searchLowerCode);
		                if (result === null) continue;
		                if (result.score < threshold) continue;
		                if (resultsLen < limit) {
		                  q.add(result);
		                  ++resultsLen;
		                } else {
		                  ++limitedCount;
		                  if (result.score > q.peek().score) q.replaceTop(result);
		                }
		              }
		            }
		            if (resultsLen === 0) return noResults;
		            var results = new Array(resultsLen);
		            for (var i = resultsLen - 1; i >= 0; --i) results[i] = q.poll();
		            results.total = resultsLen + limitedCount;
		            return results;
		          },
		          goAsync: function goAsync(search, targets, options) {
		            var canceled = false;
		            var p = new Promise(function(resolve, reject) {
		              if (search == "farzher") return resolve([{
		                target: "farzher was here (^-^*)/",
		                score: 0,
		                indexes: [0, 1, 2, 3, 4, 5, 6],
		                obj: targets ? targets[0] : null
		              }]);
		              if (!search) return resolve(noResults);
		              search = fuzzysort2.prepareSearch(search);
		              var searchLowerCode = search[0];
		              var q2 = fastpriorityqueue();
		              var iCurrent = targets.length - 1;
		              var threshold = options && options.threshold || instanceOptions && instanceOptions.threshold || -9007199254740991;
		              var limit = options && options.limit || instanceOptions && instanceOptions.limit || 9007199254740991;
		              var allowTypo = options && options.allowTypo !== void 0 ? options.allowTypo : instanceOptions && instanceOptions.allowTypo !== void 0 ? instanceOptions.allowTypo : true;
		              var algorithm = allowTypo ? fuzzysort2.algorithm : fuzzysort2.algorithmNoTypo;
		              var resultsLen = 0;
		              var limitedCount = 0;
		              function step() {
		                if (canceled) return reject("canceled");
		                var startMs = Date.now();
		                if (options && options.keys) {
		                  var scoreFn = options.scoreFn || defaultScoreFn;
		                  var keys = options.keys;
		                  var keysLen = keys.length;
		                  for (; iCurrent >= 0; --iCurrent) {
		                    if (iCurrent % 1e3 === 0) {
		                      if (Date.now() - startMs >= 10) {
		                        isNode ? setImmediate(step) : setTimeout(step);
		                        return;
		                      }
		                    }
		                    var obj = targets[iCurrent];
		                    var objResults = new Array(keysLen);
		                    for (var keyI = keysLen - 1; keyI >= 0; --keyI) {
		                      var key = keys[keyI];
		                      var target = getValue(obj, key);
		                      if (!target) {
		                        objResults[keyI] = null;
		                        continue;
		                      }
		                      if (!isObj(target)) target = fuzzysort2.getPrepared(target);
		                      objResults[keyI] = algorithm(search, target, searchLowerCode);
		                    }
		                    objResults.obj = obj;
		                    var score = scoreFn(objResults);
		                    if (score === null) continue;
		                    if (score < threshold) continue;
		                    objResults.score = score;
		                    if (resultsLen < limit) {
		                      q2.add(objResults);
		                      ++resultsLen;
		                    } else {
		                      ++limitedCount;
		                      if (score > q2.peek().score) q2.replaceTop(objResults);
		                    }
		                  }
		                } else if (options && options.key) {
		                  var key = options.key;
		                  for (; iCurrent >= 0; --iCurrent) {
		                    if (iCurrent % 1e3 === 0) {
		                      if (Date.now() - startMs >= 10) {
		                        isNode ? setImmediate(step) : setTimeout(step);
		                        return;
		                      }
		                    }
		                    var obj = targets[iCurrent];
		                    var target = getValue(obj, key);
		                    if (!target) continue;
		                    if (!isObj(target)) target = fuzzysort2.getPrepared(target);
		                    var result = algorithm(search, target, searchLowerCode);
		                    if (result === null) continue;
		                    if (result.score < threshold) continue;
		                    result = {
		                      target: result.target,
		                      _targetLowerCodes: null,
		                      _nextBeginningIndexes: null,
		                      score: result.score,
		                      indexes: result.indexes,
		                      obj
		                    };
		                    if (resultsLen < limit) {
		                      q2.add(result);
		                      ++resultsLen;
		                    } else {
		                      ++limitedCount;
		                      if (result.score > q2.peek().score) q2.replaceTop(result);
		                    }
		                  }
		                } else {
		                  for (; iCurrent >= 0; --iCurrent) {
		                    if (iCurrent % 1e3 === 0) {
		                      if (Date.now() - startMs >= 10) {
		                        isNode ? setImmediate(step) : setTimeout(step);
		                        return;
		                      }
		                    }
		                    var target = targets[iCurrent];
		                    if (!target) continue;
		                    if (!isObj(target)) target = fuzzysort2.getPrepared(target);
		                    var result = algorithm(search, target, searchLowerCode);
		                    if (result === null) continue;
		                    if (result.score < threshold) continue;
		                    if (resultsLen < limit) {
		                      q2.add(result);
		                      ++resultsLen;
		                    } else {
		                      ++limitedCount;
		                      if (result.score > q2.peek().score) q2.replaceTop(result);
		                    }
		                  }
		                }
		                if (resultsLen === 0) return resolve(noResults);
		                var results = new Array(resultsLen);
		                for (var i = resultsLen - 1; i >= 0; --i) results[i] = q2.poll();
		                results.total = resultsLen + limitedCount;
		                resolve(results);
		              }
		              isNode ? setImmediate(step) : step();
		            });
		            p.cancel = function() {
		              canceled = true;
		            };
		            return p;
		          },
		          highlight: function highlight(result, hOpen, hClose) {
		            if (typeof hOpen == "function") return fuzzysort2.highlightCallback(result, hOpen);
		            if (result === null) return null;
		            if (hOpen === void 0) hOpen = "<b>";
		            if (hClose === void 0) hClose = "</b>";
		            var highlighted = "";
		            var matchesIndex = 0;
		            var opened = false;
		            var target = result.target;
		            var targetLen = target.length;
		            var matchesBest = result.indexes;
		            for (var i = 0; i < targetLen; ++i) {
		              var char = target[i];
		              if (matchesBest[matchesIndex] === i) {
		                ++matchesIndex;
		                if (!opened) {
		                  opened = true;
		                  highlighted += hOpen;
		                }
		                if (matchesIndex === matchesBest.length) {
		                  highlighted += char + hClose + target.substr(i + 1);
		                  break;
		                }
		              } else {
		                if (opened) {
		                  opened = false;
		                  highlighted += hClose;
		                }
		              }
		              highlighted += char;
		            }
		            return highlighted;
		          },
		          highlightCallback: function highlightCallback(result, cb) {
		            if (result === null) return null;
		            var target = result.target;
		            var targetLen = target.length;
		            var indexes = result.indexes;
		            var highlighted = "";
		            var matchI = 0;
		            var indexesI = 0;
		            var opened = false;
		            var result = [];
		            for (var i = 0; i < targetLen; ++i) {
		              var char = target[i];
		              if (indexes[indexesI] === i) {
		                ++indexesI;
		                if (!opened) {
		                  opened = true;
		                  result.push(highlighted);
		                  highlighted = "";
		                }
		                if (indexesI === indexes.length) {
		                  highlighted += char;
		                  result.push(cb(highlighted, matchI++));
		                  highlighted = "";
		                  result.push(target.substr(i + 1));
		                  break;
		                }
		              } else {
		                if (opened) {
		                  opened = false;
		                  result.push(cb(highlighted, matchI++));
		                  highlighted = "";
		                }
		              }
		              highlighted += char;
		            }
		            return result;
		          },
		          prepare: function prepare(target) {
		            if (!target) return {
		              target: "",
		              _targetLowerCodes: [
		                0
		                /*this 0 doesn't make sense. here because an empty array causes the algorithm to deoptimize and run 50% slower!*/
		              ],
		              _nextBeginningIndexes: null,
		              score: null,
		              indexes: null,
		              obj: null
		            };
		            return {
		              target,
		              _targetLowerCodes: fuzzysort2.prepareLowerCodes(target),
		              _nextBeginningIndexes: null,
		              score: null,
		              indexes: null,
		              obj: null
		            };
		          },
		          prepareSlow: function prepareSlow(target) {
		            if (!target) return {
		              target: "",
		              _targetLowerCodes: [
		                0
		                /*this 0 doesn't make sense. here because an empty array causes the algorithm to deoptimize and run 50% slower!*/
		              ],
		              _nextBeginningIndexes: null,
		              score: null,
		              indexes: null,
		              obj: null
		            };
		            return {
		              target,
		              _targetLowerCodes: fuzzysort2.prepareLowerCodes(target),
		              _nextBeginningIndexes: fuzzysort2.prepareNextBeginningIndexes(target),
		              score: null,
		              indexes: null,
		              obj: null
		            };
		          },
		          prepareSearch: function prepareSearch(search) {
		            if (!search) search = "";
		            return fuzzysort2.prepareLowerCodes(search);
		          },
		          // Below this point is only internal code
		          // Below this point is only internal code
		          // Below this point is only internal code
		          // Below this point is only internal code
		          getPrepared: function getPrepared(target) {
		            if (target.length > 999) return fuzzysort2.prepare(target);
		            var targetPrepared = preparedCache.get(target);
		            if (targetPrepared !== void 0) return targetPrepared;
		            targetPrepared = fuzzysort2.prepare(target);
		            preparedCache.set(target, targetPrepared);
		            return targetPrepared;
		          },
		          getPreparedSearch: function getPreparedSearch(search) {
		            if (search.length > 999) return fuzzysort2.prepareSearch(search);
		            var searchPrepared = preparedSearchCache.get(search);
		            if (searchPrepared !== void 0) return searchPrepared;
		            searchPrepared = fuzzysort2.prepareSearch(search);
		            preparedSearchCache.set(search, searchPrepared);
		            return searchPrepared;
		          },
		          algorithm: function algorithm(searchLowerCodes, prepared, searchLowerCode) {
		            var targetLowerCodes = prepared._targetLowerCodes;
		            var searchLen = searchLowerCodes.length;
		            var targetLen = targetLowerCodes.length;
		            var searchI = 0;
		            var targetI = 0;
		            var typoSimpleI = 0;
		            var matchesSimpleLen = 0;
		            for (; ; ) {
		              var isMatch = searchLowerCode === targetLowerCodes[targetI];
		              if (isMatch) {
		                matchesSimple[matchesSimpleLen++] = targetI;
		                ++searchI;
		                if (searchI === searchLen) break;
		                searchLowerCode = searchLowerCodes[typoSimpleI === 0 ? searchI : typoSimpleI === searchI ? searchI + 1 : typoSimpleI === searchI - 1 ? searchI - 1 : searchI];
		              }
		              ++targetI;
		              if (targetI >= targetLen) {
		                for (; ; ) {
		                  if (searchI <= 1) return null;
		                  if (typoSimpleI === 0) {
		                    --searchI;
		                    var searchLowerCodeNew = searchLowerCodes[searchI];
		                    if (searchLowerCode === searchLowerCodeNew) continue;
		                    typoSimpleI = searchI;
		                  } else {
		                    if (typoSimpleI === 1) return null;
		                    --typoSimpleI;
		                    searchI = typoSimpleI;
		                    searchLowerCode = searchLowerCodes[searchI + 1];
		                    var searchLowerCodeNew = searchLowerCodes[searchI];
		                    if (searchLowerCode === searchLowerCodeNew) continue;
		                  }
		                  matchesSimpleLen = searchI;
		                  targetI = matchesSimple[matchesSimpleLen - 1] + 1;
		                  break;
		                }
		              }
		            }
		            var searchI = 0;
		            var typoStrictI = 0;
		            var successStrict = false;
		            var matchesStrictLen = 0;
		            var nextBeginningIndexes = prepared._nextBeginningIndexes;
		            if (nextBeginningIndexes === null) nextBeginningIndexes = prepared._nextBeginningIndexes = fuzzysort2.prepareNextBeginningIndexes(prepared.target);
		            var firstPossibleI = targetI = matchesSimple[0] === 0 ? 0 : nextBeginningIndexes[matchesSimple[0] - 1];
		            if (targetI !== targetLen) for (; ; ) {
		              if (targetI >= targetLen) {
		                if (searchI <= 0) {
		                  ++typoStrictI;
		                  if (typoStrictI > searchLen - 2) break;
		                  if (searchLowerCodes[typoStrictI] === searchLowerCodes[typoStrictI + 1]) continue;
		                  targetI = firstPossibleI;
		                  continue;
		                }
		                --searchI;
		                var lastMatch = matchesStrict[--matchesStrictLen];
		                targetI = nextBeginningIndexes[lastMatch];
		              } else {
		                var isMatch = searchLowerCodes[typoStrictI === 0 ? searchI : typoStrictI === searchI ? searchI + 1 : typoStrictI === searchI - 1 ? searchI - 1 : searchI] === targetLowerCodes[targetI];
		                if (isMatch) {
		                  matchesStrict[matchesStrictLen++] = targetI;
		                  ++searchI;
		                  if (searchI === searchLen) {
		                    successStrict = true;
		                    break;
		                  }
		                  ++targetI;
		                } else {
		                  targetI = nextBeginningIndexes[targetI];
		                }
		              }
		            }
		            {
		              if (successStrict) {
		                var matchesBest = matchesStrict;
		                var matchesBestLen = matchesStrictLen;
		              } else {
		                var matchesBest = matchesSimple;
		                var matchesBestLen = matchesSimpleLen;
		              }
		              var score = 0;
		              var lastTargetI = -1;
		              for (var i = 0; i < searchLen; ++i) {
		                var targetI = matchesBest[i];
		                if (lastTargetI !== targetI - 1) score -= targetI;
		                lastTargetI = targetI;
		              }
		              if (!successStrict) {
		                score *= 1e3;
		                if (typoSimpleI !== 0) score += -20;
		              } else {
		                if (typoStrictI !== 0) score += -20;
		              }
		              score -= targetLen - searchLen;
		              prepared.score = score;
		              prepared.indexes = new Array(matchesBestLen);
		              for (var i = matchesBestLen - 1; i >= 0; --i) prepared.indexes[i] = matchesBest[i];
		              return prepared;
		            }
		          },
		          algorithmNoTypo: function algorithmNoTypo(searchLowerCodes, prepared, searchLowerCode) {
		            var targetLowerCodes = prepared._targetLowerCodes;
		            var searchLen = searchLowerCodes.length;
		            var targetLen = targetLowerCodes.length;
		            var searchI = 0;
		            var targetI = 0;
		            var matchesSimpleLen = 0;
		            for (; ; ) {
		              var isMatch = searchLowerCode === targetLowerCodes[targetI];
		              if (isMatch) {
		                matchesSimple[matchesSimpleLen++] = targetI;
		                ++searchI;
		                if (searchI === searchLen) break;
		                searchLowerCode = searchLowerCodes[searchI];
		              }
		              ++targetI;
		              if (targetI >= targetLen) return null;
		            }
		            var searchI = 0;
		            var successStrict = false;
		            var matchesStrictLen = 0;
		            var nextBeginningIndexes = prepared._nextBeginningIndexes;
		            if (nextBeginningIndexes === null) nextBeginningIndexes = prepared._nextBeginningIndexes = fuzzysort2.prepareNextBeginningIndexes(prepared.target);
		            targetI = matchesSimple[0] === 0 ? 0 : nextBeginningIndexes[matchesSimple[0] - 1];
		            if (targetI !== targetLen) for (; ; ) {
		              if (targetI >= targetLen) {
		                if (searchI <= 0) break;
		                --searchI;
		                var lastMatch = matchesStrict[--matchesStrictLen];
		                targetI = nextBeginningIndexes[lastMatch];
		              } else {
		                var isMatch = searchLowerCodes[searchI] === targetLowerCodes[targetI];
		                if (isMatch) {
		                  matchesStrict[matchesStrictLen++] = targetI;
		                  ++searchI;
		                  if (searchI === searchLen) {
		                    successStrict = true;
		                    break;
		                  }
		                  ++targetI;
		                } else {
		                  targetI = nextBeginningIndexes[targetI];
		                }
		              }
		            }
		            {
		              if (successStrict) {
		                var matchesBest = matchesStrict;
		                var matchesBestLen = matchesStrictLen;
		              } else {
		                var matchesBest = matchesSimple;
		                var matchesBestLen = matchesSimpleLen;
		              }
		              var score = 0;
		              var lastTargetI = -1;
		              for (var i = 0; i < searchLen; ++i) {
		                var targetI = matchesBest[i];
		                if (lastTargetI !== targetI - 1) score -= targetI;
		                lastTargetI = targetI;
		              }
		              if (!successStrict) score *= 1e3;
		              score -= targetLen - searchLen;
		              prepared.score = score;
		              prepared.indexes = new Array(matchesBestLen);
		              for (var i = matchesBestLen - 1; i >= 0; --i) prepared.indexes[i] = matchesBest[i];
		              return prepared;
		            }
		          },
		          prepareLowerCodes: function prepareLowerCodes(str) {
		            var strLen = str.length;
		            var lowerCodes = [];
		            var lower = str.toLowerCase();
		            for (var i = 0; i < strLen; ++i) lowerCodes[i] = lower.charCodeAt(i);
		            return lowerCodes;
		          },
		          prepareBeginningIndexes: function prepareBeginningIndexes(target) {
		            var targetLen = target.length;
		            var beginningIndexes = [];
		            var beginningIndexesLen = 0;
		            var wasUpper = false;
		            var wasAlphanum = false;
		            for (var i = 0; i < targetLen; ++i) {
		              var targetCode = target.charCodeAt(i);
		              var isUpper = targetCode >= 65 && targetCode <= 90;
		              var isAlphanum = isUpper || targetCode >= 97 && targetCode <= 122 || targetCode >= 48 && targetCode <= 57;
		              var isBeginning = isUpper && !wasUpper || !wasAlphanum || !isAlphanum;
		              wasUpper = isUpper;
		              wasAlphanum = isAlphanum;
		              if (isBeginning) beginningIndexes[beginningIndexesLen++] = i;
		            }
		            return beginningIndexes;
		          },
		          prepareNextBeginningIndexes: function prepareNextBeginningIndexes(target) {
		            var targetLen = target.length;
		            var beginningIndexes = fuzzysort2.prepareBeginningIndexes(target);
		            var nextBeginningIndexes = [];
		            var lastIsBeginning = beginningIndexes[0];
		            var lastIsBeginningI = 0;
		            for (var i = 0; i < targetLen; ++i) {
		              if (lastIsBeginning > i) {
		                nextBeginningIndexes[i] = lastIsBeginning;
		              } else {
		                lastIsBeginning = beginningIndexes[++lastIsBeginningI];
		                nextBeginningIndexes[i] = lastIsBeginning === void 0 ? targetLen : lastIsBeginning;
		              }
		            }
		            return nextBeginningIndexes;
		          },
		          cleanup,
		          new: fuzzysortNew
		        };
		        return fuzzysort2;
		      }
		      var isNode = typeof commonjsRequire !== "undefined" && typeof window === "undefined";
		      var MyMap = typeof Map === "function" ? Map : function() {
		        var s = /* @__PURE__ */ Object.create(null);
		        this.get = function(k) {
		          return s[k];
		        };
		        this.set = function(k, val) {
		          s[k] = val;
		          return this;
		        };
		        this.clear = function() {
		          s = /* @__PURE__ */ Object.create(null);
		        };
		      };
		      var preparedCache = new MyMap();
		      var preparedSearchCache = new MyMap();
		      var noResults = [];
		      noResults.total = 0;
		      var matchesSimple = [];
		      var matchesStrict = [];
		      function cleanup() {
		        preparedCache.clear();
		        preparedSearchCache.clear();
		        matchesSimple = [];
		        matchesStrict = [];
		      }
		      function defaultScoreFn(a) {
		        var max = -9007199254740991;
		        for (var i = a.length - 1; i >= 0; --i) {
		          var result = a[i];
		          if (result === null) continue;
		          var score = result.score;
		          if (score > max) max = score;
		        }
		        if (max === -9007199254740991) return null;
		        return max;
		      }
		      function getValue(obj, prop) {
		        var tmp = obj[prop];
		        if (tmp !== void 0) return tmp;
		        var segs = prop;
		        if (!Array.isArray(prop)) segs = prop.split(".");
		        var len = segs.length;
		        var i = -1;
		        while (obj && ++i < len) obj = obj[segs[i]];
		        return obj;
		      }
		      function isObj(x) {
		        return _typeof(x) === "object";
		      }
		      var fastpriorityqueue = function fastpriorityqueue2() {
		        var r = [], o = 0, e = {};
		        function n() {
		          for (var e2 = 0, n2 = r[e2], c = 1; c < o; ) {
		            var f = c + 1;
		            e2 = c, f < o && r[f].score < r[c].score && (e2 = f), r[e2 - 1 >> 1] = r[e2], c = 1 + (e2 << 1);
		          }
		          for (var a = e2 - 1 >> 1; e2 > 0 && n2.score < r[a].score; a = (e2 = a) - 1 >> 1) r[e2] = r[a];
		          r[e2] = n2;
		        }
		        return e.add = function(e2) {
		          var n2 = o;
		          r[o++] = e2;
		          for (var c = n2 - 1 >> 1; n2 > 0 && e2.score < r[c].score; c = (n2 = c) - 1 >> 1) r[n2] = r[c];
		          r[n2] = e2;
		        }, e.poll = function() {
		          if (0 !== o) {
		            var e2 = r[0];
		            return r[0] = r[--o], n(), e2;
		          }
		        }, e.peek = function(e2) {
		          if (0 !== o) return r[0];
		        }, e.replaceTop = function(o2) {
		          r[0] = o2, n();
		        }, e;
		      };
		      var q = fastpriorityqueue();
		      return fuzzysortNew();
		    });
		  })(fuzzysort$1);
		  var fuzzysort = fuzzysort$1.exports;
		  var stats = {
		    failedTests: [],
		    defined: 0,
		    completed: 0
		  };
		  (function() {
		    if (!window$1 || !document) {
		      return;
		    }
		    QUnit.reporters.perf.init(QUnit);
		    var config2 = QUnit.config;
		    var hiddenTests = [];
		    var collapseNext = false;
		    var hasOwn2 = Object.prototype.hasOwnProperty;
		    var unfilteredUrl = setUrl({
		      filter: void 0,
		      module: void 0,
		      moduleId: void 0,
		      testId: void 0
		    });
		    var dropdownData = null;
		    function trim(string) {
		      if (typeof string.trim === "function") {
		        return string.trim();
		      } else {
		        return string.replace(/^\s+|\s+$/g, "");
		      }
		    }
		    function addEvent(elem, type, fn) {
		      elem.addEventListener(type, fn, false);
		    }
		    function removeEvent(elem, type, fn) {
		      elem.removeEventListener(type, fn, false);
		    }
		    function addEvents(elems, type, fn) {
		      var i = elems.length;
		      while (i--) {
		        addEvent(elems[i], type, fn);
		      }
		    }
		    function hasClass(elem, name) {
		      return (" " + elem.className + " ").indexOf(" " + name + " ") >= 0;
		    }
		    function addClass(elem, name) {
		      if (!hasClass(elem, name)) {
		        elem.className += (elem.className ? " " : "") + name;
		      }
		    }
		    function toggleClass(elem, name, force) {
		      if (force || typeof force === "undefined" && !hasClass(elem, name)) {
		        addClass(elem, name);
		      } else {
		        removeClass(elem, name);
		      }
		    }
		    function removeClass(elem, name) {
		      var set = " " + elem.className + " ";
		      while (set.indexOf(" " + name + " ") >= 0) {
		        set = set.replace(" " + name + " ", " ");
		      }
		      elem.className = trim(set);
		    }
		    function id(name) {
		      return document.getElementById && document.getElementById(name);
		    }
		    function abortTests() {
		      var abortButton = id("qunit-abort-tests-button");
		      if (abortButton) {
		        abortButton.disabled = true;
		        abortButton.innerHTML = "Aborting...";
		      }
		      QUnit.config.queue.length = 0;
		      return false;
		    }
		    function interceptNavigation(ev) {
		      var filterInputElem = id("qunit-filter-input");
		      filterInputElem.value = trim(filterInputElem.value);
		      applyUrlParams();
		      if (ev && ev.preventDefault) {
		        ev.preventDefault();
		      }
		      return false;
		    }
		    function getUrlConfigHtml() {
		      var selection = false;
		      var urlConfig = config2.urlConfig;
		      var urlConfigHtml = "";
		      for (var i = 0; i < urlConfig.length; i++) {
		        var val = config2.urlConfig[i];
		        if (typeof val === "string") {
		          val = {
		            id: val,
		            label: val
		          };
		        }
		        var escaped = escapeText(val.id);
		        var escapedTooltip = escapeText(val.tooltip);
		        if (!val.value || typeof val.value === "string") {
		          urlConfigHtml += "<label for='qunit-urlconfig-" + escaped + "' title='" + escapedTooltip + "'><input id='qunit-urlconfig-" + escaped + "' name='" + escaped + "' type='checkbox'" + (val.value ? " value='" + escapeText(val.value) + "'" : "") + (config2[val.id] ? " checked='checked'" : "") + " title='" + escapedTooltip + "' />" + escapeText(val.label) + "</label>";
		        } else {
		          urlConfigHtml += "<label for='qunit-urlconfig-" + escaped + "' title='" + escapedTooltip + "'>" + escapeText(val.label) + ": <select id='qunit-urlconfig-" + escaped + "' name='" + escaped + "' title='" + escapedTooltip + "'><option></option>";
		          if (Array.isArray(val.value)) {
		            for (var j = 0; j < val.value.length; j++) {
		              escaped = escapeText(val.value[j]);
		              urlConfigHtml += "<option value='" + escaped + "'" + (config2[val.id] === val.value[j] ? (selection = true) && " selected='selected'" : "") + ">" + escaped + "</option>";
		            }
		          } else {
		            for (var _j in val.value) {
		              if (hasOwn2.call(val.value, _j)) {
		                urlConfigHtml += "<option value='" + escapeText(_j) + "'" + (config2[val.id] === _j ? (selection = true) && " selected='selected'" : "") + ">" + escapeText(val.value[_j]) + "</option>";
		              }
		            }
		          }
		          if (config2[val.id] && !selection) {
		            escaped = escapeText(config2[val.id]);
		            urlConfigHtml += "<option value='" + escaped + "' selected='selected' disabled='disabled'>" + escaped + "</option>";
		          }
		          urlConfigHtml += "</select></label>";
		        }
		      }
		      return urlConfigHtml;
		    }
		    function toolbarChanged() {
		      var field = this;
		      var params = {};
		      var value;
		      if ("selectedIndex" in field) {
		        value = field.options[field.selectedIndex].value || void 0;
		      } else {
		        value = field.checked ? field.defaultValue || true : void 0;
		      }
		      params[field.name] = value;
		      var updatedUrl = setUrl(params);
		      if (field.name === "hidepassed" && "replaceState" in window$1.history) {
		        QUnit.urlParams[field.name] = value;
		        config2[field.name] = value || false;
		        var tests = id("qunit-tests");
		        if (tests) {
		          if (field.checked) {
		            var length = tests.children.length;
		            var children = tests.children;
		            for (var i = 0; i < length; i++) {
		              var test2 = children[i];
		              var className = test2 ? test2.className : "";
		              var classNameHasPass = className.indexOf("pass") > -1;
		              var classNameHasSkipped = className.indexOf("skipped") > -1;
		              if (classNameHasPass || classNameHasSkipped) {
		                hiddenTests.push(test2);
		              }
		            }
		            for (var _i = 0; _i < hiddenTests.length; _i++) {
		              tests.removeChild(hiddenTests[_i]);
		            }
		          } else {
		            for (var _i2 = 0; _i2 < hiddenTests.length; _i2++) {
		              tests.appendChild(hiddenTests[_i2]);
		            }
		            hiddenTests.length = 0;
		          }
		        }
		        window$1.history.replaceState(null, "", updatedUrl);
		      } else {
		        window$1.location = updatedUrl;
		      }
		    }
		    function setUrl(params) {
		      var querystring = "?";
		      var location = window$1.location;
		      params = extend(extend({}, QUnit.urlParams), params);
		      for (var key in params) {
		        if (hasOwn2.call(params, key) && params[key] !== void 0) {
		          var arrValue = [].concat(params[key]);
		          for (var i = 0; i < arrValue.length; i++) {
		            querystring += encodeURIComponent(key);
		            if (arrValue[i] !== true) {
		              querystring += "=" + encodeURIComponent(arrValue[i]);
		            }
		            querystring += "&";
		          }
		        }
		      }
		      return location.protocol + "//" + location.host + location.pathname + querystring.slice(0, -1);
		    }
		    function applyUrlParams() {
		      var filter = id("qunit-filter-input").value;
		      window$1.location = setUrl({
		        filter: filter === "" ? void 0 : filter,
		        moduleId: _toConsumableArray(dropdownData.selectedMap.keys()),
		        // Remove module and testId filter
		        module: void 0,
		        testId: void 0
		      });
		    }
		    function toolbarUrlConfigContainer() {
		      var urlConfigContainer = document.createElement("span");
		      urlConfigContainer.innerHTML = getUrlConfigHtml();
		      addClass(urlConfigContainer, "qunit-url-config");
		      addEvents(urlConfigContainer.getElementsByTagName("input"), "change", toolbarChanged);
		      addEvents(urlConfigContainer.getElementsByTagName("select"), "change", toolbarChanged);
		      return urlConfigContainer;
		    }
		    function abortTestsButton() {
		      var button = document.createElement("button");
		      button.id = "qunit-abort-tests-button";
		      button.innerHTML = "Abort";
		      addEvent(button, "click", abortTests);
		      return button;
		    }
		    function toolbarLooseFilter() {
		      var filter = document.createElement("form");
		      var label = document.createElement("label");
		      var input = document.createElement("input");
		      var button = document.createElement("button");
		      addClass(filter, "qunit-filter");
		      label.innerHTML = "Filter: ";
		      input.type = "text";
		      input.value = config2.filter || "";
		      input.name = "filter";
		      input.id = "qunit-filter-input";
		      button.innerHTML = "Go";
		      label.appendChild(input);
		      filter.appendChild(label);
		      filter.appendChild(document.createTextNode(" "));
		      filter.appendChild(button);
		      addEvent(filter, "submit", interceptNavigation);
		      return filter;
		    }
		    function createModuleListItem(moduleId, name, checked) {
		      return '<li><label class="clickable' + (checked ? " checked" : "") + '"><input type="checkbox" value="' + escapeText(moduleId) + '"' + (checked ? ' checked="checked"' : "") + " />" + escapeText(name) + "</label></li>";
		    }
		    function moduleListHtml(results) {
		      var html = "";
		      dropdownData.selectedMap.forEach(function(name, moduleId) {
		        html += createModuleListItem(moduleId, name, true);
		      });
		      for (var i = 0; i < results.length; i++) {
		        var mod = results[i].obj;
		        if (!dropdownData.selectedMap.has(mod.moduleId)) {
		          html += createModuleListItem(mod.moduleId, mod.name, false);
		        }
		      }
		      return html;
		    }
		    function toolbarModuleFilter(beginDetails) {
		      var initialSelected = null;
		      dropdownData = {
		        options: beginDetails.modules.slice(),
		        selectedMap: new StringMap(),
		        isDirty: function isDirty() {
		          return _toConsumableArray(dropdownData.selectedMap.keys()).sort().join(",") !== _toConsumableArray(initialSelected.keys()).sort().join(",");
		        }
		      };
		      if (config2.moduleId.length) {
		        for (var i = 0; i < beginDetails.modules.length; i++) {
		          var mod = beginDetails.modules[i];
		          if (config2.moduleId.indexOf(mod.moduleId) !== -1) {
		            dropdownData.selectedMap.set(mod.moduleId, mod.name);
		          }
		        }
		      }
		      initialSelected = new StringMap(dropdownData.selectedMap);
		      var moduleSearch = document.createElement("input");
		      moduleSearch.id = "qunit-modulefilter-search";
		      moduleSearch.autocomplete = "off";
		      addEvent(moduleSearch, "input", searchInput);
		      addEvent(moduleSearch, "input", searchFocus);
		      addEvent(moduleSearch, "focus", searchFocus);
		      addEvent(moduleSearch, "click", searchFocus);
		      var label = document.createElement("label");
		      label.htmlFor = "qunit-modulefilter-search";
		      label.textContent = "Module:";
		      var searchContainer = document.createElement("span");
		      searchContainer.id = "qunit-modulefilter-search-container";
		      searchContainer.appendChild(moduleSearch);
		      var applyButton = document.createElement("button");
		      applyButton.textContent = "Apply";
		      applyButton.title = "Re-run the selected test modules";
		      addEvent(applyButton, "click", applyUrlParams);
		      var resetButton = document.createElement("button");
		      resetButton.textContent = "Reset";
		      resetButton.type = "reset";
		      resetButton.title = "Restore the previous module selection";
		      var clearButton = document.createElement("button");
		      clearButton.textContent = "Select none";
		      clearButton.type = "button";
		      clearButton.title = "Clear the current module selection";
		      addEvent(clearButton, "click", function() {
		        dropdownData.selectedMap.clear();
		        selectionChange();
		        searchInput();
		      });
		      var actions = document.createElement("span");
		      actions.id = "qunit-modulefilter-actions";
		      actions.appendChild(applyButton);
		      actions.appendChild(resetButton);
		      if (initialSelected.size) {
		        actions.appendChild(clearButton);
		      }
		      var dropDownList = document.createElement("ul");
		      dropDownList.id = "qunit-modulefilter-dropdown-list";
		      var dropDown = document.createElement("div");
		      dropDown.id = "qunit-modulefilter-dropdown";
		      dropDown.style.display = "none";
		      dropDown.appendChild(actions);
		      dropDown.appendChild(dropDownList);
		      addEvent(dropDown, "change", selectionChange);
		      searchContainer.appendChild(dropDown);
		      selectionChange();
		      var moduleFilter = document.createElement("form");
		      moduleFilter.id = "qunit-modulefilter";
		      moduleFilter.appendChild(label);
		      moduleFilter.appendChild(document.createTextNode(" "));
		      moduleFilter.appendChild(searchContainer);
		      addEvent(moduleFilter, "submit", interceptNavigation);
		      addEvent(moduleFilter, "reset", function() {
		        dropdownData.selectedMap = new StringMap(initialSelected);
		        selectionChange();
		        searchInput();
		      });
		      function searchFocus() {
		        if (dropDown.style.display !== "none") {
		          return;
		        }
		        searchInput();
		        dropDown.style.display = "block";
		        addEvent(document, "click", hideHandler);
		        addEvent(document, "keydown", hideHandler);
		        function hideHandler(e) {
		          var inContainer = moduleFilter.contains(e.target);
		          if (e.keyCode === 27 || !inContainer) {
		            if (e.keyCode === 27 && inContainer) {
		              moduleSearch.focus();
		            }
		            dropDown.style.display = "none";
		            removeEvent(document, "click", hideHandler);
		            removeEvent(document, "keydown", hideHandler);
		            moduleSearch.value = "";
		            searchInput();
		          }
		        }
		      }
		      function filterModules(searchText) {
		        var results;
		        if (searchText === "") {
		          results = dropdownData.options.slice(0, 20).map(function(obj) {
		            return {
		              obj
		            };
		          });
		        } else {
		          results = fuzzysort.go(searchText, dropdownData.options, {
		            limit: 20,
		            key: "name",
		            allowTypo: true
		          });
		        }
		        return moduleListHtml(results);
		      }
		      var searchInputTimeout;
		      function searchInput() {
		        window$1.clearTimeout(searchInputTimeout);
		        searchInputTimeout = window$1.setTimeout(function() {
		          dropDownList.innerHTML = filterModules(moduleSearch.value);
		        });
		      }
		      function selectionChange(evt) {
		        var checkbox = evt && evt.target || null;
		        if (checkbox) {
		          if (checkbox.checked) {
		            dropdownData.selectedMap.set(checkbox.value, checkbox.parentNode.textContent);
		          } else {
		            dropdownData.selectedMap.delete(checkbox.value);
		          }
		          toggleClass(checkbox.parentNode, "checked", checkbox.checked);
		        }
		        var textForm = dropdownData.selectedMap.size ? dropdownData.selectedMap.size + " " + (dropdownData.selectedMap.size === 1 ? "module" : "modules") : "All modules";
		        moduleSearch.placeholder = textForm;
		        moduleSearch.title = "Type to search through and reduce the list.";
		        resetButton.disabled = !dropdownData.isDirty();
		        clearButton.style.display = dropdownData.selectedMap.size ? "" : "none";
		      }
		      return moduleFilter;
		    }
		    function appendToolbar(beginDetails) {
		      var toolbar = id("qunit-testrunner-toolbar");
		      if (toolbar) {
		        toolbar.appendChild(toolbarUrlConfigContainer());
		        var toolbarFilters = document.createElement("span");
		        toolbarFilters.id = "qunit-toolbar-filters";
		        toolbarFilters.appendChild(toolbarLooseFilter());
		        toolbarFilters.appendChild(toolbarModuleFilter(beginDetails));
		        var clearfix = document.createElement("div");
		        clearfix.className = "clearfix";
		        toolbar.appendChild(toolbarFilters);
		        toolbar.appendChild(clearfix);
		      }
		    }
		    function appendHeader() {
		      var header = id("qunit-header");
		      if (header) {
		        header.innerHTML = "<a href='" + escapeText(unfilteredUrl) + "'>" + header.innerHTML + "</a> ";
		      }
		    }
		    function appendBanner() {
		      var banner = id("qunit-banner");
		      if (banner) {
		        banner.className = "";
		      }
		    }
		    function appendTestResults() {
		      var tests = id("qunit-tests");
		      var result = id("qunit-testresult");
		      var controls;
		      if (result) {
		        result.parentNode.removeChild(result);
		      }
		      if (tests) {
		        tests.innerHTML = "";
		        result = document.createElement("p");
		        result.id = "qunit-testresult";
		        result.className = "result";
		        tests.parentNode.insertBefore(result, tests);
		        result.innerHTML = '<div id="qunit-testresult-display">Running...<br />&#160;</div><div id="qunit-testresult-controls"></div><div class="clearfix"></div>';
		        controls = id("qunit-testresult-controls");
		      }
		      if (controls) {
		        controls.appendChild(abortTestsButton());
		      }
		    }
		    function appendFilteredTest() {
		      var testId = QUnit.config.testId;
		      if (!testId || testId.length <= 0) {
		        return "";
		      }
		      return "<div id='qunit-filteredTest'>Rerunning selected tests: " + escapeText(testId.join(", ")) + " <a id='qunit-clearFilter' href='" + escapeText(unfilteredUrl) + "'>Run all tests</a></div>";
		    }
		    function appendUserAgent() {
		      var userAgent = id("qunit-userAgent");
		      if (userAgent) {
		        userAgent.innerHTML = "";
		        userAgent.appendChild(document.createTextNode("QUnit " + QUnit.version + "; " + navigator.userAgent));
		      }
		    }
		    function appendInterface(beginDetails) {
		      var qunit = id("qunit");
		      if (qunit) {
		        qunit.setAttribute("role", "main");
		        qunit.innerHTML = "<h1 id='qunit-header'>" + escapeText(document.title) + "</h1><h2 id='qunit-banner'></h2><div id='qunit-testrunner-toolbar' role='navigation'></div>" + appendFilteredTest() + "<h2 id='qunit-userAgent'></h2><ol id='qunit-tests'></ol>";
		      }
		      appendHeader();
		      appendBanner();
		      appendTestResults();
		      appendUserAgent();
		      appendToolbar(beginDetails);
		    }
		    function appendTest(name, testId, moduleName) {
		      var tests = id("qunit-tests");
		      if (!tests) {
		        return;
		      }
		      var title = document.createElement("strong");
		      title.className = "qunit-test-name";
		      title.innerHTML = getNameHtml(name, moduleName);
		      var testBlock = document.createElement("li");
		      testBlock.appendChild(title);
		      if (testId !== void 0) {
		        var rerunTrigger = document.createElement("a");
		        rerunTrigger.innerHTML = "Rerun";
		        rerunTrigger.href = setUrl({
		          testId
		        });
		        testBlock.id = "qunit-test-output-" + testId;
		        testBlock.appendChild(rerunTrigger);
		      }
		      var assertList = document.createElement("ol");
		      assertList.className = "qunit-assert-list";
		      testBlock.appendChild(assertList);
		      tests.appendChild(testBlock);
		      return testBlock;
		    }
		    QUnit.on("runStart", function(runStart) {
		      stats.defined = runStart.testCounts.total;
		    });
		    QUnit.begin(function(beginDetails) {
		      appendInterface(beginDetails);
		    });
		    function getRerunFailedHtml(failedTests) {
		      if (failedTests.length === 0) {
		        return "";
		      }
		      var href = setUrl({
		        testId: failedTests
		      });
		      return ["<br /><a href='" + escapeText(href) + "'>", failedTests.length === 1 ? "Rerun 1 failed test" : "Rerun " + failedTests.length + " failed tests", "</a>"].join("");
		    }
		    QUnit.on("runEnd", function(runEnd) {
		      var banner = id("qunit-banner");
		      var tests = id("qunit-tests");
		      var abortButton = id("qunit-abort-tests-button");
		      var assertPassed = config2.stats.all - config2.stats.bad;
		      var html = [runEnd.testCounts.total, " tests completed in ", runEnd.runtime, " milliseconds, with ", runEnd.testCounts.failed, " failed, ", runEnd.testCounts.skipped, " skipped, and ", runEnd.testCounts.todo, " todo.<br />", "<span class='passed'>", assertPassed, "</span> assertions of <span class='total'>", config2.stats.all, "</span> passed, <span class='failed'>", config2.stats.bad, "</span> failed.", getRerunFailedHtml(stats.failedTests)].join("");
		      var test2;
		      var assertLi;
		      var assertList;
		      if (abortButton && abortButton.disabled) {
		        html = "Tests aborted after " + runEnd.runtime + " milliseconds.";
		        for (var i = 0; i < tests.children.length; i++) {
		          test2 = tests.children[i];
		          if (test2.className === "" || test2.className === "running") {
		            test2.className = "aborted";
		            assertList = test2.getElementsByTagName("ol")[0];
		            assertLi = document.createElement("li");
		            assertLi.className = "fail";
		            assertLi.innerHTML = "Test aborted.";
		            assertList.appendChild(assertLi);
		          }
		        }
		      }
		      if (banner && (!abortButton || abortButton.disabled === false)) {
		        banner.className = runEnd.status === "failed" ? "qunit-fail" : "qunit-pass";
		      }
		      if (abortButton) {
		        abortButton.parentNode.removeChild(abortButton);
		      }
		      if (tests) {
		        id("qunit-testresult-display").innerHTML = html;
		      }
		      if (config2.altertitle && document.title) {
		        document.title = [runEnd.status === "failed" ? "✖" : "✔", document.title.replace(/^[\u2714\u2716] /i, "")].join(" ");
		      }
		      if (config2.scrolltop && window$1.scrollTo) {
		        window$1.scrollTo(0, 0);
		      }
		    });
		    function getNameHtml(name, module2) {
		      var nameHtml = "";
		      if (module2) {
		        nameHtml = "<span class='module-name'>" + escapeText(module2) + "</span>: ";
		      }
		      nameHtml += "<span class='test-name'>" + escapeText(name) + "</span>";
		      return nameHtml;
		    }
		    function getProgressHtml(stats2) {
		      return [stats2.completed, " / ", stats2.defined, " tests completed.<br />"].join("");
		    }
		    QUnit.testStart(function(details) {
		      var running, bad;
		      appendTest(details.name, details.testId, details.module);
		      running = id("qunit-testresult-display");
		      if (running) {
		        addClass(running, "running");
		        bad = QUnit.config.reorder && details.previousFailure;
		        running.innerHTML = [getProgressHtml(stats), bad ? "Rerunning previously failed test: <br />" : "Running: ", getNameHtml(details.name, details.module), getRerunFailedHtml(stats.failedTests)].join("");
		      }
		    });
		    function stripHtml(string) {
		      return string.replace(/<\/?[^>]+(>|$)/g, "").replace(/&quot;/g, "").replace(/\s+/g, "");
		    }
		    QUnit.log(function(details) {
		      var testItem = id("qunit-test-output-" + details.testId);
		      if (!testItem) {
		        return;
		      }
		      var message = escapeText(details.message) || (details.result ? "okay" : "failed");
		      message = "<span class='test-message'>" + message + "</span>";
		      message += "<span class='runtime'>@ " + details.runtime + " ms</span>";
		      var expected;
		      var actual;
		      var diff2;
		      var showDiff = false;
		      var showAnyValues = !details.result && (details.expected !== void 0 || details.actual !== void 0);
		      if (showAnyValues) {
		        if (details.negative) {
		          expected = "NOT " + QUnit.dump.parse(details.expected);
		        } else {
		          expected = QUnit.dump.parse(details.expected);
		        }
		        actual = QUnit.dump.parse(details.actual);
		        message += "<table><tr class='test-expected'><th>Expected: </th><td><pre>" + escapeText(expected) + "</pre></td></tr>";
		        if (actual !== expected) {
		          message += "<tr class='test-actual'><th>Result: </th><td><pre>" + escapeText(actual) + "</pre></td></tr>";
		          if (typeof details.actual === "number" && typeof details.expected === "number") {
		            if (!isNaN(details.actual) && !isNaN(details.expected)) {
		              showDiff = true;
		              diff2 = details.actual - details.expected;
		              diff2 = (diff2 > 0 ? "+" : "") + diff2;
		            }
		          } else if (typeof details.actual !== "boolean" && typeof details.expected !== "boolean") {
		            diff2 = QUnit.diff(expected, actual);
		            showDiff = stripHtml(diff2).length !== stripHtml(expected).length + stripHtml(actual).length;
		          }
		          if (showDiff) {
		            message += "<tr class='test-diff'><th>Diff: </th><td><pre>" + diff2 + "</pre></td></tr>";
		          }
		        } else if (expected.indexOf("[object Array]") !== -1 || expected.indexOf("[object Object]") !== -1) {
		          message += "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the depth of object is more than current max depth (" + QUnit.dump.maxDepth + ").<p>Hint: Use <code>QUnit.dump.maxDepth</code> to  run with a higher max depth or <a href='" + escapeText(setUrl({
		            maxDepth: 0
		          })) + "'>Rerun without max depth</a>.</p></td></tr>";
		        } else {
		          message += "<tr class='test-message'><th>Message: </th><td>Diff suppressed as the expected and actual results have an equivalent serialization</td></tr>";
		        }
		        if (details.source) {
		          message += "<tr class='test-source'><th>Source: </th><td><pre>" + escapeText(details.source) + "</pre></td></tr>";
		        }
		        message += "</table>";
		      } else if (!details.result && details.source) {
		        message += "<table><tr class='test-source'><th>Source: </th><td><pre>" + escapeText(details.source) + "</pre></td></tr></table>";
		      }
		      var assertList = testItem.getElementsByTagName("ol")[0];
		      var assertLi = document.createElement("li");
		      assertLi.className = details.result ? "pass" : "fail";
		      assertLi.innerHTML = message;
		      assertList.appendChild(assertLi);
		    });
		    QUnit.testDone(function(details) {
		      var tests = id("qunit-tests");
		      var testItem = id("qunit-test-output-" + details.testId);
		      if (!tests || !testItem) {
		        return;
		      }
		      removeClass(testItem, "running");
		      var status;
		      if (details.failed > 0) {
		        status = "failed";
		      } else if (details.todo) {
		        status = "todo";
		      } else {
		        status = details.skipped ? "skipped" : "passed";
		      }
		      var assertList = testItem.getElementsByTagName("ol")[0];
		      var good = details.passed;
		      var bad = details.failed;
		      var testPassed = details.failed > 0 ? details.todo : !details.todo;
		      if (testPassed) {
		        addClass(assertList, "qunit-collapsed");
		      } else {
		        stats.failedTests.push(details.testId);
		        if (config2.collapse) {
		          if (!collapseNext) {
		            collapseNext = true;
		          } else {
		            addClass(assertList, "qunit-collapsed");
		          }
		        }
		      }
		      var testTitle = testItem.firstChild;
		      var testCounts = bad ? "<b class='failed'>" + bad + "</b>, <b class='passed'>" + good + "</b>, " : "";
		      testTitle.innerHTML += " <b class='counts'>(" + testCounts + details.assertions.length + ")</b>";
		      stats.completed++;
		      if (details.skipped) {
		        testItem.className = "skipped";
		        var skipped = document.createElement("em");
		        skipped.className = "qunit-skipped-label";
		        skipped.innerHTML = "skipped";
		        testItem.insertBefore(skipped, testTitle);
		      } else {
		        addEvent(testTitle, "click", function() {
		          toggleClass(assertList, "qunit-collapsed");
		        });
		        testItem.className = testPassed ? "pass" : "fail";
		        if (details.todo) {
		          var todoLabel = document.createElement("em");
		          todoLabel.className = "qunit-todo-label";
		          todoLabel.innerHTML = "todo";
		          testItem.className += " todo";
		          testItem.insertBefore(todoLabel, testTitle);
		        }
		        var time = document.createElement("span");
		        time.className = "runtime";
		        time.innerHTML = details.runtime + " ms";
		        testItem.insertBefore(time, assertList);
		      }
		      if (details.source) {
		        var sourceName = document.createElement("p");
		        sourceName.innerHTML = "<strong>Source: </strong>" + escapeText(details.source);
		        addClass(sourceName, "qunit-source");
		        if (testPassed) {
		          addClass(sourceName, "qunit-collapsed");
		        }
		        addEvent(testTitle, "click", function() {
		          toggleClass(sourceName, "qunit-collapsed");
		        });
		        testItem.appendChild(sourceName);
		      }
		      if (config2.hidepassed && (status === "passed" || details.skipped)) {
		        hiddenTests.push(testItem);
		        tests.removeChild(testItem);
		      }
		    });
		    QUnit.on("error", function(error) {
		      var testItem = appendTest("global failure");
		      if (!testItem) {
		        return;
		      }
		      var message = escapeText(errorString(error));
		      message = "<span class='test-message'>" + message + "</span>";
		      if (error && error.stack) {
		        message += "<table><tr class='test-source'><th>Source: </th><td><pre>" + escapeText(error.stack) + "</pre></td></tr></table>";
		      }
		      var assertList = testItem.getElementsByTagName("ol")[0];
		      var assertLi = document.createElement("li");
		      assertLi.className = "fail";
		      assertLi.innerHTML = message;
		      assertList.appendChild(assertLi);
		      testItem.className = "fail";
		    });
		    var usingPhantom = function(p) {
		      return p && p.version && p.version.major > 0;
		    }(window$1.phantom);
		    if (usingPhantom) {
		      console$1.warn("Support for PhantomJS is deprecated and will be removed in QUnit 3.0.");
		    }
		    if (!usingPhantom && document.readyState === "complete") {
		      QUnit.autostart();
		    } else {
		      addEvent(window$1, "load", QUnit.autostart);
		    }
		    var originalWindowOnError = window$1.onerror;
		    window$1.onerror = function(message, fileName2, lineNumber, columnNumber, errorObj) {
		      var ret = false;
		      if (originalWindowOnError) {
		        for (var _len = arguments.length, args = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
		          args[_key - 5] = arguments[_key];
		        }
		        ret = originalWindowOnError.call.apply(originalWindowOnError, [this, message, fileName2, lineNumber, columnNumber, errorObj].concat(args));
		      }
		      if (ret !== true) {
		        if (config2.current && config2.current.ignoreGlobalErrors) {
		          return true;
		        }
		        var error = errorObj || new Error(message);
		        if (!error.stack && fileName2 && lineNumber) {
		          error.stack = "".concat(fileName2, ":").concat(lineNumber);
		        }
		        QUnit.onUncaughtException(error);
		      }
		      return ret;
		    };
		    window$1.addEventListener("unhandledrejection", function(event) {
		      QUnit.onUncaughtException(event.reason);
		    });
		  })();
		})(); 
	} (qunit$1, qunit$1.exports));
	return qunit$1.exports;
}

var qunitExports = requireQunit();
const qunit = /*@__PURE__*/getDefaultExportFromCjs(qunitExports);

const QUnit$1 = /*#__PURE__*/_mergeNamespaces({
  __proto__: null,
  default: qunit
}, [qunitExports]);

function nonTestDoneCallback() {}
let Adapter = Adapter$1.extend({
  init() {
    this.doneCallbacks = [];
    this.qunit = this.qunit || QUnit$1;
  },
  asyncStart() {
    let currentTest = this.qunit.config.current;
    let done = currentTest && currentTest.assert ? currentTest.assert.async() : nonTestDoneCallback;
    this.doneCallbacks.push({
      test: currentTest,
      done
    });
  },
  asyncEnd() {
    let currentTest = this.qunit.config.current;
    if (this.doneCallbacks.length === 0) {
      throw new Error('Adapter asyncEnd called when no async was expected. Please create an issue in ember-qunit.');
    }
    let {
      test,
      done
    } = this.doneCallbacks.pop();

    // In future, we should explore fixing this at a different level, specifically
    // addressing the pairing of asyncStart/asyncEnd behavior in a more consistent way.
    if (test === currentTest) {
      done();
    }
  }
});

qunitExports.config.autostart = false;
qunitExports.config.urlConfig.push({
  id: 'nocontainer',
  label: 'Hide container'
});
qunitExports.config.urlConfig.push({
  id: 'devmode',
  label: 'Development mode'
});
qunitExports.config.testTimeout = qunitExports.urlParams.devmode ? null : 60000; //Default Test Timeout 60 Seconds

/* eslint-disable no-console */

/**
 * Detects if a specific test isn't isolated. A test is considered
 * not isolated if it:
 *
 * - has pending timers
 * - is in a runloop
 * - has pending AJAX requests
 * - has pending test waiters
 *
 * @function detectIfTestNotIsolated
 * @param {Object} testInfo
 * @param {string} testInfo.module The name of the test module
 * @param {string} testInfo.name The test name
 */
function detectIfTestNotIsolated(test, message = '') {
  if (!isSettled()) {
    let {
      debugInfo
    } = getSettledState();
    console.group(`${test.module.name}: ${test.testName}`);
    debugInfo.toConsole();
    console.groupEnd();
    test.expected++;
    test.assert.pushResult({
      result: false,
      message: `${message} \nMore information has been printed to the console. Please use that information to help in debugging.\n\n`
    });
  }
}

/**
 * Installs a hook to detect if a specific test isn't isolated.
 * This hook is installed by patching into the `test.finish` method,
 * which allows us to be very precise as to when the detection occurs.
 *
 * @function installTestNotIsolatedHook
 * @param {number} delay the delay delay to use when checking for isolation validation
 */
function installTestNotIsolatedHook(delay = 50) {
  if (!getDebugInfo()) {
    return;
  }
  let test = qunitExports.config.current;
  let finish = test.finish;
  let pushFailure = test.pushFailure;
  test.pushFailure = function (message) {
    if (message.indexOf('Test took longer than') === 0) {
      detectIfTestNotIsolated(this, message);
    } else {
      return pushFailure.apply(this, arguments);
    }
  };

  // We're hooking into `test.finish`, which utilizes internal ordering of
  // when a test's hooks are invoked. We do this mainly because we need
  // greater precision as to when to detect and subsequently report if the
  // test is isolated.
  //
  // We looked at using:
  // - `afterEach`
  //    - the ordering of when the `afterEach` is called is not easy to guarantee
  //      (ancestor `afterEach`es have to be accounted for too)
  // - `QUnit.on('testEnd')`
  //    - is executed too late; the test is already considered done so
  //      we're unable to push a new assert to fail the current test
  // - 'QUnit.done'
  //    - it detaches the failure from the actual test that failed, making it
  //      more confusing to the end user.
  test.finish = function () {
    let doFinish = () => finish.apply(this, arguments);
    if (isSettled()) {
      return doFinish();
    } else {
      return waitUntil(isSettled, {
        timeout: delay
      }).catch(() => {
        // we consider that when waitUntil times out, you're in a state of
        // test isolation violation. The nature of the error is irrelevant
        // in this case, and we want to allow the error to fall through
        // to the finally, where cleanup occurs.
      }).finally(() => {
        detectIfTestNotIsolated(this, 'Test is not isolated (async execution is extending beyond the duration of the test).');

        // canceling timers here isn't perfect, but is as good as we can do
        // to attempt to prevent future tests from failing due to this test's
        // leakage
        _cancelTimers();
        return doFinish();
      });
    }
  };
}

const _importSync20 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null
}, Symbol.toStringTag, { value: 'Module' }));

const _importSync40 = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null
}, Symbol.toStringTag, { value: 'Module' }));

{
  esCompat(_importSync20);
}
{
  esCompat(_importSync40);
}
if (typeof Testem !== 'undefined') {
  Testem.hookIntoTestFramework();
}
let waitForSettled = true;
function setupTest(hooks, _options) {
  let options = {
    waitForSettled,
    ..._options
  };
  hooks.beforeEach(function (assert) {
    let testMetadata = getTestMetadata(this);
    testMetadata.framework = 'qunit';
    return setupContext(this, options).then(() => {
      let originalPauseTest = this.pauseTest;
      this.pauseTest = function QUnit_pauseTest() {
        assert.timeout(-1); // prevent the test from timing out
        return originalPauseTest.call(this);
      };
    });
  });
  hooks.afterEach(function () {
    return teardownContext(this, options);
  });
}
function setupRenderingTest(hooks, _options) {
  let options = {
    waitForSettled,
    ..._options
  };
  setupTest(hooks, options);
  hooks.beforeEach(function () {
    return setupRenderingContext(this);
  });
}

/**
   Uses current URL configuration to setup the test container.

   * If `?nocontainer` is set, the test container will be hidden.
   * If `?devmode` or `?fullscreencontainer` is set, the test container will be
     made full screen.

   @method setupTestContainer
 */
function setupTestContainer() {
  let testContainer = document.getElementById('ember-testing-container');
  if (!testContainer) {
    return;
  }
  let params = qunitExports.urlParams;
  if (params.devmode || params.fullscreencontainer) {
    testContainer.classList.add('ember-testing-container-full-screen');
  }
  if (params.nocontainer) {
    testContainer.classList.add('ember-testing-container-hidden');
  }
}

/**
   Instruct QUnit to start the tests.
   @method startTests
 */
function startTests() {
  qunitExports.start();
}

/**
   Sets up the `Ember.Test` adapter for usage with QUnit 2.x.

   @method setupTestAdapter
 */
function setupTestAdapter() {
  setAdapter(Adapter.create());
}

/**
  Ensures that `Ember.testing` is set to `true` before each test begins
  (including `before` / `beforeEach`), and reset to `false` after each test is
  completed. This is done via `QUnit.testStart` and `QUnit.testDone`.

 */
function setupEmberTesting() {
  qunitExports.testStart(() => {
    setTesting(true);
  });
  qunitExports.testDone(() => {
    setTesting(false);
  });
}

/**
  Ensures that `Ember.onerror` (if present) is properly configured to re-throw
  errors that occur while `Ember.testing` is `true`.
*/
function setupEmberOnerrorValidation() {
  qunitExports.module('ember-qunit: Ember.onerror validation', function () {
    qunitExports.test('Ember.onerror is functioning properly', function (assert) {
      assert.expect(1);
      let result = validateErrorHandler();
      assert.ok(result.isValid, `Ember.onerror handler with invalid testing behavior detected. An Ember.onerror handler _must_ rethrow exceptions when \`Ember.testing\` is \`true\` or the test suite is unreliable. See https://git.io/vbine for more details.`);
    });
  });
}
function setupResetOnerror() {
  qunitExports.testDone(resetOnerror);
}
function setupTestIsolationValidation(delay) {
  waitForSettled = false;
  _backburner.DEBUG = true;
  qunitExports.on('testStart', () => installTestNotIsolatedHook(delay));
}

/**
   @method start
   @param {Object} [options] Options to be used for enabling/disabling behaviors
   @param {Boolean} [options.setupTestContainer] If `false` the test container will not
   be setup based on `devmode`, `dockcontainer`, or `nocontainer` URL params.
   @param {Boolean} [options.startTests] If `false` tests will not be automatically started
   (you must run `QUnit.start()` to kick them off).
   @param {Boolean} [options.setupTestAdapter] If `false` the default Ember.Test adapter will
   not be updated.
   @param {Boolean} [options.setupEmberTesting] `false` opts out of the
   default behavior of setting `Ember.testing` to `true` before all tests and
   back to `false` after each test will.
   @param {Boolean} [options.setupTestIsolationValidation] If `false` test isolation validation
   will be disabled.
   @param {Number} [options.testIsolationValidationDelay] When using
   setupTestIsolationValidation this number represents the maximum amount of
   time in milliseconds that is allowed _after_ the test is completed for all
   async to have been completed. The default value is 50.
 */
function start$1(options = {}) {
  if (options.setupTestContainer !== false) {
    setupTestContainer();
  }
  if (options.setupTestAdapter !== false) {
    setupTestAdapter();
  }
  if (options.setupEmberTesting !== false) {
    setupEmberTesting();
  }
  if (typeof options.setupTestIsolationValidation !== 'undefined' && options.setupTestIsolationValidation !== false) {
    setupTestIsolationValidation(options.testIsolationValidationDelay);
  }
  if (options.startTests !== false) {
    startTests();
  }
  setupResetOnerror();
}

var lodash_isequal = {exports: {}};

/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash_isequal.exports;

var hasRequiredLodash_isequal;

function requireLodash_isequal () {
	if (hasRequiredLodash_isequal) return lodash_isequal.exports;
	hasRequiredLodash_isequal = 1;
	(function (module, exports) {
		/** Used as the size to enable large array optimizations. */
		var LARGE_ARRAY_SIZE = 200;

		/** Used to stand-in for `undefined` hash values. */
		var HASH_UNDEFINED = '__lodash_hash_undefined__';

		/** Used to compose bitmasks for value comparisons. */
		var COMPARE_PARTIAL_FLAG = 1,
		  COMPARE_UNORDERED_FLAG = 2;

		/** Used as references for various `Number` constants. */
		var MAX_SAFE_INTEGER = 9007199254740991;

		/** `Object#toString` result references. */
		var argsTag = '[object Arguments]',
		  arrayTag = '[object Array]',
		  asyncTag = '[object AsyncFunction]',
		  boolTag = '[object Boolean]',
		  dateTag = '[object Date]',
		  errorTag = '[object Error]',
		  funcTag = '[object Function]',
		  genTag = '[object GeneratorFunction]',
		  mapTag = '[object Map]',
		  numberTag = '[object Number]',
		  nullTag = '[object Null]',
		  objectTag = '[object Object]',
		  promiseTag = '[object Promise]',
		  proxyTag = '[object Proxy]',
		  regexpTag = '[object RegExp]',
		  setTag = '[object Set]',
		  stringTag = '[object String]',
		  symbolTag = '[object Symbol]',
		  undefinedTag = '[object Undefined]',
		  weakMapTag = '[object WeakMap]';
		var arrayBufferTag = '[object ArrayBuffer]',
		  dataViewTag = '[object DataView]',
		  float32Tag = '[object Float32Array]',
		  float64Tag = '[object Float64Array]',
		  int8Tag = '[object Int8Array]',
		  int16Tag = '[object Int16Array]',
		  int32Tag = '[object Int32Array]',
		  uint8Tag = '[object Uint8Array]',
		  uint8ClampedTag = '[object Uint8ClampedArray]',
		  uint16Tag = '[object Uint16Array]',
		  uint32Tag = '[object Uint32Array]';

		/**
		 * Used to match `RegExp`
		 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
		 */
		var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

		/** Used to detect host constructors (Safari). */
		var reIsHostCtor = /^\[object .+?Constructor\]$/;

		/** Used to detect unsigned integer values. */
		var reIsUint = /^(?:0|[1-9]\d*)$/;

		/** Used to identify `toStringTag` values of typed arrays. */
		var typedArrayTags = {};
		typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
		typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

		/** Detect free variable `global` from Node.js. */
		var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

		/** Detect free variable `self`. */
		var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

		/** Used as a reference to the global object. */
		var root = freeGlobal || freeSelf || Function('return this')();

		/** Detect free variable `exports`. */
		var freeExports = exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Detect free variable `process` from Node.js. */
		var freeProcess = moduleExports && freeGlobal.process;

		/** Used to access faster Node.js helpers. */
		var nodeUtil = function () {
		  try {
		    return freeProcess && freeProcess.binding && freeProcess.binding('util');
		  } catch (e) {}
		}();

		/* Node.js helper references. */
		var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

		/**
		 * A specialized version of `_.filter` for arrays without support for
		 * iteratee shorthands.
		 *
		 * @private
		 * @param {Array} [array] The array to iterate over.
		 * @param {Function} predicate The function invoked per iteration.
		 * @returns {Array} Returns the new filtered array.
		 */
		function arrayFilter(array, predicate) {
		  var index = -1,
		    length = array == null ? 0 : array.length,
		    resIndex = 0,
		    result = [];
		  while (++index < length) {
		    var value = array[index];
		    if (predicate(value, index, array)) {
		      result[resIndex++] = value;
		    }
		  }
		  return result;
		}

		/**
		 * Appends the elements of `values` to `array`.
		 *
		 * @private
		 * @param {Array} array The array to modify.
		 * @param {Array} values The values to append.
		 * @returns {Array} Returns `array`.
		 */
		function arrayPush(array, values) {
		  var index = -1,
		    length = values.length,
		    offset = array.length;
		  while (++index < length) {
		    array[offset + index] = values[index];
		  }
		  return array;
		}

		/**
		 * A specialized version of `_.some` for arrays without support for iteratee
		 * shorthands.
		 *
		 * @private
		 * @param {Array} [array] The array to iterate over.
		 * @param {Function} predicate The function invoked per iteration.
		 * @returns {boolean} Returns `true` if any element passes the predicate check,
		 *  else `false`.
		 */
		function arraySome(array, predicate) {
		  var index = -1,
		    length = array == null ? 0 : array.length;
		  while (++index < length) {
		    if (predicate(array[index], index, array)) {
		      return true;
		    }
		  }
		  return false;
		}

		/**
		 * The base implementation of `_.times` without support for iteratee shorthands
		 * or max array length checks.
		 *
		 * @private
		 * @param {number} n The number of times to invoke `iteratee`.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array} Returns the array of results.
		 */
		function baseTimes(n, iteratee) {
		  var index = -1,
		    result = Array(n);
		  while (++index < n) {
		    result[index] = iteratee(index);
		  }
		  return result;
		}

		/**
		 * The base implementation of `_.unary` without support for storing metadata.
		 *
		 * @private
		 * @param {Function} func The function to cap arguments for.
		 * @returns {Function} Returns the new capped function.
		 */
		function baseUnary(func) {
		  return function (value) {
		    return func(value);
		  };
		}

		/**
		 * Checks if a `cache` value for `key` exists.
		 *
		 * @private
		 * @param {Object} cache The cache to query.
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function cacheHas(cache, key) {
		  return cache.has(key);
		}

		/**
		 * Gets the value at `key` of `object`.
		 *
		 * @private
		 * @param {Object} [object] The object to query.
		 * @param {string} key The key of the property to get.
		 * @returns {*} Returns the property value.
		 */
		function getValue(object, key) {
		  return object == null ? undefined : object[key];
		}

		/**
		 * Converts `map` to its key-value pairs.
		 *
		 * @private
		 * @param {Object} map The map to convert.
		 * @returns {Array} Returns the key-value pairs.
		 */
		function mapToArray(map) {
		  var index = -1,
		    result = Array(map.size);
		  map.forEach(function (value, key) {
		    result[++index] = [key, value];
		  });
		  return result;
		}

		/**
		 * Creates a unary function that invokes `func` with its argument transformed.
		 *
		 * @private
		 * @param {Function} func The function to wrap.
		 * @param {Function} transform The argument transform.
		 * @returns {Function} Returns the new function.
		 */
		function overArg(func, transform) {
		  return function (arg) {
		    return func(transform(arg));
		  };
		}

		/**
		 * Converts `set` to an array of its values.
		 *
		 * @private
		 * @param {Object} set The set to convert.
		 * @returns {Array} Returns the values.
		 */
		function setToArray(set) {
		  var index = -1,
		    result = Array(set.size);
		  set.forEach(function (value) {
		    result[++index] = value;
		  });
		  return result;
		}

		/** Used for built-in method references. */
		var arrayProto = Array.prototype,
		  funcProto = Function.prototype,
		  objectProto = Object.prototype;

		/** Used to detect overreaching core-js shims. */
		var coreJsData = root['__core-js_shared__'];

		/** Used to resolve the decompiled source of functions. */
		var funcToString = funcProto.toString;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/** Used to detect methods masquerading as native. */
		var maskSrcKey = function () {
		  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
		  return uid ? 'Symbol(src)_1.' + uid : '';
		}();

		/**
		 * Used to resolve the
		 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var nativeObjectToString = objectProto.toString;

		/** Used to detect if a method is native. */
		var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

		/** Built-in value references. */
		var Buffer = moduleExports ? root.Buffer : undefined,
		  Symbol = root.Symbol,
		  Uint8Array = root.Uint8Array,
		  propertyIsEnumerable = objectProto.propertyIsEnumerable,
		  splice = arrayProto.splice,
		  symToStringTag = Symbol ? Symbol.toStringTag : undefined;

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeGetSymbols = Object.getOwnPropertySymbols,
		  nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
		  nativeKeys = overArg(Object.keys, Object);

		/* Built-in method references that are verified to be native. */
		var DataView = getNative(root, 'DataView'),
		  Map = getNative(root, 'Map'),
		  Promise = getNative(root, 'Promise'),
		  Set = getNative(root, 'Set'),
		  WeakMap = getNative(root, 'WeakMap'),
		  nativeCreate = getNative(Object, 'create');

		/** Used to detect maps, sets, and weakmaps. */
		var dataViewCtorString = toSource(DataView),
		  mapCtorString = toSource(Map),
		  promiseCtorString = toSource(Promise),
		  setCtorString = toSource(Set),
		  weakMapCtorString = toSource(WeakMap);

		/** Used to convert symbols to primitives and strings. */
		var symbolProto = Symbol ? Symbol.prototype : undefined,
		  symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

		/**
		 * Creates a hash object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Hash(entries) {
		  var index = -1,
		    length = entries == null ? 0 : entries.length;
		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the hash.
		 *
		 * @private
		 * @name clear
		 * @memberOf Hash
		 */
		function hashClear() {
		  this.__data__ = nativeCreate ? nativeCreate(null) : {};
		  this.size = 0;
		}

		/**
		 * Removes `key` and its value from the hash.
		 *
		 * @private
		 * @name delete
		 * @memberOf Hash
		 * @param {Object} hash The hash to modify.
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function hashDelete(key) {
		  var result = this.has(key) && delete this.__data__[key];
		  this.size -= result ? 1 : 0;
		  return result;
		}

		/**
		 * Gets the hash value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf Hash
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function hashGet(key) {
		  var data = this.__data__;
		  if (nativeCreate) {
		    var result = data[key];
		    return result === HASH_UNDEFINED ? undefined : result;
		  }
		  return hasOwnProperty.call(data, key) ? data[key] : undefined;
		}

		/**
		 * Checks if a hash value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf Hash
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function hashHas(key) {
		  var data = this.__data__;
		  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
		}

		/**
		 * Sets the hash `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Hash
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the hash instance.
		 */
		function hashSet(key, value) {
		  var data = this.__data__;
		  this.size += this.has(key) ? 0 : 1;
		  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
		  return this;
		}

		// Add methods to `Hash`.
		Hash.prototype.clear = hashClear;
		Hash.prototype['delete'] = hashDelete;
		Hash.prototype.get = hashGet;
		Hash.prototype.has = hashHas;
		Hash.prototype.set = hashSet;

		/**
		 * Creates an list cache object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function ListCache(entries) {
		  var index = -1,
		    length = entries == null ? 0 : entries.length;
		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the list cache.
		 *
		 * @private
		 * @name clear
		 * @memberOf ListCache
		 */
		function listCacheClear() {
		  this.__data__ = [];
		  this.size = 0;
		}

		/**
		 * Removes `key` and its value from the list cache.
		 *
		 * @private
		 * @name delete
		 * @memberOf ListCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function listCacheDelete(key) {
		  var data = this.__data__,
		    index = assocIndexOf(data, key);
		  if (index < 0) {
		    return false;
		  }
		  var lastIndex = data.length - 1;
		  if (index == lastIndex) {
		    data.pop();
		  } else {
		    splice.call(data, index, 1);
		  }
		  --this.size;
		  return true;
		}

		/**
		 * Gets the list cache value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf ListCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function listCacheGet(key) {
		  var data = this.__data__,
		    index = assocIndexOf(data, key);
		  return index < 0 ? undefined : data[index][1];
		}

		/**
		 * Checks if a list cache value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf ListCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function listCacheHas(key) {
		  return assocIndexOf(this.__data__, key) > -1;
		}

		/**
		 * Sets the list cache `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf ListCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the list cache instance.
		 */
		function listCacheSet(key, value) {
		  var data = this.__data__,
		    index = assocIndexOf(data, key);
		  if (index < 0) {
		    ++this.size;
		    data.push([key, value]);
		  } else {
		    data[index][1] = value;
		  }
		  return this;
		}

		// Add methods to `ListCache`.
		ListCache.prototype.clear = listCacheClear;
		ListCache.prototype['delete'] = listCacheDelete;
		ListCache.prototype.get = listCacheGet;
		ListCache.prototype.has = listCacheHas;
		ListCache.prototype.set = listCacheSet;

		/**
		 * Creates a map cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function MapCache(entries) {
		  var index = -1,
		    length = entries == null ? 0 : entries.length;
		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the map.
		 *
		 * @private
		 * @name clear
		 * @memberOf MapCache
		 */
		function mapCacheClear() {
		  this.size = 0;
		  this.__data__ = {
		    'hash': new Hash(),
		    'map': new (Map || ListCache)(),
		    'string': new Hash()
		  };
		}

		/**
		 * Removes `key` and its value from the map.
		 *
		 * @private
		 * @name delete
		 * @memberOf MapCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function mapCacheDelete(key) {
		  var result = getMapData(this, key)['delete'](key);
		  this.size -= result ? 1 : 0;
		  return result;
		}

		/**
		 * Gets the map value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf MapCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function mapCacheGet(key) {
		  return getMapData(this, key).get(key);
		}

		/**
		 * Checks if a map value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf MapCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function mapCacheHas(key) {
		  return getMapData(this, key).has(key);
		}

		/**
		 * Sets the map `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf MapCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the map cache instance.
		 */
		function mapCacheSet(key, value) {
		  var data = getMapData(this, key),
		    size = data.size;
		  data.set(key, value);
		  this.size += data.size == size ? 0 : 1;
		  return this;
		}

		// Add methods to `MapCache`.
		MapCache.prototype.clear = mapCacheClear;
		MapCache.prototype['delete'] = mapCacheDelete;
		MapCache.prototype.get = mapCacheGet;
		MapCache.prototype.has = mapCacheHas;
		MapCache.prototype.set = mapCacheSet;

		/**
		 *
		 * Creates an array cache object to store unique values.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [values] The values to cache.
		 */
		function SetCache(values) {
		  var index = -1,
		    length = values == null ? 0 : values.length;
		  this.__data__ = new MapCache();
		  while (++index < length) {
		    this.add(values[index]);
		  }
		}

		/**
		 * Adds `value` to the array cache.
		 *
		 * @private
		 * @name add
		 * @memberOf SetCache
		 * @alias push
		 * @param {*} value The value to cache.
		 * @returns {Object} Returns the cache instance.
		 */
		function setCacheAdd(value) {
		  this.__data__.set(value, HASH_UNDEFINED);
		  return this;
		}

		/**
		 * Checks if `value` is in the array cache.
		 *
		 * @private
		 * @name has
		 * @memberOf SetCache
		 * @param {*} value The value to search for.
		 * @returns {number} Returns `true` if `value` is found, else `false`.
		 */
		function setCacheHas(value) {
		  return this.__data__.has(value);
		}

		// Add methods to `SetCache`.
		SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
		SetCache.prototype.has = setCacheHas;

		/**
		 * Creates a stack cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Stack(entries) {
		  var data = this.__data__ = new ListCache(entries);
		  this.size = data.size;
		}

		/**
		 * Removes all key-value entries from the stack.
		 *
		 * @private
		 * @name clear
		 * @memberOf Stack
		 */
		function stackClear() {
		  this.__data__ = new ListCache();
		  this.size = 0;
		}

		/**
		 * Removes `key` and its value from the stack.
		 *
		 * @private
		 * @name delete
		 * @memberOf Stack
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function stackDelete(key) {
		  var data = this.__data__,
		    result = data['delete'](key);
		  this.size = data.size;
		  return result;
		}

		/**
		 * Gets the stack value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf Stack
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function stackGet(key) {
		  return this.__data__.get(key);
		}

		/**
		 * Checks if a stack value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf Stack
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function stackHas(key) {
		  return this.__data__.has(key);
		}

		/**
		 * Sets the stack `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Stack
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the stack cache instance.
		 */
		function stackSet(key, value) {
		  var data = this.__data__;
		  if (data instanceof ListCache) {
		    var pairs = data.__data__;
		    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
		      pairs.push([key, value]);
		      this.size = ++data.size;
		      return this;
		    }
		    data = this.__data__ = new MapCache(pairs);
		  }
		  data.set(key, value);
		  this.size = data.size;
		  return this;
		}

		// Add methods to `Stack`.
		Stack.prototype.clear = stackClear;
		Stack.prototype['delete'] = stackDelete;
		Stack.prototype.get = stackGet;
		Stack.prototype.has = stackHas;
		Stack.prototype.set = stackSet;

		/**
		 * Creates an array of the enumerable property names of the array-like `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @param {boolean} inherited Specify returning inherited property names.
		 * @returns {Array} Returns the array of property names.
		 */
		function arrayLikeKeys(value, inherited) {
		  var isArr = isArray(value),
		    isArg = !isArr && isArguments(value),
		    isBuff = !isArr && !isArg && isBuffer(value),
		    isType = !isArr && !isArg && !isBuff && isTypedArray(value),
		    skipIndexes = isArr || isArg || isBuff || isType,
		    result = skipIndexes ? baseTimes(value.length, String) : [],
		    length = result.length;
		  for (var key in value) {
		    if ((hasOwnProperty.call(value, key)) && !(skipIndexes && (
		    // Safari 9 has enumerable `arguments.length` in strict mode.
		    key == 'length' ||
		    // Node.js 0.10 has enumerable non-index properties on buffers.
		    isBuff && (key == 'offset' || key == 'parent') ||
		    // PhantomJS 2 has enumerable non-index properties on typed arrays.
		    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
		    // Skip index properties.
		    isIndex(key, length)))) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		/**
		 * Gets the index at which the `key` is found in `array` of key-value pairs.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {*} key The key to search for.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 */
		function assocIndexOf(array, key) {
		  var length = array.length;
		  while (length--) {
		    if (eq(array[length][0], key)) {
		      return length;
		    }
		  }
		  return -1;
		}

		/**
		 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
		 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
		 * symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {Function} keysFunc The function to get the keys of `object`.
		 * @param {Function} symbolsFunc The function to get the symbols of `object`.
		 * @returns {Array} Returns the array of property names and symbols.
		 */
		function baseGetAllKeys(object, keysFunc, symbolsFunc) {
		  var result = keysFunc(object);
		  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
		}

		/**
		 * The base implementation of `getTag` without fallbacks for buggy environments.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the `toStringTag`.
		 */
		function baseGetTag(value) {
		  if (value == null) {
		    return value === undefined ? undefinedTag : nullTag;
		  }
		  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
		}

		/**
		 * The base implementation of `_.isArguments`.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 */
		function baseIsArguments(value) {
		  return isObjectLike(value) && baseGetTag(value) == argsTag;
		}

		/**
		 * The base implementation of `_.isEqual` which supports partial comparisons
		 * and tracks traversed objects.
		 *
		 * @private
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @param {boolean} bitmask The bitmask flags.
		 *  1 - Unordered comparison
		 *  2 - Partial comparison
		 * @param {Function} [customizer] The function to customize comparisons.
		 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 */
		function baseIsEqual(value, other, bitmask, customizer, stack) {
		  if (value === other) {
		    return true;
		  }
		  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
		    return value !== value && other !== other;
		  }
		  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
		}

		/**
		 * A specialized version of `baseIsEqual` for arrays and objects which performs
		 * deep comparisons and tracks traversed objects enabling objects with circular
		 * references to be compared.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
		  var objIsArr = isArray(object),
		    othIsArr = isArray(other),
		    objTag = objIsArr ? arrayTag : getTag(object),
		    othTag = othIsArr ? arrayTag : getTag(other);
		  objTag = objTag == argsTag ? objectTag : objTag;
		  othTag = othTag == argsTag ? objectTag : othTag;
		  var objIsObj = objTag == objectTag,
		    othIsObj = othTag == objectTag,
		    isSameTag = objTag == othTag;
		  if (isSameTag && isBuffer(object)) {
		    if (!isBuffer(other)) {
		      return false;
		    }
		    objIsArr = true;
		    objIsObj = false;
		  }
		  if (isSameTag && !objIsObj) {
		    stack || (stack = new Stack());
		    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
		  }
		  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
		    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
		      othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
		    if (objIsWrapped || othIsWrapped) {
		      var objUnwrapped = objIsWrapped ? object.value() : object,
		        othUnwrapped = othIsWrapped ? other.value() : other;
		      stack || (stack = new Stack());
		      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
		    }
		  }
		  if (!isSameTag) {
		    return false;
		  }
		  stack || (stack = new Stack());
		  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
		}

		/**
		 * The base implementation of `_.isNative` without bad shim checks.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a native function,
		 *  else `false`.
		 */
		function baseIsNative(value) {
		  if (!isObject(value) || isMasked(value)) {
		    return false;
		  }
		  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
		  return pattern.test(toSource(value));
		}

		/**
		 * The base implementation of `_.isTypedArray` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 */
		function baseIsTypedArray(value) {
		  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
		}

		/**
		 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function baseKeys(object) {
		  if (!isPrototype(object)) {
		    return nativeKeys(object);
		  }
		  var result = [];
		  for (var key in Object(object)) {
		    if (hasOwnProperty.call(object, key) && key != 'constructor') {
		      result.push(key);
		    }
		  }
		  return result;
		}

		/**
		 * A specialized version of `baseIsEqualDeep` for arrays with support for
		 * partial deep comparisons.
		 *
		 * @private
		 * @param {Array} array The array to compare.
		 * @param {Array} other The other array to compare.
		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Object} stack Tracks traversed `array` and `other` objects.
		 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
		 */
		function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
		  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		    arrLength = array.length,
		    othLength = other.length;
		  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
		    return false;
		  }
		  // Assume cyclic values are equal.
		  var stacked = stack.get(array);
		  if (stacked && stack.get(other)) {
		    return stacked == other;
		  }
		  var index = -1,
		    result = true,
		    seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
		  stack.set(array, other);
		  stack.set(other, array);

		  // Ignore non-index properties.
		  while (++index < arrLength) {
		    var arrValue = array[index],
		      othValue = other[index];
		    if (customizer) {
		      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
		    }
		    if (compared !== undefined) {
		      if (compared) {
		        continue;
		      }
		      result = false;
		      break;
		    }
		    // Recursively compare arrays (susceptible to call stack limits).
		    if (seen) {
		      if (!arraySome(other, function (othValue, othIndex) {
		        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
		          return seen.push(othIndex);
		        }
		      })) {
		        result = false;
		        break;
		      }
		    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
		      result = false;
		      break;
		    }
		  }
		  stack['delete'](array);
		  stack['delete'](other);
		  return result;
		}

		/**
		 * A specialized version of `baseIsEqualDeep` for comparing objects of
		 * the same `toStringTag`.
		 *
		 * **Note:** This function only supports comparing values with tags of
		 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {string} tag The `toStringTag` of the objects to compare.
		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Object} stack Tracks traversed `object` and `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
		  switch (tag) {
		    case dataViewTag:
		      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
		        return false;
		      }
		      object = object.buffer;
		      other = other.buffer;
		    case arrayBufferTag:
		      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
		        return false;
		      }
		      return true;
		    case boolTag:
		    case dateTag:
		    case numberTag:
		      // Coerce booleans to `1` or `0` and dates to milliseconds.
		      // Invalid dates are coerced to `NaN`.
		      return eq(+object, +other);
		    case errorTag:
		      return object.name == other.name && object.message == other.message;
		    case regexpTag:
		    case stringTag:
		      // Coerce regexes to strings and treat strings, primitives and objects,
		      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
		      // for more details.
		      return object == other + '';
		    case mapTag:
		      var convert = mapToArray;
		    case setTag:
		      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
		      convert || (convert = setToArray);
		      if (object.size != other.size && !isPartial) {
		        return false;
		      }
		      // Assume cyclic values are equal.
		      var stacked = stack.get(object);
		      if (stacked) {
		        return stacked == other;
		      }
		      bitmask |= COMPARE_UNORDERED_FLAG;

		      // Recursively compare objects (susceptible to call stack limits).
		      stack.set(object, other);
		      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
		      stack['delete'](object);
		      return result;
		    case symbolTag:
		      if (symbolValueOf) {
		        return symbolValueOf.call(object) == symbolValueOf.call(other);
		      }
		  }
		  return false;
		}

		/**
		 * A specialized version of `baseIsEqualDeep` for objects with support for
		 * partial deep comparisons.
		 *
		 * @private
		 * @param {Object} object The object to compare.
		 * @param {Object} other The other object to compare.
		 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
		 * @param {Function} customizer The function to customize comparisons.
		 * @param {Function} equalFunc The function to determine equivalents of values.
		 * @param {Object} stack Tracks traversed `object` and `other` objects.
		 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
		 */
		function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
		  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
		    objProps = getAllKeys(object),
		    objLength = objProps.length,
		    othProps = getAllKeys(other),
		    othLength = othProps.length;
		  if (objLength != othLength && !isPartial) {
		    return false;
		  }
		  var index = objLength;
		  while (index--) {
		    var key = objProps[index];
		    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
		      return false;
		    }
		  }
		  // Assume cyclic values are equal.
		  var stacked = stack.get(object);
		  if (stacked && stack.get(other)) {
		    return stacked == other;
		  }
		  var result = true;
		  stack.set(object, other);
		  stack.set(other, object);
		  var skipCtor = isPartial;
		  while (++index < objLength) {
		    key = objProps[index];
		    var objValue = object[key],
		      othValue = other[key];
		    if (customizer) {
		      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
		    }
		    // Recursively compare objects (susceptible to call stack limits).
		    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
		      result = false;
		      break;
		    }
		    skipCtor || (skipCtor = key == 'constructor');
		  }
		  if (result && !skipCtor) {
		    var objCtor = object.constructor,
		      othCtor = other.constructor;

		    // Non `Object` object instances with different constructors are not equal.
		    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
		      result = false;
		    }
		  }
		  stack['delete'](object);
		  stack['delete'](other);
		  return result;
		}

		/**
		 * Creates an array of own enumerable property names and symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names and symbols.
		 */
		function getAllKeys(object) {
		  return baseGetAllKeys(object, keys, getSymbols);
		}

		/**
		 * Gets the data for `map`.
		 *
		 * @private
		 * @param {Object} map The map to query.
		 * @param {string} key The reference key.
		 * @returns {*} Returns the map data.
		 */
		function getMapData(map, key) {
		  var data = map.__data__;
		  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
		}

		/**
		 * Gets the native function at `key` of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {string} key The key of the method to get.
		 * @returns {*} Returns the function if it's native, else `undefined`.
		 */
		function getNative(object, key) {
		  var value = getValue(object, key);
		  return baseIsNative(value) ? value : undefined;
		}

		/**
		 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the raw `toStringTag`.
		 */
		function getRawTag(value) {
		  var isOwn = hasOwnProperty.call(value, symToStringTag),
		    tag = value[symToStringTag];
		  try {
		    value[symToStringTag] = undefined;
		    var unmasked = true;
		  } catch (e) {}
		  var result = nativeObjectToString.call(value);
		  if (unmasked) {
		    if (isOwn) {
		      value[symToStringTag] = tag;
		    } else {
		      delete value[symToStringTag];
		    }
		  }
		  return result;
		}

		/**
		 * Creates an array of the own enumerable symbols of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of symbols.
		 */
		var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
		  if (object == null) {
		    return [];
		  }
		  object = Object(object);
		  return arrayFilter(nativeGetSymbols(object), function (symbol) {
		    return propertyIsEnumerable.call(object, symbol);
		  });
		};

		/**
		 * Gets the `toStringTag` of `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the `toStringTag`.
		 */
		var getTag = baseGetTag;

		// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
		if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
		  getTag = function (value) {
		    var result = baseGetTag(value),
		      Ctor = result == objectTag ? value.constructor : undefined,
		      ctorString = Ctor ? toSource(Ctor) : '';
		    if (ctorString) {
		      switch (ctorString) {
		        case dataViewCtorString:
		          return dataViewTag;
		        case mapCtorString:
		          return mapTag;
		        case promiseCtorString:
		          return promiseTag;
		        case setCtorString:
		          return setTag;
		        case weakMapCtorString:
		          return weakMapTag;
		      }
		    }
		    return result;
		  };
		}

		/**
		 * Checks if `value` is a valid array-like index.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		 */
		function isIndex(value, length) {
		  length = length == null ? MAX_SAFE_INTEGER : length;
		  return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
		}

		/**
		 * Checks if `value` is suitable for use as unique object key.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
		 */
		function isKeyable(value) {
		  var type = typeof value;
		  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
		}

		/**
		 * Checks if `func` has its source masked.
		 *
		 * @private
		 * @param {Function} func The function to check.
		 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
		 */
		function isMasked(func) {
		  return !!maskSrcKey && maskSrcKey in func;
		}

		/**
		 * Checks if `value` is likely a prototype object.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		 */
		function isPrototype(value) {
		  var Ctor = value && value.constructor,
		    proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
		  return value === proto;
		}

		/**
		 * Converts `value` to a string using `Object.prototype.toString`.
		 *
		 * @private
		 * @param {*} value The value to convert.
		 * @returns {string} Returns the converted string.
		 */
		function objectToString(value) {
		  return nativeObjectToString.call(value);
		}

		/**
		 * Converts `func` to its source code.
		 *
		 * @private
		 * @param {Function} func The function to convert.
		 * @returns {string} Returns the source code.
		 */
		function toSource(func) {
		  if (func != null) {
		    try {
		      return funcToString.call(func);
		    } catch (e) {}
		    try {
		      return func + '';
		    } catch (e) {}
		  }
		  return '';
		}

		/**
		 * Performs a
		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * comparison between two values to determine if they are equivalent.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 * var other = { 'a': 1 };
		 *
		 * _.eq(object, object);
		 * // => true
		 *
		 * _.eq(object, other);
		 * // => false
		 *
		 * _.eq('a', 'a');
		 * // => true
		 *
		 * _.eq('a', Object('a'));
		 * // => false
		 *
		 * _.eq(NaN, NaN);
		 * // => true
		 */
		function eq(value, other) {
		  return value === other || value !== value && other !== other;
		}

		/**
		 * Checks if `value` is likely an `arguments` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 *  else `false`.
		 * @example
		 *
		 * _.isArguments(function() { return arguments; }());
		 * // => true
		 *
		 * _.isArguments([1, 2, 3]);
		 * // => false
		 */
		var isArguments = baseIsArguments(function () {
		  return arguments;
		}()) ? baseIsArguments : function (value) {
		  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
		};

		/**
		 * Checks if `value` is classified as an `Array` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
		 * @example
		 *
		 * _.isArray([1, 2, 3]);
		 * // => true
		 *
		 * _.isArray(document.body.children);
		 * // => false
		 *
		 * _.isArray('abc');
		 * // => false
		 *
		 * _.isArray(_.noop);
		 * // => false
		 */
		var isArray = Array.isArray;

		/**
		 * Checks if `value` is array-like. A value is considered array-like if it's
		 * not a function and has a `value.length` that's an integer greater than or
		 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		 * @example
		 *
		 * _.isArrayLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isArrayLike(document.body.children);
		 * // => true
		 *
		 * _.isArrayLike('abc');
		 * // => true
		 *
		 * _.isArrayLike(_.noop);
		 * // => false
		 */
		function isArrayLike(value) {
		  return value != null && isLength(value.length) && !isFunction(value);
		}

		/**
		 * Checks if `value` is a buffer.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		 * @example
		 *
		 * _.isBuffer(new Buffer(2));
		 * // => true
		 *
		 * _.isBuffer(new Uint8Array(2));
		 * // => false
		 */
		var isBuffer = nativeIsBuffer || stubFalse;

		/**
		 * Performs a deep comparison between two values to determine if they are
		 * equivalent.
		 *
		 * **Note:** This method supports comparing arrays, array buffers, booleans,
		 * date objects, error objects, maps, numbers, `Object` objects, regexes,
		 * sets, strings, symbols, and typed arrays. `Object` objects are compared
		 * by their own, not inherited, enumerable properties. Functions and DOM
		 * nodes are compared by strict equality, i.e. `===`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 * var other = { 'a': 1 };
		 *
		 * _.isEqual(object, other);
		 * // => true
		 *
		 * object === other;
		 * // => false
		 */
		function isEqual(value, other) {
		  return baseIsEqual(value, other);
		}

		/**
		 * Checks if `value` is classified as a `Function` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
		 * @example
		 *
		 * _.isFunction(_);
		 * // => true
		 *
		 * _.isFunction(/abc/);
		 * // => false
		 */
		function isFunction(value) {
		  if (!isObject(value)) {
		    return false;
		  }
		  // The use of `Object#toString` avoids issues with the `typeof` operator
		  // in Safari 9 which returns 'object' for typed arrays and other constructors.
		  var tag = baseGetTag(value);
		  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
		}

		/**
		 * Checks if `value` is a valid array-like length.
		 *
		 * **Note:** This method is loosely based on
		 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		 * @example
		 *
		 * _.isLength(3);
		 * // => true
		 *
		 * _.isLength(Number.MIN_VALUE);
		 * // => false
		 *
		 * _.isLength(Infinity);
		 * // => false
		 *
		 * _.isLength('3');
		 * // => false
		 */
		function isLength(value) {
		  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		}

		/**
		 * Checks if `value` is the
		 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(_.noop);
		 * // => true
		 *
		 * _.isObject(null);
		 * // => false
		 */
		function isObject(value) {
		  var type = typeof value;
		  return value != null && (type == 'object' || type == 'function');
		}

		/**
		 * Checks if `value` is object-like. A value is object-like if it's not `null`
		 * and has a `typeof` result of "object".
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		 * @example
		 *
		 * _.isObjectLike({});
		 * // => true
		 *
		 * _.isObjectLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isObjectLike(_.noop);
		 * // => false
		 *
		 * _.isObjectLike(null);
		 * // => false
		 */
		function isObjectLike(value) {
		  return value != null && typeof value == 'object';
		}

		/**
		 * Checks if `value` is classified as a typed array.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 * @example
		 *
		 * _.isTypedArray(new Uint8Array);
		 * // => true
		 *
		 * _.isTypedArray([]);
		 * // => false
		 */
		var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

		/**
		 * Creates an array of the own enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects. See the
		 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		 * for more details.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keys(new Foo);
		 * // => ['a', 'b'] (iteration order is not guaranteed)
		 *
		 * _.keys('hi');
		 * // => ['0', '1']
		 */
		function keys(object) {
		  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
		}

		/**
		 * This method returns a new empty array.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.13.0
		 * @category Util
		 * @returns {Array} Returns the new empty array.
		 * @example
		 *
		 * var arrays = _.times(2, _.stubArray);
		 *
		 * console.log(arrays);
		 * // => [[], []]
		 *
		 * console.log(arrays[0] === arrays[1]);
		 * // => false
		 */
		function stubArray() {
		  return [];
		}

		/**
		 * This method returns `false`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.13.0
		 * @category Util
		 * @returns {boolean} Returns `false`.
		 * @example
		 *
		 * _.times(2, _.stubFalse);
		 * // => [false, false]
		 */
		function stubFalse() {
		  return false;
		}
		module.exports = isEqual; 
	} (lodash_isequal, lodash_isequal.exports));
	return lodash_isequal.exports;
}

var lodash_isequalExports = requireLodash_isequal();
const isEqual = /*@__PURE__*/getDefaultExportFromCjs(lodash_isequalExports);

// src/controls/-utils.ts
function isItemOf(item, control) {
  return control.items.includes(item);
}
function asItemOf(item, control) {
  if (isItemOf(item, control)) {
    return item;
  }
  return void 0;
}
function isItemEnabled(item) {
  return !item.hasAttribute("aria-disabled") || item.getAttribute("aria-disabled") === "false";
}

// src/update-strategies/dom-observer-update-strategy.ts
var DomObserverUpdateStrategy = class {
  constructor(control) {
    this.control = control;
    this.observe();
  }
  observer = new MutationObserver(changes => {
    if (!this.control) {
      return;
    }
    const changedItems = changes.some(change => change.type === "childList");
    const itemAttributes = ["aria-disabled"];
    const changedItemAttributes = changes.some(change => change.type === "attributes" && isItemOf(change.target, this.control) && itemAttributes.includes(change.attributeName));
    if (changedItems || changedItemAttributes) {
      this.control.readItems();
    }
    const optionAttributes = [...this.control.optionAttributes, "aria-disabled"];
    const changedOptions = changes.some(change => change.target === this.control.element && change.type === "attributes" && optionAttributes.includes(change.attributeName));
    if (changedOptions) {
      this.control.readOptions();
    }
    const changedSelection = changes.every(c => c.type === "attributes" && c.attributeName === "aria-selected");
    if (changedSelection) {
      this.control.readSelection();
    }
  });
  observe() {
    if (!this.control) {
      return;
    }
    this.observer.observe(this.control.element, {
      subtree: true,
      childList: true,
      attributes: true
    });
  }
  setControl(control) {
    this.observer.disconnect();
    this.control = control;
    this.observe();
  }
  dispose() {
    this.control = void 0;
    this.observer.disconnect();
  }
};

// src/controls/control.ts
function pipe(input, ...fns) {
  let lastResult = input;
  for (let fn of fns) {
    lastResult = fn(lastResult);
  }
  return lastResult;
}
var Control = class {
  items = [];
  get enabledItems() {
    if (this.options.disabled) {
      return [];
    }
    return this.items.filter(isItemEnabled);
  }
  element;
  emitter;
  updater;
  /**
   * Capabilities define, which _behaviors_ are applicable to the given control
   */
  #capabilities = {
    singleSelection: false,
    multiSelection: false
  };
  get capabilities() {
    return this.#capabilities;
  }
  #optionAttributes = [];
  get optionAttributes() {
    return this.#optionAttributes;
  }
  /**
   * Options instruct, which behaviors are actually _active_
   */
  options = {
    multiple: false,
    disabled: false,
    orientation: "horizontal"
  };
  navigationPatterns = [];
  constructor(element, options) {
    this.element = element;
    this.#capabilities = options.capabilities ?? this.#capabilities;
    this.#optionAttributes = options.optionAttributes ?? this.#optionAttributes;
    this.updater = options.updater ?? new DomObserverUpdateStrategy(this);
    if (options.updater) {
      options.updater.setControl(this);
    }
  }
  setEmitStrategy(emitter) {
    this.emitter?.dispose?.();
    this.emitter = emitter;
  }
  setUpdateStrategy(updater) {
    this.updater.dispose?.();
    this.updater = updater;
  }
  registerNavigationPatterns(patterns) {
    this.navigationPatterns = patterns;
    const eventNames = new Set(this.navigationPatterns.map(p => p.eventListeners ?? []).flat());
    for (const eventName of eventNames) {
      this.element.addEventListener(eventName, this.handleEvent.bind(this));
    }
  }
  dispose() {
    this.updater.dispose?.();
    this.emitter?.dispose?.();
    this.focusStrategy.dispose();
    const eventNames = new Set(this.navigationPatterns.map(p => p.eventListeners ?? []).flat());
    for (const eventName of eventNames) {
      this.element.removeEventListener(eventName, this.handleEvent.bind(this));
    }
  }
  handleEvent(event) {
    if (this.options.disabled) {
      return;
    }
    const patterns = this.navigationPatterns.filter(p => p.matches(event));
    patterns.forEach(p => p.prepare?.(event));
    pipe({
      event
    }, ...patterns.map(p => p.handle.bind(p)));
    event.stopPropagation();
  }
  // read in from DOM
  readOptions() {
    this.options.multiple = this.element.hasAttribute("aria-multiselectable") && this.element.getAttribute("aria-multiselectable") === "true" || false;
    this.options.disabled = this.element.hasAttribute("aria-disabled") && this.element.getAttribute("aria-disabled") === "true" || false;
    this.options.orientation = this.element.hasAttribute("aria-orientation") ? this.element.getAttribute("aria-orientation") : "horizontal";
  }
  readItems() {
    this.items = [];
  }
  readSelection() {}
};

// src/utils.ts
function uniqueId() {
  return ("30000000-1000-4000-2000" + -1e11).replace(/[0-3]/g, a => (a * 4 ^ Math.random() * 16 >> (a & 2)).toString(16));
}

// src/navigation-patterns/focus-strategy.ts
var AbstractFocusStrategy = class {
  constructor(control, selectionStrategy) {
    this.control = control;
    this.selectionStrategy = selectionStrategy;
    this.selectionStrategy?.addListener("read", this.readSelectionHandler.bind(this));
  }
  eventListeners = ["focus", "focusin"];
  activeItem;
  prevActiveItem;
  get selection() {
    if (this.selectionStrategy) {
      return this.selectionStrategy.selection;
    }
    return [];
  }
  dispose() {
    this.selectionStrategy?.removeListener("read", this.readSelectionHandler.bind(this));
  }
  readSelectionHandler() {
    if (!this.hasFocus() && this.selection.length > 0) {
      this.activateSelection();
    }
  }
  hasFocus() {
    return this.control.element.contains(document.activeElement) || this.control.element === document.activeElement;
  }
  matches() {
    return this.control.enabledItems.length > 0;
  }
  handle(bag) {
    const {
      event,
      item
    } = bag;
    if (event.type === "focusin") {
      this.handleFocus(event);
      return bag;
    }
    if (item) {
      this.activateItem(item, event.type === "pointerover");
    }
    return bag;
  }
  handleFocus(event) {
    if (this.control.element === event.target) {
      const selectionPresent = this.selection.length > 0;
      if (selectionPresent) {
        this.activateSelection();
      } else {
        this.activateItem(this.control.enabledItems[0]);
      }
    } else if (this.control.enabledItems.includes(event.target)) {
      this.activateItem(event.target);
    }
  }
  activateSelection() {
    this.activateItem(this.selection[0]);
  }
};

// src/navigation-patterns/active-descendent-strategy.ts
var ActiveDescendentStrategy = class extends AbstractFocusStrategy {
  activateItem(item) {
    if (item === this.activeItem) {
      return;
    }
    item.setAttribute("aria-current", "true");
    this.control.element.setAttribute("aria-activedescendant", item.id);
    this.prevActiveItem = this.activeItem;
    this.activeItem = item;
    this.control.prevActiveItem?.removeAttribute("aria-current");
    this.control.emitter?.itemActivated(item);
  }
  updateItems() {
    for (const item of this.control.items) {
      if (!item.id) {
        item.id = uniqueId();
      }
    }
  }
};

// src/navigation-patterns/end-navigation.ts
function isEndEvent(event) {
  return event instanceof KeyboardEvent && event.type === "keydown" && event.key === "End";
}
var EndNavigation = class {
  constructor(control) {
    this.control = control;
  }
  eventListeners = ["keydown"];
  matches(event) {
    return isEndEvent(event) && this.control.enabledItems.length > 0;
  }
  handle(bag) {
    const lastOffset = this.control.enabledItems.length - 1;
    return {
      ...bag,
      item: this.control.enabledItems[lastOffset]
    };
  }
};

// src/navigation-patterns/home-navigation.ts
function isHomeEvent(event) {
  return event instanceof KeyboardEvent && event.type === "keydown" && event.key === "Home";
}
var HomeNavigation = class {
  constructor(control) {
    this.control = control;
  }
  eventListeners = ["keydown"];
  matches(event) {
    return isHomeEvent(event) && this.control.enabledItems.length > 0;
  }
  handle(bag) {
    return {
      ...bag,
      item: this.control.enabledItems[0]
    };
  }
};

// src/navigation-patterns/next-navigation.ts
function matchesKeys(event, keyOrKeys) {
  const keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];
  return event instanceof KeyboardEvent && event.type === "keydown" && keys.includes(event.key);
}
var NextNavigation = class {
  constructor(control, keyOrKeys) {
    this.control = control;
    this.keyOrKeys = keyOrKeys;
  }
  eventListeners = ["keydown"];
  matches(event) {
    return matchesKeys(event, this.keyOrKeys) && this.control.enabledItems.length > 0;
  }
  handle(bag) {
    let item = void 0;
    if (this.control.activeItem) {
      const activeIndex = this.control.enabledItems.indexOf(this.control.activeItem);
      if (activeIndex !== this.control.enabledItems.length - 1) {
        item = this.control.enabledItems[activeIndex + 1];
      }
    }
    return {
      ...bag,
      item
    };
  }
};

// src/navigation-patterns/pointer-navigation.ts
var PointerNavigation = class {
  constructor(control, typeOrTypes = "pointerup") {
    this.control = control;
    this.eventListeners = Array.isArray(typeOrTypes) ? typeOrTypes : [typeOrTypes];
  }
  eventListeners;
  matches(event) {
    return this.eventListeners.includes(event.type);
  }
  handle(bag) {
    const {
      event
    } = bag;
    const item = event.composedPath().find(elem => asItemOf(elem, this.control));
    return {
      ...bag,
      item
    };
  }
};

// src/navigation-patterns/previous-navigation.ts
function matchesKeys2(event, keyOrKeys) {
  const keys = Array.isArray(keyOrKeys) ? keyOrKeys : [keyOrKeys];
  return event instanceof KeyboardEvent && event.type === "keydown" && keys.includes(event.key);
}
var PreviousNavigation = class {
  constructor(control, keyOrKeys) {
    this.control = control;
    this.keyOrKeys = keyOrKeys;
  }
  eventListeners = ["keydown"];
  matches(event) {
    return matchesKeys2(event, this.keyOrKeys) && this.control.enabledItems.length > 0;
  }
  handle(bag) {
    let item = void 0;
    if (this.control.activeItem) {
      const activeIndex = this.control.enabledItems.indexOf(this.control.activeItem);
      if (activeIndex !== 0) {
        item = this.control.enabledItems[activeIndex - 1];
      }
    }
    return {
      ...bag,
      item
    };
  }
};

// src/navigation-patterns/scroll-to-item.ts
var ScrollToItem = class {
  constructor(control) {
    this.control = control;
  }
  eventListeners = ["keydown"];
  matches() {
    return this.control.items.length > 0;
  }
  handle(bag) {
    const {
      event,
      item
    } = bag;
    if (event.type === "keydown") {
      if (item) {
        this.scrollToItem(item);
      }
      this.preventScrolling(event);
    }
    return bag;
  }
  preventScrolling(event) {
    if (event.key === "ArrowUp" || event.key === "ArrowDown" || event.key === "ArrowLeft" || event.key === "ArrowRight" || event.key === "PageUp" || event.key === "PageDown" || event.key === "Home" || event.key === "End" || event.key === " " || event.key === "a" && event.metaKey) {
      event.preventDefault();
    }
  }
  scrollToItem(item) {
    if (this.control.prevActiveItem && this.control.items.indexOf(this.control.prevActiveItem) < this.control.items.indexOf(item)) {
      this.scrollDownwardsToItem(item);
    } else {
      this.scrollUpwardsToItem(item);
    }
  }
  scrollUpwardsToItem(item) {
    if (!this.isItemInViewport(item) || item.offsetTop === 0) {
      const buffer = this.calcBuffer();
      this.control.element.scrollTop = item.offsetTop - buffer;
    }
  }
  scrollDownwardsToItem(item) {
    if (!this.isItemInViewport(item)) {
      const buffer = this.calcBuffer();
      this.control.element.scrollTop = item.offsetTop - this.control.element.clientHeight + item.clientHeight + buffer;
    }
  }
  isItemInViewport(item) {
    const buffer = this.calcBuffer();
    const viewportLowerEdge = this.control.element.scrollTop + this.control.element.clientHeight;
    const itemLowerEdge = item.offsetTop + item.clientHeight + buffer;
    const visibleFromTop = viewportLowerEdge >= itemLowerEdge;
    const viewportUpperEdge = this.control.element.scrollTop;
    const itemUpperEdge = item.offsetTop - buffer;
    const visibleFromBottom = viewportUpperEdge <= itemUpperEdge;
    const itemIsTallerThanContainer = item.clientHeight > this.control.element.clientHeight;
    return visibleFromTop && visibleFromBottom && !itemIsTallerThanContainer;
  }
  calcBuffer() {
    const style = window.getComputedStyle(this.control.element);
    const padding = style.getPropertyValue("padding-block");
    return Math.max(2, Number.parseFloat(padding));
  }
};
var DEFAULT_BEHAVIOR = {
  singleSelection: "automatic"
};
var SelectionStrategy = class {
  constructor(control, behavior) {
    this.control = control;
    this.behavior = {
      ...DEFAULT_BEHAVIOR,
      ...(behavior ?? {})
    };
    this.readSelection();
  }
  #listeners = {
    read: /* @__PURE__ */new Set()
  };
  eventListeners = ["focusin", "keydown", "keyup", "pointerup", "change"];
  #selection = [];
  get selection() {
    return this.#selection;
  }
  shiftItem;
  behavior;
  dispose() {
    Object.values(this.#listeners).forEach(listeners => listeners.clear());
  }
  addListener(event, handler) {
    this.#listeners[event].add(handler);
  }
  removeListener(event, handler) {
    this.#listeners[event].delete(handler);
  }
  matches(event) {
    return this.control.items.length > 0 && this.eventListeners.includes(event.type);
  }
  prepare(event) {
    if (!this.shiftItem && this.control.activeItem && event instanceof KeyboardEvent && event.shiftKey) {
      this.shiftItem = this.control.activeItem;
    }
  }
  handle(bag) {
    const {
      event
    } = bag;
    if (event.type === "focusin") {
      this.handleFocus();
    } else if (event.type === "pointerup" && bag.item) {
      this.handlePointer(event, bag.item);
    } else if (event instanceof KeyboardEvent) {
      this.handleKeyboard(event, bag.item);
    } else if (event.type === "change") {
      this.handleChange();
    }
    return bag;
  }
  select(selection) {
    const items = selection.every(Number) ? selection.map(sel => this.control.items.find(item => item === sel)).filter(e => e !== void 0) : selection;
    this.persistSelection(items);
  }
  readSelection() {
    this.#selection = [...this.control.element.querySelectorAll('[aria-selected="true"]')];
    for (const listener of this.#listeners.read) {
      listener();
    }
  }
  handleChange() {
    this.readSelection();
    this.control.emitter?.selected(this.#selection);
  }
  handleFocus() {
    const multiple = this.control.options.multiple;
    const selectionPresent = this.#selection.length > 0;
    if (this.control.capabilities.singleSelection && !multiple && !selectionPresent) {
      this.selectSingle(this.control.items[0]);
    }
  }
  handlePointer(event, item) {
    if (event.shiftKey) {
      this.selectShift(item);
    } else if (event.metaKey) {
      if (this.#selection.includes(item)) {
        this.deselect(item);
      } else {
        this.selectAdd(item);
      }
    } else {
      this.selectSingle(item);
    }
  }
  handleKeyboard(event, item) {
    if (event.type === "keydown") {
      if (item) {
        this.handleItem(event, item);
      }
      this.handleKeys(event);
      this.handleKeyCombinations(event);
    } else if (event.type === "keyup" && !event.shiftKey) {
      this.shiftItem = void 0;
    }
  }
  handleItem(event, item) {
    if (this.control.options.multiple) {
      if (event.shiftKey) {
        this.selectShift(item);
      }
    } else {
      if (this.behavior.singleSelection === "automatic" ||
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      this.behavior.singleSelection === "manual" && event.key === " ") {
        this.selectSingle(item);
      }
    }
  }
  handleKeys(event) {
    if (this.behavior.singleSelection === "manual" && event.key === " " && this.control.activeItem) {
      this.selectSingle(this.control.activeItem);
    }
  }
  /**
   * Handles special keyboard control cases, such as handling the spacebar key
   * and cmd/ctrl + a
   */
  handleKeyCombinations(event) {
    if (event.key === " " && this.control.activeItem && this.control.options.multiple) {
      if (this.#selection.includes(this.control.activeItem)) {
        this.deselect(this.control.activeItem);
      } else {
        this.selectAdd(this.control.activeItem);
      }
    } else if ((event.key === "KeyA" || event.key === "a") && event.metaKey) {
      this.selectAll();
      event.preventDefault();
      event.stopPropagation();
    }
  }
  // selection logic
  deselect(item) {
    if (this.#selection.includes(item)) {
      const selection = this.#selection.slice();
      selection.splice(selection.indexOf(item), 1);
      this.persistSelection(selection);
    }
  }
  selectSingle(item) {
    this.shiftItem = item;
    this.persistSelection([item]);
  }
  selectAdd(item) {
    const selection = this.control.options.multiple ? this.#selection.slice() : [];
    selection.push(item);
    this.shiftItem = item;
    this.persistSelection(selection);
  }
  selectAll() {
    if (this.control.options.multiple) {
      this.persistSelection(this.control.items);
    }
  }
  selectRange(from, to) {
    if (this.control.options.multiple) {
      const selection = [];
      let i = from;
      const up = to > from;
      while (up ? i <= to : i >= to) {
        selection.push(this.control.items[i]);
        i += up ? 1 : -1;
      }
      this.persistSelection(selection);
    }
  }
  selectShift(item) {
    if (this.control.options.multiple && this.shiftItem) {
      const indexShift = this.control.items.indexOf(this.shiftItem);
      const indexItem = this.control.items.indexOf(item);
      this.selectRange(indexShift, indexItem);
    }
  }
  // talk to the control from here
  persistSelection(selection) {
    if (isEqual(selection, this.#selection)) {
      return;
    }
    for (const element of this.control.items) {
      if (selection.includes(element)) {
        element.setAttribute("aria-selected", "true");
      } else {
        element.removeAttribute("aria-selected");
      }
    }
    this.#selection = selection;
    this.control.emitter?.selected(this.#selection);
  }
};

// src/controls/listbox.ts
var Listbox = class extends Control {
  #selectionStrategy = new SelectionStrategy(this);
  focusStrategy = new ActiveDescendentStrategy(this, this.#selectionStrategy);
  get selection() {
    return this.#selectionStrategy.selection;
  }
  get activeItem() {
    return this.focusStrategy.activeItem;
  }
  get prevActiveItem() {
    return this.focusStrategy.prevActiveItem;
  }
  constructor(element, options) {
    super(element, {
      capabilities: {
        singleSelection: true,
        multiSelection: true
      },
      optionAttributes: ["aria-multiselectable"],
      ...options
    });
    this.registerNavigationPatterns([new NextNavigation(this, ["ArrowDown", "ArrowRight"]), new PreviousNavigation(this, ["ArrowUp", "ArrowLeft"]), new HomeNavigation(this), new EndNavigation(this), new PointerNavigation(this), this.focusStrategy, new ScrollToItem(this), this.#selectionStrategy]);
    element.role = "listbox";
    if (!element.hasAttribute("tabindex")) {
      element.setAttribute("tabindex", "0");
    }
    this.readOptions();
    this.readItems();
  }
  dispose() {
    super.dispose();
    this.#selectionStrategy.dispose();
  }
  readItems() {
    this.items = [...this.element.querySelectorAll('[role="option"]')];
    this.#selectionStrategy.select(this.selection.filter(selection => this.items.includes(selection)));
    this.focusStrategy.updateItems();
  }
  readSelection() {
    this.#selectionStrategy.readSelection();
  }
  readOptions() {
    super.readOptions();
    this.element.setAttribute("tabindex", this.options.disabled ? "-1" : "0");
    this.focusStrategy.updateItems();
  }
};

// src/navigation-patterns/menu-navigation.ts
var OPENER = Symbol("Opener");
var FOCUS_ON_OPEN = Symbol("FocusOnOpen");
var FOCUS_TRIGGER_ON_CLOSE = Symbol("FocusTriggerOnClose");
function isToggleEvent(event) {
  return event.type === "toggle";
}
function isPointerEvent(event) {
  return ["pointerover", "pointerout", "pointerup"].includes(event.type);
}
function getMenuFromItem(item) {
  return document.getElementById(item.getAttribute("popovertarget"));
}
var MenuNavigation = class {
  constructor(control, focusStrategy) {
    this.control = control;
    this.focusStrategy = focusStrategy;
  }
  eventListeners = ["keydown", "toggle", "pointerover", "pointerout", "pointerup"];
  matches(event) {
    return event instanceof KeyboardEvent && (event.key === " " || event.key === "Enter" || event.key === "ArrowRight" || event.key === "ArrowLeft") || event.type === "toggle" || event.type === "pointerover" || event.type === "pointerout" || event.type === "pointerup";
  }
  handle(bag) {
    const {
      event
    } = bag;
    if (event.type === "keydown") {
      this.navigateWithKeyboard(event);
    } else if (isPointerEvent(event)) {
      this.navigateWithPointer(event);
    } else if (isToggleEvent(event)) {
      if (event.newState === "open") {
        this.show();
      } else {
        this.hide();
      }
    }
    return bag;
  }
  navigateWithKeyboard(event) {
    if (event.key === "ArrowRight" && this.control.activeItem?.hasAttribute("popovertarget")) {
      this.showSubmenu(true);
    }
    if (event.key === "ArrowLeft") {
      this.hideSubmenu();
    }
    if (!this.control.activeItem?.hasAttribute("popovertarget") && (event.key === "Enter" || event.key === " ")) {
      event.preventDefault();
      this.control.activeItem?.click();
      this.closeRootMenu();
    }
  }
  navigateWithPointer(event) {
    const target = event.target;
    if (event.type === "pointerover") {
      this.control.items.filter(item => item !== this.control.activeItem).filter(item => item.hasAttribute("popovertarget")).forEach(item => {
        const menu = getMenuFromItem(item);
        if (menu) {
          menu[FOCUS_TRIGGER_ON_CLOSE] = false;
          menu.hidePopover();
        }
      });
      if (this.control.activeItem?.hasAttribute("popovertarget")) {
        this.showSubmenu();
      }
    } else if (event.type === "pointerout") {
      if (target === this.control.element && event.relatedTarget === this.control.element[OPENER]) {
        event.relatedTarget.focus();
      }
    } else if (event.type === "pointerup") {
      if (this.control.items.find(item => item.contains(target)) && !this.control.activeItem?.hasAttribute("popovertarget")) {
        window.setTimeout(() => this.closeRootMenu(), 0);
      }
    }
  }
  showSubmenu(moveFocus = false) {
    if (this.control.activeItem) {
      const menu = getMenuFromItem(this.control.activeItem);
      if (menu) {
        menu[OPENER] = this.control.activeItem;
        menu[FOCUS_ON_OPEN] = moveFocus;
        menu.showPopover();
      }
    }
  }
  hideSubmenu() {
    this.control.element.hidePopover();
  }
  show() {
    for (const item of this.control.items) {
      item.setAttribute("tabindex", "-1");
    }
    if (this.control.enabledItems.length > 0) {
      this.control.enabledItems[0].setAttribute("tabindex", "0");
    }
    if (this.control.element[FOCUS_ON_OPEN] !== false) {
      if (this.control.enabledItems.length > 0) {
        this.control.enabledItems[0].focus();
      }
    }
  }
  hide() {
    this.focusStrategy.activeItem = void 0;
    const focusTriggerOnClose = this.control.element[FOCUS_TRIGGER_ON_CLOSE];
    if (focusTriggerOnClose !== false) {
      const trigger = this.control.element[OPENER];
      if (trigger) {
        trigger.focus();
      }
    }
  }
  closeRootMenu() {
    const getRootMenu = menu => {
      const menus = [];
      let elem = menu;
      while (elem) {
        if (elem.getAttribute("role") === "menu" && elem.hasAttribute("popover")) {
          menus.push(elem);
        }
        elem = elem.parentElement;
      }
      return menus.pop();
    };
    const root = getRootMenu(this.control.element);
    if (root) {
      root.hidePopover();
    }
  }
};

// src/navigation-patterns/roving-tabindex-strategy.ts
var RovingTabindexStrategy = class extends AbstractFocusStrategy {
  activateItem(item, forceFocus = false) {
    if (this.control.options.disabled) {
      return;
    }
    if (item !== this.activeItem) {
      item.setAttribute("tabindex", "0");
      if (this.activeItem) {
        this.prevActiveItem = this.activeItem;
        this.prevActiveItem.setAttribute("tabindex", "-1");
      }
    }
    if (this.hasFocus() || forceFocus) {
      item.focus();
    }
    if (item !== this.activeItem) {
      this.activeItem = item;
      this.control.emitter?.itemActivated(item);
    }
  }
  updateItems() {
    for (const item of this.control.items) {
      item.setAttribute("tabindex", "-1");
    }
    if (this.control.options.disabled) {
      this.activeItem?.setAttribute("tabindex", "-1");
      this.activeItem = void 0;
    } else {
      if (this.activeItem && isItemEnabled(this.activeItem)) {
        this.activeItem.setAttribute("tabindex", "0");
      } else {
        this.activeItem = void 0;
      }
      if (!this.activeItem && this.control.enabledItems.length > 0) {
        this.control.enabledItems[0].setAttribute("tabindex", "0");
      }
    }
  }
};

// src/controls/menu.ts
var Menu = class extends Control {
  focusStrategy = new RovingTabindexStrategy(this);
  get selection() {
    return [];
  }
  get activeItem() {
    return this.focusStrategy.activeItem;
  }
  get prevActiveItem() {
    return this.focusStrategy.prevActiveItem;
  }
  constructor(element, options) {
    super(element, {
      capabilities: {
        singleSelection: false,
        multiSelection: false
      },
      ...options
    });
    this.registerNavigationPatterns([new NextNavigation(this, ["ArrowDown"]), new PreviousNavigation(this, ["ArrowUp"]), new HomeNavigation(this), new EndNavigation(this), new PointerNavigation(this, "pointerover"), this.focusStrategy, new MenuNavigation(this, this.focusStrategy), new ScrollToItem(this)]);
    element.role = "menu";
    this.readOptions();
    this.readItems();
  }
  readItems() {
    const items = this.element.querySelectorAll('[role="menuitem"], [role="menuitemcheckbox"], [role="menuitemradio"]');
    this.items = Array.from(items).filter(item => {
      const closestMenu = item.closest('menu,[role="menu"]');
      return !closestMenu || closestMenu === this.element;
    });
    this.focusStrategy.updateItems();
  }
  readOptions() {
    super.readOptions();
    this.focusStrategy.updateItems();
  }
};

// src/controls/tablist.ts
var Tablist = class extends Control {
  #selectionStrategy;
  focusStrategy;
  #nextNavigation = new NextNavigation(this, "ArrowRight");
  #prevNavigation = new PreviousNavigation(this, "ArrowLeft");
  get selection() {
    return this.#selectionStrategy.selection;
  }
  get activeItem() {
    return this.focusStrategy.activeItem;
  }
  get prevActiveItem() {
    return this.focusStrategy.prevActiveItem;
  }
  constructor(element, options) {
    super(element, {
      capabilities: {
        singleSelection: true,
        multiSelection: false
      },
      optionAttributes: ["aria-orientation"],
      ...options
    });
    this.#selectionStrategy = new SelectionStrategy(this, options?.behavior ?? {});
    this.focusStrategy = new RovingTabindexStrategy(this, this.#selectionStrategy);
    this.registerNavigationPatterns([this.#nextNavigation, this.#prevNavigation, new HomeNavigation(this), new EndNavigation(this), new PointerNavigation(this), this.focusStrategy, this.#selectionStrategy]);
    element.role = "tablist";
    this.readOptions();
    this.readItems();
  }
  dispose() {
    super.dispose();
    this.#selectionStrategy.dispose();
  }
  readItems() {
    this.items = [...this.element.querySelectorAll('[role="tab"]')];
    this.#selectionStrategy.select(this.selection.filter(selection => this.items.includes(selection)));
    this.ensureSelection();
    this.focusStrategy.updateItems();
  }
  readSelection() {
    this.#selectionStrategy.readSelection();
  }
  readOptions() {
    super.readOptions();
    this.#nextNavigation.keyOrKeys = this.options.orientation === "horizontal" ? "ArrowRight" : "ArrowDown";
    this.#prevNavigation.keyOrKeys = this.options.orientation === "horizontal" ? "ArrowLeft" : "ArrowUp";
    this.focusStrategy.updateItems();
  }
  ensureSelection() {
    if (this.selection.length === 0 && this.items.length > 0) {
      this.focusStrategy.activateItem(this.items[0]);
      this.#selectionStrategy.select([this.items[0]]);
    }
  }
};

// src/emit-strategies/index-emit-strategy.ts
var IndexEmitStrategy = class {
  constructor(control, options) {
    this.control = control;
    this.options = options;
    this.control = control;
    this.control.setEmitStrategy(this);
  }
  selected(selection) {
    const indices = selection.map(i => this.control.items.indexOf(i)).filter(i => i !== -1);
    return this.options.select?.(indices);
  }
  itemActivated(item) {
    const index = this.control.items.indexOf(item);
    return this.options.activateItem?.(index);
  }
  dispose() {
    this.control = void 0;
  }
};

// src/emit-strategies/item-emit-strategy.ts
var ItemEmitStrategy = class {
  constructor(control, options) {
    this.control = control;
    this.options = options;
    this.control = control;
    this.control.setEmitStrategy(this);
  }
  selected(selection) {
    return this.options.select?.(selection);
  }
  itemActivated(item) {
    return this.options.activateItem?.(item);
  }
  dispose() {
    this.control = void 0;
  }
};

// src/update-strategies/reactive-update-strategy.ts
var ReactiveUpdateStrategy = class {
  constructor(control) {
    this.control = control;
  }
  setControl(control) {
    this.control = control;
  }
  updateItems() {
    this.control?.readItems();
  }
  updateSelection() {
    this.control?.readSelection();
  }
  updateOptions() {
    this.control?.readOptions();
  }
  dispose() {
    this.control = void 0;
  }
};

// NOTE: this uses assignment to *require* that the `glimmerSetModifierManager`
// is legally assignable to this type, i.e. that variance is properly upheld.
const setModifierManager = setModifierManager$1;

/**
 * The state bucket used throughout the life-cycle of the modifier. Basically a
 * state *machine*, where the framework calls us with the version we hand back
 * to it at each phase. The two states are the two `extends` versions of this
 * below.
 *
 * @internal
 */

/**
 * The `State` after calling `createModifier`, and therefore the state available
 * at the start of `InstallModifier`.
 * @internal
 */

/**
 * The `State` after calling `installModifier`, and therefore the state
 * available in all `updateModifier` calls and in `destroyModifier`.
 * @internal
 */

// Wraps the unsafe (b/c it mutates, rather than creating new state) code that
// TS does not yet understand.
function installElement$1(state, element) {
  // SAFETY: this cast represents how we are actually handling the state machine
  // transition: from this point forward in the lifecycle of the modifier, it
  // always behaves as `InstalledState<S>`. It is safe because, and *only*
  // because, we immediately initialize `element`. (We cannot create a new state
  // from the old one because the modifier manager API expects mutation of a
  // single state bucket rather than updating it at hook calls.)
  const installedState = state;
  installedState.element = element;
  return installedState;
}
class ClassBasedModifierManager {
  capabilities = modifierCapabilities();
  constructor(owner) {
    this.owner = owner;
  }
  createModifier(modifierClass, args) {
    const instance = new modifierClass(this.owner, args);
    return {
      instance,
      element: null
    };
  }
  installModifier(createdState, element, args) {
    const state = installElement$1(createdState, element);
    state.instance.modify(element, args.positional, args.named);
  }
  updateModifier(state, args) {
    state.instance.modify(state.element, args.positional, args.named);
  }
  destroyModifier({
    instance
  }) {
    destroy(instance);
  }
}

// Preserve the signature on a class-based modifier, so it can be plucked off
// later (by e.g. Glint), using interface merging with an opaque item to
// preserve it in the type system. The fact that it's an empty interface is
// actually the point: it *only* hooks the type parameter into the opaque
// (nominal) type. Note that this is distinct from the function-based modifier
// type intentionally, because it is actually the static class side of a
// class-based modifier which corresponds to the result of calling `modifier()`
// with a callback defining a function-based modifier.
// eslint-disable-next-line @typescript-eslint/no-empty-interface

/**
 * A base class for modifiers which need more capabilities than function-based
 * modifiers. Useful if, for example:
 *
 * 1. You need to inject services and access them
 * 2. You need fine-grained control of updates, either for performance or
 *    convenience reasons, and don't want to teardown the state of your modifier
 *    every time only to set it up again.
 * 3. You need to store some local state within your modifier.
 *
 * The lifecycle hooks of class modifiers are tracked. When they run, they any
 * values they access will be added to the modifier, and the modifier will
 * update if any of those values change.
 */
// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging
class ClassBasedModifier {
  // `args` is passed here for the sake of subclasses to have access to args in
  // their constructors while having constructors which are properly asssignable
  // for the superclass.
  /**
   *
   * @param owner An instance of an Owner (for service injection etc.).
   * @param args The positional and named arguments passed to the modifier.
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  constructor(owner, args) {
    setOwner(this, owner);
  }

  /**
   * Called when the modifier is installed and any time any tracked state used
   * in the modifier changes.
   *
   * If you need to do first-time-only setup, create a class field representing
   * the initialization state and check it when running the hook. That is also
   * where and when you should use `registerDestructor` for any teardown you
   * need to do. For example:
   *
   * ```js
   * function disconnect(instance) {
   *  instance.observer?.disconnect();
   * }
   *
   * class IntersectionObserver extends Modifier {
   *   observer;
   *
   *   constructor(owner, args) {
   *     super(owner, args);
   *     registerDestructor(this, disconnect);
   *   }
   *
   *   modify(element, callback, options) {
   *     disconnect(this);
   *
   *     this.observer = new IntersectionObserver(callback, options);
   *     this.observer.observe(element);
   *   }
   * }
   * ```
   *
   * @param element The element to which the modifier is applied.
   * @param positional The positional arguments to the modifier.
   * @param named The named arguments to the modifier.
   */
  modify(/* eslint-disable @typescript-eslint/no-unused-vars */
  element, positional, named
  /* eslint-enable @typescript-eslint/no-unused-vars */) {
    /* no op, for subclassing */
  }
}
setModifierManager(owner => new ClassBasedModifierManager(owner), ClassBasedModifier);

function asArray(val) {
  if (val === undefined) {
    return [];
  }

  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  return Array.isArray(val) ? val : [val];
}
function createItemEmitter(control, options) {
  return new ItemEmitStrategy(control, {
    select: selection => {
      options.select?.(options.multi ? selection : selection[0]);
    },
    activateItem: item => {
      options.activateItem?.(item);
    }
  });
}
function createIndexEmitter(control, options) {
  const findByIndex = index => {
    return options.items[index] ?? undefined;
  };
  return new IndexEmitStrategy(control, {
    select: selection => {
      if (options.multi) {
        const items = selection.map(index => findByIndex(index)).filter(i => i !== undefined);
        options.select?.(items);
      } else {
        const item = findByIndex(selection[0]);
        if (item) {
          options.select?.(item);
        }
      }
    },
    activateItem: index => {
      const item = findByIndex(index);
      if (item) {
        options.activateItem?.(item);
      }
    }
  });
}

class ListboxModifier extends ClassBasedModifier {
  listbox;
  prevItems;
  prevSelection;
  prevMulti;
  prevDisabled;
  constructor(owner, args) {
    super(owner, args);
    registerDestructor(this, () => {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call
      this.listbox?.dispose();
    });
  }
  modify(element, _, options) {
    if (!this.listbox) {
      this.updater = new ReactiveUpdateStrategy();
      this.listbox = new Listbox(element, {
        updater: this.updater
      });
    }
    if (options.items && !(this.emitter instanceof IndexEmitStrategy)) {
      this.emitter = createIndexEmitter(this.listbox, options);
    } else if (!options.items && !(this.emitter instanceof ItemEmitStrategy)) {
      this.emitter = createItemEmitter(this.listbox, options);
    }
    if (options.items && !isEqual(this.prevItems, options.items)) {
      this.updater.updateItems();
      this.prevItems = [...options.items];
    }
    if (options.selection && !isEqual(asArray(this.prevSelection), asArray(options.selection))) {
      this.updater.updateSelection();
      this.prevSelection = asArray(options.selection);
    }
    let optionsChanged = false;
    if (this.prevMulti !== options.multi) {
      if (options.multi) {
        element.setAttribute('aria-multiselectable', 'true');
      } else {
        element.removeAttribute('aria-multiselectable');
      }
      optionsChanged = true;
      this.prevMulti = options.multi;
    }
    if (this.prevDisabled !== options.disabled) {
      if (options.disabled) {
        element.setAttribute('aria-disabled', 'true');
      } else {
        element.removeAttribute('aria-disabled');
      }
      optionsChanged = true;
      this.prevDisabled = options.disabled;
    }
    if (optionsChanged) {
      this.updater.updateOptions();
    }
  }
}

class MenuModifier extends ClassBasedModifier {
  menu;
  prevItems;
  prevDisabled;
  constructor(owner, args) {
    super(owner, args);
    registerDestructor(this, () => {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call
      this.menu?.dispose();
    });
  }
  modify(element, _, options) {
    if (!this.menu) {
      this.updater = new ReactiveUpdateStrategy();
      this.menu = new Menu(element, {
        updater: this.updater
      });
    }
    if (options.items && !isEqual(this.prevItems, options.items)) {
      this.updater.updateItems();
      this.prevItems = [...options.items];
    }
    let optionsChanged = false;
    if (this.prevDisabled !== options.disabled) {
      if (options.disabled) {
        element.setAttribute('aria-disabled', 'true');
      } else {
        element.removeAttribute('aria-disabled');
      }
      optionsChanged = true;
      this.prevDisabled = options.disabled;
    }
    if (optionsChanged) {
      this.updater.updateOptions();
    }
  }
}

class TablistModifier extends ClassBasedModifier {
  tablist;
  prevItems;
  prevSelection;
  prevDisabled;
  prevOrientation;
  constructor(owner, args) {
    super(owner, args);
    registerDestructor(this, () => {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-call
      this.tablist?.dispose();
    });
  }
  modify(element, _, options) {
    if (!this.tablist) {
      this.updater = new ReactiveUpdateStrategy();
      this.tablist = new Tablist(element, {
        updater: this.updater,
        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
        behavior: options.behavior
      });
    }
    if (options.items && !(this.emitter instanceof IndexEmitStrategy)) {
      this.emitter = createIndexEmitter(this.tablist, options);
    } else if (!options.items && !(this.emitter instanceof ItemEmitStrategy)) {
      this.emitter = createItemEmitter(this.tablist, options);
    }
    if (options.items && !isEqual(this.prevItems, options.items)) {
      this.updater.updateItems();
      this.prevItems = [...options.items];
    }
    if (options.selection && !isEqual(asArray(this.prevSelection), asArray(options.selection))) {
      this.updater.updateSelection();
      this.prevSelection = asArray(options.selection);
    }
    let optionsChanged = false;
    if (this.prevOrientation !== options.orientation) {
      if (options.orientation) {
        element.setAttribute('aria-orientation', options.orientation);
      } else {
        element.removeAttribute('aria-orientation');
      }
      optionsChanged = true;

      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      this.prevOrientation = options.orientation;
    }
    if (this.prevDisabled !== options.disabled) {
      if (options.disabled) {
        element.setAttribute('aria-disabled', 'true');
      } else {
        element.removeAttribute('aria-disabled');
      }
      optionsChanged = true;
      this.prevDisabled = options.disabled;
    }
    if (optionsChanged) {
      this.updater.updateOptions();
    }
  }
}

var define_process_env_default = {};
/* Sinon.JS 20.0.0, 2025-03-24, @license BSD-3 */
let sinon;
(/* @__PURE__ */ function() {
  function r(e, n, t) {
    function o(i2, f) {
      if (!n[i2]) {
        if (!e[i2]) {
          var c = "function" == typeof require && require;
          if (!f && c) return c(i2, true);
          if (u) return u(i2, true);
          var a = new Error("Cannot find module '" + i2 + "'");
          throw a.code = "MODULE_NOT_FOUND", a;
        }
        var p = n[i2] = {
          exports: {}
        };
        e[i2][0].call(p.exports, function(r2) {
          var n2 = e[i2][1][r2];
          return o(n2 || r2);
        }, p, p.exports, r, e, n, t);
      }
      return n[i2].exports;
    }
    for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) o(t[i]);
    return o;
  }
  return r;
}())({
  1: [function(require2, module, exports) {
    const behavior = require2("./sinon/behavior");
    const createSandbox = require2("./sinon/create-sandbox");
    const extend = require2("./sinon/util/core/extend");
    const fakeTimers = require2("./sinon/util/fake-timers");
    const Sandbox = require2("./sinon/sandbox");
    const stub = require2("./sinon/stub");
    const promise = require2("./sinon/promise");
    module.exports = function createApi() {
      const apiMethods = {
        createSandbox,
        match: require2("@sinonjs/samsam").createMatcher,
        restoreObject: require2("./sinon/restore-object"),
        expectation: require2("./sinon/mock-expectation"),
        // fake timers
        timers: fakeTimers.timers,
        addBehavior: function(name, fn) {
          behavior.addBehavior(stub, name, fn);
        },
        // fake promise
        promise
      };
      const sandbox = new Sandbox();
      return extend(sandbox, apiMethods);
    };
  }, {
    "./sinon/behavior": 5,
    "./sinon/create-sandbox": 8,
    "./sinon/mock-expectation": 12,
    "./sinon/promise": 14,
    "./sinon/restore-object": 19,
    "./sinon/sandbox": 20,
    "./sinon/stub": 23,
    "./sinon/util/core/extend": 26,
    "./sinon/util/fake-timers": 40,
    "@sinonjs/samsam": 87
  }],
  2: [function(require2, module, exports) {
    sinon = require2("./sinon");
  }, {
    "./sinon": 3
  }],
  3: [function(require2, module, exports) {
    const createApi = require2("./create-sinon-api");
    module.exports = createApi();
  }, {
    "./create-sinon-api": 1
  }],
  4: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const calledInOrder = require2("@sinonjs/commons").calledInOrder;
    const createMatcher = require2("@sinonjs/samsam").createMatcher;
    const orderByFirstCall = require2("@sinonjs/commons").orderByFirstCall;
    const timesInWords = require2("./util/core/times-in-words");
    const inspect = require2("util").inspect;
    const stringSlice = require2("@sinonjs/commons").prototypes.string.slice;
    const globalObject = require2("@sinonjs/commons").global;
    const arraySlice = arrayProto.slice;
    const concat = arrayProto.concat;
    const forEach = arrayProto.forEach;
    const join = arrayProto.join;
    const splice = arrayProto.splice;
    function applyDefaults(obj, defaults) {
      for (const key of Object.keys(defaults)) {
        const val = obj[key];
        if (val === null || typeof val === "undefined") {
          obj[key] = defaults[key];
        }
      }
    }
    function createAssertObject(opts) {
      const cleanedAssertOptions = opts || {};
      applyDefaults(cleanedAssertOptions, {
        shouldLimitAssertionLogs: false,
        assertionLogLimit: 1e4
      });
      const assert = {
        failException: "AssertError",
        fail: function fail(message) {
          let msg = message;
          if (cleanedAssertOptions.shouldLimitAssertionLogs) {
            msg = message.substring(0, cleanedAssertOptions.assertionLogLimit);
          }
          const error = new Error(msg);
          error.name = this.failException || assert.failException;
          throw error;
        },
        pass: function pass() {
          return;
        },
        callOrder: function assertCallOrder() {
          verifyIsStub.apply(null, arguments);
          let expected = "";
          let actual = "";
          if (!calledInOrder(arguments)) {
            try {
              expected = join(arguments, ", ");
              const calls = arraySlice(arguments);
              let i = calls.length;
              while (i) {
                if (!calls[--i].called) {
                  splice(calls, i, 1);
                }
              }
              actual = join(orderByFirstCall(calls), ", ");
            } catch (e) {
            }
            failAssertion(this, `expected ${expected} to be called in order but were called as ${actual}`);
          } else {
            assert.pass("callOrder");
          }
        },
        callCount: function assertCallCount(method, count) {
          verifyIsStub(method);
          let msg;
          if (typeof count !== "number") {
            msg = `expected ${inspect(count)} to be a number but was of type ${typeof count}`;
            failAssertion(this, msg);
          } else if (method.callCount !== count) {
            msg = `expected %n to be called ${timesInWords(count)} but was called %c%C`;
            failAssertion(this, method.printf(msg));
          } else {
            assert.pass("callCount");
          }
        },
        expose: function expose(target, options) {
          if (!target) {
            throw new TypeError("target is null or undefined");
          }
          const o = options || {};
          const prefix = typeof o.prefix === "undefined" && "assert" || o.prefix;
          const includeFail = typeof o.includeFail === "undefined" || Boolean(o.includeFail);
          const instance = this;
          forEach(Object.keys(instance), function(method) {
            if (method !== "expose" && (includeFail || !/^(fail)/.test(method))) {
              target[exposedName(prefix, method)] = instance[method];
            }
          });
          return target;
        },
        match: function match(actual, expectation) {
          const matcher = createMatcher(expectation);
          if (matcher.test(actual)) {
            assert.pass("match");
          } else {
            const formatted = ["expected value to match", `    expected = ${inspect(expectation)}`, `    actual = ${inspect(actual)}`];
            failAssertion(this, join(formatted, "\n"));
          }
        }
      };
      function verifyIsStub() {
        const args = arraySlice(arguments);
        forEach(args, function(method) {
          if (!method) {
            assert.fail("fake is not a spy");
          }
          if (method.proxy && method.proxy.isSinonProxy) {
            verifyIsStub(method.proxy);
          } else {
            if (typeof method !== "function") {
              assert.fail(`${method} is not a function`);
            }
            if (typeof method.getCall !== "function") {
              assert.fail(`${method} is not stubbed`);
            }
          }
        });
      }
      function verifyIsValidAssertion(assertionMethod, assertionArgs) {
        switch (assertionMethod) {
          case "notCalled":
          case "called":
          case "calledOnce":
          case "calledTwice":
          case "calledThrice":
            if (assertionArgs.length !== 0) {
              assert.fail(`${assertionMethod} takes 1 argument but was called with ${assertionArgs.length + 1} arguments`);
            }
            break;
        }
      }
      function failAssertion(object, msg) {
        const obj = object || globalObject;
        const failMethod = obj.fail || assert.fail;
        failMethod.call(obj, msg);
      }
      function mirrorPropAsAssertion(name, method, message) {
        let msg = message;
        let meth = method;
        if (arguments.length === 2) {
          msg = method;
          meth = name;
        }
        assert[name] = function(fake) {
          verifyIsStub(fake);
          const args = arraySlice(arguments, 1);
          let failed = false;
          verifyIsValidAssertion(name, args);
          if (typeof meth === "function") {
            failed = !meth(fake);
          } else {
            failed = typeof fake[meth] === "function" ? !fake[meth].apply(fake, args) : !fake[meth];
          }
          if (failed) {
            failAssertion(this, (fake.printf || fake.proxy.printf).apply(fake, concat([msg], args)));
          } else {
            assert.pass(name);
          }
        };
      }
      function exposedName(prefix, prop) {
        return !prefix || /^fail/.test(prop) ? prop : prefix + stringSlice(prop, 0, 1).toUpperCase() + stringSlice(prop, 1);
      }
      mirrorPropAsAssertion("called", "expected %n to have been called at least once but was never called");
      mirrorPropAsAssertion("notCalled", function(spy) {
        return !spy.called;
      }, "expected %n to not have been called but was called %c%C");
      mirrorPropAsAssertion("calledOnce", "expected %n to be called once but was called %c%C");
      mirrorPropAsAssertion("calledTwice", "expected %n to be called twice but was called %c%C");
      mirrorPropAsAssertion("calledThrice", "expected %n to be called thrice but was called %c%C");
      mirrorPropAsAssertion("calledOn", "expected %n to be called with %1 as this but was called with %t");
      mirrorPropAsAssertion("alwaysCalledOn", "expected %n to always be called with %1 as this but was called with %t");
      mirrorPropAsAssertion("calledWithNew", "expected %n to be called with new");
      mirrorPropAsAssertion("alwaysCalledWithNew", "expected %n to always be called with new");
      mirrorPropAsAssertion("calledWith", "expected %n to be called with arguments %D");
      mirrorPropAsAssertion("calledWithMatch", "expected %n to be called with match %D");
      mirrorPropAsAssertion("alwaysCalledWith", "expected %n to always be called with arguments %D");
      mirrorPropAsAssertion("alwaysCalledWithMatch", "expected %n to always be called with match %D");
      mirrorPropAsAssertion("calledWithExactly", "expected %n to be called with exact arguments %D");
      mirrorPropAsAssertion("calledOnceWithExactly", "expected %n to be called once and with exact arguments %D");
      mirrorPropAsAssertion("calledOnceWithMatch", "expected %n to be called once and with match %D");
      mirrorPropAsAssertion("alwaysCalledWithExactly", "expected %n to always be called with exact arguments %D");
      mirrorPropAsAssertion("neverCalledWith", "expected %n to never be called with arguments %*%C");
      mirrorPropAsAssertion("neverCalledWithMatch", "expected %n to never be called with match %*%C");
      mirrorPropAsAssertion("threw", "%n did not throw exception%C");
      mirrorPropAsAssertion("alwaysThrew", "%n did not always throw exception%C");
      return assert;
    }
    module.exports = createAssertObject();
    module.exports.createAssertObject = createAssertObject;
  }, {
    "./util/core/times-in-words": 36,
    "@sinonjs/commons": 47,
    "@sinonjs/samsam": 87,
    "util": 91
  }],
  5: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const extend = require2("./util/core/extend");
    const functionName = require2("@sinonjs/commons").functionName;
    const nextTick = require2("./util/core/next-tick");
    const valueToString = require2("@sinonjs/commons").valueToString;
    const exportAsyncBehaviors = require2("./util/core/export-async-behaviors");
    const concat = arrayProto.concat;
    const join = arrayProto.join;
    const reverse = arrayProto.reverse;
    const slice = arrayProto.slice;
    const useLeftMostCallback = -1;
    const useRightMostCallback = -2;
    function getCallback(behavior, args) {
      const callArgAt = behavior.callArgAt;
      if (callArgAt >= 0) {
        return args[callArgAt];
      }
      let argumentList;
      if (callArgAt === useLeftMostCallback) {
        argumentList = args;
      }
      if (callArgAt === useRightMostCallback) {
        argumentList = reverse(slice(args));
      }
      const callArgProp = behavior.callArgProp;
      for (let i = 0, l = argumentList.length; i < l; ++i) {
        if (!callArgProp && typeof argumentList[i] === "function") {
          return argumentList[i];
        }
        if (callArgProp && argumentList[i] && typeof argumentList[i][callArgProp] === "function") {
          return argumentList[i][callArgProp];
        }
      }
      return null;
    }
    function getCallbackError(behavior, func, args) {
      if (behavior.callArgAt < 0) {
        let msg;
        if (behavior.callArgProp) {
          msg = `${functionName(behavior.stub)} expected to yield to '${valueToString(behavior.callArgProp)}', but no object with such a property was passed.`;
        } else {
          msg = `${functionName(behavior.stub)} expected to yield, but no callback was passed.`;
        }
        if (args.length > 0) {
          msg += ` Received [${join(args, ", ")}]`;
        }
        return msg;
      }
      return `argument at index ${behavior.callArgAt} is not a function: ${func}`;
    }
    function ensureArgs(name, behavior, args) {
      const property = name.replace(/sArg/, "ArgAt");
      const index = behavior[property];
      if (index >= args.length) {
        throw new TypeError(`${name} failed: ${index + 1} arguments required but only ${args.length} present`);
      }
    }
    function callCallback(behavior, args) {
      if (typeof behavior.callArgAt === "number") {
        ensureArgs("callsArg", behavior, args);
        const func = getCallback(behavior, args);
        if (typeof func !== "function") {
          throw new TypeError(getCallbackError(behavior, func, args));
        }
        if (behavior.callbackAsync) {
          nextTick(function() {
            func.apply(behavior.callbackContext, behavior.callbackArguments);
          });
        } else {
          return func.apply(behavior.callbackContext, behavior.callbackArguments);
        }
      }
      return void 0;
    }
    const proto = {
      create: function create(stub) {
        const behavior = extend({}, proto);
        delete behavior.create;
        delete behavior.addBehavior;
        delete behavior.createBehavior;
        behavior.stub = stub;
        if (stub.defaultBehavior && stub.defaultBehavior.promiseLibrary) {
          behavior.promiseLibrary = stub.defaultBehavior.promiseLibrary;
        }
        return behavior;
      },
      isPresent: function isPresent() {
        return typeof this.callArgAt === "number" || this.exception || this.exceptionCreator || typeof this.returnArgAt === "number" || this.returnThis || typeof this.resolveArgAt === "number" || this.resolveThis || typeof this.throwArgAt === "number" || this.fakeFn || this.returnValueDefined;
      },
      /*eslint complexity: ["error", 20]*/
      invoke: function invoke(context, args) {
        const returnValue = callCallback(this, args);
        if (this.exception) {
          throw this.exception;
        } else if (this.exceptionCreator) {
          this.exception = this.exceptionCreator();
          this.exceptionCreator = void 0;
          throw this.exception;
        } else if (typeof this.returnArgAt === "number") {
          ensureArgs("returnsArg", this, args);
          return args[this.returnArgAt];
        } else if (this.returnThis) {
          return context;
        } else if (typeof this.throwArgAt === "number") {
          ensureArgs("throwsArg", this, args);
          throw args[this.throwArgAt];
        } else if (this.fakeFn) {
          return this.fakeFn.apply(context, args);
        } else if (typeof this.resolveArgAt === "number") {
          ensureArgs("resolvesArg", this, args);
          return (this.promiseLibrary || Promise).resolve(args[this.resolveArgAt]);
        } else if (this.resolveThis) {
          return (this.promiseLibrary || Promise).resolve(context);
        } else if (this.resolve) {
          return (this.promiseLibrary || Promise).resolve(this.returnValue);
        } else if (this.reject) {
          return (this.promiseLibrary || Promise).reject(this.returnValue);
        } else if (this.callsThrough) {
          const wrappedMethod = this.effectiveWrappedMethod();
          return wrappedMethod.apply(context, args);
        } else if (this.callsThroughWithNew) {
          const WrappedClass = this.effectiveWrappedMethod();
          const argsArray = slice(args);
          const F = WrappedClass.bind.apply(WrappedClass, concat([null], argsArray));
          return new F();
        } else if (typeof this.returnValue !== "undefined") {
          return this.returnValue;
        } else if (typeof this.callArgAt === "number") {
          return returnValue;
        }
        return this.returnValue;
      },
      effectiveWrappedMethod: function effectiveWrappedMethod() {
        for (let stubb = this.stub; stubb; stubb = stubb.parent) {
          if (stubb.wrappedMethod) {
            return stubb.wrappedMethod;
          }
        }
        throw new Error("Unable to find wrapped method");
      },
      onCall: function onCall(index) {
        return this.stub.onCall(index);
      },
      onFirstCall: function onFirstCall() {
        return this.stub.onFirstCall();
      },
      onSecondCall: function onSecondCall() {
        return this.stub.onSecondCall();
      },
      onThirdCall: function onThirdCall() {
        return this.stub.onThirdCall();
      },
      withArgs: function withArgs() {
        throw new Error('Defining a stub by invoking "stub.onCall(...).withArgs(...)" is not supported. Use "stub.withArgs(...).onCall(...)" to define sequential behavior for calls with certain arguments.');
      }
    };
    function createBehavior(behaviorMethod) {
      return function() {
        this.defaultBehavior = this.defaultBehavior || proto.create(this);
        this.defaultBehavior[behaviorMethod].apply(this.defaultBehavior, arguments);
        return this;
      };
    }
    function addBehavior(stub, name, fn) {
      proto[name] = function() {
        fn.apply(this, concat([this], slice(arguments)));
        return this.stub || this;
      };
      stub[name] = createBehavior(name);
    }
    proto.addBehavior = addBehavior;
    proto.createBehavior = createBehavior;
    const asyncBehaviors = exportAsyncBehaviors(proto);
    module.exports = extend.nonEnum({}, proto, asyncBehaviors);
  }, {
    "./util/core/export-async-behaviors": 25,
    "./util/core/extend": 26,
    "./util/core/next-tick": 34,
    "@sinonjs/commons": 47
  }],
  6: [function(require2, module, exports) {
    const walk = require2("./util/core/walk");
    const getPropertyDescriptor = require2("./util/core/get-property-descriptor");
    const hasOwnProperty = require2("@sinonjs/commons").prototypes.object.hasOwnProperty;
    const push = require2("@sinonjs/commons").prototypes.array.push;
    function collectMethod(methods, object, prop, propOwner) {
      if (typeof getPropertyDescriptor(propOwner, prop).value === "function" && hasOwnProperty(object, prop)) {
        push(methods, object[prop]);
      }
    }
    function collectOwnMethods(object) {
      const methods = [];
      walk(object, collectMethod.bind(null, methods, object));
      return methods;
    }
    module.exports = collectOwnMethods;
  }, {
    "./util/core/get-property-descriptor": 29,
    "./util/core/walk": 38,
    "@sinonjs/commons": 47
  }],
  7: [function(require2, module, exports) {
    module.exports = class Colorizer {
      constructor(supportsColor = require2("supports-color")) {
        this.supportsColor = supportsColor;
      }
      /**
       * Should be renamed to true #privateField
       * when we can ensure ES2022 support
       *
       * @private
       */
      colorize(str, color) {
        if (this.supportsColor.stdout === false) {
          return str;
        }
        return `\x1B[${color}m${str}\x1B[0m`;
      }
      red(str) {
        return this.colorize(str, 31);
      }
      green(str) {
        return this.colorize(str, 32);
      }
      cyan(str) {
        return this.colorize(str, 96);
      }
      white(str) {
        return this.colorize(str, 39);
      }
      bold(str) {
        return this.colorize(str, 1);
      }
    };
  }, {
    "supports-color": 94
  }],
  8: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const Sandbox = require2("./sandbox");
    const forEach = arrayProto.forEach;
    const push = arrayProto.push;
    function prepareSandboxFromConfig(config) {
      const sandbox = new Sandbox({
        assertOptions: config.assertOptions
      });
      if (config.useFakeTimers) {
        if (typeof config.useFakeTimers === "object") {
          sandbox.useFakeTimers(config.useFakeTimers);
        } else {
          sandbox.useFakeTimers();
        }
      }
      return sandbox;
    }
    function exposeValue(sandbox, config, key, value) {
      if (!value) {
        return;
      }
      if (config.injectInto && !(key in config.injectInto)) {
        config.injectInto[key] = value;
        push(sandbox.injectedKeys, key);
      } else {
        push(sandbox.args, value);
      }
    }
    function createSandbox(config) {
      if (!config) {
        return new Sandbox();
      }
      const configuredSandbox = prepareSandboxFromConfig(config);
      configuredSandbox.args = configuredSandbox.args || [];
      configuredSandbox.injectedKeys = [];
      configuredSandbox.injectInto = config.injectInto;
      const exposed = configuredSandbox.inject({});
      if (config.properties) {
        forEach(config.properties, function(prop) {
          const value = exposed[prop] || prop === "sandbox" && configuredSandbox;
          exposeValue(configuredSandbox, config, prop, value);
        });
      } else {
        exposeValue(configuredSandbox, config, "sandbox");
      }
      return configuredSandbox;
    }
    module.exports = createSandbox;
  }, {
    "./sandbox": 20,
    "@sinonjs/commons": 47
  }],
  9: [function(require2, module, exports) {
    const stub = require2("./stub");
    const sinonType = require2("./util/core/sinon-type");
    const forEach = require2("@sinonjs/commons").prototypes.array.forEach;
    function isStub(value) {
      return sinonType.get(value) === "stub";
    }
    module.exports = function createStubInstance(constructor, overrides) {
      if (typeof constructor !== "function") {
        throw new TypeError("The constructor should be a function.");
      }
      const stubInstance = Object.create(constructor.prototype);
      sinonType.set(stubInstance, "stub-instance");
      const stubbedObject = stub(stubInstance);
      forEach(Object.keys(overrides || {}), function(propertyName) {
        if (propertyName in stubbedObject) {
          const value = overrides[propertyName];
          if (isStub(value)) {
            stubbedObject[propertyName] = value;
          } else {
            stubbedObject[propertyName].returns(value);
          }
        } else {
          throw new Error(`Cannot stub ${propertyName}. Property does not exist!`);
        }
      });
      return stubbedObject;
    };
  }, {
    "./stub": 23,
    "./util/core/sinon-type": 35,
    "@sinonjs/commons": 47
  }],
  10: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const isPropertyConfigurable = require2("./util/core/is-property-configurable");
    const exportAsyncBehaviors = require2("./util/core/export-async-behaviors");
    const extend = require2("./util/core/extend");
    const slice = arrayProto.slice;
    const useLeftMostCallback = -1;
    const useRightMostCallback = -2;
    function throwsException(fake, error, message) {
      if (typeof error === "function") {
        fake.exceptionCreator = error;
      } else if (typeof error === "string") {
        fake.exceptionCreator = function() {
          const newException = new Error(message || `Sinon-provided ${error}`);
          newException.name = error;
          return newException;
        };
      } else if (!error) {
        fake.exceptionCreator = function() {
          return new Error("Error");
        };
      } else {
        fake.exception = error;
      }
    }
    const defaultBehaviors = {
      callsFake: function callsFake(fake, fn) {
        fake.fakeFn = fn;
        fake.exception = void 0;
        fake.exceptionCreator = void 0;
        fake.callsThrough = false;
      },
      callsArg: function callsArg(fake, index) {
        if (typeof index !== "number") {
          throw new TypeError("argument index is not number");
        }
        fake.callArgAt = index;
        fake.callbackArguments = [];
        fake.callbackContext = void 0;
        fake.callArgProp = void 0;
        fake.callbackAsync = false;
        fake.callsThrough = false;
      },
      callsArgOn: function callsArgOn(fake, index, context) {
        if (typeof index !== "number") {
          throw new TypeError("argument index is not number");
        }
        fake.callArgAt = index;
        fake.callbackArguments = [];
        fake.callbackContext = context;
        fake.callArgProp = void 0;
        fake.callbackAsync = false;
        fake.callsThrough = false;
      },
      callsArgWith: function callsArgWith(fake, index) {
        if (typeof index !== "number") {
          throw new TypeError("argument index is not number");
        }
        fake.callArgAt = index;
        fake.callbackArguments = slice(arguments, 2);
        fake.callbackContext = void 0;
        fake.callArgProp = void 0;
        fake.callbackAsync = false;
        fake.callsThrough = false;
      },
      callsArgOnWith: function callsArgWith(fake, index, context) {
        if (typeof index !== "number") {
          throw new TypeError("argument index is not number");
        }
        fake.callArgAt = index;
        fake.callbackArguments = slice(arguments, 3);
        fake.callbackContext = context;
        fake.callArgProp = void 0;
        fake.callbackAsync = false;
        fake.callsThrough = false;
      },
      yields: function(fake) {
        fake.callArgAt = useLeftMostCallback;
        fake.callbackArguments = slice(arguments, 1);
        fake.callbackContext = void 0;
        fake.callArgProp = void 0;
        fake.callbackAsync = false;
        fake.fakeFn = void 0;
        fake.callsThrough = false;
      },
      yieldsRight: function(fake) {
        fake.callArgAt = useRightMostCallback;
        fake.callbackArguments = slice(arguments, 1);
        fake.callbackContext = void 0;
        fake.callArgProp = void 0;
        fake.callbackAsync = false;
        fake.callsThrough = false;
        fake.fakeFn = void 0;
      },
      yieldsOn: function(fake, context) {
        fake.callArgAt = useLeftMostCallback;
        fake.callbackArguments = slice(arguments, 2);
        fake.callbackContext = context;
        fake.callArgProp = void 0;
        fake.callbackAsync = false;
        fake.callsThrough = false;
        fake.fakeFn = void 0;
      },
      yieldsTo: function(fake, prop) {
        fake.callArgAt = useLeftMostCallback;
        fake.callbackArguments = slice(arguments, 2);
        fake.callbackContext = void 0;
        fake.callArgProp = prop;
        fake.callbackAsync = false;
        fake.callsThrough = false;
        fake.fakeFn = void 0;
      },
      yieldsToOn: function(fake, prop, context) {
        fake.callArgAt = useLeftMostCallback;
        fake.callbackArguments = slice(arguments, 3);
        fake.callbackContext = context;
        fake.callArgProp = prop;
        fake.callbackAsync = false;
        fake.fakeFn = void 0;
      },
      throws: throwsException,
      throwsException,
      returns: function returns(fake, value) {
        fake.callsThrough = false;
        fake.returnValue = value;
        fake.resolve = false;
        fake.reject = false;
        fake.returnValueDefined = true;
        fake.exception = void 0;
        fake.exceptionCreator = void 0;
        fake.fakeFn = void 0;
      },
      returnsArg: function returnsArg(fake, index) {
        if (typeof index !== "number") {
          throw new TypeError("argument index is not number");
        }
        fake.callsThrough = false;
        fake.returnArgAt = index;
      },
      throwsArg: function throwsArg(fake, index) {
        if (typeof index !== "number") {
          throw new TypeError("argument index is not number");
        }
        fake.callsThrough = false;
        fake.throwArgAt = index;
      },
      returnsThis: function returnsThis(fake) {
        fake.returnThis = true;
        fake.callsThrough = false;
      },
      resolves: function resolves(fake, value) {
        fake.returnValue = value;
        fake.resolve = true;
        fake.resolveThis = false;
        fake.reject = false;
        fake.returnValueDefined = true;
        fake.exception = void 0;
        fake.exceptionCreator = void 0;
        fake.fakeFn = void 0;
        fake.callsThrough = false;
      },
      resolvesArg: function resolvesArg(fake, index) {
        if (typeof index !== "number") {
          throw new TypeError("argument index is not number");
        }
        fake.resolveArgAt = index;
        fake.returnValue = void 0;
        fake.resolve = true;
        fake.resolveThis = false;
        fake.reject = false;
        fake.returnValueDefined = false;
        fake.exception = void 0;
        fake.exceptionCreator = void 0;
        fake.fakeFn = void 0;
        fake.callsThrough = false;
      },
      rejects: function rejects(fake, error, message) {
        let reason;
        if (typeof error === "string") {
          reason = new Error(message || "");
          reason.name = error;
        } else if (!error) {
          reason = new Error("Error");
        } else {
          reason = error;
        }
        fake.returnValue = reason;
        fake.resolve = false;
        fake.resolveThis = false;
        fake.reject = true;
        fake.returnValueDefined = true;
        fake.exception = void 0;
        fake.exceptionCreator = void 0;
        fake.fakeFn = void 0;
        fake.callsThrough = false;
        return fake;
      },
      resolvesThis: function resolvesThis(fake) {
        fake.returnValue = void 0;
        fake.resolve = false;
        fake.resolveThis = true;
        fake.reject = false;
        fake.returnValueDefined = false;
        fake.exception = void 0;
        fake.exceptionCreator = void 0;
        fake.fakeFn = void 0;
        fake.callsThrough = false;
      },
      callThrough: function callThrough(fake) {
        fake.callsThrough = true;
      },
      callThroughWithNew: function callThroughWithNew(fake) {
        fake.callsThroughWithNew = true;
      },
      get: function get(fake, getterFunction) {
        const rootStub = fake.stub || fake;
        Object.defineProperty(rootStub.rootObj, rootStub.propName, {
          get: getterFunction,
          configurable: isPropertyConfigurable(rootStub.rootObj, rootStub.propName)
        });
        return fake;
      },
      set: function set(fake, setterFunction) {
        const rootStub = fake.stub || fake;
        Object.defineProperty(
          rootStub.rootObj,
          rootStub.propName,
          // eslint-disable-next-line accessor-pairs
          {
            set: setterFunction,
            configurable: isPropertyConfigurable(rootStub.rootObj, rootStub.propName)
          }
        );
        return fake;
      },
      value: function value(fake, newVal) {
        const rootStub = fake.stub || fake;
        Object.defineProperty(rootStub.rootObj, rootStub.propName, {
          value: newVal,
          enumerable: true,
          writable: true,
          configurable: rootStub.shadowsPropOnPrototype || isPropertyConfigurable(rootStub.rootObj, rootStub.propName)
        });
        return fake;
      }
    };
    const asyncBehaviors = exportAsyncBehaviors(defaultBehaviors);
    module.exports = extend({}, defaultBehaviors, asyncBehaviors);
  }, {
    "./util/core/export-async-behaviors": 25,
    "./util/core/extend": 26,
    "./util/core/is-property-configurable": 32,
    "@sinonjs/commons": 47
  }],
  11: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const createProxy = require2("./proxy");
    const nextTick = require2("./util/core/next-tick");
    const slice = arrayProto.slice;
    module.exports = fake;
    function fake(f) {
      if (arguments.length > 0 && typeof f !== "function") {
        throw new TypeError("Expected f argument to be a Function");
      }
      return wrapFunc(f);
    }
    fake.returns = function returns(value) {
      function f() {
        return value;
      }
      return wrapFunc(f);
    };
    fake.throws = function throws(value) {
      function f() {
        throw getError(value);
      }
      return wrapFunc(f);
    };
    fake.resolves = function resolves(value) {
      function f() {
        return Promise.resolve(value);
      }
      return wrapFunc(f);
    };
    fake.rejects = function rejects(value) {
      function f() {
        return Promise.reject(getError(value));
      }
      return wrapFunc(f);
    };
    fake.yields = function yields() {
      const values = slice(arguments);
      function f() {
        const callback = arguments[arguments.length - 1];
        if (typeof callback !== "function") {
          throw new TypeError("Expected last argument to be a function");
        }
        callback.apply(null, values);
      }
      return wrapFunc(f);
    };
    fake.yieldsAsync = function yieldsAsync() {
      const values = slice(arguments);
      function f() {
        const callback = arguments[arguments.length - 1];
        if (typeof callback !== "function") {
          throw new TypeError("Expected last argument to be a function");
        }
        nextTick(function() {
          callback.apply(null, values);
        });
      }
      return wrapFunc(f);
    };
    let uuid = 0;
    function wrapFunc(f) {
      const fakeInstance = function() {
        let firstArg, lastArg;
        if (arguments.length > 0) {
          firstArg = arguments[0];
          lastArg = arguments[arguments.length - 1];
        }
        const callback = lastArg && typeof lastArg === "function" ? lastArg : void 0;
        proxy.firstArg = firstArg;
        proxy.lastArg = lastArg;
        proxy.callback = callback;
        return f && f.apply(this, arguments);
      };
      const proxy = createProxy(fakeInstance, f || fakeInstance);
      proxy.displayName = "fake";
      proxy.id = `fake#${uuid++}`;
      return proxy;
    }
    function getError(value) {
      return value instanceof Error ? value : new Error(value);
    }
  }, {
    "./proxy": 18,
    "./util/core/next-tick": 34,
    "@sinonjs/commons": 47
  }],
  12: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const proxyInvoke = require2("./proxy-invoke");
    const proxyCallToString = require2("./proxy-call").toString;
    const timesInWords = require2("./util/core/times-in-words");
    const extend = require2("./util/core/extend");
    const match = require2("@sinonjs/samsam").createMatcher;
    const stub = require2("./stub");
    const assert = require2("./assert");
    const deepEqual = require2("@sinonjs/samsam").deepEqual;
    const inspect = require2("util").inspect;
    const valueToString = require2("@sinonjs/commons").valueToString;
    const every = arrayProto.every;
    const forEach = arrayProto.forEach;
    const push = arrayProto.push;
    const slice = arrayProto.slice;
    function callCountInWords(callCount) {
      if (callCount === 0) {
        return "never called";
      }
      return `called ${timesInWords(callCount)}`;
    }
    function expectedCallCountInWords(expectation) {
      const min = expectation.minCalls;
      const max = expectation.maxCalls;
      if (typeof min === "number" && typeof max === "number") {
        let str = timesInWords(min);
        if (min !== max) {
          str = `at least ${str} and at most ${timesInWords(max)}`;
        }
        return str;
      }
      if (typeof min === "number") {
        return `at least ${timesInWords(min)}`;
      }
      return `at most ${timesInWords(max)}`;
    }
    function receivedMinCalls(expectation) {
      const hasMinLimit = typeof expectation.minCalls === "number";
      return !hasMinLimit || expectation.callCount >= expectation.minCalls;
    }
    function receivedMaxCalls(expectation) {
      if (typeof expectation.maxCalls !== "number") {
        return false;
      }
      return expectation.callCount === expectation.maxCalls;
    }
    function verifyMatcher(possibleMatcher, arg) {
      const isMatcher = match.isMatcher(possibleMatcher);
      return isMatcher && possibleMatcher.test(arg) || true;
    }
    const mockExpectation = {
      minCalls: 1,
      maxCalls: 1,
      create: function create(methodName) {
        const expectation = extend.nonEnum(stub(), mockExpectation);
        delete expectation.create;
        expectation.method = methodName;
        return expectation;
      },
      invoke: function invoke(func, thisValue, args) {
        this.verifyCallAllowed(thisValue, args);
        return proxyInvoke.apply(this, arguments);
      },
      atLeast: function atLeast(num) {
        if (typeof num !== "number") {
          throw new TypeError(`'${valueToString(num)}' is not number`);
        }
        if (!this.limitsSet) {
          this.maxCalls = null;
          this.limitsSet = true;
        }
        this.minCalls = num;
        return this;
      },
      atMost: function atMost(num) {
        if (typeof num !== "number") {
          throw new TypeError(`'${valueToString(num)}' is not number`);
        }
        if (!this.limitsSet) {
          this.minCalls = null;
          this.limitsSet = true;
        }
        this.maxCalls = num;
        return this;
      },
      never: function never() {
        return this.exactly(0);
      },
      once: function once() {
        return this.exactly(1);
      },
      twice: function twice() {
        return this.exactly(2);
      },
      thrice: function thrice() {
        return this.exactly(3);
      },
      exactly: function exactly(num) {
        if (typeof num !== "number") {
          throw new TypeError(`'${valueToString(num)}' is not a number`);
        }
        this.atLeast(num);
        return this.atMost(num);
      },
      met: function met() {
        return !this.failed && receivedMinCalls(this);
      },
      verifyCallAllowed: function verifyCallAllowed(thisValue, args) {
        const expectedArguments = this.expectedArguments;
        if (receivedMaxCalls(this)) {
          this.failed = true;
          mockExpectation.fail(`${this.method} already called ${timesInWords(this.maxCalls)}`);
        }
        if ("expectedThis" in this && this.expectedThis !== thisValue) {
          mockExpectation.fail(`${this.method} called with ${valueToString(thisValue)} as thisValue, expected ${valueToString(this.expectedThis)}`);
        }
        if (!("expectedArguments" in this)) {
          return;
        }
        if (!args) {
          mockExpectation.fail(`${this.method} received no arguments, expected ${inspect(expectedArguments)}`);
        }
        if (args.length < expectedArguments.length) {
          mockExpectation.fail(`${this.method} received too few arguments (${inspect(args)}), expected ${inspect(expectedArguments)}`);
        }
        if (this.expectsExactArgCount && args.length !== expectedArguments.length) {
          mockExpectation.fail(`${this.method} received too many arguments (${inspect(args)}), expected ${inspect(expectedArguments)}`);
        }
        forEach(expectedArguments, function(expectedArgument, i) {
          if (!verifyMatcher(expectedArgument, args[i])) ;
          if (!deepEqual(args[i], expectedArgument)) {
            mockExpectation.fail(`${this.method} received wrong arguments ${inspect(args)}, expected ${inspect(expectedArguments)}`);
          }
        }, this);
      },
      allowsCall: function allowsCall(thisValue, args) {
        const expectedArguments = this.expectedArguments;
        if (this.met() && receivedMaxCalls(this)) {
          return false;
        }
        if ("expectedThis" in this && this.expectedThis !== thisValue) {
          return false;
        }
        if (!("expectedArguments" in this)) {
          return true;
        }
        const _args = args || [];
        if (_args.length < expectedArguments.length) {
          return false;
        }
        if (this.expectsExactArgCount && _args.length !== expectedArguments.length) {
          return false;
        }
        return every(expectedArguments, function(expectedArgument, i) {
          if (!verifyMatcher(expectedArgument, _args[i])) ;
          if (!deepEqual(_args[i], expectedArgument)) {
            return false;
          }
          return true;
        });
      },
      withArgs: function withArgs() {
        this.expectedArguments = slice(arguments);
        return this;
      },
      withExactArgs: function withExactArgs() {
        this.withArgs.apply(this, arguments);
        this.expectsExactArgCount = true;
        return this;
      },
      on: function on(thisValue) {
        this.expectedThis = thisValue;
        return this;
      },
      toString: function() {
        const args = slice(this.expectedArguments || []);
        if (!this.expectsExactArgCount) {
          push(args, "[...]");
        }
        const callStr = proxyCallToString.call({
          proxy: this.method || "anonymous mock expectation",
          args
        });
        const message = `${callStr.replace(", [...", "[, ...")} ${expectedCallCountInWords(this)}`;
        if (this.met()) {
          return `Expectation met: ${message}`;
        }
        return `Expected ${message} (${callCountInWords(this.callCount)})`;
      },
      verify: function verify() {
        if (!this.met()) {
          mockExpectation.fail(String(this));
        } else {
          mockExpectation.pass(String(this));
        }
        return true;
      },
      pass: function pass(message) {
        assert.pass(message);
      },
      fail: function fail(message) {
        const exception = new Error(message);
        exception.name = "ExpectationError";
        throw exception;
      }
    };
    module.exports = mockExpectation;
  }, {
    "./assert": 4,
    "./proxy-call": 16,
    "./proxy-invoke": 17,
    "./stub": 23,
    "./util/core/extend": 26,
    "./util/core/times-in-words": 36,
    "@sinonjs/commons": 47,
    "@sinonjs/samsam": 87,
    "util": 91
  }],
  13: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const mockExpectation = require2("./mock-expectation");
    const proxyCallToString = require2("./proxy-call").toString;
    const extend = require2("./util/core/extend");
    const deepEqual = require2("@sinonjs/samsam").deepEqual;
    const wrapMethod = require2("./util/core/wrap-method");
    const concat = arrayProto.concat;
    const filter = arrayProto.filter;
    const forEach = arrayProto.forEach;
    const every = arrayProto.every;
    const join = arrayProto.join;
    const push = arrayProto.push;
    const slice = arrayProto.slice;
    const unshift = arrayProto.unshift;
    function mock(object) {
      if (!object || typeof object === "string") {
        return mockExpectation.create(object ? object : "Anonymous mock");
      }
      return mock.create(object);
    }
    function each(collection, callback) {
      const col = collection || [];
      forEach(col, callback);
    }
    function arrayEquals(arr1, arr2, compareLength) {
      if (compareLength && arr1.length !== arr2.length) {
        return false;
      }
      return every(arr1, function(element, i) {
        return deepEqual(arr2[i], element);
      });
    }
    extend(mock, {
      create: function create(object) {
        if (!object) {
          throw new TypeError("object is null");
        }
        const mockObject = extend.nonEnum({}, mock, {
          object
        });
        delete mockObject.create;
        return mockObject;
      },
      expects: function expects(method) {
        if (!method) {
          throw new TypeError("method is falsy");
        }
        if (!this.expectations) {
          this.expectations = {};
          this.proxies = [];
          this.failures = [];
        }
        if (!this.expectations[method]) {
          this.expectations[method] = [];
          const mockObject = this;
          wrapMethod(this.object, method, function() {
            return mockObject.invokeMethod(method, this, arguments);
          });
          push(this.proxies, method);
        }
        const expectation = mockExpectation.create(method);
        expectation.wrappedMethod = this.object[method].wrappedMethod;
        push(this.expectations[method], expectation);
        return expectation;
      },
      restore: function restore() {
        const object = this.object;
        each(this.proxies, function(proxy) {
          if (typeof object[proxy].restore === "function") {
            object[proxy].restore();
          }
        });
      },
      verify: function verify() {
        const expectations = this.expectations || {};
        const messages = this.failures ? slice(this.failures) : [];
        const met = [];
        each(this.proxies, function(proxy) {
          each(expectations[proxy], function(expectation) {
            if (!expectation.met()) {
              push(messages, String(expectation));
            } else {
              push(met, String(expectation));
            }
          });
        });
        this.restore();
        if (messages.length > 0) {
          mockExpectation.fail(join(concat(messages, met), "\n"));
        } else if (met.length > 0) {
          mockExpectation.pass(join(concat(messages, met), "\n"));
        }
        return true;
      },
      invokeMethod: function invokeMethod(method, thisValue, args) {
        const expectations = this.expectations && this.expectations[method] ? this.expectations[method] : [];
        const currentArgs = args || [];
        let available;
        const expectationsWithMatchingArgs = filter(expectations, function(expectation) {
          const expectedArgs = expectation.expectedArguments || [];
          return arrayEquals(expectedArgs, currentArgs, expectation.expectsExactArgCount);
        });
        const expectationsToApply = filter(expectationsWithMatchingArgs, function(expectation) {
          return !expectation.met() && expectation.allowsCall(thisValue, args);
        });
        if (expectationsToApply.length > 0) {
          return expectationsToApply[0].apply(thisValue, args);
        }
        const messages = [];
        let exhausted = 0;
        forEach(expectationsWithMatchingArgs, function(expectation) {
          if (expectation.allowsCall(thisValue, args)) {
            available = available || expectation;
          } else {
            exhausted += 1;
          }
        });
        if (available && exhausted === 0) {
          return available.apply(thisValue, args);
        }
        forEach(expectations, function(expectation) {
          push(messages, `    ${String(expectation)}`);
        });
        unshift(messages, `Unexpected call: ${proxyCallToString.call({
          proxy: method,
          args
        })}`);
        const err = new Error();
        if (!err.stack) {
          try {
            throw err;
          } catch (e) {
          }
        }
        push(this.failures, `Unexpected call: ${proxyCallToString.call({
          proxy: method,
          args,
          stack: err.stack
        })}`);
        mockExpectation.fail(join(messages, "\n"));
      }
    });
    module.exports = mock;
  }, {
    "./mock-expectation": 12,
    "./proxy-call": 16,
    "./util/core/extend": 26,
    "./util/core/wrap-method": 39,
    "@sinonjs/commons": 47,
    "@sinonjs/samsam": 87
  }],
  14: [function(require2, module, exports) {
    const fake = require2("./fake");
    const isRestorable = require2("./util/core/is-restorable");
    const STATUS_PENDING = "pending";
    const STATUS_RESOLVED = "resolved";
    const STATUS_REJECTED = "rejected";
    function getFakeExecutor(executor) {
      if (isRestorable(executor)) {
        return executor;
      }
      if (executor) {
        return fake(executor);
      }
      return fake();
    }
    function promise(executor) {
      const fakeExecutor = getFakeExecutor(executor);
      const sinonPromise = new Promise(fakeExecutor);
      sinonPromise.status = STATUS_PENDING;
      sinonPromise.then(function(value) {
        sinonPromise.status = STATUS_RESOLVED;
        sinonPromise.resolvedValue = value;
      }).catch(function(reason) {
        sinonPromise.status = STATUS_REJECTED;
        sinonPromise.rejectedValue = reason;
      });
      function finalize(status, value, callback) {
        if (sinonPromise.status !== STATUS_PENDING) {
          throw new Error(`Promise already ${sinonPromise.status}`);
        }
        sinonPromise.status = status;
        callback(value);
      }
      sinonPromise.resolve = function(value) {
        finalize(STATUS_RESOLVED, value, fakeExecutor.firstCall.args[0]);
        return sinonPromise;
      };
      sinonPromise.reject = function(reason) {
        finalize(STATUS_REJECTED, reason, fakeExecutor.firstCall.args[1]);
        return new Promise(function(resolve) {
          sinonPromise.catch(() => resolve());
        });
      };
      return sinonPromise;
    }
    module.exports = promise;
  }, {
    "./fake": 11,
    "./util/core/is-restorable": 33
  }],
  15: [function(require2, module, exports) {
    const push = require2("@sinonjs/commons").prototypes.array.push;
    exports.incrementCallCount = function incrementCallCount(proxy) {
      proxy.called = true;
      proxy.callCount += 1;
      proxy.notCalled = false;
      proxy.calledOnce = proxy.callCount === 1;
      proxy.calledTwice = proxy.callCount === 2;
      proxy.calledThrice = proxy.callCount === 3;
    };
    exports.createCallProperties = function createCallProperties(proxy) {
      proxy.firstCall = proxy.getCall(0);
      proxy.secondCall = proxy.getCall(1);
      proxy.thirdCall = proxy.getCall(2);
      proxy.lastCall = proxy.getCall(proxy.callCount - 1);
    };
    exports.delegateToCalls = function delegateToCalls(proxy, method, matchAny, actual, returnsValues, notCalled, totalCallCount) {
      proxy[method] = function() {
        if (!this.called) {
          if (notCalled) {
            return notCalled.apply(this, arguments);
          }
          return false;
        }
        if (totalCallCount !== void 0 && this.callCount !== totalCallCount) {
          return false;
        }
        let currentCall;
        let matches = 0;
        const returnValues = [];
        for (let i = 0, l = this.callCount; i < l; i += 1) {
          currentCall = this.getCall(i);
          const returnValue = currentCall[actual || method].apply(currentCall, arguments);
          push(returnValues, returnValue);
          if (returnValue) {
            matches += 1;
            if (matchAny) {
              return true;
            }
          }
        }
        if (returnsValues) {
          return returnValues;
        }
        return matches === this.callCount;
      };
    };
  }, {
    "@sinonjs/commons": 47
  }],
  16: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const match = require2("@sinonjs/samsam").createMatcher;
    const deepEqual = require2("@sinonjs/samsam").deepEqual;
    const functionName = require2("@sinonjs/commons").functionName;
    const inspect = require2("util").inspect;
    const valueToString = require2("@sinonjs/commons").valueToString;
    const concat = arrayProto.concat;
    const filter = arrayProto.filter;
    const join = arrayProto.join;
    const map = arrayProto.map;
    const reduce = arrayProto.reduce;
    const slice = arrayProto.slice;
    function throwYieldError(proxy, text, args) {
      let msg = functionName(proxy) + text;
      if (args.length) {
        msg += ` Received [${join(slice(args), ", ")}]`;
      }
      throw new Error(msg);
    }
    const callProto = {
      calledOn: function calledOn(thisValue) {
        if (match.isMatcher(thisValue)) {
          return thisValue.test(this.thisValue);
        }
        return this.thisValue === thisValue;
      },
      calledWith: function calledWith() {
        const self2 = this;
        const calledWithArgs = slice(arguments);
        if (calledWithArgs.length > self2.args.length) {
          return false;
        }
        return reduce(calledWithArgs, function(prev, arg, i) {
          return prev && deepEqual(self2.args[i], arg);
        }, true);
      },
      calledWithMatch: function calledWithMatch() {
        const self2 = this;
        const calledWithMatchArgs = slice(arguments);
        if (calledWithMatchArgs.length > self2.args.length) {
          return false;
        }
        return reduce(calledWithMatchArgs, function(prev, expectation, i) {
          const actual = self2.args[i];
          return prev && match(expectation).test(actual);
        }, true);
      },
      calledWithExactly: function calledWithExactly() {
        return arguments.length === this.args.length && this.calledWith.apply(this, arguments);
      },
      notCalledWith: function notCalledWith() {
        return !this.calledWith.apply(this, arguments);
      },
      notCalledWithMatch: function notCalledWithMatch() {
        return !this.calledWithMatch.apply(this, arguments);
      },
      returned: function returned(value) {
        return deepEqual(this.returnValue, value);
      },
      threw: function threw(error) {
        if (typeof error === "undefined" || !this.exception) {
          return Boolean(this.exception);
        }
        return this.exception === error || this.exception.name === error;
      },
      calledWithNew: function calledWithNew() {
        return this.proxy.prototype && this.thisValue instanceof this.proxy;
      },
      calledBefore: function(other) {
        return this.callId < other.callId;
      },
      calledAfter: function(other) {
        return this.callId > other.callId;
      },
      calledImmediatelyBefore: function(other) {
        return this.callId === other.callId - 1;
      },
      calledImmediatelyAfter: function(other) {
        return this.callId === other.callId + 1;
      },
      callArg: function(pos) {
        this.ensureArgIsAFunction(pos);
        return this.args[pos]();
      },
      callArgOn: function(pos, thisValue) {
        this.ensureArgIsAFunction(pos);
        return this.args[pos].apply(thisValue);
      },
      callArgWith: function(pos) {
        return this.callArgOnWith.apply(this, concat([pos, null], slice(arguments, 1)));
      },
      callArgOnWith: function(pos, thisValue) {
        this.ensureArgIsAFunction(pos);
        const args = slice(arguments, 2);
        return this.args[pos].apply(thisValue, args);
      },
      throwArg: function(pos) {
        if (pos > this.args.length) {
          throw new TypeError(`Not enough arguments: ${pos} required but only ${this.args.length} present`);
        }
        throw this.args[pos];
      },
      yield: function() {
        return this.yieldOn.apply(this, concat([null], slice(arguments, 0)));
      },
      yieldOn: function(thisValue) {
        const args = slice(this.args);
        const yieldFn = filter(args, function(arg) {
          return typeof arg === "function";
        })[0];
        if (!yieldFn) {
          throwYieldError(this.proxy, " cannot yield since no callback was passed.", args);
        }
        return yieldFn.apply(thisValue, slice(arguments, 1));
      },
      yieldTo: function(prop) {
        return this.yieldToOn.apply(this, concat([prop, null], slice(arguments, 1)));
      },
      yieldToOn: function(prop, thisValue) {
        const args = slice(this.args);
        const yieldArg = filter(args, function(arg) {
          return arg && typeof arg[prop] === "function";
        })[0];
        const yieldFn = yieldArg && yieldArg[prop];
        if (!yieldFn) {
          throwYieldError(this.proxy, ` cannot yield to '${valueToString(prop)}' since no callback was passed.`, args);
        }
        return yieldFn.apply(thisValue, slice(arguments, 2));
      },
      toString: function() {
        if (!this.args) {
          return ":(";
        }
        let callStr = this.proxy ? `${String(this.proxy)}(` : "";
        const formattedArgs = map(this.args, function(arg) {
          return inspect(arg);
        });
        callStr = `${callStr + join(formattedArgs, ", ")})`;
        if (typeof this.returnValue !== "undefined") {
          callStr += ` => ${inspect(this.returnValue)}`;
        }
        if (this.exception) {
          callStr += ` !${this.exception.name}`;
          if (this.exception.message) {
            callStr += `(${this.exception.message})`;
          }
        }
        if (this.stack) {
          callStr += (this.stack.split("\n")[3] || "unknown").replace(/^\s*(?:at\s+|@)?/, " at ");
        }
        return callStr;
      },
      ensureArgIsAFunction: function(pos) {
        if (typeof this.args[pos] !== "function") {
          throw new TypeError(`Expected argument at position ${pos} to be a Function, but was ${typeof this.args[pos]}`);
        }
      }
    };
    Object.defineProperty(callProto, "stack", {
      enumerable: true,
      configurable: true,
      get: function() {
        return this.errorWithCallStack && this.errorWithCallStack.stack || "";
      }
    });
    callProto.invokeCallback = callProto.yield;
    function createProxyCall(proxy, thisValue, args, returnValue, exception, id, errorWithCallStack) {
      if (typeof id !== "number") {
        throw new TypeError("Call id is not a number");
      }
      let firstArg, lastArg;
      if (args.length > 0) {
        firstArg = args[0];
        lastArg = args[args.length - 1];
      }
      const proxyCall = Object.create(callProto);
      const callback = lastArg && typeof lastArg === "function" ? lastArg : void 0;
      proxyCall.proxy = proxy;
      proxyCall.thisValue = thisValue;
      proxyCall.args = args;
      proxyCall.firstArg = firstArg;
      proxyCall.lastArg = lastArg;
      proxyCall.callback = callback;
      proxyCall.returnValue = returnValue;
      proxyCall.exception = exception;
      proxyCall.callId = id;
      proxyCall.errorWithCallStack = errorWithCallStack;
      return proxyCall;
    }
    createProxyCall.toString = callProto.toString;
    module.exports = createProxyCall;
  }, {
    "@sinonjs/commons": 47,
    "@sinonjs/samsam": 87,
    "util": 91
  }],
  17: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const proxyCallUtil = require2("./proxy-call-util");
    const push = arrayProto.push;
    const forEach = arrayProto.forEach;
    const concat = arrayProto.concat;
    const ErrorConstructor = Error.prototype.constructor;
    const bind = Function.prototype.bind;
    let callId = 0;
    module.exports = function invoke(func, thisValue, args) {
      const matchings = this.matchingFakes(args);
      const currentCallId = callId++;
      let exception, returnValue;
      proxyCallUtil.incrementCallCount(this);
      push(this.thisValues, thisValue);
      push(this.args, args);
      push(this.callIds, currentCallId);
      forEach(matchings, function(matching) {
        proxyCallUtil.incrementCallCount(matching);
        push(matching.thisValues, thisValue);
        push(matching.args, args);
        push(matching.callIds, currentCallId);
      });
      proxyCallUtil.createCallProperties(this);
      forEach(matchings, proxyCallUtil.createCallProperties);
      try {
        this.invoking = true;
        const thisCall = this.getCall(this.callCount - 1);
        if (thisCall.calledWithNew()) {
          returnValue = new (bind.apply(this.func || func, concat([thisValue], args)))();
          if (typeof returnValue !== "object" && typeof returnValue !== "function") {
            returnValue = thisValue;
          }
        } else {
          returnValue = (this.func || func).apply(thisValue, args);
        }
      } catch (e) {
        exception = e;
      } finally {
        delete this.invoking;
      }
      push(this.exceptions, exception);
      push(this.returnValues, returnValue);
      forEach(matchings, function(matching) {
        push(matching.exceptions, exception);
        push(matching.returnValues, returnValue);
      });
      const err = new ErrorConstructor();
      try {
        throw err;
      } catch (e) {
      }
      push(this.errorsWithCallStack, err);
      forEach(matchings, function(matching) {
        push(matching.errorsWithCallStack, err);
      });
      proxyCallUtil.createCallProperties(this);
      forEach(matchings, proxyCallUtil.createCallProperties);
      if (exception !== void 0) {
        throw exception;
      }
      return returnValue;
    };
  }, {
    "./proxy-call-util": 15,
    "@sinonjs/commons": 47
  }],
  18: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const extend = require2("./util/core/extend");
    const functionToString = require2("./util/core/function-to-string");
    const proxyCall = require2("./proxy-call");
    const proxyCallUtil = require2("./proxy-call-util");
    const proxyInvoke = require2("./proxy-invoke");
    const inspect = require2("util").inspect;
    const push = arrayProto.push;
    const forEach = arrayProto.forEach;
    const slice = arrayProto.slice;
    const emptyFakes = Object.freeze([]);
    const proxyApi = {
      toString: functionToString,
      named: function named(name) {
        this.displayName = name;
        const nameDescriptor = Object.getOwnPropertyDescriptor(this, "name");
        if (nameDescriptor && nameDescriptor.configurable) {
          nameDescriptor.value = name;
          Object.defineProperty(this, "name", nameDescriptor);
        }
        return this;
      },
      invoke: proxyInvoke,
      /*
       * Hook for derived implementation to return fake instances matching the
       * given arguments.
       */
      matchingFakes: function() {
        return emptyFakes;
      },
      getCall: function getCall(index) {
        let i = index;
        if (i < 0) {
          i += this.callCount;
        }
        if (i < 0 || i >= this.callCount) {
          return null;
        }
        return proxyCall(this, this.thisValues[i], this.args[i], this.returnValues[i], this.exceptions[i], this.callIds[i], this.errorsWithCallStack[i]);
      },
      getCalls: function() {
        const calls = [];
        let i;
        for (i = 0; i < this.callCount; i++) {
          push(calls, this.getCall(i));
        }
        return calls;
      },
      calledBefore: function calledBefore(proxy) {
        if (!this.called) {
          return false;
        }
        if (!proxy.called) {
          return true;
        }
        return this.callIds[0] < proxy.callIds[proxy.callIds.length - 1];
      },
      calledAfter: function calledAfter(proxy) {
        if (!this.called || !proxy.called) {
          return false;
        }
        return this.callIds[this.callCount - 1] > proxy.callIds[0];
      },
      calledImmediatelyBefore: function calledImmediatelyBefore(proxy) {
        if (!this.called || !proxy.called) {
          return false;
        }
        return this.callIds[this.callCount - 1] === proxy.callIds[proxy.callCount - 1] - 1;
      },
      calledImmediatelyAfter: function calledImmediatelyAfter(proxy) {
        if (!this.called || !proxy.called) {
          return false;
        }
        return this.callIds[this.callCount - 1] === proxy.callIds[proxy.callCount - 1] + 1;
      },
      formatters: require2("./spy-formatters"),
      printf: function(format) {
        const spyInstance = this;
        const args = slice(arguments, 1);
        let formatter;
        return (format || "").replace(/%(.)/g, function(match, specifier) {
          formatter = proxyApi.formatters[specifier];
          if (typeof formatter === "function") {
            return String(formatter(spyInstance, args));
          } else if (!isNaN(parseInt(specifier, 10))) {
            return inspect(args[specifier - 1]);
          }
          return `%${specifier}`;
        });
      },
      resetHistory: function() {
        if (this.invoking) {
          const err = new Error("Cannot reset Sinon function while invoking it. Move the call to .resetHistory outside of the callback.");
          err.name = "InvalidResetException";
          throw err;
        }
        this.called = false;
        this.notCalled = true;
        this.calledOnce = false;
        this.calledTwice = false;
        this.calledThrice = false;
        this.callCount = 0;
        this.firstCall = null;
        this.secondCall = null;
        this.thirdCall = null;
        this.lastCall = null;
        this.args = [];
        this.firstArg = null;
        this.lastArg = null;
        this.returnValues = [];
        this.thisValues = [];
        this.exceptions = [];
        this.callIds = [];
        this.errorsWithCallStack = [];
        if (this.fakes) {
          forEach(this.fakes, function(fake) {
            fake.resetHistory();
          });
        }
        return this;
      }
    };
    const delegateToCalls = proxyCallUtil.delegateToCalls;
    delegateToCalls(proxyApi, "calledOn", true);
    delegateToCalls(proxyApi, "alwaysCalledOn", false, "calledOn");
    delegateToCalls(proxyApi, "calledWith", true);
    delegateToCalls(proxyApi, "calledOnceWith", true, "calledWith", false, void 0, 1);
    delegateToCalls(proxyApi, "calledWithMatch", true);
    delegateToCalls(proxyApi, "alwaysCalledWith", false, "calledWith");
    delegateToCalls(proxyApi, "alwaysCalledWithMatch", false, "calledWithMatch");
    delegateToCalls(proxyApi, "calledWithExactly", true);
    delegateToCalls(proxyApi, "calledOnceWithExactly", true, "calledWithExactly", false, void 0, 1);
    delegateToCalls(proxyApi, "calledOnceWithMatch", true, "calledWithMatch", false, void 0, 1);
    delegateToCalls(proxyApi, "alwaysCalledWithExactly", false, "calledWithExactly");
    delegateToCalls(proxyApi, "neverCalledWith", false, "notCalledWith", false, function() {
      return true;
    });
    delegateToCalls(proxyApi, "neverCalledWithMatch", false, "notCalledWithMatch", false, function() {
      return true;
    });
    delegateToCalls(proxyApi, "threw", true);
    delegateToCalls(proxyApi, "alwaysThrew", false, "threw");
    delegateToCalls(proxyApi, "returned", true);
    delegateToCalls(proxyApi, "alwaysReturned", false, "returned");
    delegateToCalls(proxyApi, "calledWithNew", true);
    delegateToCalls(proxyApi, "alwaysCalledWithNew", false, "calledWithNew");
    function createProxy(func, originalFunc) {
      const proxy = wrapFunction(func, originalFunc);
      extend(proxy, func);
      proxy.prototype = func.prototype;
      extend.nonEnum(proxy, proxyApi);
      return proxy;
    }
    function wrapFunction(func, originalFunc) {
      const arity = originalFunc.length;
      let p;
      switch (arity) {
        /*eslint-disable no-unused-vars, max-len*/
        case 0:
          p = function proxy() {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        case 1:
          p = function proxy(a) {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        case 2:
          p = function proxy(a, b) {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        case 3:
          p = function proxy(a, b, c) {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        case 4:
          p = function proxy(a, b, c, d) {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        case 5:
          p = function proxy(a, b, c, d, e) {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        case 6:
          p = function proxy(a, b, c, d, e, f) {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        case 7:
          p = function proxy(a, b, c, d, e, f, g) {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        case 8:
          p = function proxy(a, b, c, d, e, f, g, h) {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        case 9:
          p = function proxy(a, b, c, d, e, f, g, h, i) {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        case 10:
          p = function proxy(a, b, c, d, e, f, g, h, i, j) {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        case 11:
          p = function proxy(a, b, c, d, e, f, g, h, i, j, k) {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        case 12:
          p = function proxy(a, b, c, d, e, f, g, h, i, j, k, l) {
            return p.invoke(func, this, slice(arguments));
          };
          break;
        default:
          p = function proxy() {
            return p.invoke(func, this, slice(arguments));
          };
          break;
      }
      const nameDescriptor = Object.getOwnPropertyDescriptor(originalFunc, "name");
      if (nameDescriptor && nameDescriptor.configurable) {
        Object.defineProperty(p, "name", nameDescriptor);
      }
      extend.nonEnum(p, {
        isSinonProxy: true,
        called: false,
        notCalled: true,
        calledOnce: false,
        calledTwice: false,
        calledThrice: false,
        callCount: 0,
        firstCall: null,
        firstArg: null,
        secondCall: null,
        thirdCall: null,
        lastCall: null,
        lastArg: null,
        args: [],
        returnValues: [],
        thisValues: [],
        exceptions: [],
        callIds: [],
        errorsWithCallStack: []
      });
      return p;
    }
    module.exports = createProxy;
  }, {
    "./proxy-call": 16,
    "./proxy-call-util": 15,
    "./proxy-invoke": 17,
    "./spy-formatters": 21,
    "./util/core/extend": 26,
    "./util/core/function-to-string": 27,
    "@sinonjs/commons": 47,
    "util": 91
  }],
  19: [function(require2, module, exports) {
    const walkObject = require2("./util/core/walk-object");
    function filter(object, property) {
      return object[property].restore && object[property].restore.sinon;
    }
    function restore(object, property) {
      object[property].restore();
    }
    function restoreObject(object) {
      return walkObject(restore, object, filter);
    }
    module.exports = restoreObject;
  }, {
    "./util/core/walk-object": 37
  }],
  20: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const logger = require2("@sinonjs/commons").deprecated;
    const collectOwnMethods = require2("./collect-own-methods");
    const getPropertyDescriptor = require2("./util/core/get-property-descriptor");
    const isPropertyConfigurable = require2("./util/core/is-property-configurable");
    const match = require2("@sinonjs/samsam").createMatcher;
    const sinonAssert = require2("./assert");
    const sinonClock = require2("./util/fake-timers");
    const sinonMock = require2("./mock");
    const sinonSpy = require2("./spy");
    const sinonStub = require2("./stub");
    const sinonCreateStubInstance = require2("./create-stub-instance");
    const sinonFake = require2("./fake");
    const valueToString = require2("@sinonjs/commons").valueToString;
    const DEFAULT_LEAK_THRESHOLD = 1e4;
    const filter = arrayProto.filter;
    const forEach = arrayProto.forEach;
    const push = arrayProto.push;
    const reverse = arrayProto.reverse;
    function applyOnEach(fakes, method) {
      const matchingFakes = filter(fakes, function(fake) {
        return typeof fake[method] === "function";
      });
      forEach(matchingFakes, function(fake) {
        fake[method]();
      });
    }
    function throwOnAccessors(descriptor) {
      if (typeof descriptor.get === "function") {
        throw new Error("Use sandbox.replaceGetter for replacing getters");
      }
      if (typeof descriptor.set === "function") {
        throw new Error("Use sandbox.replaceSetter for replacing setters");
      }
    }
    function verifySameType(object, property, replacement) {
      if (typeof object[property] !== typeof replacement) {
        throw new TypeError(`Cannot replace ${typeof object[property]} with ${typeof replacement}`);
      }
    }
    function checkForValidArguments(descriptor, property, replacement) {
      if (typeof descriptor === "undefined") {
        throw new TypeError(`Cannot replace non-existent property ${valueToString(property)}. Perhaps you meant sandbox.define()?`);
      }
      if (typeof replacement === "undefined") {
        throw new TypeError("Expected replacement argument to be defined");
      }
    }
    function Sandbox(opts = {}) {
      const sandbox = this;
      const assertOptions = opts.assertOptions || {};
      let fakeRestorers = [];
      let collection = [];
      let loggedLeakWarning = false;
      sandbox.leakThreshold = DEFAULT_LEAK_THRESHOLD;
      function addToCollection(object) {
        if (push(collection, object) > sandbox.leakThreshold && !loggedLeakWarning) {
          logger.printWarning("Potential memory leak detected; be sure to call restore() to clean up your sandbox. To suppress this warning, modify the leakThreshold property of your sandbox.");
          loggedLeakWarning = true;
        }
      }
      sandbox.assert = sinonAssert.createAssertObject(assertOptions);
      sandbox.getFakes = function getFakes() {
        return collection;
      };
      sandbox.createStubInstance = function createStubInstance() {
        const stubbed = sinonCreateStubInstance.apply(null, arguments);
        const ownMethods = collectOwnMethods(stubbed);
        forEach(ownMethods, function(method) {
          addToCollection(method);
        });
        return stubbed;
      };
      sandbox.inject = function inject(obj) {
        obj.spy = function() {
          return sandbox.spy.apply(null, arguments);
        };
        obj.stub = function() {
          return sandbox.stub.apply(null, arguments);
        };
        obj.mock = function() {
          return sandbox.mock.apply(null, arguments);
        };
        obj.createStubInstance = function() {
          return sandbox.createStubInstance.apply(sandbox, arguments);
        };
        obj.fake = function() {
          return sandbox.fake.apply(null, arguments);
        };
        obj.define = function() {
          return sandbox.define.apply(null, arguments);
        };
        obj.replace = function() {
          return sandbox.replace.apply(null, arguments);
        };
        obj.replaceSetter = function() {
          return sandbox.replaceSetter.apply(null, arguments);
        };
        obj.replaceGetter = function() {
          return sandbox.replaceGetter.apply(null, arguments);
        };
        if (sandbox.clock) {
          obj.clock = sandbox.clock;
        }
        obj.match = match;
        return obj;
      };
      sandbox.mock = function mock() {
        const m = sinonMock.apply(null, arguments);
        addToCollection(m);
        return m;
      };
      sandbox.reset = function reset() {
        applyOnEach(collection, "reset");
        applyOnEach(collection, "resetHistory");
      };
      sandbox.resetBehavior = function resetBehavior() {
        applyOnEach(collection, "resetBehavior");
      };
      sandbox.resetHistory = function resetHistory() {
        function privateResetHistory(f) {
          const method = f.resetHistory || f.reset;
          if (method) {
            method.call(f);
          }
        }
        forEach(collection, privateResetHistory);
      };
      sandbox.restore = function restore() {
        if (arguments.length) {
          throw new Error("sandbox.restore() does not take any parameters. Perhaps you meant stub.restore()");
        }
        reverse(collection);
        applyOnEach(collection, "restore");
        collection = [];
        forEach(fakeRestorers, function(restorer) {
          restorer();
        });
        fakeRestorers = [];
        sandbox.restoreContext();
      };
      sandbox.restoreContext = function restoreContext() {
        if (!sandbox.injectedKeys) {
          return;
        }
        forEach(sandbox.injectedKeys, function(injectedKey) {
          delete sandbox.injectInto[injectedKey];
        });
        sandbox.injectedKeys.length = 0;
      };
      function getFakeRestorer(object, property, forceAssignment = false) {
        const descriptor = getPropertyDescriptor(object, property);
        const value = forceAssignment && object[property];
        function restorer() {
          if (forceAssignment) {
            object[property] = value;
          } else if (descriptor?.isOwn) {
            Object.defineProperty(object, property, descriptor);
          } else {
            delete object[property];
          }
        }
        restorer.object = object;
        restorer.property = property;
        return restorer;
      }
      function verifyNotReplaced(object, property) {
        forEach(fakeRestorers, function(fakeRestorer) {
          if (fakeRestorer.object === object && fakeRestorer.property === property) {
            throw new TypeError(`Attempted to replace ${property} which is already replaced`);
          }
        });
      }
      sandbox.replace = function replace(object, property, replacement) {
        const descriptor = getPropertyDescriptor(object, property);
        checkForValidArguments(descriptor, property, replacement);
        throwOnAccessors(descriptor);
        verifySameType(object, property, replacement);
        verifyNotReplaced(object, property);
        push(fakeRestorers, getFakeRestorer(object, property));
        object[property] = replacement;
        return replacement;
      };
      sandbox.replace.usingAccessor = function replaceUsingAccessor(object, property, replacement) {
        const descriptor = getPropertyDescriptor(object, property);
        checkForValidArguments(descriptor, property, replacement);
        verifySameType(object, property, replacement);
        verifyNotReplaced(object, property);
        push(fakeRestorers, getFakeRestorer(object, property, true));
        object[property] = replacement;
        return replacement;
      };
      sandbox.define = function define2(object, property, value) {
        const descriptor = getPropertyDescriptor(object, property);
        if (descriptor) {
          throw new TypeError(`Cannot define the already existing property ${valueToString(property)}. Perhaps you meant sandbox.replace()?`);
        }
        if (typeof value === "undefined") {
          throw new TypeError("Expected value argument to be defined");
        }
        verifyNotReplaced(object, property);
        push(fakeRestorers, getFakeRestorer(object, property));
        object[property] = value;
        return value;
      };
      sandbox.replaceGetter = function replaceGetter(object, property, replacement) {
        const descriptor = getPropertyDescriptor(object, property);
        if (typeof descriptor === "undefined") {
          throw new TypeError(`Cannot replace non-existent property ${valueToString(property)}`);
        }
        if (typeof replacement !== "function") {
          throw new TypeError("Expected replacement argument to be a function");
        }
        if (typeof descriptor.get !== "function") {
          throw new Error("`object.property` is not a getter");
        }
        verifyNotReplaced(object, property);
        push(fakeRestorers, getFakeRestorer(object, property));
        Object.defineProperty(object, property, {
          get: replacement,
          configurable: isPropertyConfigurable(object, property)
        });
        return replacement;
      };
      sandbox.replaceSetter = function replaceSetter(object, property, replacement) {
        const descriptor = getPropertyDescriptor(object, property);
        if (typeof descriptor === "undefined") {
          throw new TypeError(`Cannot replace non-existent property ${valueToString(property)}`);
        }
        if (typeof replacement !== "function") {
          throw new TypeError("Expected replacement argument to be a function");
        }
        if (typeof descriptor.set !== "function") {
          throw new Error("`object.property` is not a setter");
        }
        verifyNotReplaced(object, property);
        push(fakeRestorers, getFakeRestorer(object, property));
        Object.defineProperty(object, property, {
          set: replacement,
          configurable: isPropertyConfigurable(object, property)
        });
        return replacement;
      };
      function commonPostInitSetup(args, spy) {
        const [object, property, types] = args;
        const isSpyingOnEntireObject = typeof property === "undefined" && typeof object === "object";
        if (isSpyingOnEntireObject) {
          const ownMethods = collectOwnMethods(spy);
          forEach(ownMethods, function(method) {
            addToCollection(method);
          });
        } else if (Array.isArray(types)) {
          for (const accessorType of types) {
            addToCollection(spy[accessorType]);
          }
        } else {
          addToCollection(spy);
        }
        return spy;
      }
      sandbox.spy = function spy() {
        const createdSpy = sinonSpy.apply(sinonSpy, arguments);
        return commonPostInitSetup(arguments, createdSpy);
      };
      sandbox.stub = function stub() {
        const createdStub = sinonStub.apply(sinonStub, arguments);
        return commonPostInitSetup(arguments, createdStub);
      };
      sandbox.fake = function fake(f) {
        const s = sinonFake.apply(sinonFake, arguments);
        addToCollection(s);
        return s;
      };
      forEach(Object.keys(sinonFake), function(key) {
        const fakeBehavior = sinonFake[key];
        if (typeof fakeBehavior === "function") {
          sandbox.fake[key] = function() {
            const s = fakeBehavior.apply(fakeBehavior, arguments);
            addToCollection(s);
            return s;
          };
        }
      });
      sandbox.useFakeTimers = function useFakeTimers(args) {
        const clock = sinonClock.useFakeTimers.call(null, args);
        sandbox.clock = clock;
        addToCollection(clock);
        return clock;
      };
      sandbox.verify = function verify() {
        applyOnEach(collection, "verify");
      };
      sandbox.verifyAndRestore = function verifyAndRestore() {
        let exception;
        try {
          sandbox.verify();
        } catch (e) {
          exception = e;
        }
        sandbox.restore();
        if (exception) {
          throw exception;
        }
      };
    }
    Sandbox.prototype.match = match;
    module.exports = Sandbox;
  }, {
    "./assert": 4,
    "./collect-own-methods": 6,
    "./create-stub-instance": 9,
    "./fake": 11,
    "./mock": 13,
    "./spy": 22,
    "./stub": 23,
    "./util/core/get-property-descriptor": 29,
    "./util/core/is-property-configurable": 32,
    "./util/fake-timers": 40,
    "@sinonjs/commons": 47,
    "@sinonjs/samsam": 87
  }],
  21: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const Colorizer = require2("./colorizer");
    const colororizer = new Colorizer();
    const match = require2("@sinonjs/samsam").createMatcher;
    const timesInWords = require2("./util/core/times-in-words");
    const inspect = require2("util").inspect;
    const jsDiff = require2("diff");
    const join = arrayProto.join;
    const map = arrayProto.map;
    const push = arrayProto.push;
    const slice = arrayProto.slice;
    function colorSinonMatchText(matcher, calledArg, calledArgMessage) {
      let calledArgumentMessage = calledArgMessage;
      let matcherMessage = matcher.message;
      if (!matcher.test(calledArg)) {
        matcherMessage = colororizer.red(matcher.message);
        if (calledArgumentMessage) {
          calledArgumentMessage = colororizer.green(calledArgumentMessage);
        }
      }
      return `${calledArgumentMessage} ${matcherMessage}`;
    }
    function colorDiffText(diff) {
      const objects = map(diff, function(part) {
        let text = part.value;
        if (part.added) {
          text = colororizer.green(text);
        } else if (part.removed) {
          text = colororizer.red(text);
        }
        if (diff.length === 2) {
          text += " ";
        }
        return text;
      });
      return join(objects, "");
    }
    function quoteStringValue(value) {
      if (typeof value === "string") {
        return JSON.stringify(value);
      }
      return value;
    }
    module.exports = {
      c: function(spyInstance) {
        return timesInWords(spyInstance.callCount);
      },
      n: function(spyInstance) {
        return spyInstance.toString();
      },
      D: function(spyInstance, args) {
        let message = "";
        for (let i = 0, l = spyInstance.callCount; i < l; ++i) {
          if (l > 1) {
            message += `
Call ${i + 1}:`;
          }
          const calledArgs = spyInstance.getCall(i).args;
          const expectedArgs = slice(args);
          for (let j = 0; j < calledArgs.length || j < expectedArgs.length; ++j) {
            let calledArg = calledArgs[j];
            let expectedArg = expectedArgs[j];
            if (calledArg) {
              calledArg = quoteStringValue(calledArg);
            }
            if (expectedArg) {
              expectedArg = quoteStringValue(expectedArg);
            }
            message += "\n";
            const calledArgMessage = j < calledArgs.length ? inspect(calledArg) : "";
            if (match.isMatcher(expectedArg)) {
              message += colorSinonMatchText(expectedArg, calledArg, calledArgMessage);
            } else {
              const expectedArgMessage = j < expectedArgs.length ? inspect(expectedArg) : "";
              const diff = jsDiff.diffJson(calledArgMessage, expectedArgMessage);
              message += colorDiffText(diff);
            }
          }
        }
        return message;
      },
      C: function(spyInstance) {
        const calls = [];
        for (let i = 0, l = spyInstance.callCount; i < l; ++i) {
          let stringifiedCall = `    ${spyInstance.getCall(i).toString()}`;
          if (/\n/.test(calls[i - 1])) {
            stringifiedCall = `
${stringifiedCall}`;
          }
          push(calls, stringifiedCall);
        }
        return calls.length > 0 ? `
${join(calls, "\n")}` : "";
      },
      t: function(spyInstance) {
        const objects = [];
        for (let i = 0, l = spyInstance.callCount; i < l; ++i) {
          push(objects, inspect(spyInstance.thisValues[i]));
        }
        return join(objects, ", ");
      },
      "*": function(spyInstance, args) {
        return join(map(args, function(arg) {
          return inspect(arg);
        }), ", ");
      }
    };
  }, {
    "./colorizer": 7,
    "./util/core/times-in-words": 36,
    "@sinonjs/commons": 47,
    "@sinonjs/samsam": 87,
    "diff": 92,
    "util": 91
  }],
  22: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const createProxy = require2("./proxy");
    const extend = require2("./util/core/extend");
    const functionName = require2("@sinonjs/commons").functionName;
    const getPropertyDescriptor = require2("./util/core/get-property-descriptor");
    const deepEqual = require2("@sinonjs/samsam").deepEqual;
    const isEsModule = require2("./util/core/is-es-module");
    const proxyCallUtil = require2("./proxy-call-util");
    const walkObject = require2("./util/core/walk-object");
    const wrapMethod = require2("./util/core/wrap-method");
    const valueToString = require2("@sinonjs/commons").valueToString;
    const forEach = arrayProto.forEach;
    const pop = arrayProto.pop;
    const push = arrayProto.push;
    const slice = arrayProto.slice;
    const filter = Array.prototype.filter;
    let uuid = 0;
    function matches(fake, args, strict) {
      const margs = fake.matchingArguments;
      if (margs.length <= args.length && deepEqual(slice(args, 0, margs.length), margs)) {
        return !strict || margs.length === args.length;
      }
      return false;
    }
    const spyApi = {
      withArgs: function() {
        const args = slice(arguments);
        const matching = pop(this.matchingFakes(args, true));
        if (matching) {
          return matching;
        }
        const original = this;
        const fake = this.instantiateFake();
        fake.matchingArguments = args;
        fake.parent = this;
        push(this.fakes, fake);
        fake.withArgs = function() {
          return original.withArgs.apply(original, arguments);
        };
        forEach(original.args, function(arg, i) {
          if (!matches(fake, arg)) {
            return;
          }
          proxyCallUtil.incrementCallCount(fake);
          push(fake.thisValues, original.thisValues[i]);
          push(fake.args, arg);
          push(fake.returnValues, original.returnValues[i]);
          push(fake.exceptions, original.exceptions[i]);
          push(fake.callIds, original.callIds[i]);
        });
        proxyCallUtil.createCallProperties(fake);
        return fake;
      },
      // Override proxy default implementation
      matchingFakes: function(args, strict) {
        return filter.call(this.fakes, function(fake) {
          return matches(fake, args, strict);
        });
      }
    };
    const delegateToCalls = proxyCallUtil.delegateToCalls;
    delegateToCalls(spyApi, "callArg", false, "callArgWith", true, function() {
      throw new Error(`${this.toString()} cannot call arg since it was not yet invoked.`);
    });
    spyApi.callArgWith = spyApi.callArg;
    delegateToCalls(spyApi, "callArgOn", false, "callArgOnWith", true, function() {
      throw new Error(`${this.toString()} cannot call arg since it was not yet invoked.`);
    });
    spyApi.callArgOnWith = spyApi.callArgOn;
    delegateToCalls(spyApi, "throwArg", false, "throwArg", false, function() {
      throw new Error(`${this.toString()} cannot throw arg since it was not yet invoked.`);
    });
    delegateToCalls(spyApi, "yield", false, "yield", true, function() {
      throw new Error(`${this.toString()} cannot yield since it was not yet invoked.`);
    });
    spyApi.invokeCallback = spyApi.yield;
    delegateToCalls(spyApi, "yieldOn", false, "yieldOn", true, function() {
      throw new Error(`${this.toString()} cannot yield since it was not yet invoked.`);
    });
    delegateToCalls(spyApi, "yieldTo", false, "yieldTo", true, function(property) {
      throw new Error(`${this.toString()} cannot yield to '${valueToString(property)}' since it was not yet invoked.`);
    });
    delegateToCalls(spyApi, "yieldToOn", false, "yieldToOn", true, function(property) {
      throw new Error(`${this.toString()} cannot yield to '${valueToString(property)}' since it was not yet invoked.`);
    });
    function createSpy(func) {
      let name;
      let funk = func;
      if (typeof funk !== "function") {
        funk = function() {
          return;
        };
      } else {
        name = functionName(funk);
      }
      const proxy = createProxy(funk, funk);
      extend.nonEnum(proxy, spyApi);
      extend.nonEnum(proxy, {
        displayName: name || "spy",
        fakes: [],
        instantiateFake: createSpy,
        id: `spy#${uuid++}`
      });
      return proxy;
    }
    function spy(object, property, types) {
      if (isEsModule(object)) {
        throw new TypeError("ES Modules cannot be spied");
      }
      if (!property && typeof object === "function") {
        return createSpy(object);
      }
      if (!property && typeof object === "object") {
        return walkObject(spy, object);
      }
      if (!object && !property) {
        return createSpy(function() {
          return;
        });
      }
      if (!types) {
        return wrapMethod(object, property, createSpy(object[property]));
      }
      const descriptor = {};
      const methodDesc = getPropertyDescriptor(object, property);
      forEach(types, function(type) {
        descriptor[type] = createSpy(methodDesc[type]);
      });
      return wrapMethod(object, property, descriptor);
    }
    extend(spy, spyApi);
    module.exports = spy;
  }, {
    "./proxy": 18,
    "./proxy-call-util": 15,
    "./util/core/extend": 26,
    "./util/core/get-property-descriptor": 29,
    "./util/core/is-es-module": 30,
    "./util/core/walk-object": 37,
    "./util/core/wrap-method": 39,
    "@sinonjs/commons": 47,
    "@sinonjs/samsam": 87
  }],
  23: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const behavior = require2("./behavior");
    const behaviors = require2("./default-behaviors");
    const createProxy = require2("./proxy");
    const functionName = require2("@sinonjs/commons").functionName;
    const hasOwnProperty = require2("@sinonjs/commons").prototypes.object.hasOwnProperty;
    const isNonExistentProperty = require2("./util/core/is-non-existent-property");
    const spy = require2("./spy");
    const extend = require2("./util/core/extend");
    const getPropertyDescriptor = require2("./util/core/get-property-descriptor");
    const isEsModule = require2("./util/core/is-es-module");
    const sinonType = require2("./util/core/sinon-type");
    const wrapMethod = require2("./util/core/wrap-method");
    const throwOnFalsyObject = require2("./throw-on-falsy-object");
    const valueToString = require2("@sinonjs/commons").valueToString;
    const walkObject = require2("./util/core/walk-object");
    const forEach = arrayProto.forEach;
    const pop = arrayProto.pop;
    const slice = arrayProto.slice;
    const sort = arrayProto.sort;
    let uuid = 0;
    function createStub(originalFunc) {
      let proxy;
      function functionStub() {
        const args = slice(arguments);
        const matchings = proxy.matchingFakes(args);
        const fnStub = pop(sort(matchings, function(a, b) {
          return a.matchingArguments.length - b.matchingArguments.length;
        })) || proxy;
        return getCurrentBehavior(fnStub).invoke(this, arguments);
      }
      proxy = createProxy(functionStub, originalFunc || functionStub);
      extend.nonEnum(proxy, spy);
      extend.nonEnum(proxy, stub);
      const name = originalFunc ? functionName(originalFunc) : null;
      extend.nonEnum(proxy, {
        fakes: [],
        instantiateFake: createStub,
        displayName: name || "stub",
        defaultBehavior: null,
        behaviors: [],
        id: `stub#${uuid++}`
      });
      sinonType.set(proxy, "stub");
      return proxy;
    }
    function stub(object, property) {
      if (arguments.length > 2) {
        throw new TypeError("stub(obj, 'meth', fn) has been removed, see documentation");
      }
      if (isEsModule(object)) {
        throw new TypeError("ES Modules cannot be stubbed");
      }
      throwOnFalsyObject.apply(null, arguments);
      if (isNonExistentProperty(object, property)) {
        throw new TypeError(`Cannot stub non-existent property ${valueToString(property)}`);
      }
      const actualDescriptor = getPropertyDescriptor(object, property);
      assertValidPropertyDescriptor(actualDescriptor, property);
      const isObjectOrFunction = typeof object === "object" || typeof object === "function";
      const isStubbingEntireObject = typeof property === "undefined" && isObjectOrFunction;
      const isCreatingNewStub = !object && typeof property === "undefined";
      const isStubbingNonFuncProperty = isObjectOrFunction && typeof property !== "undefined" && (typeof actualDescriptor === "undefined" || typeof actualDescriptor.value !== "function");
      if (isStubbingEntireObject) {
        return walkObject(stub, object);
      }
      if (isCreatingNewStub) {
        return createStub();
      }
      const func = typeof actualDescriptor.value === "function" ? actualDescriptor.value : null;
      const s = createStub(func);
      extend.nonEnum(s, {
        rootObj: object,
        propName: property,
        shadowsPropOnPrototype: !actualDescriptor.isOwn,
        restore: function restore() {
          if (actualDescriptor !== void 0 && actualDescriptor.isOwn) {
            Object.defineProperty(object, property, actualDescriptor);
            return;
          }
          delete object[property];
        }
      });
      return isStubbingNonFuncProperty ? s : wrapMethod(object, property, s);
    }
    function assertValidPropertyDescriptor(descriptor, property) {
      if (!descriptor || !property) {
        return;
      }
      if (descriptor.isOwn && !descriptor.configurable && !descriptor.writable) {
        throw new TypeError(`Descriptor for property ${property} is non-configurable and non-writable`);
      }
      if ((descriptor.get || descriptor.set) && !descriptor.configurable) {
        throw new TypeError(`Descriptor for accessor property ${property} is non-configurable`);
      }
      if (isDataDescriptor(descriptor) && !descriptor.writable) {
        throw new TypeError(`Descriptor for data property ${property} is non-writable`);
      }
    }
    function isDataDescriptor(descriptor) {
      return !descriptor.value && !descriptor.writable && !descriptor.set && !descriptor.get;
    }
    function getParentBehaviour(stubInstance) {
      return stubInstance.parent && getCurrentBehavior(stubInstance.parent);
    }
    function getDefaultBehavior(stubInstance) {
      return stubInstance.defaultBehavior || getParentBehaviour(stubInstance) || behavior.create(stubInstance);
    }
    function getCurrentBehavior(stubInstance) {
      const currentBehavior = stubInstance.behaviors[stubInstance.callCount - 1];
      return currentBehavior && currentBehavior.isPresent() ? currentBehavior : getDefaultBehavior(stubInstance);
    }
    const proto = {
      resetBehavior: function() {
        this.defaultBehavior = null;
        this.behaviors = [];
        delete this.returnValue;
        delete this.returnArgAt;
        delete this.throwArgAt;
        delete this.resolveArgAt;
        delete this.fakeFn;
        this.returnThis = false;
        this.resolveThis = false;
        forEach(this.fakes, function(fake) {
          fake.resetBehavior();
        });
      },
      reset: function() {
        this.resetHistory();
        this.resetBehavior();
      },
      onCall: function onCall(index) {
        if (!this.behaviors[index]) {
          this.behaviors[index] = behavior.create(this);
        }
        return this.behaviors[index];
      },
      onFirstCall: function onFirstCall() {
        return this.onCall(0);
      },
      onSecondCall: function onSecondCall() {
        return this.onCall(1);
      },
      onThirdCall: function onThirdCall() {
        return this.onCall(2);
      },
      withArgs: function withArgs() {
        const fake = spy.withArgs.apply(this, arguments);
        if (this.defaultBehavior && this.defaultBehavior.promiseLibrary) {
          fake.defaultBehavior = fake.defaultBehavior || behavior.create(fake);
          fake.defaultBehavior.promiseLibrary = this.defaultBehavior.promiseLibrary;
        }
        return fake;
      }
    };
    forEach(Object.keys(behavior), function(method) {
      if (hasOwnProperty(behavior, method) && !hasOwnProperty(proto, method) && method !== "create" && method !== "invoke") {
        proto[method] = behavior.createBehavior(method);
      }
    });
    forEach(Object.keys(behaviors), function(method) {
      if (hasOwnProperty(behaviors, method) && !hasOwnProperty(proto, method)) {
        behavior.addBehavior(stub, method, behaviors[method]);
      }
    });
    extend(stub, proto);
    module.exports = stub;
  }, {
    "./behavior": 5,
    "./default-behaviors": 10,
    "./proxy": 18,
    "./spy": 22,
    "./throw-on-falsy-object": 24,
    "./util/core/extend": 26,
    "./util/core/get-property-descriptor": 29,
    "./util/core/is-es-module": 30,
    "./util/core/is-non-existent-property": 31,
    "./util/core/sinon-type": 35,
    "./util/core/walk-object": 37,
    "./util/core/wrap-method": 39,
    "@sinonjs/commons": 47
  }],
  24: [function(require2, module, exports) {
    const valueToString = require2("@sinonjs/commons").valueToString;
    function throwOnFalsyObject(object, property) {
      if (property && !object) {
        const type = object === null ? "null" : "undefined";
        throw new Error(`Trying to stub property '${valueToString(property)}' of ${type}`);
      }
    }
    module.exports = throwOnFalsyObject;
  }, {
    "@sinonjs/commons": 47
  }],
  25: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const reduce = arrayProto.reduce;
    module.exports = function exportAsyncBehaviors(behaviorMethods) {
      return reduce(Object.keys(behaviorMethods), function(acc, method) {
        if (method.match(/^(callsArg|yields)/) && !method.match(/Async/)) {
          acc[`${method}Async`] = function() {
            const result = behaviorMethods[method].apply(this, arguments);
            this.callbackAsync = true;
            return result;
          };
        }
        return acc;
      }, {});
    };
  }, {
    "@sinonjs/commons": 47
  }],
  26: [function(require2, module, exports) {
    const arrayProto = require2("@sinonjs/commons").prototypes.array;
    const hasOwnProperty = require2("@sinonjs/commons").prototypes.object.hasOwnProperty;
    const join = arrayProto.join;
    const push = arrayProto.push;
    const hasDontEnumBug = function() {
      const obj = {
        constructor: function() {
          return "0";
        },
        toString: function() {
          return "1";
        },
        valueOf: function() {
          return "2";
        },
        toLocaleString: function() {
          return "3";
        },
        prototype: function() {
          return "4";
        },
        isPrototypeOf: function() {
          return "5";
        },
        propertyIsEnumerable: function() {
          return "6";
        },
        hasOwnProperty: function() {
          return "7";
        },
        length: function() {
          return "8";
        },
        unique: function() {
          return "9";
        }
      };
      const result = [];
      for (const prop in obj) {
        if (hasOwnProperty(obj, prop)) {
          push(result, obj[prop]());
        }
      }
      return join(result, "") !== "0123456789";
    }();
    function extendCommon(target, sources, doCopy) {
      let source, i, prop;
      for (i = 0; i < sources.length; i++) {
        source = sources[i];
        for (prop in source) {
          if (hasOwnProperty(source, prop)) {
            doCopy(target, source, prop);
          }
        }
        if (hasDontEnumBug && hasOwnProperty(source, "toString") && source.toString !== target.toString) {
          target.toString = source.toString;
        }
      }
      return target;
    }
    module.exports = function extend(target, ...sources) {
      return extendCommon(target, sources, function copyValue(dest, source, prop) {
        const destOwnPropertyDescriptor = Object.getOwnPropertyDescriptor(dest, prop);
        const sourceOwnPropertyDescriptor = Object.getOwnPropertyDescriptor(source, prop);
        if (prop === "name" && !destOwnPropertyDescriptor.writable) {
          return;
        }
        const descriptors = {
          configurable: sourceOwnPropertyDescriptor.configurable,
          enumerable: sourceOwnPropertyDescriptor.enumerable
        };
        if (hasOwnProperty(sourceOwnPropertyDescriptor, "writable")) {
          descriptors.writable = sourceOwnPropertyDescriptor.writable;
          descriptors.value = sourceOwnPropertyDescriptor.value;
        } else {
          if (sourceOwnPropertyDescriptor.get) {
            descriptors.get = sourceOwnPropertyDescriptor.get.bind(dest);
          }
          if (sourceOwnPropertyDescriptor.set) {
            descriptors.set = sourceOwnPropertyDescriptor.set.bind(dest);
          }
        }
        Object.defineProperty(dest, prop, descriptors);
      });
    };
    module.exports.nonEnum = function extendNonEnum(target, ...sources) {
      return extendCommon(target, sources, function copyProperty(dest, source, prop) {
        Object.defineProperty(dest, prop, {
          value: source[prop],
          enumerable: false,
          configurable: true,
          writable: true
        });
      });
    };
  }, {
    "@sinonjs/commons": 47
  }],
  27: [function(require2, module, exports) {
    module.exports = function toString() {
      let i, prop, thisValue;
      if (this.getCall && this.callCount) {
        i = this.callCount;
        while (i--) {
          thisValue = this.getCall(i).thisValue;
          for (prop in thisValue) {
            try {
              if (thisValue[prop] === this) {
                return prop;
              }
            } catch (e) {
            }
          }
        }
      }
      return this.displayName || "sinon fake";
    };
  }, {}],
  28: [function(require2, module, exports) {
    function nextTick(callback) {
      setTimeout(callback, 0);
    }
    module.exports = function getNextTick(process2, setImmediate) {
      if (typeof process2 === "object" && typeof process2.nextTick === "function") {
        return process2.nextTick;
      }
      if (typeof setImmediate === "function") {
        return setImmediate;
      }
      return nextTick;
    };
  }, {}],
  29: [function(require2, module, exports) {
    function getPropertyDescriptor(object, property) {
      let proto = object;
      let descriptor;
      const isOwn = Boolean(object && Object.getOwnPropertyDescriptor(object, property));
      while (proto && !(descriptor = Object.getOwnPropertyDescriptor(proto, property))) {
        proto = Object.getPrototypeOf(proto);
      }
      if (descriptor) {
        descriptor.isOwn = isOwn;
      }
      return descriptor;
    }
    module.exports = getPropertyDescriptor;
  }, {}],
  30: [function(require2, module, exports) {
    module.exports = function(object) {
      return object && typeof Symbol !== "undefined" && object[Symbol.toStringTag] === "Module" && Object.isSealed(object);
    };
  }, {}],
  31: [function(require2, module, exports) {
    function isNonExistentProperty(object, property) {
      return Boolean(object && typeof property !== "undefined" && !(property in object));
    }
    module.exports = isNonExistentProperty;
  }, {}],
  32: [function(require2, module, exports) {
    const getPropertyDescriptor = require2("./get-property-descriptor");
    function isPropertyConfigurable(obj, propName) {
      const propertyDescriptor = getPropertyDescriptor(obj, propName);
      return propertyDescriptor ? propertyDescriptor.configurable : true;
    }
    module.exports = isPropertyConfigurable;
  }, {
    "./get-property-descriptor": 29
  }],
  33: [function(require2, module, exports) {
    function isRestorable(obj) {
      return typeof obj === "function" && typeof obj.restore === "function" && obj.restore.sinon;
    }
    module.exports = isRestorable;
  }, {}],
  34: [function(require2, module, exports) {
    const globalObject = require2("@sinonjs/commons").global;
    const getNextTick = require2("./get-next-tick");
    module.exports = getNextTick(globalObject.process, globalObject.setImmediate);
  }, {
    "./get-next-tick": 28,
    "@sinonjs/commons": 47
  }],
  35: [function(require2, module, exports) {
    const sinonTypeSymbolProperty = Symbol("SinonType");
    module.exports = {
      /**
       * Set the type of a Sinon object to make it possible to identify it later at runtime
       *
       * @param {object|Function} object  object/function to set the type on
       * @param {string} type the named type of the object/function
       */
      set(object, type) {
        Object.defineProperty(object, sinonTypeSymbolProperty, {
          value: type,
          configurable: false,
          enumerable: false
        });
      },
      get(object) {
        return object && object[sinonTypeSymbolProperty];
      }
    };
  }, {}],
  36: [function(require2, module, exports) {
    const array = [null, "once", "twice", "thrice"];
    module.exports = function timesInWords(count) {
      return array[count] || `${count || 0} times`;
    };
  }, {}],
  37: [function(require2, module, exports) {
    const functionName = require2("@sinonjs/commons").functionName;
    const getPropertyDescriptor = require2("./get-property-descriptor");
    const walk = require2("./walk");
    function walkObject(mutator, object, filter) {
      let called = false;
      const name = functionName(mutator);
      if (!object) {
        throw new Error(`Trying to ${name} object but received ${String(object)}`);
      }
      walk(object, function(prop, propOwner) {
        if (propOwner !== Object.prototype && prop !== "constructor" && typeof getPropertyDescriptor(propOwner, prop).value === "function") {
          if (filter) {
            if (filter(object, prop)) {
              called = true;
              mutator(object, prop);
            }
          } else {
            called = true;
            mutator(object, prop);
          }
        }
      });
      if (!called) {
        throw new Error(`Found no methods on object to which we could apply mutations`);
      }
      return object;
    }
    module.exports = walkObject;
  }, {
    "./get-property-descriptor": 29,
    "./walk": 38,
    "@sinonjs/commons": 47
  }],
  38: [function(require2, module, exports) {
    const forEach = require2("@sinonjs/commons").prototypes.array.forEach;
    function walkInternal(obj, iterator, context, originalObj, seen) {
      let prop;
      const proto = Object.getPrototypeOf(obj);
      if (typeof Object.getOwnPropertyNames !== "function") {
        for (prop in obj) {
          iterator.call(context, obj[prop], prop, obj);
        }
        return;
      }
      forEach(Object.getOwnPropertyNames(obj), function(k) {
        if (seen[k] !== true) {
          seen[k] = true;
          const target = typeof Object.getOwnPropertyDescriptor(obj, k).get === "function" ? originalObj : obj;
          iterator.call(context, k, target);
        }
      });
      if (proto) {
        walkInternal(proto, iterator, context, originalObj, seen);
      }
    }
    module.exports = function walk(obj, iterator, context) {
      return walkInternal(obj, iterator, context, obj, {});
    };
  }, {
    "@sinonjs/commons": 47
  }],
  39: [function(require2, module, exports) {
    const noop = () => {
    };
    const getPropertyDescriptor = require2("./get-property-descriptor");
    const extend = require2("./extend");
    const sinonType = require2("./sinon-type");
    const hasOwnProperty = require2("@sinonjs/commons").prototypes.object.hasOwnProperty;
    const valueToString = require2("@sinonjs/commons").valueToString;
    const push = require2("@sinonjs/commons").prototypes.array.push;
    function isFunction(obj) {
      return typeof obj === "function" || Boolean(obj && obj.constructor && obj.call && obj.apply);
    }
    function mirrorProperties(target, source) {
      for (const prop in source) {
        if (!hasOwnProperty(target, prop)) {
          target[prop] = source[prop];
        }
      }
    }
    function getAccessor(object, property, method) {
      const accessors = ["get", "set"];
      const descriptor = getPropertyDescriptor(object, property);
      for (let i = 0; i < accessors.length; i++) {
        if (descriptor[accessors[i]] && descriptor[accessors[i]].name === method.name) {
          return accessors[i];
        }
      }
      return null;
    }
    const hasES5Support = "keys" in Object;
    module.exports = function wrapMethod(object, property, method) {
      if (!object) {
        throw new TypeError("Should wrap property of object");
      }
      if (typeof method !== "function" && typeof method !== "object") {
        throw new TypeError("Method wrapper should be a function or a property descriptor");
      }
      function checkWrappedMethod(wrappedMethod2) {
        let error2;
        if (!isFunction(wrappedMethod2)) {
          error2 = new TypeError(`Attempted to wrap ${typeof wrappedMethod2} property ${valueToString(property)} as function`);
        } else if (wrappedMethod2.restore && wrappedMethod2.restore.sinon) {
          error2 = new TypeError(`Attempted to wrap ${valueToString(property)} which is already wrapped`);
        } else if (wrappedMethod2.calledBefore) {
          const verb = wrappedMethod2.returns ? "stubbed" : "spied on";
          error2 = new TypeError(`Attempted to wrap ${valueToString(property)} which is already ${verb}`);
        }
        if (error2) {
          if (wrappedMethod2 && wrappedMethod2.stackTraceError) {
            error2.stack += `
--------------
${wrappedMethod2.stackTraceError.stack}`;
          }
          throw error2;
        }
      }
      let error, wrappedMethod, i, wrappedMethodDesc, target, accessor;
      const wrappedMethods = [];
      function simplePropertyAssignment() {
        wrappedMethod = object[property];
        checkWrappedMethod(wrappedMethod);
        object[property] = method;
        method.displayName = property;
      }
      const owned = object.hasOwnProperty ? object.hasOwnProperty(property) : hasOwnProperty(object, property);
      if (hasES5Support) {
        const methodDesc = typeof method === "function" ? {
          value: method
        } : method;
        wrappedMethodDesc = getPropertyDescriptor(object, property);
        if (!wrappedMethodDesc) {
          error = new TypeError(`Attempted to wrap ${typeof wrappedMethod} property ${property} as function`);
        } else if (wrappedMethodDesc.restore && wrappedMethodDesc.restore.sinon) {
          error = new TypeError(`Attempted to wrap ${property} which is already wrapped`);
        }
        if (error) {
          if (wrappedMethodDesc && wrappedMethodDesc.stackTraceError) {
            error.stack += `
--------------
${wrappedMethodDesc.stackTraceError.stack}`;
          }
          throw error;
        }
        const types = Object.keys(methodDesc);
        for (i = 0; i < types.length; i++) {
          wrappedMethod = wrappedMethodDesc[types[i]];
          checkWrappedMethod(wrappedMethod);
          push(wrappedMethods, wrappedMethod);
        }
        mirrorProperties(methodDesc, wrappedMethodDesc);
        for (i = 0; i < types.length; i++) {
          mirrorProperties(methodDesc[types[i]], wrappedMethodDesc[types[i]]);
        }
        if (!owned) {
          methodDesc.configurable = true;
        }
        Object.defineProperty(object, property, methodDesc);
        if (typeof method === "function" && object[property] !== method) {
          delete object[property];
          simplePropertyAssignment();
        }
      } else {
        simplePropertyAssignment();
      }
      extendObjectWithWrappedMethods();
      function extendObjectWithWrappedMethods() {
        for (i = 0; i < wrappedMethods.length; i++) {
          accessor = getAccessor(object, property, wrappedMethods[i]);
          target = accessor ? method[accessor] : method;
          extend.nonEnum(target, {
            displayName: property,
            wrappedMethod: wrappedMethods[i],
            // Set up an Error object for a stack trace which can be used later to find what line of
            // code the original method was created on.
            stackTraceError: new Error("Stack Trace for original"),
            restore
          });
          target.restore.sinon = true;
          if (!hasES5Support) {
            mirrorProperties(target, wrappedMethod);
          }
        }
      }
      function restore() {
        accessor = getAccessor(object, property, this.wrappedMethod);
        let descriptor;
        if (accessor) {
          if (!owned) {
            try {
              delete object[property][accessor];
            } catch (e) {
            }
          } else if (hasES5Support) {
            descriptor = getPropertyDescriptor(object, property);
            descriptor[accessor] = wrappedMethodDesc[accessor];
            Object.defineProperty(object, property, descriptor);
          }
          if (hasES5Support) {
            descriptor = getPropertyDescriptor(object, property);
            if (descriptor && descriptor.value === target) {
              object[property][accessor] = this.wrappedMethod;
            }
          } else {
            if (object[property][accessor] === target) {
              object[property][accessor] = this.wrappedMethod;
            }
          }
        } else {
          if (!owned) {
            try {
              delete object[property];
            } catch (e) {
            }
          } else if (hasES5Support) {
            Object.defineProperty(object, property, wrappedMethodDesc);
          }
          if (hasES5Support) {
            descriptor = getPropertyDescriptor(object, property);
            if (descriptor && descriptor.value === target) {
              object[property] = this.wrappedMethod;
            }
          } else {
            if (object[property] === target) {
              object[property] = this.wrappedMethod;
            }
          }
        }
        if (sinonType.get(object) === "stub-instance") {
          object[property] = noop;
        }
      }
      return method;
    };
  }, {
    "./extend": 26,
    "./get-property-descriptor": 29,
    "./sinon-type": 35,
    "@sinonjs/commons": 47
  }],
  40: [function(require2, module, exports) {
    const extend = require2("./core/extend");
    const FakeTimers = require2("@sinonjs/fake-timers");
    const globalObject = require2("@sinonjs/commons").global;
    function createClock(config, globalCtx) {
      let FakeTimersCtx = FakeTimers;
      if (globalCtx !== null && typeof globalCtx === "object") {
        FakeTimersCtx = FakeTimers.withGlobal(globalCtx);
      }
      const clock = FakeTimersCtx.install(config);
      clock.restore = clock.uninstall;
      return clock;
    }
    function addIfDefined(obj, globalPropName) {
      const globalProp = globalObject[globalPropName];
      if (typeof globalProp !== "undefined") {
        obj[globalPropName] = globalProp;
      }
    }
    exports.useFakeTimers = function(dateOrConfig) {
      const hasArguments = typeof dateOrConfig !== "undefined";
      const argumentIsDateLike = (typeof dateOrConfig === "number" || dateOrConfig instanceof Date) && arguments.length === 1;
      const argumentIsObject = dateOrConfig !== null && typeof dateOrConfig === "object" && arguments.length === 1;
      if (!hasArguments) {
        return createClock({
          now: 0
        });
      }
      if (argumentIsDateLike) {
        return createClock({
          now: dateOrConfig
        });
      }
      if (argumentIsObject) {
        const config = extend.nonEnum({}, dateOrConfig);
        const globalCtx = config.global;
        delete config.global;
        return createClock(config, globalCtx);
      }
      throw new TypeError("useFakeTimers expected epoch or config object. See https://github.com/sinonjs/sinon");
    };
    exports.clock = {
      create: function(now) {
        return FakeTimers.createClock(now);
      }
    };
    const timers = {
      setTimeout,
      clearTimeout,
      setInterval,
      clearInterval,
      Date
    };
    addIfDefined(timers, "setImmediate");
    addIfDefined(timers, "clearImmediate");
    exports.timers = timers;
  }, {
    "./core/extend": 26,
    "@sinonjs/commons": 47,
    "@sinonjs/fake-timers": 60
  }],
  41: [function(require2, module, exports) {
    var every = require2("./prototypes/array").every;
    function hasCallsLeft(callMap, spy) {
      if (callMap[spy.id] === void 0) {
        callMap[spy.id] = 0;
      }
      return callMap[spy.id] < spy.callCount;
    }
    function checkAdjacentCalls(callMap, spy, index, spies) {
      var calledBeforeNext = true;
      if (index !== spies.length - 1) {
        calledBeforeNext = spy.calledBefore(spies[index + 1]);
      }
      if (hasCallsLeft(callMap, spy) && calledBeforeNext) {
        callMap[spy.id] += 1;
        return true;
      }
      return false;
    }
    function calledInOrder(spies) {
      var callMap = {};
      var _spies = arguments.length > 1 ? arguments : spies;
      return every(_spies, checkAdjacentCalls.bind(null, callMap));
    }
    module.exports = calledInOrder;
  }, {
    "./prototypes/array": 49
  }],
  42: [function(require2, module, exports) {
    function className(value) {
      const name = value.constructor && value.constructor.name;
      return name || null;
    }
    module.exports = className;
  }, {}],
  43: [function(require2, module, exports) {
    exports.wrap = function(func, msg) {
      var wrapped = function() {
        exports.printWarning(msg);
        return func.apply(this, arguments);
      };
      if (func.prototype) {
        wrapped.prototype = func.prototype;
      }
      return wrapped;
    };
    exports.defaultMsg = function(packageName, funcName) {
      return `${packageName}.${funcName} is deprecated and will be removed from the public API in a future version of ${packageName}.`;
    };
    exports.printWarning = function(msg) {
      if (typeof process === "object" && process.emitWarning) {
        process.emitWarning(msg);
      } else if (console.info) {
        console.info(msg);
      } else {
        console.log(msg);
      }
    };
  }, {}],
  44: [function(require2, module, exports) {
    module.exports = function every(obj, fn) {
      var pass = true;
      try {
        obj.forEach(function() {
          if (!fn.apply(this, arguments)) {
            throw new Error();
          }
        });
      } catch (e) {
        pass = false;
      }
      return pass;
    };
  }, {}],
  45: [function(require2, module, exports) {
    module.exports = function functionName(func) {
      if (!func) {
        return "";
      }
      try {
        return func.displayName || func.name || // Use function decomposition as a last resort to get function
        // name. Does not rely on function decomposition to work - if it
        // doesn't debugging will be slightly less informative
        // (i.e. toString will say 'spy' rather than 'myFunc').
        (String(func).match(/function ([^\s(]+)/) || [])[1];
      } catch (e) {
        return "";
      }
    };
  }, {}],
  46: [function(require2, module, exports) {
    var globalObject;
    if (typeof global !== "undefined") {
      globalObject = global;
    } else if (typeof window !== "undefined") {
      globalObject = window;
    } else {
      globalObject = self;
    }
    module.exports = globalObject;
  }, {}],
  47: [function(require2, module, exports) {
    module.exports = {
      global: require2("./global"),
      calledInOrder: require2("./called-in-order"),
      className: require2("./class-name"),
      deprecated: require2("./deprecated"),
      every: require2("./every"),
      functionName: require2("./function-name"),
      orderByFirstCall: require2("./order-by-first-call"),
      prototypes: require2("./prototypes"),
      typeOf: require2("./type-of"),
      valueToString: require2("./value-to-string")
    };
  }, {
    "./called-in-order": 41,
    "./class-name": 42,
    "./deprecated": 43,
    "./every": 44,
    "./function-name": 45,
    "./global": 46,
    "./order-by-first-call": 48,
    "./prototypes": 52,
    "./type-of": 58,
    "./value-to-string": 59
  }],
  48: [function(require2, module, exports) {
    var sort = require2("./prototypes/array").sort;
    var slice = require2("./prototypes/array").slice;
    function comparator(a, b) {
      var aCall = a.getCall(0);
      var bCall = b.getCall(0);
      var aId = aCall && aCall.callId || -1;
      var bId = bCall && bCall.callId || -1;
      return aId < bId ? -1 : 1;
    }
    function orderByFirstCall(spies) {
      return sort(slice(spies), comparator);
    }
    module.exports = orderByFirstCall;
  }, {
    "./prototypes/array": 49
  }],
  49: [function(require2, module, exports) {
    var copyPrototype = require2("./copy-prototype-methods");
    module.exports = copyPrototype(Array.prototype);
  }, {
    "./copy-prototype-methods": 50
  }],
  50: [function(require2, module, exports) {
    var call = Function.call;
    var throwsOnProto = require2("./throws-on-proto");
    var disallowedProperties = [
      // ignore size because it throws from Map
      "size",
      "caller",
      "callee",
      "arguments"
    ];
    if (throwsOnProto) {
      disallowedProperties.push("__proto__");
    }
    module.exports = function copyPrototypeMethods(prototype) {
      return Object.getOwnPropertyNames(prototype).reduce(function(result, name) {
        if (disallowedProperties.includes(name)) {
          return result;
        }
        if (typeof prototype[name] !== "function") {
          return result;
        }
        result[name] = call.bind(prototype[name]);
        return result;
      }, /* @__PURE__ */ Object.create(null));
    };
  }, {
    "./throws-on-proto": 57
  }],
  51: [function(require2, module, exports) {
    var copyPrototype = require2("./copy-prototype-methods");
    module.exports = copyPrototype(Function.prototype);
  }, {
    "./copy-prototype-methods": 50
  }],
  52: [function(require2, module, exports) {
    module.exports = {
      array: require2("./array"),
      function: require2("./function"),
      map: require2("./map"),
      object: require2("./object"),
      set: require2("./set"),
      string: require2("./string")
    };
  }, {
    "./array": 49,
    "./function": 51,
    "./map": 53,
    "./object": 54,
    "./set": 55,
    "./string": 56
  }],
  53: [function(require2, module, exports) {
    var copyPrototype = require2("./copy-prototype-methods");
    module.exports = copyPrototype(Map.prototype);
  }, {
    "./copy-prototype-methods": 50
  }],
  54: [function(require2, module, exports) {
    var copyPrototype = require2("./copy-prototype-methods");
    module.exports = copyPrototype(Object.prototype);
  }, {
    "./copy-prototype-methods": 50
  }],
  55: [function(require2, module, exports) {
    var copyPrototype = require2("./copy-prototype-methods");
    module.exports = copyPrototype(Set.prototype);
  }, {
    "./copy-prototype-methods": 50
  }],
  56: [function(require2, module, exports) {
    var copyPrototype = require2("./copy-prototype-methods");
    module.exports = copyPrototype(String.prototype);
  }, {
    "./copy-prototype-methods": 50
  }],
  57: [function(require2, module, exports) {
    let throwsOnProto;
    try {
      const object = {};
      object.__proto__;
      throwsOnProto = false;
    } catch (_) {
      throwsOnProto = true;
    }
    module.exports = throwsOnProto;
  }, {}],
  58: [function(require2, module, exports) {
    var type = require2("type-detect");
    module.exports = function typeOf(value) {
      return type(value).toLowerCase();
    };
  }, {
    "type-detect": 95
  }],
  59: [function(require2, module, exports) {
    function valueToString(value) {
      if (value && value.toString) {
        return value.toString();
      }
      return String(value);
    }
    module.exports = valueToString;
  }, {}],
  60: [function(require2, module, exports) {
    const globalObject = require2("@sinonjs/commons").global;
    let timersModule, timersPromisesModule;
    if (typeof require2 === "function" && typeof module === "object") {
      try {
        timersModule = require2("timers");
      } catch (e) {
      }
      try {
        timersPromisesModule = require2("timers/promises");
      } catch (e) {
      }
    }
    function withGlobal(_global) {
      const maxTimeout = Math.pow(2, 31) - 1;
      const idCounterStart = 1e12;
      const NOOP = function() {
        return void 0;
      };
      const NOOP_ARRAY = function() {
        return [];
      };
      const isPresent = {};
      let timeoutResult, addTimerReturnsObject = false;
      if (_global.setTimeout) {
        isPresent.setTimeout = true;
        timeoutResult = _global.setTimeout(NOOP, 0);
        addTimerReturnsObject = typeof timeoutResult === "object";
      }
      isPresent.clearTimeout = Boolean(_global.clearTimeout);
      isPresent.setInterval = Boolean(_global.setInterval);
      isPresent.clearInterval = Boolean(_global.clearInterval);
      isPresent.hrtime = _global.process && typeof _global.process.hrtime === "function";
      isPresent.hrtimeBigint = isPresent.hrtime && typeof _global.process.hrtime.bigint === "function";
      isPresent.nextTick = _global.process && typeof _global.process.nextTick === "function";
      const utilPromisify = _global.process && require2("util").promisify;
      isPresent.performance = _global.performance && typeof _global.performance.now === "function";
      const hasPerformancePrototype = _global.Performance && (typeof _global.Performance).match(/^(function|object)$/);
      const hasPerformanceConstructorPrototype = _global.performance && _global.performance.constructor && _global.performance.constructor.prototype;
      isPresent.queueMicrotask = _global.hasOwnProperty("queueMicrotask");
      isPresent.requestAnimationFrame = _global.requestAnimationFrame && typeof _global.requestAnimationFrame === "function";
      isPresent.cancelAnimationFrame = _global.cancelAnimationFrame && typeof _global.cancelAnimationFrame === "function";
      isPresent.requestIdleCallback = _global.requestIdleCallback && typeof _global.requestIdleCallback === "function";
      isPresent.cancelIdleCallbackPresent = _global.cancelIdleCallback && typeof _global.cancelIdleCallback === "function";
      isPresent.setImmediate = _global.setImmediate && typeof _global.setImmediate === "function";
      isPresent.clearImmediate = _global.clearImmediate && typeof _global.clearImmediate === "function";
      isPresent.Intl = _global.Intl && typeof _global.Intl === "object";
      if (_global.clearTimeout) {
        _global.clearTimeout(timeoutResult);
      }
      const NativeDate = _global.Date;
      const NativeIntl = _global.Intl;
      let uniqueTimerId = idCounterStart;
      if (NativeDate === void 0) {
        throw new Error("The global scope doesn't have a `Date` object (see https://github.com/sinonjs/sinon/issues/1852#issuecomment-419622780)");
      }
      isPresent.Date = true;
      class FakePerformanceEntry {
        constructor(name, entryType, startTime, duration) {
          this.name = name;
          this.entryType = entryType;
          this.startTime = startTime;
          this.duration = duration;
        }
        toJSON() {
          return JSON.stringify({
            ...this
          });
        }
      }
      function isNumberFinite(num) {
        if (Number.isFinite) {
          return Number.isFinite(num);
        }
        return isFinite(num);
      }
      let isNearInfiniteLimit = false;
      function checkIsNearInfiniteLimit(clock, i) {
        if (clock.loopLimit && i === clock.loopLimit - 1) {
          isNearInfiniteLimit = true;
        }
      }
      function resetIsNearInfiniteLimit() {
        isNearInfiniteLimit = false;
      }
      function parseTime(str) {
        if (!str) {
          return 0;
        }
        const strings = str.split(":");
        const l = strings.length;
        let i = l;
        let ms = 0;
        let parsed;
        if (l > 3 || !/^(\d\d:){0,2}\d\d?$/.test(str)) {
          throw new Error("tick only understands numbers, 'm:s' and 'h:m:s'. Each part must be two digits");
        }
        while (i--) {
          parsed = parseInt(strings[i], 10);
          if (parsed >= 60) {
            throw new Error(`Invalid time ${str}`);
          }
          ms += parsed * Math.pow(60, l - i - 1);
        }
        return ms * 1e3;
      }
      function nanoRemainder(msFloat) {
        const modulo = 1e6;
        const remainder = msFloat * 1e6 % modulo;
        const positiveRemainder = remainder < 0 ? remainder + modulo : remainder;
        return Math.floor(positiveRemainder);
      }
      function getEpoch(epoch) {
        if (!epoch) {
          return 0;
        }
        if (typeof epoch.getTime === "function") {
          return epoch.getTime();
        }
        if (typeof epoch === "number") {
          return epoch;
        }
        throw new TypeError("now should be milliseconds since UNIX epoch");
      }
      function inRange(from, to, timer) {
        return timer && timer.callAt >= from && timer.callAt <= to;
      }
      function getInfiniteLoopError(clock, job) {
        const infiniteLoopError = new Error(`Aborting after running ${clock.loopLimit} timers, assuming an infinite loop!`);
        if (!job.error) {
          return infiniteLoopError;
        }
        const computedTargetPattern = /target\.*[<|(|[].*?[>|\]|)]\s*/;
        let clockMethodPattern = new RegExp(String(Object.keys(clock).join("|")));
        if (addTimerReturnsObject) {
          clockMethodPattern = new RegExp(`\\s+at (Object\\.)?(?:${Object.keys(clock).join("|")})\\s+`);
        }
        let matchedLineIndex = -1;
        job.error.stack.split("\n").some(function(line, i) {
          const matchedComputedTarget = line.match(computedTargetPattern);
          if (matchedComputedTarget) {
            matchedLineIndex = i;
            return true;
          }
          const matchedClockMethod = line.match(clockMethodPattern);
          if (matchedClockMethod) {
            matchedLineIndex = i;
            return false;
          }
          return matchedLineIndex >= 0;
        });
        const stack = `${infiniteLoopError}
${job.type || "Microtask"} - ${job.func.name || "anonymous"}
${job.error.stack.split("\n").slice(matchedLineIndex + 1).join("\n")}`;
        try {
          Object.defineProperty(infiniteLoopError, "stack", {
            value: stack
          });
        } catch (e) {
        }
        return infiniteLoopError;
      }
      function createDate() {
        class ClockDate extends NativeDate {
          /**
           * @param {number} year
           * @param {number} month
           * @param {number} date
           * @param {number} hour
           * @param {number} minute
           * @param {number} second
           * @param {number} ms
           * @returns void
           */
          // eslint-disable-next-line no-unused-vars
          constructor(year, month, date, hour, minute, second, ms) {
            if (arguments.length === 0) {
              super(ClockDate.clock.now);
            } else {
              super(...arguments);
            }
            Object.defineProperty(this, "constructor", {
              value: NativeDate,
              enumerable: false
            });
          }
          static [Symbol.hasInstance](instance) {
            return instance instanceof NativeDate;
          }
        }
        ClockDate.isFake = true;
        if (NativeDate.now) {
          ClockDate.now = function now() {
            return ClockDate.clock.now;
          };
        }
        if (NativeDate.toSource) {
          ClockDate.toSource = function toSource() {
            return NativeDate.toSource();
          };
        }
        ClockDate.toString = function toString() {
          return NativeDate.toString();
        };
        const ClockDateProxy = new Proxy(ClockDate, {
          // handler for [[Call]] invocations (i.e. not using `new`)
          apply() {
            if (this instanceof ClockDate) {
              throw new TypeError("A Proxy should only capture `new` calls with the `construct` handler. This is not supposed to be possible, so check the logic.");
            }
            return new NativeDate(ClockDate.clock.now).toString();
          }
        });
        return ClockDateProxy;
      }
      function createIntl() {
        const ClockIntl = {};
        Object.getOwnPropertyNames(NativeIntl).forEach((property) => ClockIntl[property] = NativeIntl[property]);
        ClockIntl.DateTimeFormat = function(...args) {
          const realFormatter = new NativeIntl.DateTimeFormat(...args);
          const formatter = {};
          ["formatRange", "formatRangeToParts", "resolvedOptions"].forEach((method) => {
            formatter[method] = realFormatter[method].bind(realFormatter);
          });
          ["format", "formatToParts"].forEach((method) => {
            formatter[method] = function(date) {
              return realFormatter[method](date || ClockIntl.clock.now);
            };
          });
          return formatter;
        };
        ClockIntl.DateTimeFormat.prototype = Object.create(NativeIntl.DateTimeFormat.prototype);
        ClockIntl.DateTimeFormat.supportedLocalesOf = NativeIntl.DateTimeFormat.supportedLocalesOf;
        return ClockIntl;
      }
      function enqueueJob(clock, job) {
        if (!clock.jobs) {
          clock.jobs = [];
        }
        clock.jobs.push(job);
      }
      function runJobs(clock) {
        if (!clock.jobs) {
          return;
        }
        for (let i = 0; i < clock.jobs.length; i++) {
          const job = clock.jobs[i];
          job.func.apply(null, job.args);
          checkIsNearInfiniteLimit(clock, i);
          if (clock.loopLimit && i > clock.loopLimit) {
            throw getInfiniteLoopError(clock, job);
          }
        }
        resetIsNearInfiniteLimit();
        clock.jobs = [];
      }
      function addTimer(clock, timer) {
        if (timer.func === void 0) {
          throw new Error("Callback must be provided to timer calls");
        }
        if (addTimerReturnsObject) {
          if (typeof timer.func !== "function") {
            throw new TypeError(`[ERR_INVALID_CALLBACK]: Callback must be a function. Received ${timer.func} of type ${typeof timer.func}`);
          }
        }
        if (isNearInfiniteLimit) {
          timer.error = new Error();
        }
        timer.type = timer.immediate ? "Immediate" : "Timeout";
        if (timer.hasOwnProperty("delay")) {
          if (typeof timer.delay !== "number") {
            timer.delay = parseInt(timer.delay, 10);
          }
          if (!isNumberFinite(timer.delay)) {
            timer.delay = 0;
          }
          timer.delay = timer.delay > maxTimeout ? 1 : timer.delay;
          timer.delay = Math.max(0, timer.delay);
        }
        if (timer.hasOwnProperty("interval")) {
          timer.type = "Interval";
          timer.interval = timer.interval > maxTimeout ? 1 : timer.interval;
        }
        if (timer.hasOwnProperty("animation")) {
          timer.type = "AnimationFrame";
          timer.animation = true;
        }
        if (timer.hasOwnProperty("idleCallback")) {
          timer.type = "IdleCallback";
          timer.idleCallback = true;
        }
        if (!clock.timers) {
          clock.timers = {};
        }
        timer.id = uniqueTimerId++;
        timer.createdAt = clock.now;
        timer.callAt = clock.now + (parseInt(timer.delay) || (clock.duringTick ? 1 : 0));
        clock.timers[timer.id] = timer;
        if (addTimerReturnsObject) {
          const res = {
            refed: true,
            ref: function() {
              this.refed = true;
              return res;
            },
            unref: function() {
              this.refed = false;
              return res;
            },
            hasRef: function() {
              return this.refed;
            },
            refresh: function() {
              timer.callAt = clock.now + (parseInt(timer.delay) || (clock.duringTick ? 1 : 0));
              clock.timers[timer.id] = timer;
              return res;
            },
            [Symbol.toPrimitive]: function() {
              return timer.id;
            }
          };
          return res;
        }
        return timer.id;
      }
      function compareTimers(a, b) {
        if (a.callAt < b.callAt) {
          return -1;
        }
        if (a.callAt > b.callAt) {
          return 1;
        }
        if (a.immediate && !b.immediate) {
          return -1;
        }
        if (!a.immediate && b.immediate) {
          return 1;
        }
        if (a.createdAt < b.createdAt) {
          return -1;
        }
        if (a.createdAt > b.createdAt) {
          return 1;
        }
        if (a.id < b.id) {
          return -1;
        }
        if (a.id > b.id) {
          return 1;
        }
      }
      function firstTimerInRange(clock, from, to) {
        const timers2 = clock.timers;
        let timer = null;
        let id, isInRange;
        for (id in timers2) {
          if (timers2.hasOwnProperty(id)) {
            isInRange = inRange(from, to, timers2[id]);
            if (isInRange && (!timer || compareTimers(timer, timers2[id]) === 1)) {
              timer = timers2[id];
            }
          }
        }
        return timer;
      }
      function firstTimer(clock) {
        const timers2 = clock.timers;
        let timer = null;
        let id;
        for (id in timers2) {
          if (timers2.hasOwnProperty(id)) {
            if (!timer || compareTimers(timer, timers2[id]) === 1) {
              timer = timers2[id];
            }
          }
        }
        return timer;
      }
      function lastTimer(clock) {
        const timers2 = clock.timers;
        let timer = null;
        let id;
        for (id in timers2) {
          if (timers2.hasOwnProperty(id)) {
            if (!timer || compareTimers(timer, timers2[id]) === -1) {
              timer = timers2[id];
            }
          }
        }
        return timer;
      }
      function callTimer(clock, timer) {
        if (typeof timer.interval === "number") {
          clock.timers[timer.id].callAt += timer.interval;
        } else {
          delete clock.timers[timer.id];
        }
        if (typeof timer.func === "function") {
          timer.func.apply(null, timer.args);
        } else {
          const eval2 = eval;
          (function() {
            eval2(timer.func);
          })();
        }
      }
      function getClearHandler(ttype) {
        if (ttype === "IdleCallback" || ttype === "AnimationFrame") {
          return `cancel${ttype}`;
        }
        return `clear${ttype}`;
      }
      function getScheduleHandler(ttype) {
        if (ttype === "IdleCallback" || ttype === "AnimationFrame") {
          return `request${ttype}`;
        }
        return `set${ttype}`;
      }
      function createWarnOnce() {
        let calls = 0;
        return function(msg) {
          !calls++ && console.warn(msg);
        };
      }
      const warnOnce = createWarnOnce();
      function clearTimer(clock, timerId, ttype) {
        if (!timerId) {
          return;
        }
        if (!clock.timers) {
          clock.timers = {};
        }
        const id = Number(timerId);
        if (Number.isNaN(id) || id < idCounterStart) {
          const handlerName = getClearHandler(ttype);
          if (clock.shouldClearNativeTimers === true) {
            const nativeHandler = clock[`_${handlerName}`];
            return typeof nativeHandler === "function" ? nativeHandler(timerId) : void 0;
          }
          warnOnce(`FakeTimers: ${handlerName} was invoked to clear a native timer instead of one created by this library.
To automatically clean-up native timers, use \`shouldClearNativeTimers\`.`);
        }
        if (clock.timers.hasOwnProperty(id)) {
          const timer = clock.timers[id];
          if (timer.type === ttype || timer.type === "Timeout" && ttype === "Interval" || timer.type === "Interval" && ttype === "Timeout") {
            delete clock.timers[id];
          } else {
            const clear = getClearHandler(ttype);
            const schedule = getScheduleHandler(timer.type);
            throw new Error(`Cannot clear timer: timer created with ${schedule}() but cleared with ${clear}()`);
          }
        }
      }
      function uninstall(clock, config) {
        let method, i, l;
        const installedHrTime = "_hrtime";
        const installedNextTick = "_nextTick";
        for (i = 0, l = clock.methods.length; i < l; i++) {
          method = clock.methods[i];
          if (method === "hrtime" && _global.process) {
            _global.process.hrtime = clock[installedHrTime];
          } else if (method === "nextTick" && _global.process) {
            _global.process.nextTick = clock[installedNextTick];
          } else if (method === "performance") {
            const originalPerfDescriptor = Object.getOwnPropertyDescriptor(clock, `_${method}`);
            if (originalPerfDescriptor && originalPerfDescriptor.get && !originalPerfDescriptor.set) {
              Object.defineProperty(_global, method, originalPerfDescriptor);
            } else if (originalPerfDescriptor.configurable) {
              _global[method] = clock[`_${method}`];
            }
          } else {
            if (_global[method] && _global[method].hadOwnProperty) {
              _global[method] = clock[`_${method}`];
            } else {
              try {
                delete _global[method];
              } catch (ignore) {
              }
            }
          }
          if (clock.timersModuleMethods !== void 0) {
            for (let j = 0; j < clock.timersModuleMethods.length; j++) {
              const entry = clock.timersModuleMethods[j];
              timersModule[entry.methodName] = entry.original;
            }
          }
          if (clock.timersPromisesModuleMethods !== void 0) {
            for (let j = 0; j < clock.timersPromisesModuleMethods.length; j++) {
              const entry = clock.timersPromisesModuleMethods[j];
              timersPromisesModule[entry.methodName] = entry.original;
            }
          }
        }
        if (config.shouldAdvanceTime === true) {
          _global.clearInterval(clock.attachedInterval);
        }
        clock.methods = [];
        for (const [listener, signal] of clock.abortListenerMap.entries()) {
          signal.removeEventListener("abort", listener);
          clock.abortListenerMap.delete(listener);
        }
        if (!clock.timers) {
          return [];
        }
        return Object.keys(clock.timers).map(function mapper(key) {
          return clock.timers[key];
        });
      }
      function hijackMethod(target, method, clock) {
        clock[method].hadOwnProperty = Object.prototype.hasOwnProperty.call(target, method);
        clock[`_${method}`] = target[method];
        if (method === "Date") {
          target[method] = clock[method];
        } else if (method === "Intl") {
          target[method] = clock[method];
        } else if (method === "performance") {
          const originalPerfDescriptor = Object.getOwnPropertyDescriptor(target, method);
          if (originalPerfDescriptor && originalPerfDescriptor.get && !originalPerfDescriptor.set) {
            Object.defineProperty(clock, `_${method}`, originalPerfDescriptor);
            const perfDescriptor = Object.getOwnPropertyDescriptor(clock, method);
            Object.defineProperty(target, method, perfDescriptor);
          } else {
            target[method] = clock[method];
          }
        } else {
          target[method] = function() {
            return clock[method].apply(clock, arguments);
          };
          Object.defineProperties(target[method], Object.getOwnPropertyDescriptors(clock[method]));
        }
        target[method].clock = clock;
      }
      function doIntervalTick(clock, advanceTimeDelta) {
        clock.tick(advanceTimeDelta);
      }
      const timers = {
        setTimeout: _global.setTimeout,
        clearTimeout: _global.clearTimeout,
        setInterval: _global.setInterval,
        clearInterval: _global.clearInterval,
        Date: _global.Date
      };
      if (isPresent.setImmediate) {
        timers.setImmediate = _global.setImmediate;
      }
      if (isPresent.clearImmediate) {
        timers.clearImmediate = _global.clearImmediate;
      }
      if (isPresent.hrtime) {
        timers.hrtime = _global.process.hrtime;
      }
      if (isPresent.nextTick) {
        timers.nextTick = _global.process.nextTick;
      }
      if (isPresent.performance) {
        timers.performance = _global.performance;
      }
      if (isPresent.requestAnimationFrame) {
        timers.requestAnimationFrame = _global.requestAnimationFrame;
      }
      if (isPresent.queueMicrotask) {
        timers.queueMicrotask = _global.queueMicrotask;
      }
      if (isPresent.cancelAnimationFrame) {
        timers.cancelAnimationFrame = _global.cancelAnimationFrame;
      }
      if (isPresent.requestIdleCallback) {
        timers.requestIdleCallback = _global.requestIdleCallback;
      }
      if (isPresent.cancelIdleCallback) {
        timers.cancelIdleCallback = _global.cancelIdleCallback;
      }
      if (isPresent.Intl) {
        timers.Intl = _global.Intl;
      }
      const originalSetTimeout = _global.setImmediate || _global.setTimeout;
      function createClock(start, loopLimit) {
        start = Math.floor(getEpoch(start));
        loopLimit = loopLimit || 1e3;
        let nanos = 0;
        const adjustedSystemTime = [0, 0];
        const clock = {
          now: start,
          Date: createDate(),
          loopLimit
        };
        clock.Date.clock = clock;
        function getTimeToNextFrame() {
          return 16 - (clock.now - start) % 16;
        }
        function hrtime(prev) {
          const millisSinceStart = clock.now - adjustedSystemTime[0] - start;
          const secsSinceStart = Math.floor(millisSinceStart / 1e3);
          const remainderInNanos = (millisSinceStart - secsSinceStart * 1e3) * 1e6 + nanos - adjustedSystemTime[1];
          if (Array.isArray(prev)) {
            if (prev[1] > 1e9) {
              throw new TypeError("Number of nanoseconds can't exceed a billion");
            }
            const oldSecs = prev[0];
            let nanoDiff = remainderInNanos - prev[1];
            let secDiff = secsSinceStart - oldSecs;
            if (nanoDiff < 0) {
              nanoDiff += 1e9;
              secDiff -= 1;
            }
            return [secDiff, nanoDiff];
          }
          return [secsSinceStart, remainderInNanos];
        }
        function fakePerformanceNow() {
          const hrt = hrtime();
          const millis = hrt[0] * 1e3 + hrt[1] / 1e6;
          return millis;
        }
        if (isPresent.hrtimeBigint) {
          hrtime.bigint = function() {
            const parts = hrtime();
            return BigInt(parts[0]) * BigInt(1e9) + BigInt(parts[1]);
          };
        }
        if (isPresent.Intl) {
          clock.Intl = createIntl();
          clock.Intl.clock = clock;
        }
        clock.requestIdleCallback = function requestIdleCallback(func, timeout) {
          let timeToNextIdlePeriod = 0;
          if (clock.countTimers() > 0) {
            timeToNextIdlePeriod = 50;
          }
          const result = addTimer(clock, {
            func,
            args: Array.prototype.slice.call(arguments, 2),
            delay: typeof timeout === "undefined" ? timeToNextIdlePeriod : Math.min(timeout, timeToNextIdlePeriod),
            idleCallback: true
          });
          return Number(result);
        };
        clock.cancelIdleCallback = function cancelIdleCallback(timerId) {
          return clearTimer(clock, timerId, "IdleCallback");
        };
        clock.setTimeout = function setTimeout2(func, timeout) {
          return addTimer(clock, {
            func,
            args: Array.prototype.slice.call(arguments, 2),
            delay: timeout
          });
        };
        if (typeof _global.Promise !== "undefined" && utilPromisify) {
          clock.setTimeout[utilPromisify.custom] = function promisifiedSetTimeout(timeout, arg) {
            return new _global.Promise(function setTimeoutExecutor(resolve) {
              addTimer(clock, {
                func: resolve,
                args: [arg],
                delay: timeout
              });
            });
          };
        }
        clock.clearTimeout = function clearTimeout2(timerId) {
          return clearTimer(clock, timerId, "Timeout");
        };
        clock.nextTick = function nextTick(func) {
          return enqueueJob(clock, {
            func,
            args: Array.prototype.slice.call(arguments, 1),
            error: isNearInfiniteLimit ? new Error() : null
          });
        };
        clock.queueMicrotask = function queueMicrotask(func) {
          return clock.nextTick(func);
        };
        clock.setInterval = function setInterval2(func, timeout) {
          timeout = parseInt(timeout, 10);
          return addTimer(clock, {
            func,
            args: Array.prototype.slice.call(arguments, 2),
            delay: timeout,
            interval: timeout
          });
        };
        clock.clearInterval = function clearInterval2(timerId) {
          return clearTimer(clock, timerId, "Interval");
        };
        if (isPresent.setImmediate) {
          clock.setImmediate = function setImmediate(func) {
            return addTimer(clock, {
              func,
              args: Array.prototype.slice.call(arguments, 1),
              immediate: true
            });
          };
          if (typeof _global.Promise !== "undefined" && utilPromisify) {
            clock.setImmediate[utilPromisify.custom] = function promisifiedSetImmediate(arg) {
              return new _global.Promise(function setImmediateExecutor(resolve) {
                addTimer(clock, {
                  func: resolve,
                  args: [arg],
                  immediate: true
                });
              });
            };
          }
          clock.clearImmediate = function clearImmediate(timerId) {
            return clearTimer(clock, timerId, "Immediate");
          };
        }
        clock.countTimers = function countTimers() {
          return Object.keys(clock.timers || {}).length + (clock.jobs || []).length;
        };
        clock.requestAnimationFrame = function requestAnimationFrame(func) {
          const result = addTimer(clock, {
            func,
            delay: getTimeToNextFrame(),
            get args() {
              return [fakePerformanceNow()];
            },
            animation: true
          });
          return Number(result);
        };
        clock.cancelAnimationFrame = function cancelAnimationFrame(timerId) {
          return clearTimer(clock, timerId, "AnimationFrame");
        };
        clock.runMicrotasks = function runMicrotasks() {
          runJobs(clock);
        };
        function doTick(tickValue, isAsync, resolve, reject) {
          const msFloat = typeof tickValue === "number" ? tickValue : parseTime(tickValue);
          const ms = Math.floor(msFloat);
          const remainder = nanoRemainder(msFloat);
          let nanosTotal = nanos + remainder;
          let tickTo = clock.now + ms;
          if (msFloat < 0) {
            throw new TypeError("Negative ticks are not supported");
          }
          if (nanosTotal >= 1e6) {
            tickTo += 1;
            nanosTotal -= 1e6;
          }
          nanos = nanosTotal;
          let tickFrom = clock.now;
          let previous = clock.now;
          let timer, firstException, oldNow, nextPromiseTick, compensationCheck, postTimerCall;
          clock.duringTick = true;
          oldNow = clock.now;
          runJobs(clock);
          if (oldNow !== clock.now) {
            tickFrom += clock.now - oldNow;
            tickTo += clock.now - oldNow;
          }
          function doTickInner() {
            timer = firstTimerInRange(clock, tickFrom, tickTo);
            while (timer && tickFrom <= tickTo) {
              if (clock.timers[timer.id]) {
                tickFrom = timer.callAt;
                clock.now = timer.callAt;
                oldNow = clock.now;
                try {
                  runJobs(clock);
                  callTimer(clock, timer);
                } catch (e) {
                  firstException = firstException || e;
                }
                if (isAsync) {
                  originalSetTimeout(nextPromiseTick);
                  return;
                }
                compensationCheck();
              }
              postTimerCall();
            }
            oldNow = clock.now;
            runJobs(clock);
            if (oldNow !== clock.now) {
              tickFrom += clock.now - oldNow;
              tickTo += clock.now - oldNow;
            }
            clock.duringTick = false;
            timer = firstTimerInRange(clock, tickFrom, tickTo);
            if (timer) {
              try {
                clock.tick(tickTo - clock.now);
              } catch (e) {
                firstException = firstException || e;
              }
            } else {
              clock.now = tickTo;
              nanos = nanosTotal;
            }
            if (firstException) {
              throw firstException;
            }
            if (isAsync) {
              resolve(clock.now);
            } else {
              return clock.now;
            }
          }
          nextPromiseTick = isAsync && function() {
            try {
              compensationCheck();
              postTimerCall();
              doTickInner();
            } catch (e) {
              reject(e);
            }
          };
          compensationCheck = function() {
            if (oldNow !== clock.now) {
              tickFrom += clock.now - oldNow;
              tickTo += clock.now - oldNow;
              previous += clock.now - oldNow;
            }
          };
          postTimerCall = function() {
            timer = firstTimerInRange(clock, previous, tickTo);
            previous = tickFrom;
          };
          return doTickInner();
        }
        clock.tick = function tick(tickValue) {
          return doTick(tickValue, false);
        };
        if (typeof _global.Promise !== "undefined") {
          clock.tickAsync = function tickAsync(tickValue) {
            return new _global.Promise(function(resolve, reject) {
              originalSetTimeout(function() {
                try {
                  doTick(tickValue, true, resolve, reject);
                } catch (e) {
                  reject(e);
                }
              });
            });
          };
        }
        clock.next = function next() {
          runJobs(clock);
          const timer = firstTimer(clock);
          if (!timer) {
            return clock.now;
          }
          clock.duringTick = true;
          try {
            clock.now = timer.callAt;
            callTimer(clock, timer);
            runJobs(clock);
            return clock.now;
          } finally {
            clock.duringTick = false;
          }
        };
        if (typeof _global.Promise !== "undefined") {
          clock.nextAsync = function nextAsync() {
            return new _global.Promise(function(resolve, reject) {
              originalSetTimeout(function() {
                try {
                  const timer = firstTimer(clock);
                  if (!timer) {
                    resolve(clock.now);
                    return;
                  }
                  let err;
                  clock.duringTick = true;
                  clock.now = timer.callAt;
                  try {
                    callTimer(clock, timer);
                  } catch (e) {
                    err = e;
                  }
                  clock.duringTick = false;
                  originalSetTimeout(function() {
                    if (err) {
                      reject(err);
                    } else {
                      resolve(clock.now);
                    }
                  });
                } catch (e) {
                  reject(e);
                }
              });
            });
          };
        }
        clock.runAll = function runAll() {
          let numTimers, i;
          runJobs(clock);
          for (i = 0; i < clock.loopLimit; i++) {
            if (!clock.timers) {
              resetIsNearInfiniteLimit();
              return clock.now;
            }
            numTimers = Object.keys(clock.timers).length;
            if (numTimers === 0) {
              resetIsNearInfiniteLimit();
              return clock.now;
            }
            clock.next();
            checkIsNearInfiniteLimit(clock, i);
          }
          const excessJob = firstTimer(clock);
          throw getInfiniteLoopError(clock, excessJob);
        };
        clock.runToFrame = function runToFrame() {
          return clock.tick(getTimeToNextFrame());
        };
        if (typeof _global.Promise !== "undefined") {
          clock.runAllAsync = function runAllAsync() {
            return new _global.Promise(function(resolve, reject) {
              let i = 0;
              function doRun() {
                originalSetTimeout(function() {
                  try {
                    runJobs(clock);
                    let numTimers;
                    if (i < clock.loopLimit) {
                      if (!clock.timers) {
                        resetIsNearInfiniteLimit();
                        resolve(clock.now);
                        return;
                      }
                      numTimers = Object.keys(clock.timers).length;
                      if (numTimers === 0) {
                        resetIsNearInfiniteLimit();
                        resolve(clock.now);
                        return;
                      }
                      clock.next();
                      i++;
                      doRun();
                      checkIsNearInfiniteLimit(clock, i);
                      return;
                    }
                    const excessJob = firstTimer(clock);
                    reject(getInfiniteLoopError(clock, excessJob));
                  } catch (e) {
                    reject(e);
                  }
                });
              }
              doRun();
            });
          };
        }
        clock.runToLast = function runToLast() {
          const timer = lastTimer(clock);
          if (!timer) {
            runJobs(clock);
            return clock.now;
          }
          return clock.tick(timer.callAt - clock.now);
        };
        if (typeof _global.Promise !== "undefined") {
          clock.runToLastAsync = function runToLastAsync() {
            return new _global.Promise(function(resolve, reject) {
              originalSetTimeout(function() {
                try {
                  const timer = lastTimer(clock);
                  if (!timer) {
                    runJobs(clock);
                    resolve(clock.now);
                  }
                  resolve(clock.tickAsync(timer.callAt - clock.now));
                } catch (e) {
                  reject(e);
                }
              });
            });
          };
        }
        clock.reset = function reset() {
          nanos = 0;
          clock.timers = {};
          clock.jobs = [];
          clock.now = start;
        };
        clock.setSystemTime = function setSystemTime(systemTime) {
          const newNow = getEpoch(systemTime);
          const difference = newNow - clock.now;
          let id, timer;
          adjustedSystemTime[0] = adjustedSystemTime[0] + difference;
          adjustedSystemTime[1] = adjustedSystemTime[1] + nanos;
          clock.now = newNow;
          nanos = 0;
          for (id in clock.timers) {
            if (clock.timers.hasOwnProperty(id)) {
              timer = clock.timers[id];
              timer.createdAt += difference;
              timer.callAt += difference;
            }
          }
        };
        clock.jump = function jump(tickValue) {
          const msFloat = typeof tickValue === "number" ? tickValue : parseTime(tickValue);
          const ms = Math.floor(msFloat);
          for (const timer of Object.values(clock.timers)) {
            if (clock.now + ms > timer.callAt) {
              timer.callAt = clock.now + ms;
            }
          }
          clock.tick(ms);
        };
        if (isPresent.performance) {
          clock.performance = /* @__PURE__ */ Object.create(null);
          clock.performance.now = fakePerformanceNow;
        }
        if (isPresent.hrtime) {
          clock.hrtime = hrtime;
        }
        return clock;
      }
      function install(config) {
        if (arguments.length > 1 || config instanceof Date || Array.isArray(config) || typeof config === "number") {
          throw new TypeError(`FakeTimers.install called with ${String(config)} install requires an object parameter`);
        }
        if (_global.Date.isFake === true) {
          throw new TypeError("Can't install fake timers twice on the same global object.");
        }
        config = typeof config !== "undefined" ? config : {};
        config.shouldAdvanceTime = config.shouldAdvanceTime || false;
        config.advanceTimeDelta = config.advanceTimeDelta || 20;
        config.shouldClearNativeTimers = config.shouldClearNativeTimers || false;
        if (config.target) {
          throw new TypeError("config.target is no longer supported. Use `withGlobal(target)` instead.");
        }
        function handleMissingTimer(timer) {
          if (config.ignoreMissingTimers) {
            return;
          }
          throw new ReferenceError(`non-existent timers and/or objects cannot be faked: '${timer}'`);
        }
        let i, l;
        const clock = createClock(config.now, config.loopLimit);
        clock.shouldClearNativeTimers = config.shouldClearNativeTimers;
        clock.uninstall = function() {
          return uninstall(clock, config);
        };
        clock.abortListenerMap = /* @__PURE__ */ new Map();
        clock.methods = config.toFake || [];
        if (clock.methods.length === 0) {
          clock.methods = Object.keys(timers);
        }
        if (config.shouldAdvanceTime === true) {
          const intervalTick = doIntervalTick.bind(null, clock, config.advanceTimeDelta);
          const intervalId = _global.setInterval(intervalTick, config.advanceTimeDelta);
          clock.attachedInterval = intervalId;
        }
        if (clock.methods.includes("performance")) {
          const proto = (() => {
            if (hasPerformanceConstructorPrototype) {
              return _global.performance.constructor.prototype;
            }
            if (hasPerformancePrototype) {
              return _global.Performance.prototype;
            }
          })();
          if (proto) {
            Object.getOwnPropertyNames(proto).forEach(function(name) {
              if (name !== "now") {
                clock.performance[name] = name.indexOf("getEntries") === 0 ? NOOP_ARRAY : NOOP;
              }
            });
            clock.performance.mark = (name) => new FakePerformanceEntry(name, "mark", 0, 0);
            clock.performance.measure = (name) => new FakePerformanceEntry(name, "measure", 0, 100);
          } else if ((config.toFake || []).includes("performance")) {
            return handleMissingTimer("performance");
          }
        }
        if (_global === globalObject && timersModule) {
          clock.timersModuleMethods = [];
        }
        if (_global === globalObject && timersPromisesModule) {
          clock.timersPromisesModuleMethods = [];
        }
        for (i = 0, l = clock.methods.length; i < l; i++) {
          const nameOfMethodToReplace = clock.methods[i];
          if (!isPresent[nameOfMethodToReplace]) {
            handleMissingTimer(nameOfMethodToReplace);
            continue;
          }
          if (nameOfMethodToReplace === "hrtime") {
            if (_global.process && typeof _global.process.hrtime === "function") {
              hijackMethod(_global.process, nameOfMethodToReplace, clock);
            }
          } else if (nameOfMethodToReplace === "nextTick") {
            if (_global.process && typeof _global.process.nextTick === "function") {
              hijackMethod(_global.process, nameOfMethodToReplace, clock);
            }
          } else {
            hijackMethod(_global, nameOfMethodToReplace, clock);
          }
          if (clock.timersModuleMethods !== void 0 && timersModule[nameOfMethodToReplace]) {
            const original = timersModule[nameOfMethodToReplace];
            clock.timersModuleMethods.push({
              methodName: nameOfMethodToReplace,
              original
            });
            timersModule[nameOfMethodToReplace] = _global[nameOfMethodToReplace];
          }
          if (clock.timersPromisesModuleMethods !== void 0) {
            if (nameOfMethodToReplace === "setTimeout") {
              clock.timersPromisesModuleMethods.push({
                methodName: "setTimeout",
                original: timersPromisesModule.setTimeout
              });
              timersPromisesModule.setTimeout = (delay, value, options = {}) => new Promise((resolve, reject) => {
                const abort = () => {
                  options.signal.removeEventListener("abort", abort);
                  clock.abortListenerMap.delete(abort);
                  clock.clearTimeout(handle);
                  reject(options.signal.reason);
                };
                const handle = clock.setTimeout(() => {
                  if (options.signal) {
                    options.signal.removeEventListener("abort", abort);
                    clock.abortListenerMap.delete(abort);
                  }
                  resolve(value);
                }, delay);
                if (options.signal) {
                  if (options.signal.aborted) {
                    abort();
                  } else {
                    options.signal.addEventListener("abort", abort);
                    clock.abortListenerMap.set(abort, options.signal);
                  }
                }
              });
            } else if (nameOfMethodToReplace === "setImmediate") {
              clock.timersPromisesModuleMethods.push({
                methodName: "setImmediate",
                original: timersPromisesModule.setImmediate
              });
              timersPromisesModule.setImmediate = (value, options = {}) => new Promise((resolve, reject) => {
                const abort = () => {
                  options.signal.removeEventListener("abort", abort);
                  clock.abortListenerMap.delete(abort);
                  clock.clearImmediate(handle);
                  reject(options.signal.reason);
                };
                const handle = clock.setImmediate(() => {
                  if (options.signal) {
                    options.signal.removeEventListener("abort", abort);
                    clock.abortListenerMap.delete(abort);
                  }
                  resolve(value);
                });
                if (options.signal) {
                  if (options.signal.aborted) {
                    abort();
                  } else {
                    options.signal.addEventListener("abort", abort);
                    clock.abortListenerMap.set(abort, options.signal);
                  }
                }
              });
            } else if (nameOfMethodToReplace === "setInterval") {
              clock.timersPromisesModuleMethods.push({
                methodName: "setInterval",
                original: timersPromisesModule.setInterval
              });
              timersPromisesModule.setInterval = (delay, value, options = {}) => ({
                [Symbol.asyncIterator]: () => {
                  const createResolvable = () => {
                    let resolve, reject;
                    const promise = new Promise((res, rej) => {
                      resolve = res;
                      reject = rej;
                    });
                    promise.resolve = resolve;
                    promise.reject = reject;
                    return promise;
                  };
                  let done = false;
                  let hasThrown = false;
                  let returnCall;
                  let nextAvailable = 0;
                  const nextQueue = [];
                  const handle = clock.setInterval(() => {
                    if (nextQueue.length > 0) {
                      nextQueue.shift().resolve();
                    } else {
                      nextAvailable++;
                    }
                  }, delay);
                  const abort = () => {
                    options.signal.removeEventListener("abort", abort);
                    clock.abortListenerMap.delete(abort);
                    clock.clearInterval(handle);
                    done = true;
                    for (const resolvable of nextQueue) {
                      resolvable.resolve();
                    }
                  };
                  if (options.signal) {
                    if (options.signal.aborted) {
                      done = true;
                    } else {
                      options.signal.addEventListener("abort", abort);
                      clock.abortListenerMap.set(abort, options.signal);
                    }
                  }
                  return {
                    next: async () => {
                      if (options.signal?.aborted && !hasThrown) {
                        hasThrown = true;
                        throw options.signal.reason;
                      }
                      if (done) {
                        return {
                          done: true,
                          value: void 0
                        };
                      }
                      if (nextAvailable > 0) {
                        nextAvailable--;
                        return {
                          done: false,
                          value
                        };
                      }
                      const resolvable = createResolvable();
                      nextQueue.push(resolvable);
                      await resolvable;
                      if (returnCall && nextQueue.length === 0) {
                        returnCall.resolve();
                      }
                      if (options.signal?.aborted && !hasThrown) {
                        hasThrown = true;
                        throw options.signal.reason;
                      }
                      if (done) {
                        return {
                          done: true,
                          value: void 0
                        };
                      }
                      return {
                        done: false,
                        value
                      };
                    },
                    return: async () => {
                      if (done) {
                        return {
                          done: true,
                          value: void 0
                        };
                      }
                      if (nextQueue.length > 0) {
                        returnCall = createResolvable();
                        await returnCall;
                      }
                      clock.clearInterval(handle);
                      done = true;
                      if (options.signal) {
                        options.signal.removeEventListener("abort", abort);
                        clock.abortListenerMap.delete(abort);
                      }
                      return {
                        done: true,
                        value: void 0
                      };
                    }
                  };
                }
              });
            }
          }
        }
        return clock;
      }
      return {
        timers,
        createClock,
        install,
        withGlobal
      };
    }
    const defaultImplementation = withGlobal(globalObject);
    exports.timers = defaultImplementation.timers;
    exports.createClock = defaultImplementation.createClock;
    exports.install = defaultImplementation.install;
    exports.withGlobal = withGlobal;
  }, {
    "@sinonjs/commons": 47,
    "timers": void 0,
    "timers/promises": void 0,
    "util": 91
  }],
  61: [function(require2, module, exports) {
    var ARRAY_TYPES = [Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array];
    module.exports = ARRAY_TYPES;
  }, {}],
  62: [function(require2, module, exports) {
    var arrayProto = require2("@sinonjs/commons").prototypes.array;
    var deepEqual = require2("./deep-equal").use(createMatcher);
    var every = require2("@sinonjs/commons").every;
    var functionName = require2("@sinonjs/commons").functionName;
    var get = require2("lodash.get");
    var iterableToString = require2("./iterable-to-string");
    var objectProto = require2("@sinonjs/commons").prototypes.object;
    var typeOf = require2("@sinonjs/commons").typeOf;
    var valueToString = require2("@sinonjs/commons").valueToString;
    var assertMatcher = require2("./create-matcher/assert-matcher");
    var assertMethodExists = require2("./create-matcher/assert-method-exists");
    var assertType = require2("./create-matcher/assert-type");
    var isIterable = require2("./create-matcher/is-iterable");
    var isMatcher = require2("./create-matcher/is-matcher");
    var matcherPrototype = require2("./create-matcher/matcher-prototype");
    var arrayIndexOf = arrayProto.indexOf;
    var some = arrayProto.some;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var TYPE_MAP = require2("./create-matcher/type-map")(createMatcher);
    function createMatcher(expectation, message) {
      var m = Object.create(matcherPrototype);
      var type = typeOf(expectation);
      if (message !== void 0 && typeof message !== "string") {
        throw new TypeError("Message should be a string");
      }
      if (arguments.length > 2) {
        throw new TypeError(`Expected 1 or 2 arguments, received ${arguments.length}`);
      }
      if (type in TYPE_MAP) {
        TYPE_MAP[type](m, expectation, message);
      } else {
        m.test = function(actual) {
          return deepEqual(actual, expectation);
        };
      }
      if (!m.message) {
        m.message = `match(${valueToString(expectation)})`;
      }
      Object.defineProperty(m, "message", {
        configurable: false,
        writable: false,
        value: m.message
      });
      return m;
    }
    createMatcher.isMatcher = isMatcher;
    createMatcher.any = createMatcher(function() {
      return true;
    }, "any");
    createMatcher.defined = createMatcher(function(actual) {
      return actual !== null && actual !== void 0;
    }, "defined");
    createMatcher.truthy = createMatcher(function(actual) {
      return Boolean(actual);
    }, "truthy");
    createMatcher.falsy = createMatcher(function(actual) {
      return !actual;
    }, "falsy");
    createMatcher.same = function(expectation) {
      return createMatcher(function(actual) {
        return expectation === actual;
      }, `same(${valueToString(expectation)})`);
    };
    createMatcher.in = function(arrayOfExpectations) {
      if (typeOf(arrayOfExpectations) !== "array") {
        throw new TypeError("array expected");
      }
      return createMatcher(function(actual) {
        return some(arrayOfExpectations, function(expectation) {
          return expectation === actual;
        });
      }, `in(${valueToString(arrayOfExpectations)})`);
    };
    createMatcher.typeOf = function(type) {
      assertType(type, "string", "type");
      return createMatcher(function(actual) {
        return typeOf(actual) === type;
      }, `typeOf("${type}")`);
    };
    createMatcher.instanceOf = function(type) {
      if (typeof Symbol === "undefined" || typeof Symbol.hasInstance === "undefined") {
        assertType(type, "function", "type");
      } else {
        assertMethodExists(type, Symbol.hasInstance, "type", "[Symbol.hasInstance]");
      }
      return createMatcher(function(actual) {
        return actual instanceof type;
      }, `instanceOf(${functionName(type) || objectToString(type)})`);
    };
    function createPropertyMatcher(propertyTest, messagePrefix) {
      return function(property, value) {
        assertType(property, "string", "property");
        var onlyProperty = arguments.length === 1;
        var message = `${messagePrefix}("${property}"`;
        if (!onlyProperty) {
          message += `, ${valueToString(value)}`;
        }
        message += ")";
        return createMatcher(function(actual) {
          if (actual === void 0 || actual === null || !propertyTest(actual, property)) {
            return false;
          }
          return onlyProperty || deepEqual(actual[property], value);
        }, message);
      };
    }
    createMatcher.has = createPropertyMatcher(function(actual, property) {
      if (typeof actual === "object") {
        return property in actual;
      }
      return actual[property] !== void 0;
    }, "has");
    createMatcher.hasOwn = createPropertyMatcher(function(actual, property) {
      return hasOwnProperty(actual, property);
    }, "hasOwn");
    createMatcher.hasNested = function(property, value) {
      assertType(property, "string", "property");
      var onlyProperty = arguments.length === 1;
      var message = `hasNested("${property}"`;
      if (!onlyProperty) {
        message += `, ${valueToString(value)}`;
      }
      message += ")";
      return createMatcher(function(actual) {
        if (actual === void 0 || actual === null || get(actual, property) === void 0) {
          return false;
        }
        return onlyProperty || deepEqual(get(actual, property), value);
      }, message);
    };
    var jsonParseResultTypes = {
      null: true,
      boolean: true,
      number: true,
      string: true,
      object: true,
      array: true
    };
    createMatcher.json = function(value) {
      if (!jsonParseResultTypes[typeOf(value)]) {
        throw new TypeError("Value cannot be the result of JSON.parse");
      }
      var message = `json(${JSON.stringify(value, null, "  ")})`;
      return createMatcher(function(actual) {
        var parsed;
        try {
          parsed = JSON.parse(actual);
        } catch (e) {
          return false;
        }
        return deepEqual(parsed, value);
      }, message);
    };
    createMatcher.every = function(predicate) {
      assertMatcher(predicate);
      return createMatcher(function(actual) {
        if (typeOf(actual) === "object") {
          return every(Object.keys(actual), function(key) {
            return predicate.test(actual[key]);
          });
        }
        return isIterable(actual) && every(actual, function(element) {
          return predicate.test(element);
        });
      }, `every(${predicate.message})`);
    };
    createMatcher.some = function(predicate) {
      assertMatcher(predicate);
      return createMatcher(function(actual) {
        if (typeOf(actual) === "object") {
          return !every(Object.keys(actual), function(key) {
            return !predicate.test(actual[key]);
          });
        }
        return isIterable(actual) && !every(actual, function(element) {
          return !predicate.test(element);
        });
      }, `some(${predicate.message})`);
    };
    createMatcher.array = createMatcher.typeOf("array");
    createMatcher.array.deepEquals = function(expectation) {
      return createMatcher(function(actual) {
        var sameLength = actual.length === expectation.length;
        return typeOf(actual) === "array" && sameLength && every(actual, function(element, index) {
          var expected = expectation[index];
          return typeOf(expected) === "array" && typeOf(element) === "array" ? createMatcher.array.deepEquals(expected).test(element) : deepEqual(expected, element);
        });
      }, `deepEquals([${iterableToString(expectation)}])`);
    };
    createMatcher.array.startsWith = function(expectation) {
      return createMatcher(function(actual) {
        return typeOf(actual) === "array" && every(expectation, function(expectedElement, index) {
          return actual[index] === expectedElement;
        });
      }, `startsWith([${iterableToString(expectation)}])`);
    };
    createMatcher.array.endsWith = function(expectation) {
      return createMatcher(function(actual) {
        var offset = actual.length - expectation.length;
        return typeOf(actual) === "array" && every(expectation, function(expectedElement, index) {
          return actual[offset + index] === expectedElement;
        });
      }, `endsWith([${iterableToString(expectation)}])`);
    };
    createMatcher.array.contains = function(expectation) {
      return createMatcher(function(actual) {
        return typeOf(actual) === "array" && every(expectation, function(expectedElement) {
          return arrayIndexOf(actual, expectedElement) !== -1;
        });
      }, `contains([${iterableToString(expectation)}])`);
    };
    createMatcher.map = createMatcher.typeOf("map");
    createMatcher.map.deepEquals = function mapDeepEquals(expectation) {
      return createMatcher(function(actual) {
        var sameLength = actual.size === expectation.size;
        return typeOf(actual) === "map" && sameLength && every(actual, function(element, key) {
          return expectation.has(key) && expectation.get(key) === element;
        });
      }, `deepEquals(Map[${iterableToString(expectation)}])`);
    };
    createMatcher.map.contains = function mapContains(expectation) {
      return createMatcher(function(actual) {
        return typeOf(actual) === "map" && every(expectation, function(element, key) {
          return actual.has(key) && actual.get(key) === element;
        });
      }, `contains(Map[${iterableToString(expectation)}])`);
    };
    createMatcher.set = createMatcher.typeOf("set");
    createMatcher.set.deepEquals = function setDeepEquals(expectation) {
      return createMatcher(function(actual) {
        var sameLength = actual.size === expectation.size;
        return typeOf(actual) === "set" && sameLength && every(actual, function(element) {
          return expectation.has(element);
        });
      }, `deepEquals(Set[${iterableToString(expectation)}])`);
    };
    createMatcher.set.contains = function setContains(expectation) {
      return createMatcher(function(actual) {
        return typeOf(actual) === "set" && every(expectation, function(element) {
          return actual.has(element);
        });
      }, `contains(Set[${iterableToString(expectation)}])`);
    };
    createMatcher.bool = createMatcher.typeOf("boolean");
    createMatcher.number = createMatcher.typeOf("number");
    createMatcher.string = createMatcher.typeOf("string");
    createMatcher.object = createMatcher.typeOf("object");
    createMatcher.func = createMatcher.typeOf("function");
    createMatcher.regexp = createMatcher.typeOf("regexp");
    createMatcher.date = createMatcher.typeOf("date");
    createMatcher.symbol = createMatcher.typeOf("symbol");
    module.exports = createMatcher;
  }, {
    "./create-matcher/assert-matcher": 63,
    "./create-matcher/assert-method-exists": 64,
    "./create-matcher/assert-type": 65,
    "./create-matcher/is-iterable": 66,
    "./create-matcher/is-matcher": 67,
    "./create-matcher/matcher-prototype": 69,
    "./create-matcher/type-map": 70,
    "./deep-equal": 71,
    "./iterable-to-string": 85,
    "@sinonjs/commons": 47,
    "lodash.get": 93
  }],
  63: [function(require2, module, exports) {
    var isMatcher = require2("./is-matcher");
    function assertMatcher(value) {
      if (!isMatcher(value)) {
        throw new TypeError("Matcher expected");
      }
    }
    module.exports = assertMatcher;
  }, {
    "./is-matcher": 67
  }],
  64: [function(require2, module, exports) {
    function assertMethodExists(value, method, name, methodPath) {
      if (value[method] === null || value[method] === void 0) {
        throw new TypeError(`Expected ${name} to have method ${methodPath}`);
      }
    }
    module.exports = assertMethodExists;
  }, {}],
  65: [function(require2, module, exports) {
    var typeOf = require2("@sinonjs/commons").typeOf;
    function assertType(value, type, name) {
      var actual = typeOf(value);
      if (actual !== type) {
        throw new TypeError(`Expected type of ${name} to be ${type}, but was ${actual}`);
      }
    }
    module.exports = assertType;
  }, {
    "@sinonjs/commons": 47
  }],
  66: [function(require2, module, exports) {
    var typeOf = require2("@sinonjs/commons").typeOf;
    function isIterable(value) {
      return Boolean(value) && typeOf(value.forEach) === "function";
    }
    module.exports = isIterable;
  }, {
    "@sinonjs/commons": 47
  }],
  67: [function(require2, module, exports) {
    var isPrototypeOf = require2("@sinonjs/commons").prototypes.object.isPrototypeOf;
    var matcherPrototype = require2("./matcher-prototype");
    function isMatcher(object) {
      return isPrototypeOf(matcherPrototype, object);
    }
    module.exports = isMatcher;
  }, {
    "./matcher-prototype": 69,
    "@sinonjs/commons": 47
  }],
  68: [function(require2, module, exports) {
    var every = require2("@sinonjs/commons").prototypes.array.every;
    var concat = require2("@sinonjs/commons").prototypes.array.concat;
    var typeOf = require2("@sinonjs/commons").typeOf;
    var deepEqualFactory = require2("../deep-equal").use;
    var identical = require2("../identical");
    var isMatcher = require2("./is-matcher");
    var keys = Object.keys;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    function matchObject(actual, expectation, matcher) {
      var deepEqual = deepEqualFactory(matcher);
      if (actual === null || actual === void 0) {
        return false;
      }
      var expectedKeys = keys(expectation);
      if (typeOf(getOwnPropertySymbols) === "function") {
        expectedKeys = concat(expectedKeys, getOwnPropertySymbols(expectation));
      }
      return every(expectedKeys, function(key) {
        var exp = expectation[key];
        var act = actual[key];
        if (isMatcher(exp)) {
          if (!exp.test(act)) {
            return false;
          }
        } else if (typeOf(exp) === "object") {
          if (identical(exp, act)) {
            return true;
          }
          if (!matchObject(act, exp, matcher)) {
            return false;
          }
        } else if (!deepEqual(act, exp)) {
          return false;
        }
        return true;
      });
    }
    module.exports = matchObject;
  }, {
    "../deep-equal": 71,
    "../identical": 73,
    "./is-matcher": 67,
    "@sinonjs/commons": 47
  }],
  69: [function(require2, module, exports) {
    var matcherPrototype = {
      toString: function() {
        return this.message;
      }
    };
    matcherPrototype.or = function(valueOrMatcher) {
      var createMatcher = require2("../create-matcher");
      var isMatcher = createMatcher.isMatcher;
      if (!arguments.length) {
        throw new TypeError("Matcher expected");
      }
      var m2 = isMatcher(valueOrMatcher) ? valueOrMatcher : createMatcher(valueOrMatcher);
      var m1 = this;
      var or = Object.create(matcherPrototype);
      or.test = function(actual) {
        return m1.test(actual) || m2.test(actual);
      };
      or.message = `${m1.message}.or(${m2.message})`;
      return or;
    };
    matcherPrototype.and = function(valueOrMatcher) {
      var createMatcher = require2("../create-matcher");
      var isMatcher = createMatcher.isMatcher;
      if (!arguments.length) {
        throw new TypeError("Matcher expected");
      }
      var m2 = isMatcher(valueOrMatcher) ? valueOrMatcher : createMatcher(valueOrMatcher);
      var m1 = this;
      var and = Object.create(matcherPrototype);
      and.test = function(actual) {
        return m1.test(actual) && m2.test(actual);
      };
      and.message = `${m1.message}.and(${m2.message})`;
      return and;
    };
    module.exports = matcherPrototype;
  }, {
    "../create-matcher": 62
  }],
  70: [function(require2, module, exports) {
    var functionName = require2("@sinonjs/commons").functionName;
    var join = require2("@sinonjs/commons").prototypes.array.join;
    var map = require2("@sinonjs/commons").prototypes.array.map;
    var stringIndexOf = require2("@sinonjs/commons").prototypes.string.indexOf;
    var valueToString = require2("@sinonjs/commons").valueToString;
    var matchObject = require2("./match-object");
    var createTypeMap = function(match) {
      return {
        function: function(m, expectation, message) {
          m.test = expectation;
          m.message = message || `match(${functionName(expectation)})`;
        },
        number: function(m, expectation) {
          m.test = function(actual) {
            return expectation == actual;
          };
        },
        object: function(m, expectation) {
          var array = [];
          if (typeof expectation.test === "function") {
            m.test = function(actual) {
              return expectation.test(actual) === true;
            };
            m.message = `match(${functionName(expectation.test)})`;
            return m;
          }
          array = map(Object.keys(expectation), function(key) {
            return `${key}: ${valueToString(expectation[key])}`;
          });
          m.test = function(actual) {
            return matchObject(actual, expectation, match);
          };
          m.message = `match(${join(array, ", ")})`;
          return m;
        },
        regexp: function(m, expectation) {
          m.test = function(actual) {
            return typeof actual === "string" && expectation.test(actual);
          };
        },
        string: function(m, expectation) {
          m.test = function(actual) {
            return typeof actual === "string" && stringIndexOf(actual, expectation) !== -1;
          };
          m.message = `match("${expectation}")`;
        }
      };
    };
    module.exports = createTypeMap;
  }, {
    "./match-object": 68,
    "@sinonjs/commons": 47
  }],
  71: [function(require2, module, exports) {
    var valueToString = require2("@sinonjs/commons").valueToString;
    var className = require2("@sinonjs/commons").className;
    var typeOf = require2("@sinonjs/commons").typeOf;
    var arrayProto = require2("@sinonjs/commons").prototypes.array;
    var objectProto = require2("@sinonjs/commons").prototypes.object;
    var mapForEach = require2("@sinonjs/commons").prototypes.map.forEach;
    var getClass = require2("./get-class");
    var identical = require2("./identical");
    var isArguments = require2("./is-arguments");
    var isArrayType = require2("./is-array-type");
    var isDate = require2("./is-date");
    var isElement = require2("./is-element");
    var isIterable = require2("./is-iterable");
    var isMap = require2("./is-map");
    var isNaN2 = require2("./is-nan");
    var isObject = require2("./is-object");
    var isSet = require2("./is-set");
    var isSubset = require2("./is-subset");
    var concat = arrayProto.concat;
    var every = arrayProto.every;
    var push = arrayProto.push;
    var getTime = Date.prototype.getTime;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var indexOf = arrayProto.indexOf;
    var keys = Object.keys;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    function deepEqualCyclic(actual, expectation, match) {
      var actualObjects = [];
      var expectationObjects = [];
      var actualPaths = [];
      var expectationPaths = [];
      var compared = {};
      return function deepEqual(actualObj, expectationObj, actualPath, expectationPath) {
        if (match && match.isMatcher(expectationObj)) {
          if (match.isMatcher(actualObj)) {
            return actualObj === expectationObj;
          }
          return expectationObj.test(actualObj);
        }
        var actualType = typeof actualObj;
        var expectationType = typeof expectationObj;
        if (actualObj === expectationObj || isNaN2(actualObj) || isNaN2(expectationObj) || actualObj === null || expectationObj === null || actualObj === void 0 || expectationObj === void 0 || actualType !== "object" || expectationType !== "object") {
          return identical(actualObj, expectationObj);
        }
        if (isElement(actualObj) || isElement(expectationObj)) {
          return false;
        }
        var isActualDate = isDate(actualObj);
        var isExpectationDate = isDate(expectationObj);
        if (isActualDate || isExpectationDate) {
          if (!isActualDate || !isExpectationDate || getTime.call(actualObj) !== getTime.call(expectationObj)) {
            return false;
          }
        }
        if (actualObj instanceof RegExp && expectationObj instanceof RegExp) {
          if (valueToString(actualObj) !== valueToString(expectationObj)) {
            return false;
          }
        }
        if (actualObj instanceof Promise && expectationObj instanceof Promise) {
          return actualObj === expectationObj;
        }
        if (actualObj instanceof Error && expectationObj instanceof Error) {
          return actualObj === expectationObj;
        }
        var actualClass = getClass(actualObj);
        var expectationClass = getClass(expectationObj);
        var actualKeys = keys(actualObj);
        var expectationKeys = keys(expectationObj);
        var actualName = className(actualObj);
        var expectationName = className(expectationObj);
        var expectationSymbols = typeOf(getOwnPropertySymbols) === "function" ? getOwnPropertySymbols(expectationObj) : (
          /* istanbul ignore next: cannot collect coverage for engine that doesn't support Symbol */
          []
        );
        var expectationKeysAndSymbols = concat(expectationKeys, expectationSymbols);
        if (isArguments(actualObj) || isArguments(expectationObj)) {
          if (actualObj.length !== expectationObj.length) {
            return false;
          }
        } else {
          if (actualType !== expectationType || actualClass !== expectationClass || actualKeys.length !== expectationKeys.length || actualName && expectationName && actualName !== expectationName) {
            return false;
          }
        }
        if (isSet(actualObj) || isSet(expectationObj)) {
          if (!isSet(actualObj) || !isSet(expectationObj) || actualObj.size !== expectationObj.size) {
            return false;
          }
          return isSubset(actualObj, expectationObj, deepEqual);
        }
        if (isMap(actualObj) || isMap(expectationObj)) {
          if (!isMap(actualObj) || !isMap(expectationObj) || actualObj.size !== expectationObj.size) {
            return false;
          }
          var mapsDeeplyEqual = true;
          mapForEach(actualObj, function(value, key) {
            mapsDeeplyEqual = mapsDeeplyEqual && deepEqualCyclic(value, expectationObj.get(key));
          });
          return mapsDeeplyEqual;
        }
        if (actualObj.constructor && actualObj.constructor.name === "jQuery" && typeof actualObj.is === "function") {
          return actualObj.is(expectationObj);
        }
        var isActualNonArrayIterable = isIterable(actualObj) && !isArrayType(actualObj) && !isArguments(actualObj);
        var isExpectationNonArrayIterable = isIterable(expectationObj) && !isArrayType(expectationObj) && !isArguments(expectationObj);
        if (isActualNonArrayIterable || isExpectationNonArrayIterable) {
          var actualArray = Array.from(actualObj);
          var expectationArray = Array.from(expectationObj);
          if (actualArray.length !== expectationArray.length) {
            return false;
          }
          var arrayDeeplyEquals = true;
          every(actualArray, function(key) {
            arrayDeeplyEquals = arrayDeeplyEquals && deepEqualCyclic(actualArray[key], expectationArray[key]);
          });
          return arrayDeeplyEquals;
        }
        return every(expectationKeysAndSymbols, function(key) {
          if (!hasOwnProperty(actualObj, key)) {
            return false;
          }
          var actualValue = actualObj[key];
          var expectationValue = expectationObj[key];
          var actualObject = isObject(actualValue);
          var expectationObject = isObject(expectationValue);
          var actualIndex = actualObject ? indexOf(actualObjects, actualValue) : -1;
          var expectationIndex = expectationObject ? indexOf(expectationObjects, expectationValue) : -1;
          var newActualPath = actualIndex !== -1 ? actualPaths[actualIndex] : `${actualPath}[${JSON.stringify(key)}]`;
          var newExpectationPath = expectationIndex !== -1 ? expectationPaths[expectationIndex] : `${expectationPath}[${JSON.stringify(key)}]`;
          var combinedPath = newActualPath + newExpectationPath;
          if (compared[combinedPath]) {
            return true;
          }
          if (actualIndex === -1 && actualObject) {
            push(actualObjects, actualValue);
            push(actualPaths, newActualPath);
          }
          if (expectationIndex === -1 && expectationObject) {
            push(expectationObjects, expectationValue);
            push(expectationPaths, newExpectationPath);
          }
          if (actualObject && expectationObject) {
            compared[combinedPath] = true;
          }
          return deepEqual(actualValue, expectationValue, newActualPath, newExpectationPath);
        });
      }(actual, expectation, "$1", "$2");
    }
    deepEqualCyclic.use = function(match) {
      return function deepEqual(a, b) {
        return deepEqualCyclic(a, b, match);
      };
    };
    module.exports = deepEqualCyclic;
  }, {
    "./get-class": 72,
    "./identical": 73,
    "./is-arguments": 74,
    "./is-array-type": 75,
    "./is-date": 76,
    "./is-element": 77,
    "./is-iterable": 78,
    "./is-map": 79,
    "./is-nan": 80,
    "./is-object": 82,
    "./is-set": 83,
    "./is-subset": 84,
    "@sinonjs/commons": 47
  }],
  72: [function(require2, module, exports) {
    var toString = require2("@sinonjs/commons").prototypes.object.toString;
    function getClass(value) {
      return toString(value).split(/[ \]]/)[1];
    }
    module.exports = getClass;
  }, {
    "@sinonjs/commons": 47
  }],
  73: [function(require2, module, exports) {
    var isNaN2 = require2("./is-nan");
    var isNegZero = require2("./is-neg-zero");
    function identical(obj1, obj2) {
      if (obj1 === obj2 || isNaN2(obj1) && isNaN2(obj2)) {
        return obj1 !== 0 || isNegZero(obj1) === isNegZero(obj2);
      }
      return false;
    }
    module.exports = identical;
  }, {
    "./is-nan": 80,
    "./is-neg-zero": 81
  }],
  74: [function(require2, module, exports) {
    var getClass = require2("./get-class");
    function isArguments(object) {
      return getClass(object) === "Arguments";
    }
    module.exports = isArguments;
  }, {
    "./get-class": 72
  }],
  75: [function(require2, module, exports) {
    var functionName = require2("@sinonjs/commons").functionName;
    var indexOf = require2("@sinonjs/commons").prototypes.array.indexOf;
    var map = require2("@sinonjs/commons").prototypes.array.map;
    var ARRAY_TYPES = require2("./array-types");
    var type = require2("type-detect");
    function isArrayType(object) {
      return indexOf(map(ARRAY_TYPES, functionName), type(object)) !== -1;
    }
    module.exports = isArrayType;
  }, {
    "./array-types": 61,
    "@sinonjs/commons": 47,
    "type-detect": 88
  }],
  76: [function(require2, module, exports) {
    function isDate(value) {
      return value instanceof Date;
    }
    module.exports = isDate;
  }, {}],
  77: [function(require2, module, exports) {
    var div = typeof document !== "undefined" && document.createElement("div");
    function isElement(object) {
      if (!object || object.nodeType !== 1 || !div) {
        return false;
      }
      try {
        object.appendChild(div);
        object.removeChild(div);
      } catch (e) {
        return false;
      }
      return true;
    }
    module.exports = isElement;
  }, {}],
  78: [function(require2, module, exports) {
    function isIterable(val) {
      if (typeof val !== "object") {
        return false;
      }
      return typeof val[Symbol.iterator] === "function";
    }
    module.exports = isIterable;
  }, {}],
  79: [function(require2, module, exports) {
    function isMap(value) {
      return typeof Map !== "undefined" && value instanceof Map;
    }
    module.exports = isMap;
  }, {}],
  80: [function(require2, module, exports) {
    function isNaN2(value) {
      return typeof value === "number" && value !== value;
    }
    module.exports = isNaN2;
  }, {}],
  81: [function(require2, module, exports) {
    function isNegZero(value) {
      return value === 0 && 1 / value === -Infinity;
    }
    module.exports = isNegZero;
  }, {}],
  82: [function(require2, module, exports) {
    function isObject(value) {
      return typeof value === "object" && value !== null && // none of these are collection objects, so we can return false
      !(value instanceof Boolean) && !(value instanceof Date) && !(value instanceof Error) && !(value instanceof Number) && !(value instanceof RegExp) && !(value instanceof String);
    }
    module.exports = isObject;
  }, {}],
  83: [function(require2, module, exports) {
    function isSet(val) {
      return typeof Set !== "undefined" && val instanceof Set || false;
    }
    module.exports = isSet;
  }, {}],
  84: [function(require2, module, exports) {
    var forEach = require2("@sinonjs/commons").prototypes.set.forEach;
    function isSubset(s1, s2, compare) {
      var allContained = true;
      forEach(s1, function(v1) {
        var includes = false;
        forEach(s2, function(v2) {
          if (compare(v2, v1)) {
            includes = true;
          }
        });
        allContained = allContained && includes;
      });
      return allContained;
    }
    module.exports = isSubset;
  }, {
    "@sinonjs/commons": 47
  }],
  85: [function(require2, module, exports) {
    var slice = require2("@sinonjs/commons").prototypes.string.slice;
    var typeOf = require2("@sinonjs/commons").typeOf;
    var valueToString = require2("@sinonjs/commons").valueToString;
    function iterableToString(obj) {
      if (typeOf(obj) === "map") {
        return mapToString(obj);
      }
      return genericIterableToString(obj);
    }
    function mapToString(map) {
      var representation = "";
      map.forEach(function(value, key) {
        representation += `[${stringify(key)},${stringify(value)}],`;
      });
      representation = slice(representation, 0, -1);
      return representation;
    }
    function genericIterableToString(iterable) {
      var representation = "";
      iterable.forEach(function(value) {
        representation += `${stringify(value)},`;
      });
      representation = slice(representation, 0, -1);
      return representation;
    }
    function stringify(item) {
      return typeof item === "string" ? `'${item}'` : valueToString(item);
    }
    module.exports = iterableToString;
  }, {
    "@sinonjs/commons": 47
  }],
  86: [function(require2, module, exports) {
    var valueToString = require2("@sinonjs/commons").valueToString;
    var indexOf = require2("@sinonjs/commons").prototypes.string.indexOf;
    var forEach = require2("@sinonjs/commons").prototypes.array.forEach;
    var type = require2("type-detect");
    var engineCanCompareMaps = typeof Array.from === "function";
    var deepEqual = require2("./deep-equal").use(match);
    var isArrayType = require2("./is-array-type");
    var isSubset = require2("./is-subset");
    var createMatcher = require2("./create-matcher");
    function arrayContains(array, subset, compare) {
      if (subset.length === 0) {
        return true;
      }
      var i, l, j, k;
      for (i = 0, l = array.length; i < l; ++i) {
        if (compare(array[i], subset[0])) {
          for (j = 0, k = subset.length; j < k; ++j) {
            if (i + j >= l) {
              return false;
            }
            if (!compare(array[i + j], subset[j])) {
              return false;
            }
          }
          return true;
        }
      }
      return false;
    }
    function match(object, matcherOrValue) {
      if (matcherOrValue && typeof matcherOrValue.test === "function") {
        return matcherOrValue.test(object);
      }
      switch (type(matcherOrValue)) {
        case "bigint":
        case "boolean":
        case "number":
        case "symbol":
          return matcherOrValue === object;
        case "function":
          return matcherOrValue(object) === true;
        case "string":
          var notNull = typeof object === "string" || Boolean(object);
          return notNull && indexOf(valueToString(object).toLowerCase(), matcherOrValue.toLowerCase()) >= 0;
        case "null":
          return object === null;
        case "undefined":
          return typeof object === "undefined";
        case "Date":
          if (type(object) === "Date") {
            return object.getTime() === matcherOrValue.getTime();
          }
          break;
        case "Array":
        case "Int8Array":
        case "Uint8Array":
        case "Uint8ClampedArray":
        case "Int16Array":
        case "Uint16Array":
        case "Int32Array":
        case "Uint32Array":
        case "Float32Array":
        case "Float64Array":
          return isArrayType(matcherOrValue) && arrayContains(object, matcherOrValue, match);
        case "Map":
          if (!engineCanCompareMaps) {
            throw new Error("The JavaScript engine does not support Array.from and cannot reliably do value comparison of Map instances");
          }
          return type(object) === "Map" && arrayContains(Array.from(object), Array.from(matcherOrValue), match);
      }
      switch (type(object)) {
        case "null":
          return false;
        case "Set":
          return isSubset(matcherOrValue, object, match);
      }
      if (matcherOrValue && typeof matcherOrValue === "object") {
        if (matcherOrValue === object) {
          return true;
        }
        if (typeof object !== "object") {
          return false;
        }
        var prop;
        for (prop in matcherOrValue) {
          var value = object[prop];
          if (typeof value === "undefined" && typeof object.getAttribute === "function") {
            value = object.getAttribute(prop);
          }
          if (matcherOrValue[prop] === null || typeof matcherOrValue[prop] === "undefined") {
            if (value !== matcherOrValue[prop]) {
              return false;
            }
          } else if (typeof value === "undefined" || !deepEqual(value, matcherOrValue[prop])) {
            return false;
          }
        }
        return true;
      }
      throw new Error("Matcher was an unknown or unsupported type");
    }
    forEach(Object.keys(createMatcher), function(key) {
      match[key] = createMatcher[key];
    });
    module.exports = match;
  }, {
    "./create-matcher": 62,
    "./deep-equal": 71,
    "./is-array-type": 75,
    "./is-subset": 84,
    "@sinonjs/commons": 47,
    "type-detect": 88
  }],
  87: [function(require2, module, exports) {
    var identical = require2("./identical");
    var isArguments = require2("./is-arguments");
    var isElement = require2("./is-element");
    var isNegZero = require2("./is-neg-zero");
    var isSet = require2("./is-set");
    var isMap = require2("./is-map");
    var match = require2("./match");
    var deepEqualCyclic = require2("./deep-equal").use(match);
    var createMatcher = require2("./create-matcher");
    module.exports = {
      createMatcher,
      deepEqual: deepEqualCyclic,
      identical,
      isArguments,
      isElement,
      isMap,
      isNegZero,
      isSet,
      match
    };
  }, {
    "./create-matcher": 62,
    "./deep-equal": 71,
    "./identical": 73,
    "./is-arguments": 74,
    "./is-element": 77,
    "./is-map": 79,
    "./is-neg-zero": 81,
    "./is-set": 83,
    "./match": 86
  }],
  88: [function(require2, module, exports) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2.typeDetect = factory());
    })(this, function() {
      var promiseExists = typeof Promise === "function";
      var globalObject = function(Obj) {
        if (typeof globalThis === "object") {
          return globalThis;
        }
        Object.defineProperty(Obj, "typeDetectGlobalObject", {
          get: function get() {
            return this;
          },
          configurable: true
        });
        var global2 = typeDetectGlobalObject;
        delete Obj.typeDetectGlobalObject;
        return global2;
      }(Object.prototype);
      var symbolExists = typeof Symbol !== "undefined";
      var mapExists = typeof Map !== "undefined";
      var setExists = typeof Set !== "undefined";
      var weakMapExists = typeof WeakMap !== "undefined";
      var weakSetExists = typeof WeakSet !== "undefined";
      var dataViewExists = typeof DataView !== "undefined";
      var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== "undefined";
      var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== "undefined";
      var setEntriesExists = setExists && typeof Set.prototype.entries === "function";
      var mapEntriesExists = mapExists && typeof Map.prototype.entries === "function";
      var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf((/* @__PURE__ */ new Set()).entries());
      var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf((/* @__PURE__ */ new Map()).entries());
      var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === "function";
      var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
      var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === "function";
      var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(""[Symbol.iterator]());
      var toStringLeftSliceLength = 8;
      var toStringRightSliceLength = -1;
      function typeDetect(obj) {
        var typeofObj = typeof obj;
        if (typeofObj !== "object") {
          return typeofObj;
        }
        if (obj === null) {
          return "null";
        }
        if (obj === globalObject) {
          return "global";
        }
        if (Array.isArray(obj) && (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))) {
          return "Array";
        }
        if (typeof window === "object" && window !== null) {
          if (typeof window.location === "object" && obj === window.location) {
            return "Location";
          }
          if (typeof window.document === "object" && obj === window.document) {
            return "Document";
          }
          if (typeof window.navigator === "object") {
            if (typeof window.navigator.mimeTypes === "object" && obj === window.navigator.mimeTypes) {
              return "MimeTypeArray";
            }
            if (typeof window.navigator.plugins === "object" && obj === window.navigator.plugins) {
              return "PluginArray";
            }
          }
          if ((typeof window.HTMLElement === "function" || typeof window.HTMLElement === "object") && obj instanceof window.HTMLElement) {
            if (obj.tagName === "BLOCKQUOTE") {
              return "HTMLQuoteElement";
            }
            if (obj.tagName === "TD") {
              return "HTMLTableDataCellElement";
            }
            if (obj.tagName === "TH") {
              return "HTMLTableHeaderCellElement";
            }
          }
        }
        var stringTag = symbolToStringTagExists && obj[Symbol.toStringTag];
        if (typeof stringTag === "string") {
          return stringTag;
        }
        var objPrototype = Object.getPrototypeOf(obj);
        if (objPrototype === RegExp.prototype) {
          return "RegExp";
        }
        if (objPrototype === Date.prototype) {
          return "Date";
        }
        if (promiseExists && objPrototype === Promise.prototype) {
          return "Promise";
        }
        if (setExists && objPrototype === Set.prototype) {
          return "Set";
        }
        if (mapExists && objPrototype === Map.prototype) {
          return "Map";
        }
        if (weakSetExists && objPrototype === WeakSet.prototype) {
          return "WeakSet";
        }
        if (weakMapExists && objPrototype === WeakMap.prototype) {
          return "WeakMap";
        }
        if (dataViewExists && objPrototype === DataView.prototype) {
          return "DataView";
        }
        if (mapExists && objPrototype === mapIteratorPrototype) {
          return "Map Iterator";
        }
        if (setExists && objPrototype === setIteratorPrototype) {
          return "Set Iterator";
        }
        if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
          return "Array Iterator";
        }
        if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
          return "String Iterator";
        }
        if (objPrototype === null) {
          return "Object";
        }
        return Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
      }
      return typeDetect;
    });
  }, {}],
  89: [function(require2, module, exports) {
    if (typeof Object.create === "function") {
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
  }, {}],
  90: [function(require2, module, exports) {
    module.exports = function isBuffer(arg) {
      return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
    };
  }, {}],
  91: [function(require2, module, exports) {
    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(" ");
      }
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x2) {
        if (x2 === "%%") return "%";
        if (i >= len) return x2;
        switch (x2) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }
          default:
            return x2;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += " " + x;
        } else {
          str += " " + inspect(x);
        }
      }
      return str;
    };
    exports.deprecate = function(fn, msg) {
      if (isUndefined(global.process)) {
        return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
      }
      if (process.noDeprecation === true) {
        return fn;
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnviron;
    exports.debuglog = function(set) {
      if (isUndefined(debugEnviron)) debugEnviron = define_process_env_default.NODE_DEBUG || "";
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp("\\b" + set + "\\b", "i").test(debugEnviron)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports._extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      // "name": intentionally not styling
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
      if (style) {
        return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash = {};
      array.forEach(function(val, idx) {
        hash[val] = true;
      });
      return hash;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
      if (isError(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
        return formatError(value);
      }
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }
        if (isError(value)) {
          return formatError(value);
        }
      }
      var base = "", array = false, braces = ["{", "}"];
      if (isArray(value)) {
        array = true;
        braces = ["[", "]"];
      }
      if (isFunction(value)) {
        var n = value.name ? ": " + value.name : "";
        base = " [Function" + n + "]";
      }
      if (isRegExp(value)) {
        base = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate(value)) {
        base = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError(value)) {
        base = " " + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value);
      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value)) return ctx.stylize("undefined", "undefined");
      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber(value)) return ctx.stylize("" + value, "number");
      if (isBoolean(value)) return ctx.stylize("" + value, "boolean");
      if (isNull(value)) return ctx.stylize("null", "null");
    }
    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
        } else {
          output.push("");
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
        }
      });
      return output;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
      };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = "[" + key + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").substr(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, "name");
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, "string");
        }
      }
      return name + ": " + str;
    }
    function reduceToSingleString(output, base, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf("\n") >= 0) ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === "" ? "" : base + "\n ") + " " + output.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base + " " + output.join(", ") + " " + braces[1];
    }
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    exports.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === "string";
    }
    exports.isString = isString;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === "[object RegExp]";
    }
    exports.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports.isObject = isObject;
    function isDate(d) {
      return isObject(d) && objectToString(d) === "[object Date]";
    }
    exports.isDate = isDate;
    function isError(e) {
      return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
    }
    exports.isError = isError;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    exports.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    exports.isPrimitive = isPrimitive;
    exports.isBuffer = require2("./support/isBuffer");
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function pad(n) {
      return n < 10 ? "0" + n.toString(10) : n.toString(10);
    }
    var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function timestamp() {
      var d = /* @__PURE__ */ new Date();
      var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(":");
      return [d.getDate(), months[d.getMonth()], time].join(" ");
    }
    exports.log = function() {
      console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
    };
    exports.inherits = require2("inherits");
    exports._extend = function(origin, add) {
      if (!add || !isObject(add)) return origin;
      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    };
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
  }, {
    "./support/isBuffer": 90,
    "inherits": 89
  }],
  92: [function(require2, module, exports) {
    /*!
    
     diff v7.0.0
    
    BSD 3-Clause License
    
    Copyright (c) 2009-2015, Kevin Decker <kpdecker@gmail.com>
    All rights reserved.
    
    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions are met:
    
    1. Redistributions of source code must retain the above copyright notice, this
       list of conditions and the following disclaimer.
    
    2. Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.
    
    3. Neither the name of the copyright holder nor the names of its
       contributors may be used to endorse or promote products derived from
       this software without specific prior written permission.
    
    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
    FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
    DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
    CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
    OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    
    @license
    */
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, factory(global2.Diff = {}));
    })(this, function(exports2) {
      function Diff() {
      }
      Diff.prototype = {
        diff: function diff(oldString, newString) {
          var _options$timeout;
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var callback = options.callback;
          if (typeof options === "function") {
            callback = options;
            options = {};
          }
          var self2 = this;
          function done(value) {
            value = self2.postProcess(value, options);
            if (callback) {
              setTimeout(function() {
                callback(value);
              }, 0);
              return true;
            } else {
              return value;
            }
          }
          oldString = this.castInput(oldString, options);
          newString = this.castInput(newString, options);
          oldString = this.removeEmpty(this.tokenize(oldString, options));
          newString = this.removeEmpty(this.tokenize(newString, options));
          var newLen = newString.length, oldLen = oldString.length;
          var editLength = 1;
          var maxEditLength = newLen + oldLen;
          if (options.maxEditLength != null) {
            maxEditLength = Math.min(maxEditLength, options.maxEditLength);
          }
          var maxExecutionTime = (_options$timeout = options.timeout) !== null && _options$timeout !== void 0 ? _options$timeout : Infinity;
          var abortAfterTimestamp = Date.now() + maxExecutionTime;
          var bestPath = [{
            oldPos: -1,
            lastComponent: void 0
          }];
          var newPos = this.extractCommon(bestPath[0], newString, oldString, 0, options);
          if (bestPath[0].oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
            return done(buildValues(self2, bestPath[0].lastComponent, newString, oldString, self2.useLongestToken));
          }
          var minDiagonalToConsider = -Infinity, maxDiagonalToConsider = Infinity;
          function execEditLength() {
            for (var diagonalPath = Math.max(minDiagonalToConsider, -editLength); diagonalPath <= Math.min(maxDiagonalToConsider, editLength); diagonalPath += 2) {
              var basePath = void 0;
              var removePath = bestPath[diagonalPath - 1], addPath = bestPath[diagonalPath + 1];
              if (removePath) {
                bestPath[diagonalPath - 1] = void 0;
              }
              var canAdd = false;
              if (addPath) {
                var addPathNewPos = addPath.oldPos - diagonalPath;
                canAdd = addPath && 0 <= addPathNewPos && addPathNewPos < newLen;
              }
              var canRemove = removePath && removePath.oldPos + 1 < oldLen;
              if (!canAdd && !canRemove) {
                bestPath[diagonalPath] = void 0;
                continue;
              }
              if (!canRemove || canAdd && removePath.oldPos < addPath.oldPos) {
                basePath = self2.addToPath(addPath, true, false, 0, options);
              } else {
                basePath = self2.addToPath(removePath, false, true, 1, options);
              }
              newPos = self2.extractCommon(basePath, newString, oldString, diagonalPath, options);
              if (basePath.oldPos + 1 >= oldLen && newPos + 1 >= newLen) {
                return done(buildValues(self2, basePath.lastComponent, newString, oldString, self2.useLongestToken));
              } else {
                bestPath[diagonalPath] = basePath;
                if (basePath.oldPos + 1 >= oldLen) {
                  maxDiagonalToConsider = Math.min(maxDiagonalToConsider, diagonalPath - 1);
                }
                if (newPos + 1 >= newLen) {
                  minDiagonalToConsider = Math.max(minDiagonalToConsider, diagonalPath + 1);
                }
              }
            }
            editLength++;
          }
          if (callback) {
            (function exec() {
              setTimeout(function() {
                if (editLength > maxEditLength || Date.now() > abortAfterTimestamp) {
                  return callback();
                }
                if (!execEditLength()) {
                  exec();
                }
              }, 0);
            })();
          } else {
            while (editLength <= maxEditLength && Date.now() <= abortAfterTimestamp) {
              var ret = execEditLength();
              if (ret) {
                return ret;
              }
            }
          }
        },
        addToPath: function addToPath(path, added, removed, oldPosInc, options) {
          var last = path.lastComponent;
          if (last && !options.oneChangePerToken && last.added === added && last.removed === removed) {
            return {
              oldPos: path.oldPos + oldPosInc,
              lastComponent: {
                count: last.count + 1,
                added,
                removed,
                previousComponent: last.previousComponent
              }
            };
          } else {
            return {
              oldPos: path.oldPos + oldPosInc,
              lastComponent: {
                count: 1,
                added,
                removed,
                previousComponent: last
              }
            };
          }
        },
        extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath, options) {
          var newLen = newString.length, oldLen = oldString.length, oldPos = basePath.oldPos, newPos = oldPos - diagonalPath, commonCount = 0;
          while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(oldString[oldPos + 1], newString[newPos + 1], options)) {
            newPos++;
            oldPos++;
            commonCount++;
            if (options.oneChangePerToken) {
              basePath.lastComponent = {
                count: 1,
                previousComponent: basePath.lastComponent,
                added: false,
                removed: false
              };
            }
          }
          if (commonCount && !options.oneChangePerToken) {
            basePath.lastComponent = {
              count: commonCount,
              previousComponent: basePath.lastComponent,
              added: false,
              removed: false
            };
          }
          basePath.oldPos = oldPos;
          return newPos;
        },
        equals: function equals(left, right, options) {
          if (options.comparator) {
            return options.comparator(left, right);
          } else {
            return left === right || options.ignoreCase && left.toLowerCase() === right.toLowerCase();
          }
        },
        removeEmpty: function removeEmpty(array) {
          var ret = [];
          for (var i = 0; i < array.length; i++) {
            if (array[i]) {
              ret.push(array[i]);
            }
          }
          return ret;
        },
        castInput: function castInput(value) {
          return value;
        },
        tokenize: function tokenize(value) {
          return Array.from(value);
        },
        join: function join(chars) {
          return chars.join("");
        },
        postProcess: function postProcess(changeObjects) {
          return changeObjects;
        }
      };
      function buildValues(diff, lastComponent, newString, oldString, useLongestToken) {
        var components = [];
        var nextComponent;
        while (lastComponent) {
          components.push(lastComponent);
          nextComponent = lastComponent.previousComponent;
          delete lastComponent.previousComponent;
          lastComponent = nextComponent;
        }
        components.reverse();
        var componentPos = 0, componentLen = components.length, newPos = 0, oldPos = 0;
        for (; componentPos < componentLen; componentPos++) {
          var component = components[componentPos];
          if (!component.removed) {
            if (!component.added && useLongestToken) {
              var value = newString.slice(newPos, newPos + component.count);
              value = value.map(function(value2, i) {
                var oldValue = oldString[oldPos + i];
                return oldValue.length > value2.length ? oldValue : value2;
              });
              component.value = diff.join(value);
            } else {
              component.value = diff.join(newString.slice(newPos, newPos + component.count));
            }
            newPos += component.count;
            if (!component.added) {
              oldPos += component.count;
            }
          } else {
            component.value = diff.join(oldString.slice(oldPos, oldPos + component.count));
            oldPos += component.count;
          }
        }
        return components;
      }
      var characterDiff = new Diff();
      function diffChars(oldStr, newStr, options) {
        return characterDiff.diff(oldStr, newStr, options);
      }
      function longestCommonPrefix(str1, str2) {
        var i;
        for (i = 0; i < str1.length && i < str2.length; i++) {
          if (str1[i] != str2[i]) {
            return str1.slice(0, i);
          }
        }
        return str1.slice(0, i);
      }
      function longestCommonSuffix(str1, str2) {
        var i;
        if (!str1 || !str2 || str1[str1.length - 1] != str2[str2.length - 1]) {
          return "";
        }
        for (i = 0; i < str1.length && i < str2.length; i++) {
          if (str1[str1.length - (i + 1)] != str2[str2.length - (i + 1)]) {
            return str1.slice(-i);
          }
        }
        return str1.slice(-i);
      }
      function replacePrefix(string, oldPrefix, newPrefix) {
        if (string.slice(0, oldPrefix.length) != oldPrefix) {
          throw Error("string ".concat(JSON.stringify(string), " doesn't start with prefix ").concat(JSON.stringify(oldPrefix), "; this is a bug"));
        }
        return newPrefix + string.slice(oldPrefix.length);
      }
      function replaceSuffix(string, oldSuffix, newSuffix) {
        if (!oldSuffix) {
          return string + newSuffix;
        }
        if (string.slice(-oldSuffix.length) != oldSuffix) {
          throw Error("string ".concat(JSON.stringify(string), " doesn't end with suffix ").concat(JSON.stringify(oldSuffix), "; this is a bug"));
        }
        return string.slice(0, -oldSuffix.length) + newSuffix;
      }
      function removePrefix(string, oldPrefix) {
        return replacePrefix(string, oldPrefix, "");
      }
      function removeSuffix(string, oldSuffix) {
        return replaceSuffix(string, oldSuffix, "");
      }
      function maximumOverlap(string1, string2) {
        return string2.slice(0, overlapCount(string1, string2));
      }
      function overlapCount(a, b) {
        var startA = 0;
        if (a.length > b.length) {
          startA = a.length - b.length;
        }
        var endB = b.length;
        if (a.length < b.length) {
          endB = a.length;
        }
        var map = Array(endB);
        var k = 0;
        map[0] = 0;
        for (var j = 1; j < endB; j++) {
          if (b[j] == b[k]) {
            map[j] = map[k];
          } else {
            map[j] = k;
          }
          while (k > 0 && b[j] != b[k]) {
            k = map[k];
          }
          if (b[j] == b[k]) {
            k++;
          }
        }
        k = 0;
        for (var i = startA; i < a.length; i++) {
          while (k > 0 && a[i] != b[k]) {
            k = map[k];
          }
          if (a[i] == b[k]) {
            k++;
          }
        }
        return k;
      }
      function hasOnlyWinLineEndings(string) {
        return string.includes("\r\n") && !string.startsWith("\n") && !string.match(/[^\r]\n/);
      }
      function hasOnlyUnixLineEndings(string) {
        return !string.includes("\r\n") && string.includes("\n");
      }
      var extendedWordChars = "a-zA-Z0-9_\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}";
      var tokenizeIncludingWhitespace = new RegExp("[".concat(extendedWordChars, "]+|\\s+|[^").concat(extendedWordChars, "]"), "ug");
      var wordDiff = new Diff();
      wordDiff.equals = function(left, right, options) {
        if (options.ignoreCase) {
          left = left.toLowerCase();
          right = right.toLowerCase();
        }
        return left.trim() === right.trim();
      };
      wordDiff.tokenize = function(value) {
        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var parts;
        if (options.intlSegmenter) {
          if (options.intlSegmenter.resolvedOptions().granularity != "word") {
            throw new Error('The segmenter passed must have a granularity of "word"');
          }
          parts = Array.from(options.intlSegmenter.segment(value), function(segment) {
            return segment.segment;
          });
        } else {
          parts = value.match(tokenizeIncludingWhitespace) || [];
        }
        var tokens = [];
        var prevPart = null;
        parts.forEach(function(part) {
          if (/\s/.test(part)) {
            if (prevPart == null) {
              tokens.push(part);
            } else {
              tokens.push(tokens.pop() + part);
            }
          } else if (/\s/.test(prevPart)) {
            if (tokens[tokens.length - 1] == prevPart) {
              tokens.push(tokens.pop() + part);
            } else {
              tokens.push(prevPart + part);
            }
          } else {
            tokens.push(part);
          }
          prevPart = part;
        });
        return tokens;
      };
      wordDiff.join = function(tokens) {
        return tokens.map(function(token, i) {
          if (i == 0) {
            return token;
          } else {
            return token.replace(/^\s+/, "");
          }
        }).join("");
      };
      wordDiff.postProcess = function(changes, options) {
        if (!changes || options.oneChangePerToken) {
          return changes;
        }
        var lastKeep = null;
        var insertion = null;
        var deletion = null;
        changes.forEach(function(change) {
          if (change.added) {
            insertion = change;
          } else if (change.removed) {
            deletion = change;
          } else {
            if (insertion || deletion) {
              dedupeWhitespaceInChangeObjects(lastKeep, deletion, insertion, change);
            }
            lastKeep = change;
            insertion = null;
            deletion = null;
          }
        });
        if (insertion || deletion) {
          dedupeWhitespaceInChangeObjects(lastKeep, deletion, insertion, null);
        }
        return changes;
      };
      function diffWords(oldStr, newStr, options) {
        if ((options === null || options === void 0 ? void 0 : options.ignoreWhitespace) != null && !options.ignoreWhitespace) {
          return diffWordsWithSpace(oldStr, newStr, options);
        }
        return wordDiff.diff(oldStr, newStr, options);
      }
      function dedupeWhitespaceInChangeObjects(startKeep, deletion, insertion, endKeep) {
        if (deletion && insertion) {
          var oldWsPrefix = deletion.value.match(/^\s*/)[0];
          var oldWsSuffix = deletion.value.match(/\s*$/)[0];
          var newWsPrefix = insertion.value.match(/^\s*/)[0];
          var newWsSuffix = insertion.value.match(/\s*$/)[0];
          if (startKeep) {
            var commonWsPrefix = longestCommonPrefix(oldWsPrefix, newWsPrefix);
            startKeep.value = replaceSuffix(startKeep.value, newWsPrefix, commonWsPrefix);
            deletion.value = removePrefix(deletion.value, commonWsPrefix);
            insertion.value = removePrefix(insertion.value, commonWsPrefix);
          }
          if (endKeep) {
            var commonWsSuffix = longestCommonSuffix(oldWsSuffix, newWsSuffix);
            endKeep.value = replacePrefix(endKeep.value, newWsSuffix, commonWsSuffix);
            deletion.value = removeSuffix(deletion.value, commonWsSuffix);
            insertion.value = removeSuffix(insertion.value, commonWsSuffix);
          }
        } else if (insertion) {
          if (startKeep) {
            insertion.value = insertion.value.replace(/^\s*/, "");
          }
          if (endKeep) {
            endKeep.value = endKeep.value.replace(/^\s*/, "");
          }
        } else if (startKeep && endKeep) {
          var newWsFull = endKeep.value.match(/^\s*/)[0], delWsStart = deletion.value.match(/^\s*/)[0], delWsEnd = deletion.value.match(/\s*$/)[0];
          var newWsStart = longestCommonPrefix(newWsFull, delWsStart);
          deletion.value = removePrefix(deletion.value, newWsStart);
          var newWsEnd = longestCommonSuffix(removePrefix(newWsFull, newWsStart), delWsEnd);
          deletion.value = removeSuffix(deletion.value, newWsEnd);
          endKeep.value = replacePrefix(endKeep.value, newWsFull, newWsEnd);
          startKeep.value = replaceSuffix(startKeep.value, newWsFull, newWsFull.slice(0, newWsFull.length - newWsEnd.length));
        } else if (endKeep) {
          var endKeepWsPrefix = endKeep.value.match(/^\s*/)[0];
          var deletionWsSuffix = deletion.value.match(/\s*$/)[0];
          var overlap = maximumOverlap(deletionWsSuffix, endKeepWsPrefix);
          deletion.value = removeSuffix(deletion.value, overlap);
        } else if (startKeep) {
          var startKeepWsSuffix = startKeep.value.match(/\s*$/)[0];
          var deletionWsPrefix = deletion.value.match(/^\s*/)[0];
          var _overlap = maximumOverlap(startKeepWsSuffix, deletionWsPrefix);
          deletion.value = removePrefix(deletion.value, _overlap);
        }
      }
      var wordWithSpaceDiff = new Diff();
      wordWithSpaceDiff.tokenize = function(value) {
        var regex = new RegExp("(\\r?\\n)|[".concat(extendedWordChars, "]+|[^\\S\\n\\r]+|[^").concat(extendedWordChars, "]"), "ug");
        return value.match(regex) || [];
      };
      function diffWordsWithSpace(oldStr, newStr, options) {
        return wordWithSpaceDiff.diff(oldStr, newStr, options);
      }
      function generateOptions(options, defaults) {
        if (typeof options === "function") {
          defaults.callback = options;
        } else if (options) {
          for (var name in options) {
            if (options.hasOwnProperty(name)) {
              defaults[name] = options[name];
            }
          }
        }
        return defaults;
      }
      var lineDiff = new Diff();
      lineDiff.tokenize = function(value, options) {
        if (options.stripTrailingCr) {
          value = value.replace(/\r\n/g, "\n");
        }
        var retLines = [], linesAndNewlines = value.split(/(\n|\r\n)/);
        if (!linesAndNewlines[linesAndNewlines.length - 1]) {
          linesAndNewlines.pop();
        }
        for (var i = 0; i < linesAndNewlines.length; i++) {
          var line = linesAndNewlines[i];
          if (i % 2 && !options.newlineIsToken) {
            retLines[retLines.length - 1] += line;
          } else {
            retLines.push(line);
          }
        }
        return retLines;
      };
      lineDiff.equals = function(left, right, options) {
        if (options.ignoreWhitespace) {
          if (!options.newlineIsToken || !left.includes("\n")) {
            left = left.trim();
          }
          if (!options.newlineIsToken || !right.includes("\n")) {
            right = right.trim();
          }
        } else if (options.ignoreNewlineAtEof && !options.newlineIsToken) {
          if (left.endsWith("\n")) {
            left = left.slice(0, -1);
          }
          if (right.endsWith("\n")) {
            right = right.slice(0, -1);
          }
        }
        return Diff.prototype.equals.call(this, left, right, options);
      };
      function diffLines(oldStr, newStr, callback) {
        return lineDiff.diff(oldStr, newStr, callback);
      }
      function diffTrimmedLines(oldStr, newStr, callback) {
        var options = generateOptions(callback, {
          ignoreWhitespace: true
        });
        return lineDiff.diff(oldStr, newStr, options);
      }
      var sentenceDiff = new Diff();
      sentenceDiff.tokenize = function(value) {
        return value.split(/(\S.+?[.!?])(?=\s+|$)/);
      };
      function diffSentences(oldStr, newStr, callback) {
        return sentenceDiff.diff(oldStr, newStr, callback);
      }
      var cssDiff = new Diff();
      cssDiff.tokenize = function(value) {
        return value.split(/([{}:;,]|\s+)/);
      };
      function diffCss(oldStr, newStr, callback) {
        return cssDiff.diff(oldStr, newStr, callback);
      }
      function ownKeys(e, r) {
        var t = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var o = Object.getOwnPropertySymbols(e);
          r && (o = o.filter(function(r2) {
            return Object.getOwnPropertyDescriptor(e, r2).enumerable;
          })), t.push.apply(t, o);
        }
        return t;
      }
      function _objectSpread2(e) {
        for (var r = 1; r < arguments.length; r++) {
          var t = null != arguments[r] ? arguments[r] : {};
          r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
            _defineProperty(e, r2, t[r2]);
          }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
            Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
          });
        }
        return e;
      }
      function _toPrimitive(t, r) {
        if ("object" != typeof t || !t) return t;
        var e = t[Symbol.toPrimitive];
        if (void 0 !== e) {
          var i = e.call(t, r);
          if ("object" != typeof i) return i;
          throw new TypeError("@@toPrimitive must return a primitive value.");
        }
        return ("string" === r ? String : Number)(t);
      }
      function _toPropertyKey(t) {
        var i = _toPrimitive(t, "string");
        return "symbol" == typeof i ? i : i + "";
      }
      function _typeof(o) {
        "@babel/helpers - typeof";
        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
          return typeof o2;
        } : function(o2) {
          return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
        }, _typeof(o);
      }
      function _defineProperty(obj, key, value) {
        key = _toPropertyKey(key);
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }
        return obj;
      }
      function _toConsumableArray(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr)) return _arrayLikeToArray(arr);
      }
      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
      }
      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;
        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
        return arr2;
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      var jsonDiff = new Diff();
      jsonDiff.useLongestToken = true;
      jsonDiff.tokenize = lineDiff.tokenize;
      jsonDiff.castInput = function(value, options) {
        var undefinedReplacement = options.undefinedReplacement, _options$stringifyRep = options.stringifyReplacer, stringifyReplacer = _options$stringifyRep === void 0 ? function(k, v) {
          return typeof v === "undefined" ? undefinedReplacement : v;
        } : _options$stringifyRep;
        return typeof value === "string" ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, "  ");
      };
      jsonDiff.equals = function(left, right, options) {
        return Diff.prototype.equals.call(jsonDiff, left.replace(/,([\r\n])/g, "$1"), right.replace(/,([\r\n])/g, "$1"), options);
      };
      function diffJson(oldObj, newObj, options) {
        return jsonDiff.diff(oldObj, newObj, options);
      }
      function canonicalize(obj, stack, replacementStack, replacer, key) {
        stack = stack || [];
        replacementStack = replacementStack || [];
        if (replacer) {
          obj = replacer(key, obj);
        }
        var i;
        for (i = 0; i < stack.length; i += 1) {
          if (stack[i] === obj) {
            return replacementStack[i];
          }
        }
        var canonicalizedObj;
        if ("[object Array]" === Object.prototype.toString.call(obj)) {
          stack.push(obj);
          canonicalizedObj = new Array(obj.length);
          replacementStack.push(canonicalizedObj);
          for (i = 0; i < obj.length; i += 1) {
            canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key);
          }
          stack.pop();
          replacementStack.pop();
          return canonicalizedObj;
        }
        if (obj && obj.toJSON) {
          obj = obj.toJSON();
        }
        if (_typeof(obj) === "object" && obj !== null) {
          stack.push(obj);
          canonicalizedObj = {};
          replacementStack.push(canonicalizedObj);
          var sortedKeys = [], _key;
          for (_key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, _key)) {
              sortedKeys.push(_key);
            }
          }
          sortedKeys.sort();
          for (i = 0; i < sortedKeys.length; i += 1) {
            _key = sortedKeys[i];
            canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
          }
          stack.pop();
          replacementStack.pop();
        } else {
          canonicalizedObj = obj;
        }
        return canonicalizedObj;
      }
      var arrayDiff = new Diff();
      arrayDiff.tokenize = function(value) {
        return value.slice();
      };
      arrayDiff.join = arrayDiff.removeEmpty = function(value) {
        return value;
      };
      function diffArrays(oldArr, newArr, callback) {
        return arrayDiff.diff(oldArr, newArr, callback);
      }
      function unixToWin(patch) {
        if (Array.isArray(patch)) {
          return patch.map(unixToWin);
        }
        return _objectSpread2(_objectSpread2({}, patch), {}, {
          hunks: patch.hunks.map(function(hunk) {
            return _objectSpread2(_objectSpread2({}, hunk), {}, {
              lines: hunk.lines.map(function(line, i) {
                var _hunk$lines;
                return line.startsWith("\\") || line.endsWith("\r") || (_hunk$lines = hunk.lines[i + 1]) !== null && _hunk$lines !== void 0 && _hunk$lines.startsWith("\\") ? line : line + "\r";
              })
            });
          })
        });
      }
      function winToUnix(patch) {
        if (Array.isArray(patch)) {
          return patch.map(winToUnix);
        }
        return _objectSpread2(_objectSpread2({}, patch), {}, {
          hunks: patch.hunks.map(function(hunk) {
            return _objectSpread2(_objectSpread2({}, hunk), {}, {
              lines: hunk.lines.map(function(line) {
                return line.endsWith("\r") ? line.substring(0, line.length - 1) : line;
              })
            });
          })
        });
      }
      function isUnix(patch) {
        if (!Array.isArray(patch)) {
          patch = [patch];
        }
        return !patch.some(function(index) {
          return index.hunks.some(function(hunk) {
            return hunk.lines.some(function(line) {
              return !line.startsWith("\\") && line.endsWith("\r");
            });
          });
        });
      }
      function isWin(patch) {
        if (!Array.isArray(patch)) {
          patch = [patch];
        }
        return patch.some(function(index) {
          return index.hunks.some(function(hunk) {
            return hunk.lines.some(function(line) {
              return line.endsWith("\r");
            });
          });
        }) && patch.every(function(index) {
          return index.hunks.every(function(hunk) {
            return hunk.lines.every(function(line, i) {
              var _hunk$lines2;
              return line.startsWith("\\") || line.endsWith("\r") || ((_hunk$lines2 = hunk.lines[i + 1]) === null || _hunk$lines2 === void 0 ? void 0 : _hunk$lines2.startsWith("\\"));
            });
          });
        });
      }
      function parsePatch(uniDiff) {
        var diffstr = uniDiff.split(/\n/), list = [], i = 0;
        function parseIndex() {
          var index = {};
          list.push(index);
          while (i < diffstr.length) {
            var line = diffstr[i];
            if (/^(\-\-\-|\+\+\+|@@)\s/.test(line)) {
              break;
            }
            var header = /^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line);
            if (header) {
              index.index = header[1];
            }
            i++;
          }
          parseFileHeader(index);
          parseFileHeader(index);
          index.hunks = [];
          while (i < diffstr.length) {
            var _line = diffstr[i];
            if (/^(Index:\s|diff\s|\-\-\-\s|\+\+\+\s|===================================================================)/.test(_line)) {
              break;
            } else if (/^@@/.test(_line)) {
              index.hunks.push(parseHunk());
            } else if (_line) {
              throw new Error("Unknown line " + (i + 1) + " " + JSON.stringify(_line));
            } else {
              i++;
            }
          }
        }
        function parseFileHeader(index) {
          var fileHeader = /^(---|\+\+\+)\s+(.*)\r?$/.exec(diffstr[i]);
          if (fileHeader) {
            var keyPrefix = fileHeader[1] === "---" ? "old" : "new";
            var data = fileHeader[2].split("	", 2);
            var fileName = data[0].replace(/\\\\/g, "\\");
            if (/^".*"$/.test(fileName)) {
              fileName = fileName.substr(1, fileName.length - 2);
            }
            index[keyPrefix + "FileName"] = fileName;
            index[keyPrefix + "Header"] = (data[1] || "").trim();
            i++;
          }
        }
        function parseHunk() {
          var chunkHeaderIndex = i, chunkHeaderLine = diffstr[i++], chunkHeader = chunkHeaderLine.split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/);
          var hunk = {
            oldStart: +chunkHeader[1],
            oldLines: typeof chunkHeader[2] === "undefined" ? 1 : +chunkHeader[2],
            newStart: +chunkHeader[3],
            newLines: typeof chunkHeader[4] === "undefined" ? 1 : +chunkHeader[4],
            lines: []
          };
          if (hunk.oldLines === 0) {
            hunk.oldStart += 1;
          }
          if (hunk.newLines === 0) {
            hunk.newStart += 1;
          }
          var addCount = 0, removeCount = 0;
          for (; i < diffstr.length && (removeCount < hunk.oldLines || addCount < hunk.newLines || (_diffstr$i = diffstr[i]) !== null && _diffstr$i !== void 0 && _diffstr$i.startsWith("\\")); i++) {
            var _diffstr$i;
            var operation = diffstr[i].length == 0 && i != diffstr.length - 1 ? " " : diffstr[i][0];
            if (operation === "+" || operation === "-" || operation === " " || operation === "\\") {
              hunk.lines.push(diffstr[i]);
              if (operation === "+") {
                addCount++;
              } else if (operation === "-") {
                removeCount++;
              } else if (operation === " ") {
                addCount++;
                removeCount++;
              }
            } else {
              throw new Error("Hunk at line ".concat(chunkHeaderIndex + 1, " contained invalid line ").concat(diffstr[i]));
            }
          }
          if (!addCount && hunk.newLines === 1) {
            hunk.newLines = 0;
          }
          if (!removeCount && hunk.oldLines === 1) {
            hunk.oldLines = 0;
          }
          if (addCount !== hunk.newLines) {
            throw new Error("Added line count did not match for hunk at line " + (chunkHeaderIndex + 1));
          }
          if (removeCount !== hunk.oldLines) {
            throw new Error("Removed line count did not match for hunk at line " + (chunkHeaderIndex + 1));
          }
          return hunk;
        }
        while (i < diffstr.length) {
          parseIndex();
        }
        return list;
      }
      function distanceIterator(start, minLine, maxLine) {
        var wantForward = true, backwardExhausted = false, forwardExhausted = false, localOffset = 1;
        return function iterator() {
          if (wantForward && !forwardExhausted) {
            if (backwardExhausted) {
              localOffset++;
            } else {
              wantForward = false;
            }
            if (start + localOffset <= maxLine) {
              return start + localOffset;
            }
            forwardExhausted = true;
          }
          if (!backwardExhausted) {
            if (!forwardExhausted) {
              wantForward = true;
            }
            if (minLine <= start - localOffset) {
              return start - localOffset++;
            }
            backwardExhausted = true;
            return iterator();
          }
        };
      }
      function applyPatch(source, uniDiff) {
        var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        if (typeof uniDiff === "string") {
          uniDiff = parsePatch(uniDiff);
        }
        if (Array.isArray(uniDiff)) {
          if (uniDiff.length > 1) {
            throw new Error("applyPatch only works with a single input.");
          }
          uniDiff = uniDiff[0];
        }
        if (options.autoConvertLineEndings || options.autoConvertLineEndings == null) {
          if (hasOnlyWinLineEndings(source) && isUnix(uniDiff)) {
            uniDiff = unixToWin(uniDiff);
          } else if (hasOnlyUnixLineEndings(source) && isWin(uniDiff)) {
            uniDiff = winToUnix(uniDiff);
          }
        }
        var lines = source.split("\n"), hunks = uniDiff.hunks, compareLine = options.compareLine || function(lineNumber, line2, operation, patchContent) {
          return line2 === patchContent;
        }, fuzzFactor = options.fuzzFactor || 0, minLine = 0;
        if (fuzzFactor < 0 || !Number.isInteger(fuzzFactor)) {
          throw new Error("fuzzFactor must be a non-negative integer");
        }
        if (!hunks.length) {
          return source;
        }
        var prevLine = "", removeEOFNL = false, addEOFNL = false;
        for (var i = 0; i < hunks[hunks.length - 1].lines.length; i++) {
          var line = hunks[hunks.length - 1].lines[i];
          if (line[0] == "\\") {
            if (prevLine[0] == "+") {
              removeEOFNL = true;
            } else if (prevLine[0] == "-") {
              addEOFNL = true;
            }
          }
          prevLine = line;
        }
        if (removeEOFNL) {
          if (addEOFNL) {
            if (!fuzzFactor && lines[lines.length - 1] == "") {
              return false;
            }
          } else if (lines[lines.length - 1] == "") {
            lines.pop();
          } else if (!fuzzFactor) {
            return false;
          }
        } else if (addEOFNL) {
          if (lines[lines.length - 1] != "") {
            lines.push("");
          } else if (!fuzzFactor) {
            return false;
          }
        }
        function applyHunk(hunkLines, toPos2, maxErrors2) {
          var hunkLinesI = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
          var lastContextLineMatched = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
          var patchedLines = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : [];
          var patchedLinesLength = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : 0;
          var nConsecutiveOldContextLines = 0;
          var nextContextLineMustMatch = false;
          for (; hunkLinesI < hunkLines.length; hunkLinesI++) {
            var hunkLine = hunkLines[hunkLinesI], operation = hunkLine.length > 0 ? hunkLine[0] : " ", content = hunkLine.length > 0 ? hunkLine.substr(1) : hunkLine;
            if (operation === "-") {
              if (compareLine(toPos2 + 1, lines[toPos2], operation, content)) {
                toPos2++;
                nConsecutiveOldContextLines = 0;
              } else {
                if (!maxErrors2 || lines[toPos2] == null) {
                  return null;
                }
                patchedLines[patchedLinesLength] = lines[toPos2];
                return applyHunk(hunkLines, toPos2 + 1, maxErrors2 - 1, hunkLinesI, false, patchedLines, patchedLinesLength + 1);
              }
            }
            if (operation === "+") {
              if (!lastContextLineMatched) {
                return null;
              }
              patchedLines[patchedLinesLength] = content;
              patchedLinesLength++;
              nConsecutiveOldContextLines = 0;
              nextContextLineMustMatch = true;
            }
            if (operation === " ") {
              nConsecutiveOldContextLines++;
              patchedLines[patchedLinesLength] = lines[toPos2];
              if (compareLine(toPos2 + 1, lines[toPos2], operation, content)) {
                patchedLinesLength++;
                lastContextLineMatched = true;
                nextContextLineMustMatch = false;
                toPos2++;
              } else {
                if (nextContextLineMustMatch || !maxErrors2) {
                  return null;
                }
                return lines[toPos2] && (applyHunk(hunkLines, toPos2 + 1, maxErrors2 - 1, hunkLinesI + 1, false, patchedLines, patchedLinesLength + 1) || applyHunk(hunkLines, toPos2 + 1, maxErrors2 - 1, hunkLinesI, false, patchedLines, patchedLinesLength + 1)) || applyHunk(hunkLines, toPos2, maxErrors2 - 1, hunkLinesI + 1, false, patchedLines, patchedLinesLength);
              }
            }
          }
          patchedLinesLength -= nConsecutiveOldContextLines;
          toPos2 -= nConsecutiveOldContextLines;
          patchedLines.length = patchedLinesLength;
          return {
            patchedLines,
            oldLineLastI: toPos2 - 1
          };
        }
        var resultLines = [];
        var prevHunkOffset = 0;
        for (var _i = 0; _i < hunks.length; _i++) {
          var hunk = hunks[_i];
          var hunkResult = void 0;
          var maxLine = lines.length - hunk.oldLines + fuzzFactor;
          var toPos = void 0;
          for (var maxErrors = 0; maxErrors <= fuzzFactor; maxErrors++) {
            toPos = hunk.oldStart + prevHunkOffset - 1;
            var iterator = distanceIterator(toPos, minLine, maxLine);
            for (; toPos !== void 0; toPos = iterator()) {
              hunkResult = applyHunk(hunk.lines, toPos, maxErrors);
              if (hunkResult) {
                break;
              }
            }
            if (hunkResult) {
              break;
            }
          }
          if (!hunkResult) {
            return false;
          }
          for (var _i2 = minLine; _i2 < toPos; _i2++) {
            resultLines.push(lines[_i2]);
          }
          for (var _i3 = 0; _i3 < hunkResult.patchedLines.length; _i3++) {
            var _line = hunkResult.patchedLines[_i3];
            resultLines.push(_line);
          }
          minLine = hunkResult.oldLineLastI + 1;
          prevHunkOffset = toPos + 1 - hunk.oldStart;
        }
        for (var _i4 = minLine; _i4 < lines.length; _i4++) {
          resultLines.push(lines[_i4]);
        }
        return resultLines.join("\n");
      }
      function applyPatches(uniDiff, options) {
        if (typeof uniDiff === "string") {
          uniDiff = parsePatch(uniDiff);
        }
        var currentIndex = 0;
        function processIndex() {
          var index = uniDiff[currentIndex++];
          if (!index) {
            return options.complete();
          }
          options.loadFile(index, function(err, data) {
            if (err) {
              return options.complete(err);
            }
            var updatedContent = applyPatch(data, index, options);
            options.patched(index, updatedContent, function(err2) {
              if (err2) {
                return options.complete(err2);
              }
              processIndex();
            });
          });
        }
        processIndex();
      }
      function structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
        if (!options) {
          options = {};
        }
        if (typeof options === "function") {
          options = {
            callback: options
          };
        }
        if (typeof options.context === "undefined") {
          options.context = 4;
        }
        if (options.newlineIsToken) {
          throw new Error("newlineIsToken may not be used with patch-generation functions, only with diffing functions");
        }
        if (!options.callback) {
          return diffLinesResultToPatch(diffLines(oldStr, newStr, options));
        } else {
          var _options = options, _callback = _options.callback;
          diffLines(oldStr, newStr, _objectSpread2(_objectSpread2({}, options), {}, {
            callback: function callback(diff) {
              var patch = diffLinesResultToPatch(diff);
              _callback(patch);
            }
          }));
        }
        function diffLinesResultToPatch(diff) {
          if (!diff) {
            return;
          }
          diff.push({
            value: "",
            lines: []
          });
          function contextLines(lines) {
            return lines.map(function(entry) {
              return " " + entry;
            });
          }
          var hunks = [];
          var oldRangeStart = 0, newRangeStart = 0, curRange = [], oldLine = 1, newLine = 1;
          var _loop = function _loop2() {
            var current = diff[i], lines = current.lines || splitLines(current.value);
            current.lines = lines;
            if (current.added || current.removed) {
              var _curRange;
              if (!oldRangeStart) {
                var prev = diff[i - 1];
                oldRangeStart = oldLine;
                newRangeStart = newLine;
                if (prev) {
                  curRange = options.context > 0 ? contextLines(prev.lines.slice(-options.context)) : [];
                  oldRangeStart -= curRange.length;
                  newRangeStart -= curRange.length;
                }
              }
              (_curRange = curRange).push.apply(_curRange, _toConsumableArray(lines.map(function(entry) {
                return (current.added ? "+" : "-") + entry;
              })));
              if (current.added) {
                newLine += lines.length;
              } else {
                oldLine += lines.length;
              }
            } else {
              if (oldRangeStart) {
                if (lines.length <= options.context * 2 && i < diff.length - 2) {
                  var _curRange2;
                  (_curRange2 = curRange).push.apply(_curRange2, _toConsumableArray(contextLines(lines)));
                } else {
                  var _curRange3;
                  var contextSize = Math.min(lines.length, options.context);
                  (_curRange3 = curRange).push.apply(_curRange3, _toConsumableArray(contextLines(lines.slice(0, contextSize))));
                  var _hunk = {
                    oldStart: oldRangeStart,
                    oldLines: oldLine - oldRangeStart + contextSize,
                    newStart: newRangeStart,
                    newLines: newLine - newRangeStart + contextSize,
                    lines: curRange
                  };
                  hunks.push(_hunk);
                  oldRangeStart = 0;
                  newRangeStart = 0;
                  curRange = [];
                }
              }
              oldLine += lines.length;
              newLine += lines.length;
            }
          };
          for (var i = 0; i < diff.length; i++) {
            _loop();
          }
          for (var _i = 0, _hunks = hunks; _i < _hunks.length; _i++) {
            var hunk = _hunks[_i];
            for (var _i2 = 0; _i2 < hunk.lines.length; _i2++) {
              if (hunk.lines[_i2].endsWith("\n")) {
                hunk.lines[_i2] = hunk.lines[_i2].slice(0, -1);
              } else {
                hunk.lines.splice(_i2 + 1, 0, "\\ No newline at end of file");
                _i2++;
              }
            }
          }
          return {
            oldFileName,
            newFileName,
            oldHeader,
            newHeader,
            hunks
          };
        }
      }
      function formatPatch(diff) {
        if (Array.isArray(diff)) {
          return diff.map(formatPatch).join("\n");
        }
        var ret = [];
        if (diff.oldFileName == diff.newFileName) {
          ret.push("Index: " + diff.oldFileName);
        }
        ret.push("===================================================================");
        ret.push("--- " + diff.oldFileName + (typeof diff.oldHeader === "undefined" ? "" : "	" + diff.oldHeader));
        ret.push("+++ " + diff.newFileName + (typeof diff.newHeader === "undefined" ? "" : "	" + diff.newHeader));
        for (var i = 0; i < diff.hunks.length; i++) {
          var hunk = diff.hunks[i];
          if (hunk.oldLines === 0) {
            hunk.oldStart -= 1;
          }
          if (hunk.newLines === 0) {
            hunk.newStart -= 1;
          }
          ret.push("@@ -" + hunk.oldStart + "," + hunk.oldLines + " +" + hunk.newStart + "," + hunk.newLines + " @@");
          ret.push.apply(ret, hunk.lines);
        }
        return ret.join("\n") + "\n";
      }
      function createTwoFilesPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options) {
        var _options2;
        if (typeof options === "function") {
          options = {
            callback: options
          };
        }
        if (!((_options2 = options) !== null && _options2 !== void 0 && _options2.callback)) {
          var patchObj = structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, options);
          if (!patchObj) {
            return;
          }
          return formatPatch(patchObj);
        } else {
          var _options3 = options, _callback2 = _options3.callback;
          structuredPatch(oldFileName, newFileName, oldStr, newStr, oldHeader, newHeader, _objectSpread2(_objectSpread2({}, options), {}, {
            callback: function callback(patchObj2) {
              if (!patchObj2) {
                _callback2();
              } else {
                _callback2(formatPatch(patchObj2));
              }
            }
          }));
        }
      }
      function createPatch(fileName, oldStr, newStr, oldHeader, newHeader, options) {
        return createTwoFilesPatch(fileName, fileName, oldStr, newStr, oldHeader, newHeader, options);
      }
      function splitLines(text) {
        var hasTrailingNl = text.endsWith("\n");
        var result = text.split("\n").map(function(line) {
          return line + "\n";
        });
        if (hasTrailingNl) {
          result.pop();
        } else {
          result.push(result.pop().slice(0, -1));
        }
        return result;
      }
      function arrayEqual(a, b) {
        if (a.length !== b.length) {
          return false;
        }
        return arrayStartsWith(a, b);
      }
      function arrayStartsWith(array, start) {
        if (start.length > array.length) {
          return false;
        }
        for (var i = 0; i < start.length; i++) {
          if (start[i] !== array[i]) {
            return false;
          }
        }
        return true;
      }
      function calcLineCount(hunk) {
        var _calcOldNewLineCount = calcOldNewLineCount(hunk.lines), oldLines = _calcOldNewLineCount.oldLines, newLines = _calcOldNewLineCount.newLines;
        if (oldLines !== void 0) {
          hunk.oldLines = oldLines;
        } else {
          delete hunk.oldLines;
        }
        if (newLines !== void 0) {
          hunk.newLines = newLines;
        } else {
          delete hunk.newLines;
        }
      }
      function merge(mine, theirs, base) {
        mine = loadPatch(mine, base);
        theirs = loadPatch(theirs, base);
        var ret = {};
        if (mine.index || theirs.index) {
          ret.index = mine.index || theirs.index;
        }
        if (mine.newFileName || theirs.newFileName) {
          if (!fileNameChanged(mine)) {
            ret.oldFileName = theirs.oldFileName || mine.oldFileName;
            ret.newFileName = theirs.newFileName || mine.newFileName;
            ret.oldHeader = theirs.oldHeader || mine.oldHeader;
            ret.newHeader = theirs.newHeader || mine.newHeader;
          } else if (!fileNameChanged(theirs)) {
            ret.oldFileName = mine.oldFileName;
            ret.newFileName = mine.newFileName;
            ret.oldHeader = mine.oldHeader;
            ret.newHeader = mine.newHeader;
          } else {
            ret.oldFileName = selectField(ret, mine.oldFileName, theirs.oldFileName);
            ret.newFileName = selectField(ret, mine.newFileName, theirs.newFileName);
            ret.oldHeader = selectField(ret, mine.oldHeader, theirs.oldHeader);
            ret.newHeader = selectField(ret, mine.newHeader, theirs.newHeader);
          }
        }
        ret.hunks = [];
        var mineIndex = 0, theirsIndex = 0, mineOffset = 0, theirsOffset = 0;
        while (mineIndex < mine.hunks.length || theirsIndex < theirs.hunks.length) {
          var mineCurrent = mine.hunks[mineIndex] || {
            oldStart: Infinity
          }, theirsCurrent = theirs.hunks[theirsIndex] || {
            oldStart: Infinity
          };
          if (hunkBefore(mineCurrent, theirsCurrent)) {
            ret.hunks.push(cloneHunk(mineCurrent, mineOffset));
            mineIndex++;
            theirsOffset += mineCurrent.newLines - mineCurrent.oldLines;
          } else if (hunkBefore(theirsCurrent, mineCurrent)) {
            ret.hunks.push(cloneHunk(theirsCurrent, theirsOffset));
            theirsIndex++;
            mineOffset += theirsCurrent.newLines - theirsCurrent.oldLines;
          } else {
            var mergedHunk = {
              oldStart: Math.min(mineCurrent.oldStart, theirsCurrent.oldStart),
              oldLines: 0,
              newStart: Math.min(mineCurrent.newStart + mineOffset, theirsCurrent.oldStart + theirsOffset),
              newLines: 0,
              lines: []
            };
            mergeLines(mergedHunk, mineCurrent.oldStart, mineCurrent.lines, theirsCurrent.oldStart, theirsCurrent.lines);
            theirsIndex++;
            mineIndex++;
            ret.hunks.push(mergedHunk);
          }
        }
        return ret;
      }
      function loadPatch(param, base) {
        if (typeof param === "string") {
          if (/^@@/m.test(param) || /^Index:/m.test(param)) {
            return parsePatch(param)[0];
          }
          if (!base) {
            throw new Error("Must provide a base reference or pass in a patch");
          }
          return structuredPatch(void 0, void 0, base, param);
        }
        return param;
      }
      function fileNameChanged(patch) {
        return patch.newFileName && patch.newFileName !== patch.oldFileName;
      }
      function selectField(index, mine, theirs) {
        if (mine === theirs) {
          return mine;
        } else {
          index.conflict = true;
          return {
            mine,
            theirs
          };
        }
      }
      function hunkBefore(test, check) {
        return test.oldStart < check.oldStart && test.oldStart + test.oldLines < check.oldStart;
      }
      function cloneHunk(hunk, offset) {
        return {
          oldStart: hunk.oldStart,
          oldLines: hunk.oldLines,
          newStart: hunk.newStart + offset,
          newLines: hunk.newLines,
          lines: hunk.lines
        };
      }
      function mergeLines(hunk, mineOffset, mineLines, theirOffset, theirLines) {
        var mine = {
          offset: mineOffset,
          lines: mineLines,
          index: 0
        }, their = {
          offset: theirOffset,
          lines: theirLines,
          index: 0
        };
        insertLeading(hunk, mine, their);
        insertLeading(hunk, their, mine);
        while (mine.index < mine.lines.length && their.index < their.lines.length) {
          var mineCurrent = mine.lines[mine.index], theirCurrent = their.lines[their.index];
          if ((mineCurrent[0] === "-" || mineCurrent[0] === "+") && (theirCurrent[0] === "-" || theirCurrent[0] === "+")) {
            mutualChange(hunk, mine, their);
          } else if (mineCurrent[0] === "+" && theirCurrent[0] === " ") {
            var _hunk$lines;
            (_hunk$lines = hunk.lines).push.apply(_hunk$lines, _toConsumableArray(collectChange(mine)));
          } else if (theirCurrent[0] === "+" && mineCurrent[0] === " ") {
            var _hunk$lines2;
            (_hunk$lines2 = hunk.lines).push.apply(_hunk$lines2, _toConsumableArray(collectChange(their)));
          } else if (mineCurrent[0] === "-" && theirCurrent[0] === " ") {
            removal(hunk, mine, their);
          } else if (theirCurrent[0] === "-" && mineCurrent[0] === " ") {
            removal(hunk, their, mine, true);
          } else if (mineCurrent === theirCurrent) {
            hunk.lines.push(mineCurrent);
            mine.index++;
            their.index++;
          } else {
            conflict(hunk, collectChange(mine), collectChange(their));
          }
        }
        insertTrailing(hunk, mine);
        insertTrailing(hunk, their);
        calcLineCount(hunk);
      }
      function mutualChange(hunk, mine, their) {
        var myChanges = collectChange(mine), theirChanges = collectChange(their);
        if (allRemoves(myChanges) && allRemoves(theirChanges)) {
          if (arrayStartsWith(myChanges, theirChanges) && skipRemoveSuperset(their, myChanges, myChanges.length - theirChanges.length)) {
            var _hunk$lines3;
            (_hunk$lines3 = hunk.lines).push.apply(_hunk$lines3, _toConsumableArray(myChanges));
            return;
          } else if (arrayStartsWith(theirChanges, myChanges) && skipRemoveSuperset(mine, theirChanges, theirChanges.length - myChanges.length)) {
            var _hunk$lines4;
            (_hunk$lines4 = hunk.lines).push.apply(_hunk$lines4, _toConsumableArray(theirChanges));
            return;
          }
        } else if (arrayEqual(myChanges, theirChanges)) {
          var _hunk$lines5;
          (_hunk$lines5 = hunk.lines).push.apply(_hunk$lines5, _toConsumableArray(myChanges));
          return;
        }
        conflict(hunk, myChanges, theirChanges);
      }
      function removal(hunk, mine, their, swap) {
        var myChanges = collectChange(mine), theirChanges = collectContext(their, myChanges);
        if (theirChanges.merged) {
          var _hunk$lines6;
          (_hunk$lines6 = hunk.lines).push.apply(_hunk$lines6, _toConsumableArray(theirChanges.merged));
        } else {
          conflict(hunk, swap ? theirChanges : myChanges, swap ? myChanges : theirChanges);
        }
      }
      function conflict(hunk, mine, their) {
        hunk.conflict = true;
        hunk.lines.push({
          conflict: true,
          mine,
          theirs: their
        });
      }
      function insertLeading(hunk, insert, their) {
        while (insert.offset < their.offset && insert.index < insert.lines.length) {
          var line = insert.lines[insert.index++];
          hunk.lines.push(line);
          insert.offset++;
        }
      }
      function insertTrailing(hunk, insert) {
        while (insert.index < insert.lines.length) {
          var line = insert.lines[insert.index++];
          hunk.lines.push(line);
        }
      }
      function collectChange(state) {
        var ret = [], operation = state.lines[state.index][0];
        while (state.index < state.lines.length) {
          var line = state.lines[state.index];
          if (operation === "-" && line[0] === "+") {
            operation = "+";
          }
          if (operation === line[0]) {
            ret.push(line);
            state.index++;
          } else {
            break;
          }
        }
        return ret;
      }
      function collectContext(state, matchChanges) {
        var changes = [], merged = [], matchIndex = 0, contextChanges = false, conflicted = false;
        while (matchIndex < matchChanges.length && state.index < state.lines.length) {
          var change = state.lines[state.index], match = matchChanges[matchIndex];
          if (match[0] === "+") {
            break;
          }
          contextChanges = contextChanges || change[0] !== " ";
          merged.push(match);
          matchIndex++;
          if (change[0] === "+") {
            conflicted = true;
            while (change[0] === "+") {
              changes.push(change);
              change = state.lines[++state.index];
            }
          }
          if (match.substr(1) === change.substr(1)) {
            changes.push(change);
            state.index++;
          } else {
            conflicted = true;
          }
        }
        if ((matchChanges[matchIndex] || "")[0] === "+" && contextChanges) {
          conflicted = true;
        }
        if (conflicted) {
          return changes;
        }
        while (matchIndex < matchChanges.length) {
          merged.push(matchChanges[matchIndex++]);
        }
        return {
          merged,
          changes
        };
      }
      function allRemoves(changes) {
        return changes.reduce(function(prev, change) {
          return prev && change[0] === "-";
        }, true);
      }
      function skipRemoveSuperset(state, removeChanges, delta) {
        for (var i = 0; i < delta; i++) {
          var changeContent = removeChanges[removeChanges.length - delta + i].substr(1);
          if (state.lines[state.index + i] !== " " + changeContent) {
            return false;
          }
        }
        state.index += delta;
        return true;
      }
      function calcOldNewLineCount(lines) {
        var oldLines = 0;
        var newLines = 0;
        lines.forEach(function(line) {
          if (typeof line !== "string") {
            var myCount = calcOldNewLineCount(line.mine);
            var theirCount = calcOldNewLineCount(line.theirs);
            if (oldLines !== void 0) {
              if (myCount.oldLines === theirCount.oldLines) {
                oldLines += myCount.oldLines;
              } else {
                oldLines = void 0;
              }
            }
            if (newLines !== void 0) {
              if (myCount.newLines === theirCount.newLines) {
                newLines += myCount.newLines;
              } else {
                newLines = void 0;
              }
            }
          } else {
            if (newLines !== void 0 && (line[0] === "+" || line[0] === " ")) {
              newLines++;
            }
            if (oldLines !== void 0 && (line[0] === "-" || line[0] === " ")) {
              oldLines++;
            }
          }
        });
        return {
          oldLines,
          newLines
        };
      }
      function reversePatch(structuredPatch2) {
        if (Array.isArray(structuredPatch2)) {
          return structuredPatch2.map(reversePatch).reverse();
        }
        return _objectSpread2(_objectSpread2({}, structuredPatch2), {}, {
          oldFileName: structuredPatch2.newFileName,
          oldHeader: structuredPatch2.newHeader,
          newFileName: structuredPatch2.oldFileName,
          newHeader: structuredPatch2.oldHeader,
          hunks: structuredPatch2.hunks.map(function(hunk) {
            return {
              oldLines: hunk.newLines,
              oldStart: hunk.newStart,
              newLines: hunk.oldLines,
              newStart: hunk.oldStart,
              lines: hunk.lines.map(function(l) {
                if (l.startsWith("-")) {
                  return "+".concat(l.slice(1));
                }
                if (l.startsWith("+")) {
                  return "-".concat(l.slice(1));
                }
                return l;
              })
            };
          })
        });
      }
      function convertChangesToDMP(changes) {
        var ret = [], change, operation;
        for (var i = 0; i < changes.length; i++) {
          change = changes[i];
          if (change.added) {
            operation = 1;
          } else if (change.removed) {
            operation = -1;
          } else {
            operation = 0;
          }
          ret.push([operation, change.value]);
        }
        return ret;
      }
      function convertChangesToXML(changes) {
        var ret = [];
        for (var i = 0; i < changes.length; i++) {
          var change = changes[i];
          if (change.added) {
            ret.push("<ins>");
          } else if (change.removed) {
            ret.push("<del>");
          }
          ret.push(escapeHTML(change.value));
          if (change.added) {
            ret.push("</ins>");
          } else if (change.removed) {
            ret.push("</del>");
          }
        }
        return ret.join("");
      }
      function escapeHTML(s) {
        var n = s;
        n = n.replace(/&/g, "&amp;");
        n = n.replace(/</g, "&lt;");
        n = n.replace(/>/g, "&gt;");
        n = n.replace(/"/g, "&quot;");
        return n;
      }
      exports2.Diff = Diff;
      exports2.applyPatch = applyPatch;
      exports2.applyPatches = applyPatches;
      exports2.canonicalize = canonicalize;
      exports2.convertChangesToDMP = convertChangesToDMP;
      exports2.convertChangesToXML = convertChangesToXML;
      exports2.createPatch = createPatch;
      exports2.createTwoFilesPatch = createTwoFilesPatch;
      exports2.diffArrays = diffArrays;
      exports2.diffChars = diffChars;
      exports2.diffCss = diffCss;
      exports2.diffJson = diffJson;
      exports2.diffLines = diffLines;
      exports2.diffSentences = diffSentences;
      exports2.diffTrimmedLines = diffTrimmedLines;
      exports2.diffWords = diffWords;
      exports2.diffWordsWithSpace = diffWordsWithSpace;
      exports2.formatPatch = formatPatch;
      exports2.merge = merge;
      exports2.parsePatch = parsePatch;
      exports2.reversePatch = reversePatch;
      exports2.structuredPatch = structuredPatch;
    });
  }, {}],
  93: [function(require2, module, exports) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var funcTag = "[object Function]", genTag = "[object GeneratorFunction]", symbolTag = "[object Symbol]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, reLeadingDot = /^\./, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var Symbol2 = root.Symbol, splice = arrayProto.splice;
    var Map2 = getNative(root, "Map"), nativeCreate = getNative(Object, "create");
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0, symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -Infinity ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    var stringToPath = memoize(function(string) {
      string = toString(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -Infinity ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArray = Array.isArray;
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function get(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get;
  }, {}],
  94: [function(require2, module, exports) {
    module.exports = {
      stdout: false,
      stderr: false
    };
  }, {}],
  95: [function(require2, module, exports) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.typeDetect = factory();
    })(this, function() {
      var promiseExists = typeof Promise === "function";
      var globalObject = typeof self === "object" ? self : global;
      var symbolExists = typeof Symbol !== "undefined";
      var mapExists = typeof Map !== "undefined";
      var setExists = typeof Set !== "undefined";
      var weakMapExists = typeof WeakMap !== "undefined";
      var weakSetExists = typeof WeakSet !== "undefined";
      var dataViewExists = typeof DataView !== "undefined";
      var symbolIteratorExists = symbolExists && typeof Symbol.iterator !== "undefined";
      var symbolToStringTagExists = symbolExists && typeof Symbol.toStringTag !== "undefined";
      var setEntriesExists = setExists && typeof Set.prototype.entries === "function";
      var mapEntriesExists = mapExists && typeof Map.prototype.entries === "function";
      var setIteratorPrototype = setEntriesExists && Object.getPrototypeOf((/* @__PURE__ */ new Set()).entries());
      var mapIteratorPrototype = mapEntriesExists && Object.getPrototypeOf((/* @__PURE__ */ new Map()).entries());
      var arrayIteratorExists = symbolIteratorExists && typeof Array.prototype[Symbol.iterator] === "function";
      var arrayIteratorPrototype = arrayIteratorExists && Object.getPrototypeOf([][Symbol.iterator]());
      var stringIteratorExists = symbolIteratorExists && typeof String.prototype[Symbol.iterator] === "function";
      var stringIteratorPrototype = stringIteratorExists && Object.getPrototypeOf(""[Symbol.iterator]());
      var toStringLeftSliceLength = 8;
      var toStringRightSliceLength = -1;
      function typeDetect(obj) {
        var typeofObj = typeof obj;
        if (typeofObj !== "object") {
          return typeofObj;
        }
        if (obj === null) {
          return "null";
        }
        if (obj === globalObject) {
          return "global";
        }
        if (Array.isArray(obj) && (symbolToStringTagExists === false || !(Symbol.toStringTag in obj))) {
          return "Array";
        }
        if (typeof window === "object" && window !== null) {
          if (typeof window.location === "object" && obj === window.location) {
            return "Location";
          }
          if (typeof window.document === "object" && obj === window.document) {
            return "Document";
          }
          if (typeof window.navigator === "object") {
            if (typeof window.navigator.mimeTypes === "object" && obj === window.navigator.mimeTypes) {
              return "MimeTypeArray";
            }
            if (typeof window.navigator.plugins === "object" && obj === window.navigator.plugins) {
              return "PluginArray";
            }
          }
          if ((typeof window.HTMLElement === "function" || typeof window.HTMLElement === "object") && obj instanceof window.HTMLElement) {
            if (obj.tagName === "BLOCKQUOTE") {
              return "HTMLQuoteElement";
            }
            if (obj.tagName === "TD") {
              return "HTMLTableDataCellElement";
            }
            if (obj.tagName === "TH") {
              return "HTMLTableHeaderCellElement";
            }
          }
        }
        var stringTag = symbolToStringTagExists && obj[Symbol.toStringTag];
        if (typeof stringTag === "string") {
          return stringTag;
        }
        var objPrototype = Object.getPrototypeOf(obj);
        if (objPrototype === RegExp.prototype) {
          return "RegExp";
        }
        if (objPrototype === Date.prototype) {
          return "Date";
        }
        if (promiseExists && objPrototype === Promise.prototype) {
          return "Promise";
        }
        if (setExists && objPrototype === Set.prototype) {
          return "Set";
        }
        if (mapExists && objPrototype === Map.prototype) {
          return "Map";
        }
        if (weakSetExists && objPrototype === WeakSet.prototype) {
          return "WeakSet";
        }
        if (weakMapExists && objPrototype === WeakMap.prototype) {
          return "WeakMap";
        }
        if (dataViewExists && objPrototype === DataView.prototype) {
          return "DataView";
        }
        if (mapExists && objPrototype === mapIteratorPrototype) {
          return "Map Iterator";
        }
        if (setExists && objPrototype === setIteratorPrototype) {
          return "Set Iterator";
        }
        if (arrayIteratorExists && objPrototype === arrayIteratorPrototype) {
          return "Array Iterator";
        }
        if (stringIteratorExists && objPrototype === stringIteratorPrototype) {
          return "String Iterator";
        }
        if (objPrototype === null) {
          return "Object";
        }
        return Object.prototype.toString.call(obj).slice(toStringLeftSliceLength, toStringRightSliceLength);
      }
      return typeDetect;
    });
  }, {}]
}, {}, [2]);
const sinon$1 = sinon;
sinon.leakThreshold;
sinon.assert;
sinon.getFakes;
sinon.createStubInstance;
sinon.inject;
sinon.mock;
sinon.reset;
sinon.resetBehavior;
sinon.resetHistory;
sinon.restore;
sinon.restoreContext;
sinon.replace;
sinon.define;
sinon.replaceGetter;
sinon.replaceSetter;
sinon.spy;
sinon.stub;
sinon.fake;
sinon.useFakeTimers;
sinon.verify;
sinon.verifyAndRestore;
sinon.createSandbox;
sinon.match;
sinon.restoreObject;
sinon.expectation;
sinon.timers;
sinon.addBehavior;
sinon.promise;

/**
  Used internally by the DOM interaction helpers to get a description of a
  target for debug/error messaging.

  @private
  @param {Target} target the target
  @returns {string} a description of the target
*/
function getDescription(target) {
  let data = isDescriptor(target) ? lookupDescriptorData(target) : null;
  if (data) {
    return data.description || '<unknown descriptor>';
  } else {
    // eslint-disable-next-line @typescript-eslint/no-base-to-string
    return target.toString();
  }
}

// eslint-disable-next-line require-jsdoc
function isElement(target) {
  return target !== null && typeof target === 'object' && Reflect.get(target, 'nodeType') === Node.ELEMENT_NODE;
}

// eslint-disable-next-line require-jsdoc
function isDocument(target) {
  return target !== null && typeof target === 'object' && Reflect.get(target, 'nodeType') === Node.DOCUMENT_NODE;
}

/**
  Used internally by the DOM interaction helpers to find one element.

  @private
  @param {string|Element} target the element or selector to retrieve
  @returns {Element} the target or selector
*/
function getElement(target) {
  if (typeof target === 'string') {
    let rootElement = getRootElement$1();
    return rootElement.querySelector(target);
  } else if (isElement(target) || isDocument(target)) {
    return target;
  } else if (target instanceof Window) {
    return target.document;
  } else {
    let descriptorData = lookupDescriptorData(target);
    if (descriptorData) {
      return resolveDOMElement(descriptorData);
    } else {
      throw new Error('Must use an element, selector string, or DOM element descriptor');
    }
  }
}
function errorMessage(message, target, name) {
  let description = getDescription(target);
  return `${message} when calling \`${name}('${description}')\`.`;
}
function getOptions(parent, selector) {
  return [...parent.querySelectorAll(selector)];
}
function findOption(target, text, {
  selectors
}) {
  if (!target) {
    throw new Error(`Must pass an element, selector, or descriptor to \`findOption\`.`);
  }

  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  if (typeof text === 'undefined' || text === null) {
    throw new Error(`Must provide an \`text\` to select when calling \`findOption\`.`);
  }
  const element = getElement(target);
  if (!element) {
    throw new Error(errorMessage('Element not found', target, 'findOption'));
  }
  return getOptions(element, selectors.option).find(e => e.textContent?.trim().includes(text));
}
function findOptions(target, texts, {
  selectors
}) {
  if (!target) {
    throw new Error(`Must pass an element, selector, or descriptor to \`findOption\`.`);
  }

  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  if (typeof texts === 'undefined' || texts === null) {
    throw new Error(`Must provide an \`texts\` to select when calling \`findOption\`.`);
  }
  const element = getElement(target);
  if (!element) {
    throw new Error(errorMessage('Element not found', target, 'findOption'));
  }
  return getOptions(element, selectors.option).filter(e => texts.includes(e.textContent?.trim()));
}
async function select(target, options, {
  keepPreviouslySelected = false,
  labels: {
    name,
    element: elementName
  },
  selectors
}) {

  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  if (typeof options === 'undefined' || options === null) {
    throw new Error(`Must provide an \`option\` or \`options\` to select when calling \`${name}\`.`);
  }
  const element = getElement(target);
  if (!element) {
    throw new Error(errorMessage('Element not found', target, name));
  }

  // if (!isSelectElement(element)) {
  //   throw new Error(errorMessage('Element is not a HTMLSelectElement', target));
  // }

  // if (list.disabled) {
  //   throw new Error(errorMessage('Element is disabled', selectors.list, name));
  // }

  const multi = element.getAttribute('aria-multiselectable') === 'true';
  if (!multi && Array.isArray(options)) {
    throw new Error(errorMessage(`${elementName} \`multiple\` attribute is set to \`false\` but multiple options were passed`, target, name));
  }
  const optionElements = (Array.isArray(options) ? findOptions(element, options, {
    selectors
  }) : [findOption(element, options, {
    selectors
  })]

  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
  ).filter(e => e !== null);
  const items = element.querySelectorAll(selectors.option);
  for (const item of items) {
    if (optionElements.includes(item)) {
      item.setAttribute('aria-selected', 'true');
    } else if (!keepPreviouslySelected) {
      item.removeAttribute('aria-selected');
    }
  }
  await triggerEvent(element, 'change');
}

//
// KEYBOARD
//

async function testListboxKeyboardNavigation(assert, elements, selectors) {
  const {
    target,
    list
  } = elements;
  const options = getOptions(list, selectors.option);
  const [first, second, last] = options;
  assert.dom(first).hasAria('current', 'true', 'First option is activated');
  await triggerKeyEvent(target, 'keydown', 'ArrowDown');
  assert.dom(second).hasAria('current', 'true', 'ArrowDown activates second option');
  assert.dom(first).doesNotHaveAria('current', '... and deactivates first option');
  await triggerKeyEvent(target, 'keydown', 'ArrowDown');
  assert.dom(last).hasAria('current', 'true', 'ArrowDown activates last option');
  await triggerKeyEvent(target, 'keydown', 'Home');
  assert.dom(first).hasAria('current', 'true', 'Home activates first option');
  await triggerKeyEvent(target, 'keydown', 'End');
  assert.dom(last).hasAria('current', 'true', 'End activates last option');
}
async function testListboxForKeyboardSingleSelection(assert, elements, selectors) {
  const {
    target,
    list
  } = elements;
  const options = getOptions(list, selectors.option);
  const [first, second, last] = options;
  assert.dom(first).hasAria('current', 'true', 'First option is activated');
  assert.dom(first).hasAria('selected', 'true', '... and selected');
  await triggerKeyEvent(target, 'keydown', 'ArrowDown');
  assert.dom(second).hasAria('selected', 'true', 'ArrowDown selects second option');
  assert.dom(first).doesNotHaveAria('selected', '... and deselects first option');
  await triggerKeyEvent(target, 'keydown', 'ArrowDown');
  assert.dom(last).hasAria('selected', 'true', 'ArrowDown selects last option');
  await triggerKeyEvent(target, 'keydown', 'Home');
  assert.dom(first).hasAria('selected', 'true', 'Home selects first option');
  await triggerKeyEvent(target, 'keydown', 'End');
  assert.dom(last).hasAria('selected', 'true', 'End selects last option');
}
async function testListboxForKeyboardMultiSelection(assert, elements, selectors) {
  const {
    target,
    list
  } = elements;
  const options = getOptions(list, selectors.option);
  const [first, second, last] = options;
  assert.dom(first).hasAria('current', 'true', 'First option is activated');
  assert.dom(first).doesNotHaveAria('selected', '... and not selected');
  await triggerKeyEvent(target, 'keydown', ' ');
  assert.dom(first).hasAria('selected', 'true', 'SPACE selects first option');
  await triggerKeyEvent(target, 'keydown', ' ');
  assert.dom(first).doesNotHaveAria('selected', 'SPACE deselects first option');
  await triggerKeyEvent(target, 'keydown', ' ');
  assert.dom(first).hasAria('selected', 'true', 'SPACE selects first option');
  await triggerKeyEvent(target, 'keydown', 'ArrowDown');
  await triggerKeyEvent(target, 'keydown', ' ');
  assert.dom(second).hasAria('selected', 'true', 'ArrowDown + SPACE selects second option');
  assert.dom(first).hasAria('selected', 'true', '... and first option still selected');
  await triggerKeyEvent(target, 'keydown', 'End');
  await triggerKeyEvent(target, 'keydown', ' ');
  assert.dom(last).hasAria('selected', 'true', 'End + SPACE selects last option');
  assert.dom(first).hasAria('selected', 'true', '... and first option still selected');
  assert.dom(second).hasAria('selected', 'true', '... and second option still selected');
  await triggerKeyEvent(target, 'keydown', 'Home');
  await triggerKeyEvent(target, 'keydown', ' ');
  assert.dom(first).doesNotHaveAria('selected', 'Home + SPACE deselects first option');
  assert.dom(second).hasAria('selected', 'true', '... and second option still selected');
  assert.dom(last).hasAria('selected', 'true', '... and last option still selected');
  await triggerKeyEvent(target, 'keydown', 'ArrowDown');
  await triggerKeyEvent(target, 'keydown', ' ');
  assert.dom(second).doesNotHaveAria('selected', 'ArrowDown + SPACE deselects second option');
  await triggerKeyEvent(target, 'keydown', 'ArrowDown');
  await triggerKeyEvent(target, 'keydown', ' ');
  assert.dom(last).doesNotHaveAria('selected', 'ArrowDown + SPACE deselects last option');
  await triggerKeyEvent(target, 'keydown', 'KeyA', {
    metaKey: true
  });
  assert.dom(first).hasAria('selected', 'true', 'Meta + A selects all');
  assert.dom(second).hasAria('selected', 'true', '... second option selected');
  assert.dom(last).hasAria('selected', 'true', '... last option selected');
}

//
// MOUSE
//

async function testListboxPointerNavigation(assert, elements, selectors) {
  const {
    list
  } = elements;
  const options = getOptions(list, selectors.option);
  const [first, second, last] = options;
  await triggerEvent(first, 'pointerup');
  assert.dom(first).hasAria('current', 'true', 'Clicking first option activates it');
  await triggerEvent(second, 'pointerup');
  assert.dom(second).hasAria('current', 'true', 'Clicking second option activates it');
  assert.dom(first).doesNotHaveAria('current', '... and deactivates first option');
  await triggerEvent(last, 'pointerup');
  assert.dom(last).hasAria('current', 'true', 'Clicking last option activates it');
  assert.dom(second).doesNotHaveAria('current', '... and deactivates second option');
}
async function testListboxForPointerSingleSelection(assert, elements, selectors) {
  const {
    list
  } = elements;
  const options = getOptions(list, selectors.option);
  const [first, second, last] = options;
  await triggerEvent(first, 'pointerup', {
    bubbles: true
  });
  assert.dom(first).hasAria('selected', 'true', 'Clicking first option selects it');
  await triggerEvent(second, 'pointerup');
  assert.dom(second).hasAria('selected', 'true', 'Clicking second option selects it');
  assert.dom(first).doesNotHaveAria('selected', '... and deselects first option');
  await triggerEvent(last, 'pointerup');
  assert.dom(last).hasAria('selected', 'true', 'Clicking last option selects it');
  assert.dom(second).doesNotHaveAria('selected', '... and deselects second option');
}
async function testListboxForPointerMultiSelection(assert, elements, selectors) {
  const {
    list
  } = elements;
  const options = getOptions(list, selectors.option);
  const [first, second, last] = options;
  await triggerEvent(first, 'pointerup');
  assert.dom(first).hasAria('selected', 'true', 'Clicking first option selects it');
  await triggerEvent(first, 'pointerup', {
    metaKey: true
  });
  assert.dom(first).doesNotHaveAria('selected', 'Clicking first option deselects it');
  await triggerEvent(first, 'pointerup');
  assert.dom(first).hasAria('selected', 'true', 'Clicking first option selects it');
  await triggerEvent(second, 'pointerup', {
    metaKey: true
  });
  assert.dom(second).hasAria('selected', 'true', 'Clicking second option (with meta) selects it');
  assert.dom(first).hasAria('selected', 'true', '... and first option still selected');
  await triggerEvent(last, 'pointerup', {
    metaKey: true
  });
  assert.dom(last).hasAria('selected', 'true', 'Clicking last option (with meta) selects it');
  assert.dom(first).hasAria('selected', 'true', '... and first option still selected');
  assert.dom(second).hasAria('selected', 'true', '... and second option still selected');
  await triggerEvent(first, 'pointerup', {
    metaKey: true
  });
  assert.dom(first).doesNotHaveAria('selected', 'Clicking first option (with meta) deselects it');
  assert.dom(second).hasAria('selected', 'true', '... and second option still selected');
  assert.dom(last).hasAria('selected', 'true', '... and last option still selected');
  await triggerEvent(second, 'pointerup', {
    metaKey: true
  });
  assert.dom(second).doesNotHaveAria('selected', 'Clicking second option (with meta) deselects it');
  await triggerEvent(last, 'pointerup', {
    metaKey: true
  });
  assert.dom(last).doesNotHaveAria('selected', 'Clicking last option (with meta) deselects it');
  await triggerEvent(first, 'pointerup');
  assert.dom(first).hasAria('selected', 'true', 'Clicking first option selects it');
  await triggerEvent(last, 'pointerup', {
    shiftKey: true
  });
  assert.dom(last).hasAria('selected', 'true', 'Clicking last option (with shift) selects it');
  assert.dom(second).hasAria('selected', 'true', '... and second option, too');
}
const DEFAULT_SELECTORS$2 = {
  trigger: '[role="listbox"]',
  list: '[role="listbox"]',
  option: '[role="option"]'
};
function setupListTest(assert, selectors) {
  const fullSelectors = {
    ...DEFAULT_SELECTORS$2,
    ...selectors
  };
  const list = getRootElement$1().querySelector(selectors.list);
  assert.dom(list).exists('list exists');
  return {
    elements: {
      trigger: list,
      list: list
    },
    selectors: fullSelectors
  };
}

// function getItems(parent: HTMLElement) {
//   return getCompositeItems(parent, '[role="option"]', '[role="listbox"]');
// }

//
// KEYBOARD
//

async function testListKeyboardNavigation(assert, selectors = DEFAULT_SELECTORS$2) {
  const {
    elements,
    selectors: allSelectors
  } = setupListTest(assert, selectors);
  const {
    trigger,
    list
  } = elements;
  await focus(list);
  await testListboxKeyboardNavigation(assert, {
    target: trigger,
    list
  }, {
    option: allSelectors.option
  });
}
async function testListForKeyboardSingleSelection(assert, elements, selectors) {
  const {
    trigger,
    list
  } = elements;
  await focus(list);
  await testListboxForKeyboardSingleSelection(assert, {
    target: trigger,
    list
  }, {
    option: selectors.option
  });
}
async function testListForKeyboardMultiSelection(assert, elements, selectors) {
  const {
    trigger,
    list
  } = elements;
  await focus(list);
  await testListboxForKeyboardMultiSelection(assert, {
    target: trigger,
    list
  }, {
    option: selectors.option
  });
}
async function testListKeyboardSelection(assert, selectors = DEFAULT_SELECTORS$2) {
  const {
    elements,
    selectors: allSelectors
  } = setupListTest(assert, selectors);
  const multi = elements.list.getAttribute('aria-multiselectable');
  await (multi ? testListForKeyboardMultiSelection(assert, elements, allSelectors) : testListForKeyboardSingleSelection(assert, elements, allSelectors));
}

//
// MOUSE
//

async function testListPointerNavigation(assert, selectors = DEFAULT_SELECTORS$2) {
  const {
    elements,
    selectors: allSelectors
  } = setupListTest(assert, selectors);
  const {
    list
  } = elements;
  await testListboxPointerNavigation(assert, {
    list
  }, {
    option: allSelectors.option
  });
}
async function testListForPointerSingleSelection(assert, elements, selectors) {
  const {
    list
  } = elements;
  await testListboxForPointerSingleSelection(assert, {
    list
  }, {
    option: selectors.option
  });
}
async function testListForPointerMultiSelection(assert, elements, selectors) {
  const {
    list
  } = elements;
  await testListboxForPointerMultiSelection(assert, {
    list
  }, {
    option: selectors.option
  });
}
async function testListPointerSelection(assert, selectors = DEFAULT_SELECTORS$2) {
  const {
    elements,
    selectors: allSelectors
  } = setupListTest(assert, selectors);
  const multi = elements.list.getAttribute('aria-multiselectable');
  await (multi ? testListForPointerMultiSelection(assert, elements, allSelectors) : testListForPointerSingleSelection(assert, elements, allSelectors));
}

//
// BEHAVIOR
//

async function selectListbox(target, options, keepPreviouslySelected = false) {
  await select(target, options, {
    keepPreviouslySelected,
    labels: {
      name: 'selectListbox',
      element: 'Listbox'
    },
    selectors: {
      option: DEFAULT_SELECTORS$2.option
    }
  });
}

//
// utility functions
//

// export function findListboxOption(target: Target, text: string) {
//   return findOption(target, text, {
//     selectors: { option: DEFAULT_SELECTORS.option },
//     labels: { name: 'findListboxOption' }
//   });
// }

// export function findListboxOptions(target: Target, texts: string[]) {
//   return findOptions(target, texts, {
//     selectors: { option: DEFAULT_SELECTORS.option },
//     labels: { name: 'findListboxOptions' }
//   });
// }

function getCompositeItems(parent, selector, parentSelector) {
  const items = [...parent.querySelectorAll(selector)];
  if (parentSelector) {
    // make sure to filter out descendands that are within a nested menu but not the root menu
    return items.filter(item => {
      const closestParent = item.closest(parentSelector);
      return !closestParent || closestParent === parent;
    });
  }
  return items;
}
const DEFAULT_SELECTORS$1 = {
  trigger: 'button',
  menu: '[role="menu"]',
  item: '[role="menuitem"], [role="menuitemcheckbox"], [role="menuitemradio"]'
};
function setupMenuTest(assert, selectors) {
  const fullSelectors = {
    ...DEFAULT_SELECTORS$1,
    ...selectors
  };
  const menu = getRootElement$1().querySelector(selectors.menu);
  const trigger = getRootElement$1().querySelector(selectors.trigger);
  assert.dom(menu).exists('Menu exists');
  return {
    elements: {
      trigger: trigger ?? menu,
      menu: menu
    },
    selectors: fullSelectors
  };
}
function getItems(parent) {
  return getCompositeItems(parent, '[role="menuitem"], [role="menuitemradio"], [role="menuitemcheckbox"]', 'menu, [role="menu"]');
}

//
// KEYBOARD
//

async function testMenuKeyboardNavigation(assert, selectors = DEFAULT_SELECTORS$1) {
  const {
    elements
  } = setupMenuTest(assert, selectors);
  const {
    trigger,
    menu
  } = elements;
  const shareMenu = getRootElement$1().querySelectorAll('[role="menu"]').item(1);
  const socialMenu = getRootElement$1().querySelectorAll('[role="menu"]').item(2);
  await click(trigger);
  assert.ok(menu.matches(':popover-open'), 'Main menu opened');
  const items = getItems(menu);
  const [first, second,, fourth] = items;
  const last = items.at(-1);
  assert.dom(first).hasAttribute('tabindex', '0', 'First item is activated');
  await triggerKeyEvent(menu, 'keydown', 'ArrowDown');
  assert.dom(second).hasAttribute('tabindex', '0', '`ArrowDown` activates second item');
  assert.dom(first).hasAttribute('tabindex', '-1', '... and deactivates first item');
  await triggerKeyEvent(menu, 'keydown', 'ArrowDown');
  await triggerKeyEvent(menu, 'keydown', 'ArrowDown');
  assert.dom(fourth).hasAttribute('tabindex', '0', '`ArrowDown` 2x activates fourth item');

  // open and close menu with ArrowRight / ArrowLeft

  assert.notOk(shareMenu.matches(':popover-open'), 'Share menu is closed');
  await triggerKeyEvent(menu, 'keydown', 'ArrowRight');
  assert.ok(shareMenu.matches(':popover-open'), '`ArrowRight` opens share menu');
  await triggerKeyEvent(shareMenu, 'keydown', 'ArrowLeft');
  assert.notOk(shareMenu.matches(':popover-open'), '`ArrowLeft` closes share menu');

  // open sub-submenu and closing all of it
  const shareItems = getItems(shareMenu);
  await triggerKeyEvent(menu, 'keydown', 'ArrowRight');
  assert.ok(shareMenu.matches(':popover-open'), '`ArrowRight` opens share menu again');
  await triggerKeyEvent(shareMenu, 'keydown', 'ArrowDown');
  assert.dom(shareItems[1]).hasAttribute('tabindex', '0', '`ArrowDown` moves to the next item in the submenu');
  await triggerKeyEvent(shareMenu, 'keydown', 'ArrowRight');
  assert.ok(socialMenu.matches(':popover-open'), '`ArrowRight` opens social menu');
  const socialItems = getItems(socialMenu);
  const spy = sinon$1.spy();
  socialItems[0]?.addEventListener('click', spy, {
    once: true
  });

  // await click(socialItems[0] as HTMLElement);
  await triggerKeyEvent(socialMenu, 'keydown', 'Enter');
  assert.ok(spy.calledOnce, '`Enter` invokes menu item');
  assert.notOk(socialMenu.matches(':popover-open'), 'Social menu is closed');
  assert.notOk(shareMenu.matches(':popover-open'), 'Share menu closed');
  assert.notOk(menu.matches(':popover-open'), 'Main menu closed');

  // Home + End
  await click(trigger);
  await triggerKeyEvent(menu, 'keydown', 'End');
  assert.dom(last).hasAttribute('tabindex', '0', '`End` activates last item');
  await triggerKeyEvent(menu, 'keydown', 'Home');
  assert.dom(first).hasAttribute('tabindex', '0', '`Home` activates first item');
}

//
// POINTER
//

async function testMenuPointerNavigation(assert, selectors = DEFAULT_SELECTORS$1) {
  const {
    elements
  } = setupMenuTest(assert, selectors);
  const {
    trigger,
    menu
  } = elements;
  const shareMenu = getRootElement$1().querySelectorAll('[role="menu"]').item(1);
  const socialMenu = getRootElement$1().querySelectorAll('[role="menu"]').item(2);
  await click(trigger);
  assert.ok(menu.matches(':popover-open'), 'Main menu opened');
  const items = getItems(menu);
  const [first, second,, fourth, fifth] = items;
  assert.dom(first).hasAttribute('tabindex', '0', 'First item is activated');
  await triggerEvent(second, 'pointerover');
  assert.dom(second).hasAttribute('tabindex', '0', '`pointerover` activates second item');
  assert.dom(first).hasAttribute('tabindex', '-1', '... and deactivates first item');

  //   assert.dom(fourth).hasAttribute('tabindex', '0', '`ArrowDown` 2x activates fourth item');

  await click('[role="menu"] span');
  assert.ok(menu.matches(':popover-open'), 'Main menu still open after clicking a non-item inside the popover');

  // open and close menu with Pointerover

  assert.notOk(shareMenu.matches(':popover-open'), 'Share menu is closed');
  await triggerEvent(fourth, 'pointerover');
  assert.dom(fourth).hasAttribute('tabindex', '0', '`pointerover` activates fourth item');
  assert.ok(shareMenu.matches(':popover-open'), '`pointerover` fourth element opens share menu');
  await triggerEvent(fifth, 'pointerover');
  assert.dom(fifth).hasAttribute('tabindex', '0', '`pointerover` activates fifth item');
  assert.notOk(shareMenu.matches(':popover-open'), '`pointerover` fifth element closes share menu');

  // open sub-submenu and closing all of it
  const shareItems = getItems(shareMenu);
  await triggerEvent(fourth, 'pointerover');
  assert.ok(shareMenu.matches(':popover-open'), '`pointerover` fourth element opens share menu again');
  assert.dom(shareItems[0]).hasAttribute('tabindex', '0', 'first item is active');

  // huh? Why does the second line work, but not the first one?
  // await triggerEvent(shareItems[1] as HTMLElement, 'pointover');
  shareItems[1].dispatchEvent(new Event('pointerover', {
    bubbles: true
  }));
  assert.dom(shareItems[1]).hasAttribute('tabindex', '0', '`pointerover` activates second item');
  assert.ok(socialMenu.matches(':popover-open'), '... and opens social menu');
  const socialItems = getItems(socialMenu);
  const spy = sinon$1.spy();
  socialItems[0]?.addEventListener('click', spy, {
    once: true
  });

  // see: https://github.com/emberjs/ember-test-helpers/issues/267
  await triggerEvent(socialItems[0], 'pointerup');
  socialItems[0].click();
  assert.ok(spy.calledOnce, '`Enter` invokes menu item');
  assert.notOk(socialMenu.matches(':popover-open'), 'Social menu is closed');
  assert.notOk(shareMenu.matches(':popover-open'), 'Share menu closed');
  assert.notOk(menu.matches(':popover-open'), 'Main menu closed');
}
const DEFAULT_SELECTORS = {
  tablist: '[role="tablist"]',
  item: '[role="tab"]'
};
function setupTablistTest(assert, selectors) {
  const fullSelectors = {
    ...DEFAULT_SELECTORS,
    ...selectors
  };
  const tablist = getRootElement$1().querySelector(selectors.tablist);
  assert.dom(tablist).exists('Tablist exists');
  return {
    elements: {
      tablist: tablist
    },
    selectors: fullSelectors
  };
}

//
// KEYBOARD
//

async function testTablistKeyboardNavigation(assert, selectors = DEFAULT_SELECTORS) {
  const {
    elements,
    selectors: fullSelectors
  } = setupTablistTest(assert, selectors);
  const {
    tablist
  } = elements;
  const options = getCompositeItems(tablist, fullSelectors.item);
  const [first, second, third] = options;
  await focus(first);
  assert.dom(first).hasAttribute('tabindex', '0');
  await triggerKeyEvent(tablist, 'keydown', 'ArrowRight');
  assert.dom(first).hasAttribute('tabindex', '-1');
  assert.dom(second).hasAttribute('tabindex', '0');
  await triggerKeyEvent(tablist, 'keydown', 'ArrowRight');
  assert.dom(second).hasAttribute('tabindex', '-1');
  assert.dom(third).hasAttribute('tabindex', '0');
  await triggerKeyEvent(tablist, 'keydown', 'ArrowLeft');
  assert.dom(first).hasAttribute('tabindex', '-1');
  assert.dom(second).hasAttribute('tabindex', '0');
  await triggerKeyEvent(tablist, 'keydown', 'ArrowLeft');
  assert.dom(first).hasAttribute('tabindex', '0');
  assert.dom(second).hasAttribute('tabindex', '-1');
}
async function testTablistKeyboardAutomaticSelection(assert, selectors = DEFAULT_SELECTORS) {
  const {
    elements,
    selectors: fullSelectors
  } = setupTablistTest(assert, selectors);
  const {
    tablist
  } = elements;
  const options = getCompositeItems(tablist, fullSelectors.item);
  const [first, second, third] = options;
  const last = options[options.length - 1];
  assert.dom(first).hasAria('selected', 'true', 'First option is selected');
  await triggerKeyEvent(tablist, 'keydown', 'ArrowRight');
  assert.dom(second).hasAria('selected', 'true', 'ArrowRight selects second option');
  assert.dom(first).doesNotHaveAria('selected', '... and deselects first option');
  await triggerKeyEvent(tablist, 'keydown', 'ArrowRight');
  assert.dom(third).hasAria('selected', 'true', 'ArrowRight selects last option');
  await triggerKeyEvent(tablist, 'keydown', 'Home');
  assert.dom(first).hasAria('selected', 'true', 'Home selects first option');
  await triggerKeyEvent(tablist, 'keydown', 'End');
  assert.dom(last).hasAria('selected', 'true', 'End selects last option');
}
async function testTablistKeyboardManualSelection(assert, selectors = DEFAULT_SELECTORS) {
  const {
    elements,
    selectors: fullSelectors
  } = setupTablistTest(assert, selectors);
  const {
    tablist
  } = elements;
  const options = getCompositeItems(tablist, fullSelectors.item);
  const [first, second, third] = options;
  const last = options[options.length - 1];
  assert.dom(first).hasAria('selected', 'true', 'First option is selected');
  await triggerKeyEvent(tablist, 'keydown', 'ArrowRight');
  await triggerKeyEvent(tablist, 'keydown', ' ');
  assert.dom(second).hasAria('selected', 'true', 'ArrowRight + SPACE selects second option');
  assert.dom(first).doesNotHaveAria('selected', '... and deselects first option');
  await triggerKeyEvent(tablist, 'keydown', 'End');
  await triggerKeyEvent(tablist, 'keydown', ' ');
  assert.dom(last).hasAria('selected', 'true', 'End + SPACE selects last option');
  assert.dom(second).doesNotHaveAria('selected', '... and deselects second option');
  await triggerKeyEvent(tablist, 'keydown', 'Home');
  await triggerKeyEvent(tablist, 'keydown', ' ');
  assert.dom(first).hasAria('selected', 'true', 'Home + SPACE selects first option');
  assert.dom(last).doesNotHaveAria('selected', '... and deselects last option still selected');
  await triggerKeyEvent(tablist, 'keydown', 'ArrowRight');
  await triggerKeyEvent(tablist, 'keydown', 'ArrowRight');
  await triggerKeyEvent(tablist, 'keydown', ' ');
  assert.dom(third).hasAria('selected', 'true', '2x ArrowRight + SPACE selects third option');
  assert.dom(first).doesNotHaveAria('selected', '... and deselects first option');
  await triggerKeyEvent(tablist, 'keydown', 'ArrowLeft');
  await triggerKeyEvent(tablist, 'keydown', ' ');
  assert.dom(second).hasAria('selected', 'true', 'ArrowLeft + SPACE selects second option');
  assert.dom(third).doesNotHaveAria('selected', '... and deselects third option');
}

//
// POINTER
//

async function testTablistPointerNavigation(assert, selectors = DEFAULT_SELECTORS) {
  const {
    elements,
    selectors: fullSelectors
  } = setupTablistTest(assert, selectors);
  const {
    tablist
  } = elements;
  const [first, second, third] = getCompositeItems(tablist, fullSelectors.item);
  await triggerEvent(first, 'pointerup');
  assert.dom(first).hasAttribute('tabindex', '0', 'Clicking first option activates it');
  await triggerEvent(second, 'pointerup');
  assert.dom(second).hasAttribute('tabindex', '0', 'Clicking second option activates it');
  assert.dom(first).hasAttribute('tabindex', '-1', '... and deactivates first option');
  await triggerEvent(third, 'pointerup');
  assert.dom(third).hasAttribute('tabindex', '0', 'Clicking last option activates it');
  assert.dom(second).hasAttribute('tabindex', '-1', '... and deactivates second option');
}
async function testTablistPointerSelection(assert, selectors = DEFAULT_SELECTORS) {
  const {
    elements,
    selectors: fullSelectors
  } = setupTablistTest(assert, selectors);
  const {
    tablist
  } = elements;
  const [first, second, third] = getCompositeItems(tablist, fullSelectors.item);
  await triggerEvent(first, 'pointerup', {
    bubbles: true
  });
  assert.dom(first).hasAria('selected', 'true', 'Clicking first option selects it');
  await triggerEvent(second, 'pointerup');
  assert.dom(second).hasAria('selected', 'true', 'Clicking second option selects it');
  assert.dom(first).doesNotHaveAria('selected', '... and deselects first option');
  await triggerEvent(third, 'pointerup');
  assert.dom(third).hasAria('selected', 'true', 'Clicking last option selects it');
  assert.dom(second).doesNotHaveAria('selected', '... and deselects second option');
}

//
// BEHAVIOR
//

async function selectTab(target, options = {}) {
  await triggerEvent(target, 'pointerup', options);
}

/**
  @module @ember/component/template-only
  @public
*/

/**
 * Template-only components have no backing class instance, so `this` in their
 * templates is null. This means that you can only reference passed in arguments
 * (e.g. `{{@arg}}`).
 */
// eslint-disable-next-line @typescript-eslint/no-empty-object-type

/**
 * A convenience alias for {@link TemplateOnlyComponent}
 */

// NOTES:
//
// 1. The generic here is for a *signature: a way to hang information for tools
//    like Glint which can provide typey checking for component templates using
//    information supplied via this generic. While it may appear useless on this
//    class definition and extension, it is used by external tools and should
//    not be removed.
// 2. SAFETY: this cast is *throwing away* information that is not part of the
//    public API and replacing it with something which has the same calling
//    contract, but much less information (since we do not want to expose the
//    internal APIs like `moduleName` etc.).
// prettier-ignore
const templateOnly = templateOnlyComponent;

const deferred = /* @__PURE__ */new WeakMap();
function deferDecorator(proto, prop, desc) {
  let map = deferred.get(proto);
  if (!map) {
    map = /* @__PURE__ */new Map();
    deferred.set(proto, map);
  }
  map.set(prop, desc);
}
function findDeferredDecorator(target, prop) {
  var _a;
  let cursor = target.prototype;
  while (cursor) {
    let desc = (_a = deferred.get(cursor)) == null ? void 0 : _a.get(prop);
    if (desc) {
      return desc;
    }
    cursor = cursor.prototype;
  }
}
function decorateFieldV2(prototype, prop, decorators, initializer) {
  let desc = {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: null
  };
  if (initializer) {
    desc.initializer = initializer;
  }
  for (let decorator of decorators) {
    desc = decorator(prototype, prop, desc) || desc;
  }
  if (desc.initializer === void 0) {
    Object.defineProperty(prototype, prop, desc);
  } else {
    deferDecorator(prototype, prop, desc);
  }
}
function initializeDeferredDecorator(target, prop) {
  let desc = findDeferredDecorator(target.constructor, prop);
  if (desc) {
    Object.defineProperty(target, prop, {
      enumerable: desc.enumerable,
      configurable: desc.configurable,
      writable: desc.writable,
      value: desc.initializer ? desc.initializer.call(target) : void 0
    });
  }
}

qunitExports.module('Rendering | Modifier | {{listbox}}', hooks => {
  setupRenderingTest(hooks);
  qunitExports.test('tabindex attribute is set', async function (assert) {
    const options = ['apple', 'banana', 'pineapple'];
    await render(setComponentTemplate(templateFactory(
    /*
      
            <div role="listbox" {{ariaListbox items=options}}>
              {{#each options as |option|}}
                <p role="option" aria-selected="false">{{option}}</p>
              {{/each}}
            </div>
          
    */
    {
      "id": "DGTtXNIH",
      "block": "[[[1,\"\\n        \"],[11,0],[24,\"role\",\"listbox\"],[4,[32,0],null,[[\"items\"],[[32,1]]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"            \"],[10,2],[14,\"role\",\"option\"],[14,\"aria-selected\",\"false\"],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1]],null],[1,\"        \"],[13],[1,\"\\n      \"]],[\"option\"],[\"each\",\"-track-array\"]]",
      "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
      "scope": () => [ListboxModifier, options],
      "isStrictMode": true
    }), templateOnly()));
    assert.dom('[role="listbox"]').hasAttribute('tabindex', '0');
  });
  qunitExports.module('Reactivity', () => {
    qunitExports.test('disabling sets tabindex to -1', async function (assert) {
      const options = ['apple', 'banana', 'pineapple'];
      const context = new class {
        static {
          decorateFieldV2(this.prototype, "disabled", [tracked], function () {
            return false;
          });
        }
        #disabled = (initializeDeferredDecorator(this, "disabled"), void 0); // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error
        // @ts-ignore
      }();
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div role="listbox" {{ariaListbox items=options disabled=context.disabled}}>
                  {{#each options as |option|}}
                    <p role="option" aria-selected="false">{{option}}</p>
                  {{/each}}
                </div>
              
      */
      {
        "id": "zWSTQ9Bz",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"listbox\"],[4,[32,0],null,[[\"items\",\"disabled\"],[[32,1],[32,2,[\"disabled\"]]]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"              \"],[10,2],[14,\"role\",\"option\"],[14,\"aria-selected\",\"false\"],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"option\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
        "scope": () => [ListboxModifier, options, context],
        "isStrictMode": true
      }), templateOnly()));
      assert.dom('[role="listbox"]').doesNotHaveAria('disabled');
      assert.dom('[role="listbox"]').hasAttribute('tabindex', '0');
      context.disabled = true;
      await rerender();
      assert.dom('[role="listbox"]').hasAria('disabled', 'true');
      assert.dom('[role="listbox"]').hasAttribute('tabindex', '-1');
    });
    qunitExports.test('selection updates', async assert => {
      const handleUpdate = sinon$1.spy();
      const options = ['apple', 'banana', 'pineapple'];
      const context = new class {
        static {
          decorateFieldV2(this.prototype, "selection", [tracked], function () {
            return undefined;
          });
        }
        #selection = (initializeDeferredDecorator(this, "selection"), void 0); // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error
        // @ts-ignore
      }();
      const isSelected = (item, selection) => {
        return item === selection;
      };
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div
                  role="listbox"
                  {{ariaListbox items=options selection=context.selection select=handleUpdate}}
                >
                  {{#each options as |option|}}
                    <p
                      role="option"
                      aria-selected={{if (isSelected option context.selection) "true"}}
                    >{{option}}</p>
                  {{/each}}
                </div>
              
      */
      {
        "id": "eqlXO0fH",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"listbox\"],[4,[32,0],null,[[\"items\",\"selection\",\"select\"],[[32,1],[32,2,[\"selection\"]],[32,3]]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"              \"],[10,2],[14,\"role\",\"option\"],[15,\"aria-selected\",[52,[28,[32,4],[[30,1],[32,2,[\"selection\"]]],null],\"true\"]],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"option\"],[\"each\",\"-track-array\",\"if\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
        "scope": () => [ListboxModifier, options, context, handleUpdate, isSelected],
        "isStrictMode": true
      }), templateOnly()));
      context.selection = 'banana';
      await settled();
      await focus('[role="listbox"]');
      await triggerKeyEvent('[role="listbox"]', 'keydown', 'ArrowRight');
      assert.ok(handleUpdate.calledWith('pineapple'));
    });
  });
  qunitExports.module('Navigation', () => {
    qunitExports.test('it supports keyboard navigation', async function (assert) {
      const options = ['apple', 'banana', 'pineapple'];
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div role="listbox" {{ariaListbox items=options}}>
                  {{#each options as |option|}}
                    <p role="option" aria-selected="false">{{option}}</p>
                  {{/each}}
                </div>
              
      */
      {
        "id": "Lu+1cDy8",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"listbox\"],[4,[32,0],null,[[\"items\"],[[32,1]]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"              \"],[10,2],[14,\"role\",\"option\"],[14,\"aria-selected\",\"false\"],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"option\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
        "scope": () => [ListboxModifier, options],
        "isStrictMode": true
      }), templateOnly()));
      await testListKeyboardNavigation(assert);
    });
    qunitExports.test('it supports mouse navigation', async function (assert) {
      const options = ['apple', 'banana', 'pineapple'];
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div role="listbox" {{ariaListbox items=options}}>
                  {{#each options as |option|}}
                    <p role="option" aria-selected="false">{{option}}</p>
                  {{/each}}
                </div>
              
      */
      {
        "id": "Lu+1cDy8",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"listbox\"],[4,[32,0],null,[[\"items\"],[[32,1]]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"              \"],[10,2],[14,\"role\",\"option\"],[14,\"aria-selected\",\"false\"],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"option\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
        "scope": () => [ListboxModifier, options],
        "isStrictMode": true
      }), templateOnly()));
      await testListPointerNavigation(assert);
    });
  });
  qunitExports.module('Single Selection', () => {
    qunitExports.test('select with element', async function (assert) {
      const selectSpy = sinon$1.spy();
      const options = ['apple', 'banana', 'pineapple'];
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div role="listbox" {{ariaListbox select=selectSpy}} data-test-listbox>
                  {{#each options as |option|}}
                    <p role="option" aria-selected="false">{{option}}</p>
                  {{/each}}
                </div>
              
      */
      {
        "id": "+K2YVeKC",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"listbox\"],[24,\"data-test-listbox\",\"\"],[4,[32,0],null,[[\"select\"],[[32,1]]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,2]],null]],null],null,[[[1,\"              \"],[10,2],[14,\"role\",\"option\"],[14,\"aria-selected\",\"false\"],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"option\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
        "scope": () => [ListboxModifier, selectSpy, options],
        "isStrictMode": true
      }), templateOnly()));
      await selectListbox('[data-test-listbox]', 'pineapple');
      const elem = document.querySelector('[role="option"]:last-child');
      assert.ok(selectSpy.calledOnceWith(elem));
    });
    qunitExports.test('select with item', async function (assert) {
      const selectSpy = sinon$1.spy();
      const options = [{
        id: 1,
        value: 'apple'
      }, {
        id: 2,
        value: 'banana'
      }, {
        id: 3,
        value: 'pineapple'
      }];
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div role="listbox" {{ariaListbox items=options select=selectSpy}} data-test-listbox>
                  {{#each options as |option|}}
                    <p role="option" aria-selected="false">{{option.value}}</p>
                  {{/each}}
                </div>
              
      */
      {
        "id": "RkS5HoS3",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"listbox\"],[24,\"data-test-listbox\",\"\"],[4,[32,0],null,[[\"items\",\"select\"],[[32,1],[32,2]]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"              \"],[10,2],[14,\"role\",\"option\"],[14,\"aria-selected\",\"false\"],[12],[1,[30,1,[\"value\"]]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"option\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
        "scope": () => [ListboxModifier, options, selectSpy],
        "isStrictMode": true
      }), templateOnly()));
      await selectListbox('[data-test-listbox]', 'banana');
      assert.ok(selectSpy.calledOnceWith(options[1]));
    });
    qunitExports.test('it supports keyboard selection', async function (assert) {
      const options = ['apple', 'banana', 'pineapple'];
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div role="listbox" {{ariaListbox items=options}}>
                  {{#each options as |option|}}
                    <p role="option" aria-selected="false">{{option}}</p>
                  {{/each}}
                </div>
              
      */
      {
        "id": "Lu+1cDy8",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"listbox\"],[4,[32,0],null,[[\"items\"],[[32,1]]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"              \"],[10,2],[14,\"role\",\"option\"],[14,\"aria-selected\",\"false\"],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"option\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
        "scope": () => [ListboxModifier, options],
        "isStrictMode": true
      }), templateOnly()));
      await testListKeyboardSelection(assert);
    });
    qunitExports.test('it supports mouse selection', async function (assert) {
      const options = ['apple', 'banana', 'pineapple'];
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div role="listbox" {{ariaListbox items=options}}>
                  {{#each options as |option|}}
                    <p role="option" aria-selected="false">{{option}}</p>
                  {{/each}}
                </div>
              
      */
      {
        "id": "Lu+1cDy8",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"listbox\"],[4,[32,0],null,[[\"items\"],[[32,1]]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"              \"],[10,2],[14,\"role\",\"option\"],[14,\"aria-selected\",\"false\"],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"option\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
        "scope": () => [ListboxModifier, options],
        "isStrictMode": true
      }), templateOnly()));
      await testListPointerSelection(assert);
    });
  });
  qunitExports.module('Multi Selection', () => {
    qunitExports.test('select with element', async function (assert) {
      const selectSpy = sinon$1.spy();
      const options = ['apple', 'banana', 'pineapple'];
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div role="listbox" {{ariaListbox select=selectSpy multi=true}} data-test-listbox>
                  {{#each options as |option|}}
                    <p role="option" aria-selected="false">{{option}}</p>
                  {{/each}}
                </div>
              
      */
      {
        "id": "Rud+3TtN",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"listbox\"],[24,\"data-test-listbox\",\"\"],[4,[32,0],null,[[\"select\",\"multi\"],[[32,1],true]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,2]],null]],null],null,[[[1,\"              \"],[10,2],[14,\"role\",\"option\"],[14,\"aria-selected\",\"false\"],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"option\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
        "scope": () => [ListboxModifier, selectSpy, options],
        "isStrictMode": true
      }), templateOnly()));
      const apple = document.querySelector('[role="option"]:first-child');
      const banana = document.querySelector('[role="option"]:nth-child(2)');
      const pineapple = document.querySelector('[role="option"]:last-child');
      await selectListbox('[data-test-listbox]', 'banana');
      assert.ok(selectSpy.getCall(0).calledWith([banana]));
      await selectListbox('[data-test-listbox]', ['pineapple', 'apple'], true);
      assert.ok(selectSpy.getCall(1).calledWith([apple, banana, pineapple]));
      await selectListbox('[data-test-listbox]', ['pineapple', 'apple']);
      assert.ok(selectSpy.getCall(2).calledWith([apple, pineapple]));
    });
    qunitExports.test('select with item', async function (assert) {
      const selectSpy = sinon$1.spy();
      const options = [{
        id: 1,
        value: 'apple'
      }, {
        id: 2,
        value: 'banana'
      }, {
        id: 3,
        value: 'pineapple'
      }];
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div
                  role="listbox"
                  {{ariaListbox items=options select=selectSpy multi=true}}
                  data-test-listbox
                >
                  {{#each options as |option|}}
                    <p role="option" aria-selected="false">{{option.value}}</p>
                  {{/each}}
                </div>
              
      */
      {
        "id": "ogttG+Ut",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"listbox\"],[24,\"data-test-listbox\",\"\"],[4,[32,0],null,[[\"items\",\"select\",\"multi\"],[[32,1],[32,2],true]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"              \"],[10,2],[14,\"role\",\"option\"],[14,\"aria-selected\",\"false\"],[12],[1,[30,1,[\"value\"]]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"option\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
        "scope": () => [ListboxModifier, options, selectSpy],
        "isStrictMode": true
      }), templateOnly()));
      await selectListbox('[data-test-listbox]', 'banana');
      assert.ok(selectSpy.getCall(0).calledWith([options[1]]));
      await selectListbox('[data-test-listbox]', ['pineapple', 'apple'], true);
      assert.ok(selectSpy.getCall(1).calledWith(options));
      await selectListbox('[data-test-listbox]', ['pineapple', 'apple']);
      assert.ok(selectSpy.getCall(2).calledWith([options[0], options[2]]));
    });
    qunitExports.test('it supports keyboard selection', async function (assert) {
      const options = ['apple', 'banana', 'pineapple'];
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div role="listbox" {{ariaListbox items=options multi=true}}>
                  {{#each options as |option|}}
                    {{! template-lint-disable require-mandatory-role-attributes  }}
                    <p role="option">{{option}}</p>
                  {{/each}}
                </div>
              
      */
      {
        "id": "X0AYqe7c",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"listbox\"],[4,[32,0],null,[[\"items\",\"multi\"],[[32,1],true]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"              \"],[10,2],[14,\"role\",\"option\"],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"option\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
        "scope": () => [ListboxModifier, options],
        "isStrictMode": true
      }), templateOnly()));
      await testListKeyboardSelection(assert);
    });
    qunitExports.test('it supports mouse selection', async function (assert) {
      const options = ['apple', 'banana', 'pineapple'];
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div role="listbox" {{ariaListbox items=options multi=true}}>
                  {{#each options as |option|}}
                    <p role="option" aria-selected="false">{{option}}</p>
                  {{/each}}
                </div>
              
      */
      {
        "id": "0lszVIEL",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"listbox\"],[4,[32,0],null,[[\"items\",\"multi\"],[[32,1],true]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"              \"],[10,2],[14,\"role\",\"option\"],[14,\"aria-selected\",\"false\"],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"option\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/listbox-test.gts",
        "scope": () => [ListboxModifier, options],
        "isStrictMode": true
      }), templateOnly()));
      await testListPointerSelection(assert);
    });
  });
});

// eslint-disable-next-line @typescript-eslint/naming-convention
const CodeMenu = setComponentTemplate(templateFactory(
/*
  
  <div role="menu" ...attributes {{ariaMenu disabled=(if @disabled @disabled false)}}>
    <span>Refactor</span>
    <button type="button" role="menuitem">Format Document</button>
    <button type="button" role="menuitem">Refactor...</button>
    <button type="button" role="menuitem">Source Action...</button>
    <hr />
    <button type="button" role="menuitem" popovertarget="sharemenu">Share</button>
    <div role="menu" id="sharemenu" popover {{ariaMenu}}>
      <button type="button" role="menuitem">Code</button>
      <button type="button" role="menuitem" popovertarget="socialmenu">Social</button>
      <div role="menu" id="socialmenu" popover {{ariaMenu}}>
        <button type="button" role="menuitem">Twitter</button>
        <button type="button" role="menuitem">Mastodon</button>
        <button type="button" role="menuitem">Bsky</button>
      </div>
    </div>
    <hr />
    <button type="button" role="menuitem">Cut</button>
    <button type="button" role="menuitem">Copy</button>
    <button type="button" role="menuitem">Paste</button>
    <hr />
    <span>Appearance</span>
    <div role="presentation">
      <button type="button" role="menuitemcheckbox" aria-checked="true">Primary Side Bar</button>
      <button type="button" role="menuitemcheckbox" aria-checked="true">Secondary Side Bar</button>
      <button type="button" role="menuitemcheckbox" aria-checked="true">Status Bar</button>
      <button type="button" role="menuitemcheckbox" aria-checked="true">Panels</button>
    </div>
    <hr />
    <button type="button" role="menuitem" popovertarget="panelpositionmenu">Panel Position</button>
    <div role="menu" id="panelpositionmenu" popover {{ariaMenu}}>
      <button type="button" role="menuitemradio" aria-checked="false">Top</button>
      <button type="button" role="menuitemradio" aria-checked="false">Left</button>
      <button type="button" role="menuitemradio" aria-checked="false">Right</button>
      <button type="button" role="menuitemradio" aria-checked="true">Bottom</button>
    </div>
  </div>

*/
{
  "id": "3wdbVeSi",
  "block": "[[[1,\"\\n  \"],[11,0],[24,\"role\",\"menu\"],[17,1],[4,[32,0],null,[[\"disabled\"],[[52,[30,2],[30,2],false]]]],[12],[1,\"\\n    \"],[10,1],[12],[1,\"Refactor\"],[13],[1,\"\\n    \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,4,\"button\"],[12],[1,\"Format Document\"],[13],[1,\"\\n    \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,4,\"button\"],[12],[1,\"Refactor...\"],[13],[1,\"\\n    \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,4,\"button\"],[12],[1,\"Source Action...\"],[13],[1,\"\\n    \"],[10,\"hr\"],[12],[13],[1,\"\\n    \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,\"popovertarget\",\"sharemenu\"],[14,4,\"button\"],[12],[1,\"Share\"],[13],[1,\"\\n    \"],[11,0],[24,\"role\",\"menu\"],[24,1,\"sharemenu\"],[24,\"popover\",\"\"],[4,[32,0],null,null],[12],[1,\"\\n      \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,4,\"button\"],[12],[1,\"Code\"],[13],[1,\"\\n      \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,\"popovertarget\",\"socialmenu\"],[14,4,\"button\"],[12],[1,\"Social\"],[13],[1,\"\\n      \"],[11,0],[24,\"role\",\"menu\"],[24,1,\"socialmenu\"],[24,\"popover\",\"\"],[4,[32,0],null,null],[12],[1,\"\\n        \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,4,\"button\"],[12],[1,\"Twitter\"],[13],[1,\"\\n        \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,4,\"button\"],[12],[1,\"Mastodon\"],[13],[1,\"\\n        \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,4,\"button\"],[12],[1,\"Bsky\"],[13],[1,\"\\n      \"],[13],[1,\"\\n    \"],[13],[1,\"\\n    \"],[10,\"hr\"],[12],[13],[1,\"\\n    \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,4,\"button\"],[12],[1,\"Cut\"],[13],[1,\"\\n    \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,4,\"button\"],[12],[1,\"Copy\"],[13],[1,\"\\n    \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,4,\"button\"],[12],[1,\"Paste\"],[13],[1,\"\\n    \"],[10,\"hr\"],[12],[13],[1,\"\\n    \"],[10,1],[12],[1,\"Appearance\"],[13],[1,\"\\n    \"],[10,0],[14,\"role\",\"presentation\"],[12],[1,\"\\n      \"],[10,\"button\"],[14,\"role\",\"menuitemcheckbox\"],[14,\"aria-checked\",\"true\"],[14,4,\"button\"],[12],[1,\"Primary Side Bar\"],[13],[1,\"\\n      \"],[10,\"button\"],[14,\"role\",\"menuitemcheckbox\"],[14,\"aria-checked\",\"true\"],[14,4,\"button\"],[12],[1,\"Secondary Side Bar\"],[13],[1,\"\\n      \"],[10,\"button\"],[14,\"role\",\"menuitemcheckbox\"],[14,\"aria-checked\",\"true\"],[14,4,\"button\"],[12],[1,\"Status Bar\"],[13],[1,\"\\n      \"],[10,\"button\"],[14,\"role\",\"menuitemcheckbox\"],[14,\"aria-checked\",\"true\"],[14,4,\"button\"],[12],[1,\"Panels\"],[13],[1,\"\\n    \"],[13],[1,\"\\n    \"],[10,\"hr\"],[12],[13],[1,\"\\n    \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,\"popovertarget\",\"panelpositionmenu\"],[14,4,\"button\"],[12],[1,\"Panel Position\"],[13],[1,\"\\n    \"],[11,0],[24,\"role\",\"menu\"],[24,1,\"panelpositionmenu\"],[24,\"popover\",\"\"],[4,[32,0],null,null],[12],[1,\"\\n      \"],[10,\"button\"],[14,\"role\",\"menuitemradio\"],[14,\"aria-checked\",\"false\"],[14,4,\"button\"],[12],[1,\"Top\"],[13],[1,\"\\n      \"],[10,\"button\"],[14,\"role\",\"menuitemradio\"],[14,\"aria-checked\",\"false\"],[14,4,\"button\"],[12],[1,\"Left\"],[13],[1,\"\\n      \"],[10,\"button\"],[14,\"role\",\"menuitemradio\"],[14,\"aria-checked\",\"false\"],[14,4,\"button\"],[12],[1,\"Right\"],[13],[1,\"\\n      \"],[10,\"button\"],[14,\"role\",\"menuitemradio\"],[14,\"aria-checked\",\"true\"],[14,4,\"button\"],[12],[1,\"Bottom\"],[13],[1,\"\\n    \"],[13],[1,\"\\n  \"],[13],[1,\"\\n\"]],[\"&attrs\",\"@disabled\"],[\"if\"]]",
  "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/menu-test.gts",
  "scope": () => [MenuModifier],
  "isStrictMode": true
}), templateOnly());
qunitExports.module('Rendering | Modifier | {{menu}}', hooks => {
  setupRenderingTest(hooks);
  qunitExports.module('rudiments', function () {
    qunitExports.test('tabindex attribute is set', async function (assert) {
      await render(setComponentTemplate(templateFactory(
      /*
        
                <button type="button" popovertarget="refactormenu">Refactor</button>
                <CodeMenu id="refactormenu" popover />
              
      */
      {
        "id": "TRD1rVPG",
        "block": "[[[1,\"\\n          \"],[10,\"button\"],[14,\"popovertarget\",\"refactormenu\"],[14,4,\"button\"],[12],[1,\"Refactor\"],[13],[1,\"\\n          \"],[8,[32,0],[[24,1,\"refactormenu\"],[24,\"popover\",\"\"]],null,null],[1,\"\\n        \"]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/menu-test.gts",
        "scope": () => [CodeMenu],
        "isStrictMode": true
      }), templateOnly()));
      assert.dom('[role="menuitem"]:first-of-type').hasAttribute('tabindex', '0');
    });
    qunitExports.test('no tabindex attribute when disabled', async function (assert) {
      const context = new class {
        static {
          decorateFieldV2(this.prototype, "disabled", [tracked], function () {
            return false;
          });
        }
        #disabled = (initializeDeferredDecorator(this, "disabled"), void 0); // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error
        // @ts-ignore
      }();
      await render(setComponentTemplate(templateFactory(
      /*
        
                <button type="button" popovertarget="refactormenu">Refactor</button>
                <CodeMenu @disabled={{context.disabled}} id="refactormenu" popover />
              
      */
      {
        "id": "/cKcVBAL",
        "block": "[[[1,\"\\n          \"],[10,\"button\"],[14,\"popovertarget\",\"refactormenu\"],[14,4,\"button\"],[12],[1,\"Refactor\"],[13],[1,\"\\n          \"],[8,[32,0],[[24,1,\"refactormenu\"],[24,\"popover\",\"\"]],[[\"@disabled\"],[[32,1,[\"disabled\"]]]],null],[1,\"\\n        \"]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/menu-test.gts",
        "scope": () => [CodeMenu, context],
        "isStrictMode": true
      }), templateOnly()));
      assert.dom('[role="menu"]').doesNotHaveAria('disabled');
      assert.dom('[role="menuitem"]:first-of-type').hasAttribute('tabindex', '0');
      context.disabled = true;
      await rerender();
      assert.dom('[role="menu"]').hasAria('disabled', 'true');
      assert.dom('[role="menuitem"]:first-of-type').hasAttribute('tabindex', '-1');
    });
  });
  qunitExports.module('Reactivity', () => {
    qunitExports.test('@items to be reactive with @disabled', async assert => {
      const context = new class {
        static {
          decorateFieldV2(this.prototype, "disabled", [tracked], function () {
            return false;
          });
        }
        #disabled = (initializeDeferredDecorator(this, "disabled"), void 0); // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error
        // @ts-ignore
        static {
          decorateFieldV2(this.prototype, "items", [tracked], function () {
            return ['jackfruit'];
          });
        }
        #items = (initializeDeferredDecorator(this, "items"), void 0); // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error
        // @ts-ignore
      }();
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div role="menu" {{ariaMenu items=context.items disabled=context.disabled}}>
                  {{#each context.items as |i|}}
                    <button type="button" role="menuitem">{{i}}</button>
                  {{/each}}
                </div>
              
      */
      {
        "id": "5oTe4PZ7",
        "block": "[[[1,\"\\n          \"],[11,0],[24,\"role\",\"menu\"],[4,[32,0],null,[[\"items\",\"disabled\"],[[32,1,[\"items\"]],[32,1,[\"disabled\"]]]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1,[\"items\"]]],null]],null],null,[[[1,\"              \"],[10,\"button\"],[14,\"role\",\"menuitem\"],[14,4,\"button\"],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"i\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/menu-test.gts",
        "scope": () => [MenuModifier, context],
        "isStrictMode": true
      }), templateOnly()));
      assert.dom('[role="menu"]').doesNotHaveAria('disabled');
      assert.dom('[role="menuitem"]').exists({
        count: 1
      });
      assert.dom('[role="menuitem"]').hasAttribute('tabindex', '0');
      context.disabled = true;
      await rerender();
      assert.dom('[role="menu"]').hasAria('disabled', 'true');
      assert.dom('[role="menuitem"]').hasAttribute('tabindex', '-1');
      context.items = ['apple', 'banana', 'pineapple'];
      await rerender();
      assert.dom('[role="menuitem"]').exists({
        count: 3
      });
      assert.dom('[role="menuitem"]').hasAttribute('tabindex', '-1');
    });
  });
  qunitExports.module('Navigation', function () {
    qunitExports.test('it supports keyboard navigation', async function (assert) {
      await render(setComponentTemplate(templateFactory(
      /*
        
                <button type="button" popovertarget="refactormenu">Refactor</button>
                <CodeMenu id="refactormenu" popover />
              
      */
      {
        "id": "TRD1rVPG",
        "block": "[[[1,\"\\n          \"],[10,\"button\"],[14,\"popovertarget\",\"refactormenu\"],[14,4,\"button\"],[12],[1,\"Refactor\"],[13],[1,\"\\n          \"],[8,[32,0],[[24,1,\"refactormenu\"],[24,\"popover\",\"\"]],null,null],[1,\"\\n        \"]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/menu-test.gts",
        "scope": () => [CodeMenu],
        "isStrictMode": true
      }), templateOnly()));
      await testMenuKeyboardNavigation(assert);
    });
    qunitExports.test('it supports pointer navigation', async function (assert) {
      await render(setComponentTemplate(templateFactory(
      /*
        
                <button type="button" popovertarget="refactormenu">Refactor</button>
                <CodeMenu id="refactormenu" popover />
              
      */
      {
        "id": "TRD1rVPG",
        "block": "[[[1,\"\\n          \"],[10,\"button\"],[14,\"popovertarget\",\"refactormenu\"],[14,4,\"button\"],[12],[1,\"Refactor\"],[13],[1,\"\\n          \"],[8,[32,0],[[24,1,\"refactormenu\"],[24,\"popover\",\"\"]],null,null],[1,\"\\n        \"]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/menu-test.gts",
        "scope": () => [CodeMenu],
        "isStrictMode": true
      }), templateOnly()));
      await testMenuPointerNavigation(assert);
    });
  });
});

// SAFETY: we need to provide interfaces that Glint can declaration-merge with
// to provide appropriate completions. In each case, the imported item is
// currently typed only as `object`, and we are replacing it with a similarly
// low-information interface type: these are empty objects which are simply able
// to be distinguished so that Glint can provide the relevant extensions.
/* eslint-disable @typescript-eslint/no-empty-object-type */

/**
 * Using the `{{hash}}` helper, you can pass objects directly from the template
 * as an argument to your components.
 *
 * ```
 * import { hash } from '@ember/helper';
 *
 * <template>
 *   {{#each-in (hash givenName='Jen' familyName='Weber') as |key value|}}
 *     <p>{{key}}: {{value}}</p>
 *   {{/each-in}}
 * </template>
 * ```
 *
 * **NOTE:** this example uses the experimental `<template>` feature, which is
 * the only place you need to import `hash` to use it (it is a built-in when
 * writing standalone `.hbs` files).
 */
const hash = hash$1;

const range = amount => [...Array(amount).keys()];
// eslint-disable-next-line @typescript-eslint/naming-convention
const Tabs = setComponentTemplate(templateFactory(
/*
  
  <div data-test-tab>
    <div role="tablist" ...attributes>
      {{#each (range @amount) as |i|}}
        <p role="tab" id="tab-{{i}}" aria-controls="panel-{{i}}">Tab {{i}}</p>
      {{/each}}
    </div>
    {{#each (range @amount) as |i|}}
      <div role="tabpanel" id="panel-{{i}}" aria-labelledby="tab-{{i}}">Tab {{i}}</div>
    {{/each}}
  </div>

*/
{
  "id": "261EkGA/",
  "block": "[[[1,\"\\n  \"],[10,0],[14,\"data-test-tab\",\"\"],[12],[1,\"\\n    \"],[11,0],[24,\"role\",\"tablist\"],[17,1],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[28,[32,0],[[30,2]],null]],null]],null],null,[[[1,\"        \"],[10,2],[14,\"role\",\"tab\"],[15,1,[29,[\"tab-\",[30,3]]]],[15,\"aria-controls\",[29,[\"panel-\",[30,3]]]],[12],[1,\"Tab \"],[1,[30,3]],[13],[1,\"\\n\"]],[3]],null],[1,\"    \"],[13],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[28,[32,0],[[30,2]],null]],null]],null],null,[[[1,\"      \"],[10,0],[14,\"role\",\"tabpanel\"],[15,1,[29,[\"panel-\",[30,4]]]],[15,\"aria-labelledby\",[29,[\"tab-\",[30,4]]]],[12],[1,\"Tab \"],[1,[30,4]],[13],[1,\"\\n\"]],[4]],null],[1,\"  \"],[13],[1,\"\\n\"]],[\"&attrs\",\"@amount\",\"i\",\"i\"],[\"each\",\"-track-array\"]]",
  "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
  "scope": () => [range],
  "isStrictMode": true
}), templateOnly());
qunitExports.module('Rendering | Modifier | {{tablist}}', hooks => {
  setupRenderingTest(hooks);
  qunitExports.test('tabindex attribute is set', async assert => {
    await render(setComponentTemplate(templateFactory(
    /*
      <Tabs @amount={{5}} {{ariaTablist}} />
    */
    {
      "id": "6DOn3DUk",
      "block": "[[[8,[32,0],[[4,[32,1],null,null]],[[\"@amount\"],[5]],null]],[],[]]",
      "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
      "scope": () => [Tabs, TablistModifier],
      "isStrictMode": true
    }), templateOnly()));
    assert.dom('[role="tab"]').hasAttribute('tabindex', '0');
  });
  qunitExports.module('Reactivity', () => {
    qunitExports.test('disabling sets tabindex to -1', async assert => {
      const context = new class {
        static {
          decorateFieldV2(this.prototype, "disabled", [tracked], function () {
            return false;
          });
        }
        #disabled = (initializeDeferredDecorator(this, "disabled"), void 0); // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error
        // @ts-ignore
      }();
      await render(setComponentTemplate(templateFactory(
      /*
        <Tabs @amount={{5}} {{ariaTablist disabled=context.disabled}} />
      */
      {
        "id": "GO76mWN1",
        "block": "[[[8,[32,0],[[4,[32,1],null,[[\"disabled\"],[[32,2,[\"disabled\"]]]]]],[[\"@amount\"],[5]],null]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
        "scope": () => [Tabs, TablistModifier, context],
        "isStrictMode": true
      }), templateOnly()));
      assert.dom('[role="tablist"]').doesNotHaveAria('disabled');
      assert.dom('[role="tab"]').hasAttribute('tabindex', '0');
      context.disabled = true;
      await rerender();
      assert.dom('[role="tablist"]').hasAria('disabled', 'true');
      assert.dom('[role="tab"]').hasAttribute('tabindex', '-1');
    });
    qunitExports.test('orientation changes are passed down', async assert => {
      const context = new class {
        static {
          decorateFieldV2(this.prototype, "orientation", [tracked], function () {
            return undefined;
          });
        }
        #orientation = (initializeDeferredDecorator(this, "orientation"), void 0); // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error
        // @ts-ignore
      }();
      await render(setComponentTemplate(templateFactory(
      /*
        <Tabs @amount={{5}} {{ariaTablist orientation=context.orientation}} />
      */
      {
        "id": "XsLoTmi3",
        "block": "[[[8,[32,0],[[4,[32,1],null,[[\"orientation\"],[[32,2,[\"orientation\"]]]]]],[[\"@amount\"],[5]],null]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
        "scope": () => [Tabs, TablistModifier, context],
        "isStrictMode": true
      }), templateOnly()));
      assert.dom('[role="tablist"]').doesNotHaveAria('orientation');
      context.orientation = 'vertical';
      await rerender();
      assert.dom('[role="tablist"]').hasAria('orientation', 'vertical');
    });
    qunitExports.test('selection updates', async assert => {
      const handleUpdate = sinon$1.spy();
      const items = ['1', '2', '3', '4'];
      const context = new class {
        static {
          decorateFieldV2(this.prototype, "selection", [tracked], function () {
            return undefined;
          });
        }
        #selection = (initializeDeferredDecorator(this, "selection"), void 0); // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error
        // @ts-ignore
      }();
      const isSelected = (item, selection) => {
        return item === selection;
      };
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div>
                  <div
                    role="tablist"
                    {{ariaTablist items=items selection=context.selection select=handleUpdate}}
                  >
                    {{#each items as |t i|}}
                      <p
                        role="tab"
                        id="tab-{{i}}"
                        aria-controls="panel-{{i}}"
                        aria-selected={{if (isSelected t context.selection) "true"}}
                      >{{t}}</p>
                    {{/each}}
                  </div>
                  {{#each items as |t i|}}
                    <div role="tabpanel" id="panel-{{i}}" aria-labelledby="tab-{{i}}">Content {{i}}</div>
                  {{/each}}
                </div>
              
      */
      {
        "id": "nQXUAt+/",
        "block": "[[[1,\"\\n          \"],[10,0],[12],[1,\"\\n            \"],[11,0],[24,\"role\",\"tablist\"],[4,[32,0],null,[[\"items\",\"selection\",\"select\"],[[32,1],[32,2,[\"selection\"]],[32,3]]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"                \"],[10,2],[14,\"role\",\"tab\"],[15,1,[29,[\"tab-\",[30,2]]]],[15,\"aria-controls\",[29,[\"panel-\",[30,2]]]],[15,\"aria-selected\",[52,[28,[32,4],[[30,1],[32,2,[\"selection\"]]],null],\"true\"]],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1,2]],null],[1,\"            \"],[13],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1]],null]],null],null,[[[1,\"              \"],[10,0],[14,\"role\",\"tabpanel\"],[15,1,[29,[\"panel-\",[30,4]]]],[15,\"aria-labelledby\",[29,[\"tab-\",[30,4]]]],[12],[1,\"Content \"],[1,[30,4]],[13],[1,\"\\n\"]],[3,4]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"t\",\"i\",\"t\",\"i\"],[\"each\",\"-track-array\",\"if\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
        "scope": () => [TablistModifier, items, context, handleUpdate, isSelected],
        "isStrictMode": true
      }), templateOnly()));
      assert.dom('[role="tab"]:nth-child(1)').hasAttribute('tabindex', '0');
      assert.dom('[role="tab"]:nth-child(1)').hasAria('selected', 'true');
      context.selection = '3';
      await rerender();
      assert.dom('[role="tab"]:nth-child(1)').hasAttribute('tabindex', '-1');
      assert.dom('[role="tab"]:nth-child(1)').doesNotHaveAria('selected');
      assert.dom('[role="tab"]:nth-child(3)').hasAttribute('tabindex', '0');
      assert.dom('[role="tab"]:nth-child(3)').hasAria('selected', 'true');
      document.querySelector('[role="tab"]:nth-child(3)').focus();
      await triggerKeyEvent('[role="tablist"]', 'keydown', 'ArrowRight');
      assert.ok(handleUpdate.calledWith('4'));
    });
    qunitExports.test('@items to be reactive with @disabled', async assert => {
      const context = new class {
        static {
          decorateFieldV2(this.prototype, "disabled", [tracked], function () {
            return false;
          });
        }
        #disabled = (initializeDeferredDecorator(this, "disabled"), void 0); // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error
        // @ts-ignore
        static {
          decorateFieldV2(this.prototype, "items", [tracked], function () {
            return ['1'];
          });
        }
        #items = (initializeDeferredDecorator(this, "items"), void 0); // eslint-disable-next-line @typescript-eslint/ban-ts-comment, @typescript-eslint/prefer-ts-expect-error
        // @ts-ignore
      }();
      await render(setComponentTemplate(templateFactory(
      /*
        
                <div>
                  <div role="tablist" {{ariaTablist items=context.items disabled=context.disabled}}>
                    {{#each context.items as |t i|}}
                      <p role="tab" id="tab-{{i}}" aria-controls="panel-{{i}}">{{t}}</p>
                    {{/each}}
                  </div>
                  {{#each context.items as |t i|}}
                    <div role="tabpanel" id="panel-{{i}}" aria-labelledby="tab-{{i}}">Content {{i}}</div>
                  {{/each}}
                </div>
              
      */
      {
        "id": "BTmWp03f",
        "block": "[[[1,\"\\n          \"],[10,0],[12],[1,\"\\n            \"],[11,0],[24,\"role\",\"tablist\"],[4,[32,0],null,[[\"items\",\"disabled\"],[[32,1,[\"items\"]],[32,1,[\"disabled\"]]]]],[12],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1,[\"items\"]]],null]],null],null,[[[1,\"                \"],[10,2],[14,\"role\",\"tab\"],[15,1,[29,[\"tab-\",[30,2]]]],[15,\"aria-controls\",[29,[\"panel-\",[30,2]]]],[12],[1,[30,1]],[13],[1,\"\\n\"]],[1,2]],null],[1,\"            \"],[13],[1,\"\\n\"],[42,[28,[31,1],[[28,[31,1],[[32,1,[\"items\"]]],null]],null],null,[[[1,\"              \"],[10,0],[14,\"role\",\"tabpanel\"],[15,1,[29,[\"panel-\",[30,4]]]],[15,\"aria-labelledby\",[29,[\"tab-\",[30,4]]]],[12],[1,\"Content \"],[1,[30,4]],[13],[1,\"\\n\"]],[3,4]],null],[1,\"          \"],[13],[1,\"\\n        \"]],[\"t\",\"i\",\"t\",\"i\"],[\"each\",\"-track-array\"]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
        "scope": () => [TablistModifier, context],
        "isStrictMode": true
      }), templateOnly()));
      assert.dom('[role="tablist"]').doesNotHaveAria('disabled');
      assert.dom('[role="tab"]').exists({
        count: 1
      });
      assert.dom('[role="tab"]').hasAttribute('tabindex', '0');
      context.disabled = true;
      await rerender();
      assert.dom('[role="tablist"]').hasAria('disabled', 'true');
      assert.dom('[role="tab"]').hasAttribute('tabindex', '-1');
      context.items = ['2', '3', '4'];
      await rerender();
      assert.dom('[role="tab"]').exists({
        count: 3
      });
      assert.dom('[role="tab"]').hasAttribute('tabindex', '-1');
    });
  });
  qunitExports.module('Navigation', () => {
    qunitExports.test('it supports keyboard navigation', async assert => {
      await render(setComponentTemplate(templateFactory(
      /*
        <Tabs @amount={{5}} {{ariaTablist}} />
      */
      {
        "id": "6DOn3DUk",
        "block": "[[[8,[32,0],[[4,[32,1],null,null]],[[\"@amount\"],[5]],null]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
        "scope": () => [Tabs, TablistModifier],
        "isStrictMode": true
      }), templateOnly()));
      await testTablistKeyboardNavigation(assert);
    });
    qunitExports.test('it supports mouse navigation', async assert => {
      await render(setComponentTemplate(templateFactory(
      /*
        <Tabs @amount={{5}} {{ariaTablist}} />
      */
      {
        "id": "6DOn3DUk",
        "block": "[[[8,[32,0],[[4,[32,1],null,null]],[[\"@amount\"],[5]],null]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
        "scope": () => [Tabs, TablistModifier],
        "isStrictMode": true
      }), templateOnly()));
      await testTablistPointerNavigation(assert);
    });
    qunitExports.test('it updates about navigation', async assert => {
      const handleNavigation = sinon$1.spy();
      await render(setComponentTemplate(templateFactory(
      /*
        <Tabs @amount={{5}} {{ariaTablist activateItem=handleNavigation}} />
      */
      {
        "id": "8HQkySBY",
        "block": "[[[8,[32,0],[[4,[32,1],null,[[\"activateItem\"],[[32,2]]]]],[[\"@amount\"],[5]],null]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
        "scope": () => [Tabs, TablistModifier, handleNavigation],
        "isStrictMode": true
      }), templateOnly()));
      const tab = document.querySelector('[role="tab"]:nth-child(2)');
      await selectTab(tab);
      assert.ok(handleNavigation.calledOnceWith(tab));
    });
  });
  qunitExports.module('Selection', () => {
    qunitExports.test('it supports automatic keyboard selection', async assert => {
      await render(setComponentTemplate(templateFactory(
      /*
        <Tabs @amount={{5}} {{ariaTablist}} />
      */
      {
        "id": "6DOn3DUk",
        "block": "[[[8,[32,0],[[4,[32,1],null,null]],[[\"@amount\"],[5]],null]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
        "scope": () => [Tabs, TablistModifier],
        "isStrictMode": true
      }), templateOnly()));
      await testTablistKeyboardAutomaticSelection(assert);
    });
    qunitExports.test('it supports manual keyboard selection', async assert => {
      await render(setComponentTemplate(templateFactory(
      /*
        
                <Tabs @amount={{5}} {{ariaTablist behavior=(hash singleSelection="manual")}} />
              
      */
      {
        "id": "KGWnar0G",
        "block": "[[[1,\"\\n          \"],[8,[32,0],[[4,[32,1],null,[[\"behavior\"],[[28,[32,2],null,[[\"singleSelection\"],[\"manual\"]]]]]]],[[\"@amount\"],[5]],null],[1,\"\\n        \"]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
        "scope": () => [Tabs, TablistModifier, hash],
        "isStrictMode": true
      }), templateOnly()));
      await testTablistKeyboardManualSelection(assert);
    });
    qunitExports.test('it supports pointer selection', async assert => {
      await render(setComponentTemplate(templateFactory(
      /*
        <Tabs @amount={{5}} {{ariaTablist}} />
      */
      {
        "id": "6DOn3DUk",
        "block": "[[[8,[32,0],[[4,[32,1],null,null]],[[\"@amount\"],[5]],null]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
        "scope": () => [Tabs, TablistModifier],
        "isStrictMode": true
      }), templateOnly()));
      await testTablistPointerSelection(assert);
    });
    qunitExports.test('it updates about selection', async assert => {
      const handleUpdate = sinon$1.spy();
      await render(setComponentTemplate(templateFactory(
      /*
        <Tabs @amount={{5}} {{ariaTablist select=handleUpdate}} />
      */
      {
        "id": "2Y1O6NEk",
        "block": "[[[8,[32,0],[[4,[32,1],null,[[\"select\"],[[32,2]]]]],[[\"@amount\"],[5]],null]],[],[]]",
        "moduleName": "/Users/thomas/code/hokulea/aria-voyager/packages/ember-aria-voyager/package/tests/rendering/tablist-test.gts",
        "scope": () => [Tabs, TablistModifier, handleUpdate],
        "isStrictMode": true
      }), templateOnly()));
      const tab = document.querySelector('[role="tab"]:nth-child(2)');
      await selectTab(tab);
      assert.ok(handleUpdate.calledOnceWith(tab));
    });
  });
});

class Cache {
  constructor(limit, func, store) {
    this.limit = limit;
    this.func = func;
    this.store = store;
    this.size = 0;
    this.misses = 0;
    this.hits = 0;
    this.store = store || new Map();
  }
  get(key) {
    let value = this.store.get(key);
    if (this.store.has(key)) {
      this.hits++;
      return this.store.get(key);
    } else {
      this.misses++;
      value = this.set(key, this.func(key));
    }
    return value;
  }
  set(key, value) {
    if (this.limit > this.size) {
      this.size++;
      this.store.set(key, value);
    }
    return value;
  }
  purge() {
    this.store.clear();
    this.size = 0;
    this.hits = 0;
    this.misses = 0;
  }
}

/* eslint-disable no-useless-escape */
const STRING_DASHERIZE_REGEXP = /[ _]/g;
const STRING_DASHERIZE_CACHE = new Cache(1000, key => decamelize(key).replace(STRING_DASHERIZE_REGEXP, '-'));
const STRING_CLASSIFY_REGEXP_1 = /^(\-|_)+(.)?/;
const STRING_CLASSIFY_REGEXP_2 = /(.)(\-|\_|\.|\s)+(.)?/g;
const STRING_CLASSIFY_REGEXP_3 = /(^|\/|\.)([a-z])/g;
const CLASSIFY_CACHE = new Cache(1000, str => {
  const replace1 = (_match, _separator, chr) => chr ? `_${chr.toUpperCase()}` : '';
  const replace2 = (_match, initialChar, _separator, chr) => initialChar + (chr ? chr.toUpperCase() : '');
  const parts = str.split('/');
  for (let i = 0; i < parts.length; i++) {
    parts[i] = parts[i].replace(STRING_CLASSIFY_REGEXP_1, replace1).replace(STRING_CLASSIFY_REGEXP_2, replace2);
  }
  return parts.join('/').replace(STRING_CLASSIFY_REGEXP_3, (match /*, separator, chr */) => match.toUpperCase());
});
const STRING_UNDERSCORE_REGEXP_1 = /([a-z\d])([A-Z]+)/g;
const STRING_UNDERSCORE_REGEXP_2 = /\-|\s+/g;
const UNDERSCORE_CACHE = new Cache(1000, str => str.replace(STRING_UNDERSCORE_REGEXP_1, '$1_$2').replace(STRING_UNDERSCORE_REGEXP_2, '_').toLowerCase());
const STRING_DECAMELIZE_REGEXP = /([a-z\d])([A-Z])/g;
const DECAMELIZE_CACHE = new Cache(1000, str => str.replace(STRING_DECAMELIZE_REGEXP, '$1_$2').toLowerCase());
/**
  Converts a camelized string into all lower case separated by underscores.

  ```javascript
  import { decamelize } from '@ember/string';

  decamelize('innerHTML');          // 'inner_html'
  decamelize('action_name');        // 'action_name'
  decamelize('css-class-name');     // 'css-class-name'
  decamelize('my favorite items');  // 'my favorite items'
  ```

  @method decamelize
  @param {String} str The string to decamelize.
  @return {String} the decamelized string.
  @public
*/
function decamelize(str) {
  return DECAMELIZE_CACHE.get(str);
}
/**
  Replaces underscores, spaces, or camelCase with dashes.

  ```javascript
  import { dasherize } from '@ember/string';

  dasherize('innerHTML');                // 'inner-html'
  dasherize('action_name');              // 'action-name'
  dasherize('css-class-name');           // 'css-class-name'
  dasherize('my favorite items');        // 'my-favorite-items'
  dasherize('privateDocs/ownerInvoice';  // 'private-docs/owner-invoice'
  ```

  @method dasherize
  @param {String} str The string to dasherize.
  @return {String} the dasherized string.
  @public
*/
function dasherize(str) {
  return STRING_DASHERIZE_CACHE.get(str);
}
/**
  Returns the UpperCamelCase form of a string.

  ```javascript
  import { classify } from '@ember/string';

  classify('innerHTML');                   // 'InnerHTML'
  classify('action_name');                 // 'ActionName'
  classify('css-class-name');              // 'CssClassName'
  classify('my favorite items');           // 'MyFavoriteItems'
  classify('private-docs/owner-invoice');  // 'PrivateDocs/OwnerInvoice'
  ```

  @method classify
  @param {String} str the string to classify
  @return {String} the classified string
  @public
*/
function classify(str) {
  return CLASSIFY_CACHE.get(str);
}
/**
  More general than decamelize. Returns the lower\_case\_and\_underscored
  form of a string.

  ```javascript
  import { underscore } from '@ember/string';

  underscore('innerHTML');                 // 'inner_html'
  underscore('action_name');               // 'action_name'
  underscore('css-class-name');            // 'css_class_name'
  underscore('my favorite items');         // 'my_favorite_items'
  underscore('privateDocs/ownerInvoice');  // 'private_docs/owner_invoice'
  ```

  @method underscore
  @param {String} str The string to underscore.
  @return {String} the underscored string.
  @public
*/
function underscore(str) {
  return UNDERSCORE_CACHE.get(str);
}

function classFactory(klass) {
  return {
    create(injections) {
      if (typeof klass.extend === 'function') {
        return klass.extend(injections);
      } else {
        return klass;
      }
    }
  };
}

class ModuleRegistry {
  constructor(entries) {
    this._entries = entries || globalThis.requirejs.entries;
  }
  moduleNames() {
    return Object.keys(this._entries);
  }
  has(moduleName) {
    return moduleName in this._entries;
  }
  get(...args) {
    return globalThis.require(...args);
  }
}

/**
 * This module defines a subclass of Ember.DefaultResolver that adds two
 * important features:
 *
 *  1) The resolver makes the container aware of es6 modules via the AMD
 *     output. The loader's _moduleEntries is consulted so that classes can be
 *     resolved directly via the module loader, without needing a manual
 *     `import`.
 *  2) is able to provide injections to classes that implement `extend`
 *     (as is typical with Ember).
 */
class Resolver {
  static moduleBasedResolver = true;
  moduleBasedResolver = true;
  _deprecatedPodModulePrefix = false;
  _normalizeCache = Object.create(null);
  static create(props) {
    return new this(props);
  }

  /**
   A listing of functions to test for moduleName's based on the provided
   `parsedName`. This allows easy customization of additional module based
   lookup patterns.
    @property moduleNameLookupPatterns
   @returns {Ember.Array}
   */
  moduleNameLookupPatterns = [this.podBasedModuleName, this.podBasedComponentsInSubdir, this.mainModuleName, this.defaultModuleName, this.nestedColocationComponentModuleName];
  static withModules(explicitModules) {
    return class extends this {
      static explicitModules = explicitModules;
    };
  }
  constructor(props) {
    Object.assign(this, props);
    if (!this._moduleRegistry) {
      let explicitModules = this.constructor.explicitModules;
      if (explicitModules) {
        this._moduleRegistry = {
          moduleNames() {
            return Object.keys(explicitModules);
          },
          has(name) {
            return Boolean(explicitModules[name]);
          },
          get(name) {
            return explicitModules[name];
          },
          addModules(modules) {
            explicitModules = Object.assign({}, explicitModules, modules);
          }
        };
      } else {
        if (typeof globalThis.requirejs.entries === 'undefined') {
          globalThis.requirejs.entries = globalThis.requirejs._eak_seen;
        }
        this._moduleRegistry = new ModuleRegistry();
      }
    }
    this.pluralizedTypes = this.pluralizedTypes || Object.create(null);
    if (!this.pluralizedTypes.config) {
      this.pluralizedTypes.config = 'config';
    }
  }
  makeToString(factory, fullName) {
    return '' + this.namespace.modulePrefix + '@' + fullName + ':';
  }
  shouldWrapInClassFactory(/* module, parsedName */
  ) {
    return false;
  }
  parseName(fullName) {
    if (fullName.parsedName === true) {
      return fullName;
    }
    let prefix, type, name;
    let fullNameParts = fullName.split('@');
    if (fullNameParts.length === 3) {
      if (fullNameParts[0].length === 0) {
        // leading scoped namespace: `@scope/pkg@type:name`
        prefix = `@${fullNameParts[1]}`;
        let prefixParts = fullNameParts[2].split(':');
        type = prefixParts[0];
        name = prefixParts[1];
      } else {
        // interweaved scoped namespace: `type:@scope/pkg@name`
        prefix = `@${fullNameParts[1]}`;
        type = fullNameParts[0].slice(0, -1);
        name = fullNameParts[2];
      }
      if (type === 'template:components') {
        name = `components/${name}`;
        type = 'template';
      }
    } else if (fullNameParts.length === 2) {
      let prefixParts = fullNameParts[0].split(':');
      if (prefixParts.length === 2) {
        if (prefixParts[1].length === 0) {
          type = prefixParts[0];
          name = `@${fullNameParts[1]}`;
        } else {
          prefix = prefixParts[1];
          type = prefixParts[0];
          name = fullNameParts[1];
        }
      } else {
        let nameParts = fullNameParts[1].split(':');
        prefix = fullNameParts[0];
        type = nameParts[0];
        name = nameParts[1];
      }
      if (type === 'template' && prefix.lastIndexOf('components/', 0) === 0) {
        name = `components/${name}`;
        prefix = prefix.slice(11);
      }
    } else {
      fullNameParts = fullName.split(':');
      type = fullNameParts[0];
      name = fullNameParts[1];
    }
    let fullNameWithoutType = name;
    let namespace = this.namespace;
    let root = namespace;
    return {
      parsedName: true,
      fullName: fullName,
      prefix: prefix || this.prefix({
        type: type
      }),
      type: type,
      fullNameWithoutType: fullNameWithoutType,
      name: name,
      root: root,
      resolveMethodName: 'resolve' + classify(type)
    };
  }
  resolveOther(parsedName) {
    assert('`modulePrefix` must be defined', this.namespace.modulePrefix);
    let normalizedModuleName = this.findModuleName(parsedName);
    if (normalizedModuleName) {
      let defaultExport = this._extractDefaultExport(normalizedModuleName, parsedName);
      if (defaultExport === undefined) {
        throw new Error(` Expected to find: '${parsedName.fullName}' within '${normalizedModuleName}' but got 'undefined'. Did you forget to 'export default' within '${normalizedModuleName}'?`);
      }
      if (this.shouldWrapInClassFactory(defaultExport, parsedName)) {
        defaultExport = classFactory(defaultExport);
      }
      return defaultExport;
    }
  }
  normalize(fullName) {
    return this._normalizeCache[fullName] || (this._normalizeCache[fullName] = this._normalize(fullName));
  }
  resolve(fullName) {
    if (fullName === 'resolver:current') {
      return {
        create: () => this
      };
    }
    let parsedName = this.parseName(fullName);
    let resolveMethodName = parsedName.resolveMethodName;
    let resolved;
    if (typeof this[resolveMethodName] === 'function') {
      resolved = this[resolveMethodName](parsedName);
    }
    if (resolved == null) {
      resolved = this.resolveOther(parsedName);
    }
    return resolved;
  }
  addModules(modules) {
    if (!this._moduleRegistry.addModules) {
      throw new Error(`addModules is only supported when your Resolver has been configured to use static modules via Resolver.withModules()`);
    }
    this._moduleRegistry.addModules(modules);
  }
  _normalize(fullName) {
    // A) Convert underscores to dashes
    // B) Convert camelCase to dash-case, except for components (their
    //    templates) and helpers where we want to avoid shadowing camelCase
    //    expressions
    // C) replace `.` with `/` in order to make nested controllers work in the following cases
    //      1. `needs: ['posts/post']`
    //      2. `{{render "posts/post"}}`
    //      3. `this.render('posts/post')` from Route

    let split = fullName.split(':');
    if (split.length > 1) {
      let type = split[0];
      if (type === 'component' || type === 'helper' || type === 'modifier' || type === 'template' && split[1].indexOf('components/') === 0) {
        return type + ':' + split[1].replace(/_/g, '-');
      } else {
        return type + ':' + dasherize(split[1].replace(/\./g, '/'));
      }
    } else {
      return fullName;
    }
  }
  pluralize(type) {
    return this.pluralizedTypes[type] || (this.pluralizedTypes[type] = type + 's');
  }
  podBasedLookupWithPrefix(podPrefix, parsedName) {
    let fullNameWithoutType = parsedName.fullNameWithoutType;
    if (parsedName.type === 'template') {
      fullNameWithoutType = fullNameWithoutType.replace(/^components\//, '');
    }
    return podPrefix + '/' + fullNameWithoutType + '/' + parsedName.type;
  }
  podBasedModuleName(parsedName) {
    let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
    return this.podBasedLookupWithPrefix(podPrefix, parsedName);
  }
  podBasedComponentsInSubdir(parsedName) {
    let podPrefix = this.namespace.podModulePrefix || this.namespace.modulePrefix;
    podPrefix = podPrefix + '/components';
    if (parsedName.type === 'component' || /^components/.test(parsedName.fullNameWithoutType)) {
      return this.podBasedLookupWithPrefix(podPrefix, parsedName);
    }
  }
  resolveEngine(parsedName) {
    let engineName = parsedName.fullNameWithoutType;
    let engineModule = engineName + '/engine';
    if (this._moduleRegistry.has(engineModule)) {
      return this._extractDefaultExport(engineModule);
    }
  }
  resolveRouteMap(parsedName) {
    let engineName = parsedName.fullNameWithoutType;
    let engineRoutesModule = engineName + '/routes';
    if (this._moduleRegistry.has(engineRoutesModule)) {
      let routeMap = this._extractDefaultExport(engineRoutesModule);
      assert(`The route map for ${engineName} should be wrapped by 'buildRoutes' before exporting.`, routeMap.isRouteMap);
      return routeMap;
    }
  }
  resolveTemplate(parsedName) {
    return this.resolveOther(parsedName);
  }
  mainModuleName(parsedName) {
    if (parsedName.fullNameWithoutType === 'main') {
      // if router:main or adapter:main look for a module with just the type first
      return parsedName.prefix + '/' + parsedName.type;
    }
  }
  defaultModuleName(parsedName) {
    return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType;
  }
  nestedColocationComponentModuleName(parsedName) {
    if (parsedName.type === 'component') {
      return parsedName.prefix + '/' + this.pluralize(parsedName.type) + '/' + parsedName.fullNameWithoutType + '/index';
    }
  }
  prefix(parsedName) {
    let tmpPrefix = this.namespace.modulePrefix;
    if (this.namespace[parsedName.type + 'Prefix']) {
      tmpPrefix = this.namespace[parsedName.type + 'Prefix'];
    }
    return tmpPrefix;
  }
  findModuleName(parsedName) {
    let moduleNameLookupPatterns = this.moduleNameLookupPatterns;
    let moduleName;
    for (let index = 0, length = moduleNameLookupPatterns.length; index < length; index++) {
      let item = moduleNameLookupPatterns[index];
      let tmpModuleName = item.call(this, parsedName);

      // allow treat all dashed and all underscored as the same thing
      // supports components with dashes and other stuff with underscores.
      if (tmpModuleName) {
        tmpModuleName = this.chooseModuleName(tmpModuleName);
      }
      if (tmpModuleName && this._moduleRegistry.has(tmpModuleName)) {
        moduleName = tmpModuleName;
      }
      if (moduleName) {
        return moduleName;
      }
    }
  }
  chooseModuleName(moduleName) {
    let underscoredModuleName = underscore(moduleName);
    if (moduleName !== underscoredModuleName && this._moduleRegistry.has(moduleName) && this._moduleRegistry.has(underscoredModuleName)) {
      throw new TypeError(`Ambiguous module names: '${moduleName}' and '${underscoredModuleName}'`);
    }
    if (this._moduleRegistry.has(moduleName)) {
      return moduleName;
    } else if (this._moduleRegistry.has(underscoredModuleName)) {
      return underscoredModuleName;
    }
  }
  knownForType(type) {
    let moduleKeys = this._moduleRegistry.moduleNames();
    let items = Object.create(null);
    for (let index = 0, length = moduleKeys.length; index < length; index++) {
      let moduleName = moduleKeys[index];
      let fullname = this.translateToContainerFullname(type, moduleName);
      if (fullname) {
        items[fullname] = true;
      }
    }
    return items;
  }
  translateToContainerFullname(type, moduleName) {
    let prefix = this.prefix({
      type
    });

    // Note: using string manipulation here rather than regexes for better performance.
    // pod modules
    // '^' + prefix + '/(.+)/' + type + '$'
    let podPrefix = prefix + '/';
    let podSuffix = '/' + type;
    let start = moduleName.indexOf(podPrefix);
    let end = moduleName.indexOf(podSuffix);
    if (start === 0 && end === moduleName.length - podSuffix.length && moduleName.length > podPrefix.length + podSuffix.length) {
      return type + ':' + moduleName.slice(start + podPrefix.length, end);
    }

    // non-pod modules
    // '^' + prefix + '/' + pluralizedType + '/(.+)$'
    let pluralizedType = this.pluralize(type);
    let nonPodPrefix = prefix + '/' + pluralizedType + '/';
    if (moduleName.indexOf(nonPodPrefix) === 0 && moduleName.length > nonPodPrefix.length) {
      return type + ':' + moduleName.slice(nonPodPrefix.length);
    }
  }
  _extractDefaultExport(normalizedModuleName) {
    let module = this._moduleRegistry.get(normalizedModuleName, null, null, true /* force sync */);
    if (module && module['default']) {
      module = module['default'];
    }
    return module;
  }
}
function assert(message, check) {
  if (!check) {
    throw new Error(message);
  }
}

function exists(options, message) {
  let expectedCount = null;
  if (typeof options === 'string') {
    message = options;
  } else if (options) {
    expectedCount = options.count;
  }
  let elements = this.findElements();
  if (expectedCount === null) {
    let result = elements.length > 0;
    let expected = format$1(this.targetDescription);
    let actual = result ? expected : format$1(this.targetDescription, 0);
    if (!message) {
      message = expected;
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
  } else if (typeof expectedCount === 'number') {
    let result = elements.length === expectedCount;
    let actual = format$1(this.targetDescription, elements.length);
    let expected = format$1(this.targetDescription, expectedCount);
    if (!message) {
      message = expected;
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
  } else {
    throw new TypeError(`Unexpected Parameter: ${expectedCount}`);
  }
}
function format$1(selector, num) {
  if (selector === '<unknown>') {
    selector = '<not found>';
  }
  if (num === undefined || num === null) {
    return `Element ${selector} exists`;
  } else if (num === 0) {
    return `Element ${selector} does not exist`;
  } else if (num === 1) {
    return `Element ${selector} exists once`;
  } else if (num === 2) {
    return `Element ${selector} exists twice`;
  } else {
    return `Element ${selector} exists ${num} times`;
  }
}

// imported from https://github.com/nathanboktae/chai-dom
function elementToString(el) {
  if (!el) return '<not found>';
  let desc;
  if (el instanceof NodeList) {
    if (el.length === 0) {
      return 'empty NodeList';
    }
    desc = Array.prototype.slice.call(el, 0, 5).map(elementToString).join(', ');
    return el.length > 5 ? `${desc}... (+${el.length - 5} more)` : desc;
  }
  if (!(el instanceof HTMLElement || el instanceof SVGElement)) {
    return String(el);
  }
  desc = el.tagName.toLowerCase();
  if (el.id) {
    desc += `#${el.id}`;
  }
  if (el.className && !(el.className instanceof SVGAnimatedString)) {
    desc += `.${String(el.className).replace(/\s+/g, '.')}`;
  }
  Array.prototype.forEach.call(el.attributes, function (attr) {
    if (attr.name !== 'class' && attr.name !== 'id') {
      desc += `[${attr.name}${attr.value ? `="${attr.value}"]` : ']'}`;
    }
  });
  return desc;
}
function focused(message) {
  let element = this.findTargetElement();
  if (!element) return;
  let result = document.activeElement === element;
  let actual = elementToString(document.activeElement);
  let expected = this.targetDescription;
  if (!message) {
    message = `Element ${expected} is focused`;
  }
  this.pushResult({
    result,
    actual,
    expected,
    message
  });
}
function notFocused(message) {
  let element = this.findTargetElement();
  if (!element) return;
  let result = document.activeElement !== element;
  let expected = `Element ${this.targetDescription} is not focused`;
  let actual = result ? expected : `Element ${this.targetDescription} is focused`;
  if (!message) {
    message = expected;
  }
  this.pushResult({
    result,
    message,
    actual,
    expected
  });
}
function checked(message) {
  let element = this.findTargetElement();
  if (!element) return;
  let isChecked = element.checked === true;
  let isNotChecked = element.checked === false;
  let result = isChecked;
  let hasCheckedProp = isChecked || isNotChecked;
  if (!hasCheckedProp) {
    let ariaChecked = element.getAttribute('aria-checked');
    if (ariaChecked !== null) {
      result = ariaChecked === 'true';
    }
  }
  let actual = result ? 'checked' : 'not checked';
  let expected = 'checked';
  if (!message) {
    message = `Element ${this.targetDescription} is checked`;
  }
  this.pushResult({
    result,
    actual,
    expected,
    message
  });
}
function notChecked(message) {
  let element = this.findTargetElement();
  if (!element) return;
  let isChecked = element.checked === true;
  let isNotChecked = element.checked === false;
  let result = !isChecked;
  let hasCheckedProp = isChecked || isNotChecked;
  if (!hasCheckedProp) {
    let ariaChecked = element.getAttribute('aria-checked');
    if (ariaChecked !== null) {
      result = ariaChecked !== 'true';
    }
  }
  let actual = result ? 'not checked' : 'checked';
  let expected = 'not checked';
  if (!message) {
    message = `Element ${this.targetDescription} is not checked`;
  }
  this.pushResult({
    result,
    actual,
    expected,
    message
  });
}
function required(message) {
  let element = this.findTargetElement();
  if (!element) return;
  if (!(element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement || element instanceof HTMLSelectElement)) {
    throw new TypeError(`Unexpected Element Type: ${element.toString()}`);
  }
  let result = element.required === true;
  let actual = result ? 'required' : 'not required';
  let expected = 'required';
  if (!message) {
    message = `Element ${this.targetDescription} is required`;
  }
  this.pushResult({
    result,
    actual,
    expected,
    message
  });
}
function notRequired(message) {
  let element = this.findTargetElement();
  if (!element) return;
  if (!(element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement || element instanceof HTMLSelectElement)) {
    throw new TypeError(`Unexpected Element Type: ${element.toString()}`);
  }
  let result = element.required === false;
  let actual = !result ? 'required' : 'not required';
  let expected = 'not required';
  if (!message) {
    message = `Element ${this.targetDescription} is not required`;
  }
  this.pushResult({
    result,
    actual,
    expected,
    message
  });
}
function isValid(message, options = {}) {
  let element = this.findTargetElement();
  if (!element) return;
  if (!(element instanceof HTMLFormElement || element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement || element instanceof HTMLButtonElement || element instanceof HTMLOutputElement || element instanceof HTMLSelectElement)) {
    throw new TypeError(`Unexpected Element Type: ${element.toString()}`);
  }
  let validity = element.reportValidity() === true;
  let result = validity === !options.inverted;
  let actual = validity ? 'valid' : 'not valid';
  let expected = options.inverted ? 'not valid' : 'valid';
  if (!message) {
    message = `Element ${this.targetDescription} is ${actual}`;
  }
  this.pushResult({
    result,
    actual,
    expected,
    message
  });
}

// Visible logic based on jQuery's
// https://github.com/jquery/jquery/blob/4a2bcc27f9c3ee24b3effac0fbe1285d1ee23cc5/src/css/hiddenVisibleSelectors.js#L11-L13
function visible(el) {
  if (el === null) return false;
  if (el.offsetWidth === 0 || el.offsetHeight === 0) return false;
  let clientRects = el.getClientRects();
  if (clientRects.length === 0) return false;
  for (let i = 0; i < clientRects.length; i++) {
    let rect = clientRects[i];
    if (rect.width !== 0 && rect.height !== 0) return true;
  }
  return false;
}
function isVisible(options, message) {
  let expectedCount = null;
  if (typeof options === 'string') {
    message = options;
  } else if (options) {
    expectedCount = options.count;
  }
  let elements = this.findElements().filter(visible);
  if (expectedCount === null) {
    let result = elements.length > 0;
    let expected = format(this.targetDescription);
    let actual = result ? expected : format(this.targetDescription, 0);
    if (!message) {
      message = expected;
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
  } else if (typeof expectedCount === 'number') {
    let result = elements.length === expectedCount;
    let actual = format(this.targetDescription, elements.length);
    let expected = format(this.targetDescription, expectedCount);
    if (!message) {
      message = expected;
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
  } else {
    throw new TypeError(`Unexpected Parameter: ${expectedCount}`);
  }
}
function format(selector, num) {
  if (selector === '<unknown>') {
    selector = '<not found>';
  }
  if (num === undefined || num === null) {
    return `Element ${selector} is visible`;
  } else if (num === 0) {
    return `Element ${selector} is not visible`;
  } else if (num === 1) {
    return `Element ${selector} is visible once`;
  } else if (num === 2) {
    return `Element ${selector} is visible twice`;
  } else {
    return `Element ${selector} is visible ${num} times`;
  }
}
function isDisabled(message, options = {}) {
  let {
    inverted
  } = options;
  let element = this.findTargetElement();
  if (!element) return;
  if (!(element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement || element instanceof HTMLSelectElement || element instanceof HTMLButtonElement || element instanceof HTMLOptGroupElement || element instanceof HTMLOptionElement || element instanceof HTMLFieldSetElement)) {
    throw new TypeError(`Unexpected Element Type: ${element.toString()}`);
  }
  let result = element.disabled === !inverted;
  let actual = element.disabled === false ? `Element ${this.targetDescription} is not disabled` : `Element ${this.targetDescription} is disabled`;
  let expected = inverted ? `Element ${this.targetDescription} is not disabled` : `Element ${this.targetDescription} is disabled`;
  if (!message) {
    message = expected;
  }
  this.pushResult({
    result,
    actual,
    expected,
    message
  });
}
function matchesSelector(elements, compareSelector) {
  let failures = elements.filter(it => !it.matches(compareSelector));
  return failures.length;
}
function collapseWhitespace(string) {
  return string.replace(/[\t\r\n]/g, ' ').replace(/ +/g, ' ').replace(/^ /, '').replace(/ $/, '');
}

/**
 * @ignore
 * Descriptor data for creating an {@link IDOMElementDescriptor} from a CSS
 * selector
 */
class SelectorData {
  selector;
  rootElement;
  constructor(selector, rootElement) {
    this.selector = selector;
    this.rootElement = rootElement;
  }
  get element() {
    return this.rootElement.querySelector(this.selector);
  }
  get elements() {
    return Array.from(this.rootElement.querySelectorAll(this.selector));
  }
  get description() {
    return this.selector;
  }
}
/**
 * @ignore
 * Descriptor data for creating an {@link IDOMElementDescriptor} from an
 * {@link Element}
 */
class ElementData {
  element;
  constructor(element) {
    this.element = element;
  }
  get description() {
    return elementToString(this.element);
  }
}
/**
 * @ignore
 * Create an {@link IDOMElementDescriptor} from a target and a root element
 */
function createDescriptor(target, rootElement) {
  if (typeof target === 'string') {
    // selector
    if (!rootElement) {
      throw new Error('Cannot do selector-based queries without a root element');
    }
    return createDescriptor$1(new SelectorData(target, rootElement));
  } else if (target instanceof Element) {
    // element
    return createDescriptor$1(new ElementData(target));
  } else if (target === null) {
    // null, which we treat as an unmatched element, e.g.
    // `createDescriptor(document.querySelector('.does-not-exist'))`
    return createDescriptor$1({
      element: null,
      description: '<unknown>'
    });
  } else if (isDescriptor(target)) {
    // already a descriptor
    return target;
  } else {
    throw new TypeError(`Unexpected Parameter: ${target}`);
  }
}

/**
 * @namespace
 */
class DOMAssertions {
  testContext;
  /**
   * @ignore
   * The target of our assertions
   */
  descriptor;
  /**
   * @ignore
   * Whether we were constructed with an element, rather than a selector or
   * descriptor. Used to make error messages more helpful.
   */
  wasPassedElement;
  /**
   * @hideconstructor
   */
  constructor(target, rootElement, testContext) {
    this.testContext = testContext;
    this.descriptor = createDescriptor(target, rootElement);
    this.wasPassedElement = target instanceof Element;
  }
  /**
   * Assert an {@link HTMLElement} (or multiple) matching the `selector` exists.
   *
   * @param {object?} options
   * @param {number?} options.count
   * @param {string?} message
   *
   * @example
   * assert.dom('#title').exists();
   * assert.dom('.choice').exists({ count: 4 });
   *
   * @see {@link #doesNotExist}
   */
  exists(...options) {
    exists.call(this, ...options);
    return this;
  }
  /**
   * Assert an {@link HTMLElement} matching the `selector` does not exists.
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('.should-not-exist').doesNotExist();
   *
   * @see {@link #exists}
   */
  doesNotExist(message) {
    exists.call(this, {
      count: 0
    }, message);
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} or an {@link HTMLElement} matching the
   * `selector` is currently checked.
   *
   * Note: This also supports `aria-checked="true/false"`.
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('input.active').isChecked();
   *
   * @see {@link #isNotChecked}
   */
  isChecked(message) {
    checked.call(this, message);
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} or an {@link HTMLElement} matching the
   * `selector` is currently unchecked.
   *
   * Note: This also supports `aria-checked="true/false"`.
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('input.active').isNotChecked();
   *
   * @see {@link #isChecked}
   */
  isNotChecked(message) {
    notChecked.call(this, message);
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} or an {@link HTMLElement} matching the
   * `selector` is currently focused.
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('input.email').isFocused();
   *
   * @see {@link #isNotFocused}
   */
  isFocused(message) {
    focused.call(this, message);
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} or an {@link HTMLElement} matching the
   * `selector` is not currently focused.
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('input[type="password"]').isNotFocused();
   *
   * @see {@link #isFocused}
   */
  isNotFocused(message) {
    notFocused.call(this, message);
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} or an {@link HTMLElement} matching the
   * `selector` is currently required.
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('input[type="text"]').isRequired();
   *
   * @see {@link #isNotRequired}
   */
  isRequired(message) {
    required.call(this, message);
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} or an {@link HTMLElement} matching the
   * `selector` is currently not required.
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('input[type="text"]').isNotRequired();
   *
   * @see {@link #isRequired}
   */
  isNotRequired(message) {
    notRequired.call(this, message);
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} passes validation
   *
   * Validity is determined by asserting that:
   *
   * - `element.reportValidity() === true`
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('.input').isValid();
   *
   * @see {@link #isValid}
   */
  isValid(message) {
    isValid.call(this, message);
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} does not pass validation
   *
   * Validity is determined by asserting that:
   *
   * - `element.reportValidity() === true`
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('.input').isNotValid();
   *
   * @see {@link #isValid}
   */
  isNotValid(message) {
    isValid.call(this, message, {
      inverted: true
    });
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} or an {@link HTMLElement} matching the
   * `selector` exists and is visible.
   *
   * Visibility is determined by asserting that:
   *
   * - the element's offsetWidth and offsetHeight are non-zero
   * - any of the element's DOMRect objects have a non-zero size
   *
   * Additionally, visibility in this case means that the element is visible on the page,
   * but not necessarily in the viewport.
   *
   * @param {object?} options
   * @param {number?} options.count
   * @param {string?} message
   *
   * @example
   * assert.dom('#title').isVisible();
   * assert.dom('.choice').isVisible({ count: 4 });
   *
   * @see {@link #isNotVisible}
   */
  isVisible(...options) {
    isVisible.call(this, ...options);
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} or an {@link HTMLElement} matching the
   * `selector` does not exist or is not visible on the page.
   *
   * Visibility is determined by asserting that:
   *
   * - the element's offsetWidth or offsetHeight are zero
   * - all of the element's DOMRect objects have a size of zero
   *
   * Additionally, visibility in this case means that the element is visible on the page,
   * but not necessarily in the viewport.
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('.foo').isNotVisible();
   *
   * @see {@link #isVisible}
   */
  isNotVisible(message) {
    isVisible.call(this, {
      count: 0
    }, message);
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} has an attribute with the provided `name`
   * and optionally checks if the attribute `value` matches the provided text
   * or regular expression.
   *
   * @param {string} name
   * @param {string|RegExp|object?} value
   * @param {string?} message
   *
   * @example
   * assert.dom('input.password-input').hasAttribute('type', 'password');
   *
   * @see {@link #doesNotHaveAttribute}
   */
  hasAttribute(name, value, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    if (arguments.length === 1) {
      value = {
        any: true
      };
    }
    let actualValue = element.getAttribute(name);
    if (value instanceof RegExp) {
      let result = typeof actualValue === 'string' && value.test(actualValue);
      let expected = `Element ${this.targetDescription} has attribute "${name}" with value matching ${value}`;
      let actual = actualValue === null ? `Element ${this.targetDescription} does not have attribute "${name}"` : `Element ${this.targetDescription} has attribute "${name}" with value ${JSON.stringify(actualValue)}`;
      if (!message) {
        message = expected;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    } else if (value.any === true) {
      let result = actualValue !== null;
      let expected = `Element ${this.targetDescription} has attribute "${name}"`;
      let actual = result ? expected : `Element ${this.targetDescription} does not have attribute "${name}"`;
      if (!message) {
        message = expected;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    } else {
      let result = value === actualValue;
      let expected = `Element ${this.targetDescription} has attribute "${name}" with value ${JSON.stringify(value)}`;
      let actual = actualValue === null ? `Element ${this.targetDescription} does not have attribute "${name}"` : `Element ${this.targetDescription} has attribute "${name}" with value ${JSON.stringify(actualValue)}`;
      if (!message) {
        message = expected;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    }
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} has no attribute with the provided `name`.
   *
   * **Aliases:** `hasNoAttribute`, `lacksAttribute`
   *
   * @param {string} name
   * @param {string?} message
   *
   * @example
   * assert.dom('input.username').doesNotHaveAttribute('disabled');
   *
   * @see {@link #hasAttribute}
   */
  doesNotHaveAttribute(name, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    let result = !element.hasAttribute(name);
    let expected = `Element ${this.targetDescription} does not have attribute "${name}"`;
    let actual = expected;
    if (!result) {
      let value = element.getAttribute(name);
      actual = `Element ${this.targetDescription} has attribute "${name}" with value ${JSON.stringify(value)}`;
    }
    if (!message) {
      message = expected;
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
    return this;
  }
  hasNoAttribute(name, message) {
    return this.doesNotHaveAttribute(name, message);
  }
  lacksAttribute(name, message) {
    return this.doesNotHaveAttribute(name, message);
  }
  /**
   * Assert that the {@link HTMLElement} has an ARIA attribute with the provided
   * `name` and optionally checks if the attribute `value` matches the provided
   * text or regular expression.
   *
   * @param {string} name
   * @param {string|RegExp|object?} value
   * @param {string?} message
   *
   * @example
   * assert.dom('button').hasAria('pressed', 'true');
   *
   * @see {@link #doesNotHaveAria}
   */
  hasAria(name, ...value) {
    if (value.length === 0) {
      return this.hasAttribute(`aria-${name}`);
    } else {
      return this.hasAttribute(`aria-${name}`, ...value);
    }
  }
  /**
   * Assert that the {@link HTMLElement} has no ARIA attribute with the
   * provided `name`.
   *
   * **Aliases:** `hasNoAria`, `lacksAria`
   *
   * @param {string} name
   * @param {string?} message
   *
   * @example
   * assert.dom('button').doesNotHaveAria('pressed');
   *
   * @see {@link #hasAria}
   */
  doesNotHaveAria(name, message) {
    return this.doesNotHaveAttribute(`aria-${name}`, message);
  }
  hasNoAria(name, message) {
    return this.doesNotHaveAria(name, message);
  }
  lacksAria(name, message) {
    return this.doesNotHaveAria(name, message);
  }
  /**
   * Assert that the {@link HTMLElement} has a property with the provided `name`
   * and checks if the property `value` matches the provided text or regular
   * expression.
   *
   * @param {string} name
   * @param {RegExp|any} value
   * @param {string?} message
   *
   * @example
   * assert.dom('input.password-input').hasProperty('type', 'password');
   *
   * @see {@link #doesNotHaveProperty}
   */
  hasProperty(name, value, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    let description = this.targetDescription;
    let actualValue = element[name];
    if (value instanceof RegExp) {
      let result = value.test(String(actualValue));
      let expected = `Element ${description} has property "${name}" with value matching ${value}`;
      let actual = `Element ${description} has property "${name}" with value ${JSON.stringify(actualValue)}`;
      if (!message) {
        message = expected;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    } else {
      let result = value === actualValue;
      let expected = `Element ${description} has property "${name}" with value ${JSON.stringify(value)}`;
      let actual = `Element ${description} has property "${name}" with value ${JSON.stringify(actualValue)}`;
      if (!message) {
        message = expected;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    }
    return this;
  }
  /**
   *  Assert that the {@link HTMLElement} or an {@link HTMLElement} matching the
   * `selector` is disabled.
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('.foo').isDisabled();
   *
   * @see {@link #isNotDisabled}
   */
  isDisabled(message) {
    isDisabled.call(this, message);
    return this;
  }
  /**
   *  Assert that the {@link HTMLElement} or an {@link HTMLElement} matching the
   * `selector` is not disabled.
   *
   * **Aliases:** `isEnabled`
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('.foo').isNotDisabled();
   *
   * @see {@link #isDisabled}
   */
  isNotDisabled(message) {
    isDisabled.call(this, message, {
      inverted: true
    });
    return this;
  }
  isEnabled(message) {
    return this.isNotDisabled(message);
  }
  /**
   * Assert that the {@link HTMLElement} has the `expected` CSS class using
   * [`classList`](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList).
   *
   * `expected` can also be a regular expression, and the assertion will return
   * true if any of the element's CSS classes match.
   *
   * @param {string|RegExp} expected
   * @param {string?} message
   *
   * @example
   * assert.dom('input[type="password"]').hasClass('secret-password-input');
   *
   * @example
   * assert.dom('input[type="password"]').hasClass(/.*password-input/);
   *
   * @see {@link #doesNotHaveClass}
   */
  hasClass(expected, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    let actual = element.classList.toString();
    if (expected instanceof RegExp) {
      let classNames = Array.prototype.slice.call(element.classList);
      let result = classNames.some(className => {
        return expected.test(className);
      });
      if (!message) {
        message = `Element ${this.targetDescription} has CSS class matching ${expected}`;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    } else {
      let result = element.classList.contains(expected);
      if (!message) {
        message = `Element ${this.targetDescription} has CSS class "${expected}"`;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    }
    return this;
  }
  /**
   * Assert that the {@link HTMLElement} does not have the `expected` CSS class using
   * [`classList`](https://developer.mozilla.org/en-US/docs/Web/API/Element/classList).
   *
   * `expected` can also be a regular expression, and the assertion will return
   * true if none of the element's CSS classes match.
   *
   * **Aliases:** `hasNoClass`, `lacksClass`
   *
   * @param {string|RegExp} expected
   * @param {string?} message
   *
   * @example
   * assert.dom('input[type="password"]').doesNotHaveClass('username-input');
   *
   * @example
   * assert.dom('input[type="password"]').doesNotHaveClass(/username-.*-input/);
   *
   * @see {@link #hasClass}
   */
  doesNotHaveClass(expected, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    let actual = element.classList.toString();
    if (expected instanceof RegExp) {
      let classNames = Array.prototype.slice.call(element.classList);
      let result = classNames.every(className => {
        return !expected.test(className);
      });
      if (!message) {
        message = `Element ${this.targetDescription} does not have CSS class matching ${expected}`;
      }
      this.pushResult({
        result,
        actual,
        expected: `not: ${expected}`,
        message
      });
    } else {
      let result = !element.classList.contains(expected);
      if (!message) {
        message = `Element ${this.targetDescription} does not have CSS class "${expected}"`;
      }
      this.pushResult({
        result,
        actual,
        expected: `not: ${expected}`,
        message
      });
    }
    return this;
  }
  hasNoClass(expected, message) {
    return this.doesNotHaveClass(expected, message);
  }
  lacksClass(expected, message) {
    return this.doesNotHaveClass(expected, message);
  }
  /**
   * Assert that the [HTMLElement][] has the `expected` style declarations using
   * [`window.getComputedStyle`](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle).
   *
   * @param {object} expected
   * @param {string?} message
   *
   * @example
   * assert.dom('.progress-bar').hasStyle({
   *   opacity: 1,
   *   display: 'block'
   * });
   *
   * @see {@link #hasClass}
   */
  hasStyle(expected, message) {
    return this.hasPseudoElementStyle(null, expected, message);
  }
  /**
   * Assert that the pseudo element for `selector` of the [HTMLElement][] has the `expected` style declarations using
   * [`window.getComputedStyle`](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle).
   *
   * @param {string} selector
   * @param {object} expected
   * @param {string?} message
   *
   * @example
   * assert.dom('.progress-bar').hasPseudoElementStyle(':after', {
   *   content: '";"',
   * });
   *
   * @see {@link #hasClass}
   */
  hasPseudoElementStyle(selector, expected, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    let computedStyle = window.getComputedStyle(element, selector);
    let expectedProperties = Object.keys(expected);
    if (expectedProperties.length <= 0) {
      throw new TypeError(`Missing style expectations. There must be at least one style property in the passed in expectation object.`);
    }
    let result = expectedProperties.every(property => (computedStyle.getPropertyValue(property.toString()) || computedStyle[property]) === expected[property]);
    let actual = {};
    expectedProperties.forEach(property => actual[property] = computedStyle.getPropertyValue(property.toString()) || computedStyle[property]);
    if (!message) {
      let normalizedSelector = selector ? selector.replace(/^:{0,2}/, '::') : '';
      message = `Element ${this.targetDescription}${normalizedSelector} has style "${JSON.stringify(expected)}"`;
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
    return this;
  }
  /**
   * Assert that the [HTMLElement][] does not have the `expected` style declarations using
   * [`window.getComputedStyle`](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle).
   *
   * @param {object} expected
   * @param {string?} message
   *
   * @example
   * assert.dom('.progress-bar').doesNotHaveStyle({
   *   opacity: 1,
   *   display: 'block'
   * });
   *
   * @see {@link #hasClass}
   */
  doesNotHaveStyle(expected, message) {
    return this.doesNotHavePseudoElementStyle(null, expected, message);
  }
  /**
   * Assert that the pseudo element for `selector` of the [HTMLElement][] does not have the `expected` style declarations using
   * [`window.getComputedStyle`](https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle).
   *
   * @param {string} selector
   * @param {object} expected
   * @param {string?} message
   *
   * @example
   * assert.dom('.progress-bar').doesNotHavePseudoElementStyle(':after', {
   *   content: '";"',
   * });
   *
   * @see {@link #hasClass}
   */
  doesNotHavePseudoElementStyle(selector, expected, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    let computedStyle = window.getComputedStyle(element, selector);
    let expectedProperties = Object.keys(expected);
    if (expectedProperties.length <= 0) {
      throw new TypeError(`Missing style expectations. There must be at least one style property in the passed in expectation object.`);
    }
    let result = expectedProperties.some(property => computedStyle[property] !== expected[property]);
    let actual = {};
    expectedProperties.forEach(property => actual[property] = computedStyle[property]);
    if (!message) {
      let normalizedSelector = selector ? selector.replace(/^:{0,2}/, '::') : '';
      message = `Element ${this.targetDescription}${normalizedSelector} does not have style "${JSON.stringify(expected)}"`;
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
    return this;
  }
  /**
   * Assert that the text of the {@link HTMLElement} or an {@link HTMLElement}
   * matching the `selector` matches the `expected` text, using the
   * [`textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)
   * attribute and stripping/collapsing whitespace.
   *
   * `expected` can also be a regular expression.
   *
   * > Note: This assertion will collapse whitespace if the type you pass in is a string.
   * > If you are testing specifically for whitespace integrity, pass your expected text
   * > in as a RegEx pattern.
   *
   * **Aliases:** `matchesText`
   *
   * @param {string|RegExp} expected
   * @param {string?} message
   *
   * @example
   * // <h2 id="title">
   * //   Welcome to <b>QUnit</b>
   * // </h2>
   *
   * assert.dom('#title').hasText('Welcome to QUnit');
   *
   * @example
   * assert.dom('.foo').hasText(/[12]\d{3}/);
   *
   * @see {@link #includesText}
   */
  hasText(expected, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    if (expected instanceof RegExp) {
      let result = typeof element.textContent === 'string' && expected.test(element.textContent);
      let actual = element.textContent;
      if (!message) {
        message = `Element ${this.targetDescription} has text matching ${expected}`;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    } else if (expected.any === true) {
      let result = Boolean(element.textContent);
      let expected = `Element ${this.targetDescription} has a text`;
      let actual = result ? expected : `Element ${this.targetDescription} has no text`;
      if (!message) {
        message = expected;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    } else if (typeof expected === 'string') {
      expected = collapseWhitespace(expected);
      let actual = collapseWhitespace(element.textContent || '');
      let result = actual === expected;
      if (!message) {
        message = `Element ${this.targetDescription} has text "${expected}"`;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    } else {
      throw new TypeError(`You must pass a string or Regular Expression to "hasText". You passed ${expected}.`);
    }
    return this;
  }
  matchesText(expected, message) {
    return this.hasText(expected, message);
  }
  /**
   * Assert that the `textContent` property of an {@link HTMLElement} is not empty.
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('button.share').hasAnyText();
   *
   * @see {@link #hasText}
   */
  hasAnyText(message) {
    return this.hasText({
      any: true
    }, message);
  }
  /**
   * Assert that the `textContent` property of an {@link HTMLElement} is empty.
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('div').hasNoText();
   *
   * @see {@link #hasNoText}
   */
  hasNoText(message) {
    return this.hasText('', message);
  }
  /**
   * Assert that the text of the {@link HTMLElement} or an {@link HTMLElement}
   * matching the `selector` contains the given `text`, using the
   * [`textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)
   * attribute.
   *
   * > Note: This assertion will collapse whitespace in `textContent` before searching.
   * > If you would like to assert on a string that *should* contain line breaks, tabs,
   * > more than one space in a row, or starting/ending whitespace, use the {@link #hasText}
   * > selector and pass your expected text in as a RegEx pattern.
   *
   * **Aliases:** `containsText`, `hasTextContaining`
   *
   * @param {string} text
   * @param {string?} message
   *
   * @example
   * assert.dom('#title').includesText('Welcome');
   *
   * @see {@link #hasText}
   */
  includesText(text, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    let collapsedText = collapseWhitespace(element.textContent || '');
    let result = collapsedText.indexOf(text) !== -1;
    let actual = collapsedText;
    let expected = text;
    if (!message) {
      message = `Element ${this.targetDescription} has text containing "${text}"`;
    }
    if (!result && text !== collapseWhitespace(text)) {
      console.warn('The `.includesText()`, `.containsText()`, and `.hasTextContaining()` assertions collapse whitespace. The text you are checking for contains whitespace that may have made your test fail incorrectly. Try the `.hasText()` assertion passing in your expected text as a RegExp pattern. Your text:\n' + text);
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
    return this;
  }
  containsText(expected, message) {
    return this.includesText(expected, message);
  }
  hasTextContaining(expected, message) {
    return this.includesText(expected, message);
  }
  /**
   * Assert that the text of the {@link HTMLElement} or an {@link HTMLElement}
   * matching the `selector` does not include the given `text`, using the
   * [`textContent`](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)
   * attribute.
   *
   * **Aliases:** `doesNotContainText`, `doesNotHaveTextContaining`
   *
   * @param {string} text
   * @param {string?} message
   *
   * @example
   * assert.dom('#title').doesNotIncludeText('Welcome');
   */
  doesNotIncludeText(text, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    let collapsedText = collapseWhitespace(element.textContent || '');
    let result = collapsedText.indexOf(text) === -1;
    let expected = `Element ${this.targetDescription} does not include text "${text}"`;
    let actual = expected;
    if (!result) {
      actual = `Element ${this.targetDescription} includes text "${text}"`;
    }
    if (!message) {
      message = expected;
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
    return this;
  }
  doesNotContainText(unexpected, message) {
    return this.doesNotIncludeText(unexpected, message);
  }
  doesNotHaveTextContaining(unexpected, message) {
    return this.doesNotIncludeText(unexpected, message);
  }
  /**
   * Assert that the `value` property of an {@link HTMLInputElement} matches
   * the `expected` text or regular expression.
   *
   * If no `expected` value is provided, the assertion will fail if the
   * `value` is an empty string.
   *
   * @param {string|RegExp|object?} expected
   * @param {string?} message
   *
   * @example
   * assert.dom('input.username').hasValue('HSimpson');
   *
   * @see {@link #includesValue}
   * @see {@link #hasAnyValue}
   * @see {@link #hasNoValue}
   */
  hasValue(expected, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    if (arguments.length === 0) {
      expected = {
        any: true
      };
    }
    let value = element.value;
    if (expected instanceof RegExp) {
      let result = expected.test(value);
      let actual = value;
      if (!message) {
        message = `Element ${this.targetDescription} has value matching ${expected}`;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    } else if (expected.any === true) {
      let result = Boolean(value);
      let expected = `Element ${this.targetDescription} has a value`;
      let actual = result ? expected : `Element ${this.targetDescription} has no value`;
      if (!message) {
        message = expected;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    } else {
      let actual = value;
      let result = actual === expected;
      if (!message) {
        message = `Element ${this.targetDescription} has value "${expected}"`;
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    }
    return this;
  }
  /**
   * Assert that the `value` property of an {@link HTMLInputElement} includes
   * the `expected` text.
   *
   * **Aliases:** `containsValue`, `hasValueContaining`
   *
   * @param {string} expected
   * @param {string?} message
   *
   * @example
   * assert.dom('textarea.description').includesValue('https://example.com');
   *
   * @see {@link #doesNotIncludeValue}
   */
  includesValue(expected, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    let actual = element.value;
    let result = actual.includes(expected);
    if (!message) {
      message = `Element ${this.targetDescription} includes value "${expected}"`;
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
    return this;
  }
  containsValue(expected, message) {
    return this.includesValue(expected, message);
  }
  hasValueContaining(expected, message) {
    return this.includesValue(expected, message);
  }
  /**
   * Assert that the `value` property of an {@link HTMLInputElement} does not include
   * the `expected` text.
   *
   * **Aliases:** `doesNotContainValue`, `doesNotHaveValueContaining`
   *
   * @param {string} expected
   * @param {string?} message
   *
   * @example
   * assert.dom('textarea.description').doesNotIncludeValue('https://example.com');
   *
   * @see {@link #includesValue}
   */
  doesNotIncludeValue(expected, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    let actual = element.value;
    let result = !actual.includes(expected);
    if (!message) {
      message = `Element ${this.targetDescription} does not include value "${expected}"`;
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
    return this;
  }
  doesNotContainValue(expected, message) {
    return this.doesNotIncludeValue(expected, message);
  }
  doesNotHaveValueContaining(expected, message) {
    return this.doesNotIncludeValue(expected, message);
  }
  /**
   * Assert that the `value` property of an {@link HTMLInputElement} is not empty.
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('input.username').hasAnyValue();
   *
   * @see {@link #hasValue}
   * @see {@link #hasNoValue}
   */
  hasAnyValue(message) {
    return this.hasValue({
      any: true
    }, message);
  }
  /**
   * Assert that the `value` property of an {@link HTMLInputElement} is empty.
   *
   * **Aliases:** `lacksValue`
   *
   * @param {string?} message
   *
   * @example
   * assert.dom('input.username').hasNoValue();
   *
   * @see {@link #hasValue}
   * @see {@link #hasAnyValue}
   */
  hasNoValue(message) {
    return this.hasValue('', message);
  }
  lacksValue(message) {
    return this.hasNoValue(message);
  }
  /**
   * Assert that the target selector selects only Elements that are also selected by
   * compareSelector.
   *
   * @param {string} compareSelector
   * @param {string?} message
   *
   * @example
   * assert.dom('p.red').matchesSelector('div.wrapper p:last-child')
   */
  matchesSelector(compareSelector, message) {
    let targetElements = this.findElements();
    let targets = targetElements.length;
    let matchFailures = matchesSelector(targetElements, compareSelector);
    let singleElement = targets === 1;
    let selectedByPart = this.selectedBy;
    let actual;
    let expected;
    if (matchFailures === 0) {
      // no failures matching.
      if (!message) {
        message = singleElement ? `The element ${selectedByPart} also matches the selector ${compareSelector}.` : `${targets} elements, ${selectedByPart}, also match the selector ${compareSelector}.`;
      }
      actual = expected = message;
      this.pushResult({
        result: true,
        actual,
        expected,
        message
      });
    } else {
      let difference = targets - matchFailures;
      // there were failures when matching.
      if (!message) {
        message = singleElement ? `The element ${selectedByPart} did not also match the selector ${compareSelector}.` : `${matchFailures} out of ${targets} elements ${selectedByPart} did not also match the selector ${compareSelector}.`;
      }
      actual = singleElement ? message : `${difference} elements matched ${compareSelector}.`;
      expected = singleElement ? `The element should have matched ${compareSelector}.` : `${targets} elements should have matched ${compareSelector}.`;
      this.pushResult({
        result: false,
        actual,
        expected,
        message
      });
    }
    return this;
  }
  /**
   * Assert that the target selector selects only Elements that are not also selected by
   * compareSelector.
   *
   * @param {string} compareSelector
   * @param {string?} message
   *
   * @example
   * assert.dom('input').doesNotMatchSelector('input[disabled]')
   */
  doesNotMatchSelector(compareSelector, message) {
    let targetElements = this.findElements();
    let targets = targetElements.length;
    let matchFailures = matchesSelector(targetElements, compareSelector);
    let singleElement = targets === 1;
    let selectedByPart = this.selectedBy;
    let actual;
    let expected;
    if (matchFailures === targets) {
      // the assertion is successful because no element matched the other selector.
      if (!message) {
        message = singleElement ? `The element ${selectedByPart} did not also match the selector ${compareSelector}.` : `${targets} elements, ${selectedByPart}, did not also match the selector ${compareSelector}.`;
      }
      actual = expected = message;
      this.pushResult({
        result: true,
        actual,
        expected,
        message
      });
    } else {
      let difference = targets - matchFailures;
      // the assertion fails because at least one element matched the other selector.
      if (!message) {
        message = singleElement ? `The element ${selectedByPart} must not also match the selector ${compareSelector}.` : `${difference} elements out of ${targets}, ${selectedByPart}, must not also match the selector ${compareSelector}.`;
      }
      actual = singleElement ? `The element ${selectedByPart} matched ${compareSelector}.` : `${matchFailures} elements did not match ${compareSelector}.`;
      expected = singleElement ? message : `${targets} elements should not have matched ${compareSelector}.`;
      this.pushResult({
        result: false,
        actual,
        expected,
        message
      });
    }
    return this;
  }
  /**
   * Assert that the tagName of the {@link HTMLElement} or an {@link HTMLElement}
   * matching the `selector` matches the `expected` tagName, using the
   * [`tagName`](https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName)
   * property of the {@link HTMLElement}.
   *
   * @param {string} expected
   * @param {string?} message
   *
   * @example
   * // <h1 id="title">
   * //   Title
   * // </h1>
   *
   * assert.dom('#title').hasTagName('h1');
   */
  hasTagName(tagName, message) {
    let element = this.findTargetElement();
    let actual;
    let expected;
    if (!element) return this;
    if (typeof tagName !== 'string') {
      throw new TypeError(`You must pass a string to "hasTagName". You passed ${tagName}.`);
    }
    actual = element.tagName.toLowerCase();
    expected = tagName.toLowerCase();
    if (actual === expected) {
      if (!message) {
        message = `Element ${this.targetDescription} has tagName ${expected}`;
      }
      this.pushResult({
        result: true,
        actual,
        expected,
        message
      });
    } else {
      if (!message) {
        message = `Element ${this.targetDescription} does not have tagName ${expected}`;
      }
      this.pushResult({
        result: false,
        actual,
        expected,
        message
      });
    }
    return this;
  }
  /**
   * Assert that the tagName of the {@link HTMLElement} or an {@link HTMLElement}
   * matching the `selector` does not match the `expected` tagName, using the
   * [`tagName`](https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName)
   * property of the {@link HTMLElement}.
   *
   * @param {string} expected
   * @param {string?} message
   *
   * @example
   * // <section id="block">
   * //   Title
   * // </section>
   *
   * assert.dom('section#block').doesNotHaveTagName('div');
   */
  doesNotHaveTagName(tagName, message) {
    let element = this.findTargetElement();
    let actual;
    let expected;
    if (!element) return this;
    if (typeof tagName !== 'string') {
      throw new TypeError(`You must pass a string to "doesNotHaveTagName". You passed ${tagName}.`);
    }
    actual = element.tagName.toLowerCase();
    expected = tagName.toLowerCase();
    if (actual !== expected) {
      if (!message) {
        message = `Element ${this.targetDescription} does not have tagName ${expected}`;
      }
      this.pushResult({
        result: true,
        actual,
        expected,
        message
      });
    } else {
      if (!message) {
        message = `Element ${this.targetDescription} has tagName ${expected}`;
      }
      this.pushResult({
        result: false,
        actual,
        expected,
        message
      });
    }
    return this;
  }
  /**
   * Assert that the html of the {@link HTMLElement} or an {@link HTMLElement}
   * matching the `selector` matches the `expected` html, using the
   * [`innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)
   * property of the {@link HTMLElement}.
   *
   * `expected` can also be a regular expression.
   *
   * > Note: This assertion will collapse whitespace if the type you pass in is a string.
   * > If you are testing specifically for whitespace integrity, pass your expected html
   * > in as a RegEx pattern.
   *
   * @param {string|RegExp} expected
   * @param {string?} message
   *
   * @example
   * // <h1>
   * //   A <b>great</b> thing
   * // </h1>
   *
   * assert.dom('h1').hasHtml('A <b>great</b> thing');
   *
   * @example
   * assert.dom('h1').hasHtml(/.*\s<b>great.+/);
   */
  hasHtml(expected, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    if (expected instanceof RegExp) {
      let result = expected.test(element.innerHTML);
      let actual = element.innerHTML;
      if (!message) {
        if (result) {
          message = `Element ${this.targetDescription} has html matching ${expected}`;
        } else {
          message = `Element ${this.targetDescription} does not have html matching ${expected}`;
        }
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    } else if (typeof expected === 'string') {
      expected = collapseWhitespace(expected);
      let actual = collapseWhitespace(element.innerHTML);
      let result = actual === expected;
      if (!message) {
        if (result) {
          message = `Element ${this.targetDescription} has html "${expected}"`;
        } else {
          message = `Element ${this.targetDescription} does not have html "${expected}"`;
        }
      }
      this.pushResult({
        result,
        actual,
        expected,
        message
      });
    } else {
      throw new TypeError(`You must pass a string or Regular Expression to "hasHtml". You passed ${expected}.`);
    }
    return this;
  }
  /**
   * Assert that the html of the {@link HTMLElement} or an {@link HTMLElement}
   * matching the `selector` does not match the `expected` html, using the
   * [`innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)
   * property of the {@link HTMLElement}.
   *
   * @param {string} expected
   * @param {string?} message
   *
   * @example
   * // <section>
   * //   a <b>great</b> thing
   * // </section>
   *
   * assert.dom('section').doesNotHaveHtml('<b>fantastic</b>');
   */
  doesNotHaveHtml(expected, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    if (typeof expected !== 'string') {
      throw new TypeError(`You must pass a string to "doesNotHaveHtml". You passed ${expected}.`);
    }
    let actual = element.innerHTML;
    if (actual !== expected) {
      if (!message) {
        message = `Element ${this.targetDescription} does not have html "${expected}"`;
      }
      this.pushResult({
        result: true,
        actual,
        expected,
        message
      });
    } else {
      if (!message) {
        message = `Element ${this.targetDescription} has html "${expected}"`;
      }
      this.pushResult({
        result: false,
        actual,
        expected,
        message
      });
    }
    return this;
  }
  /**
   * Assert that the html of the {@link HTMLElement} or an {@link HTMLElement}
   * matching the `selector` contains the given `html`, using the
   * [`innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)
   * property.
   *
   * > Note: This assertion will collapse whitespace in `innerHTML` before searching.
   * > If you would like to assert on a string that *should* contain line breaks, tabs,
   * > more than one space in a row, or starting/ending whitespace, use the {@link #hasText}
   * > selector and pass your expected html in as a RegEx pattern.
   *
   * **Aliases:** `containsHtml`, `hasHtmlContaining`
   *
   * @param {string} expected
   * @param {string?} message
   *
   * @example
   * assert.dom('#title').includesHtml('<b>nice</b>');
   *
   * @see {@link #hasHtml}
   */
  includesHtml(html, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    let collapsedHtml = collapseWhitespace(element.innerHTML || '');
    let result = collapsedHtml.indexOf(html) !== -1;
    let actual = collapsedHtml;
    let expected = html;
    if (!message) {
      message = `Element ${this.targetDescription} has html containing "${html}"`;
    }
    if (!result && html !== collapseWhitespace(html)) {
      console.warn('The `.includesHtml()`, `.containsHtml()`, and `.hasHtmlContaining()` assertions collapse whitespace. The html you are checking for contains whitespace that may have made your test fail incorrectly. Try the `.hasHtml()` assertion passing in your expected html as a RegExp pattern. Your html:\n' + html);
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
    return this;
  }
  containsHtml(expected, message) {
    return this.includesHtml(expected, message);
  }
  hasHtmlContaining(expected, message) {
    return this.includesHtml(expected, message);
  }
  /**
   * Assert that the html of the {@link HTMLElement} or an {@link HTMLElement}
   * matching the `selector` does not include the given `expected` html, using the
   * [`innerHTML`](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)
   * attribute.
   *
   * **Aliases:** `doesNotContainHtml`, `doesNotHaveHtmlContaining`
   *
   * @param {string} html
   * @param {string?} message
   *
   * @example
   * assert.dom('#title').doesNotIncludeHtml('<i>nope</i>');
   */
  doesNotIncludeHtml(html, message) {
    let element = this.findTargetElement();
    if (!element) return this;
    let collapsedHtml = collapseWhitespace(element.innerHTML || '');
    let result = collapsedHtml.indexOf(html) === -1;
    let expected = `Element ${this.targetDescription} does not include html "${html}"`;
    let actual = expected;
    if (!result) {
      actual = `Element ${this.targetDescription} includes html "${html}"`;
    }
    if (!message) {
      message = expected;
    }
    this.pushResult({
      result,
      actual,
      expected,
      message
    });
    return this;
  }
  doesNotContainHtml(unexpected, message) {
    return this.doesNotIncludeHtml(unexpected, message);
  }
  doesNotHaveHtmlContaining(unexpected, message) {
    return this.doesNotIncludeHtml(unexpected, message);
  }
  /**
   * @private
   */
  pushResult(result) {
    this.testContext.pushResult(result);
  }
  /**
   * Finds a valid HTMLElement from target, or pushes a failing assertion if a valid
   * element is not found.
   * @private
   * @returns (HTMLElement|null) a valid HTMLElement, or null
   */
  findTargetElement() {
    let el = resolveDOMElement(this.descriptor);
    if (el === null) {
      let message = `Element ${this.targetDescription} should exist`;
      this.pushResult({
        message,
        result: false,
        actual: undefined,
        expected: undefined
      });
      return null;
    }
    return el;
  }
  /**
   * Finds a collection of Element instances from target using querySelectorAll
   * @private
   * @returns (Element[]) an array of Element instances
   * @throws TypeError will be thrown if target is an unrecognized type
   */
  findElements() {
    return Array.from(resolveDOMElements(this.descriptor));
  }
  /**
   * @private
   */
  get targetDescription() {
    return resolveDescription(this.descriptor) ?? 'undefined';
  }
  /**
   * @private
   */
  get selectedBy() {
    if (this.wasPassedElement) {
      return 'passed';
    } else if (resolveDOMElement(this.descriptor)) {
      return `selected by ${this.targetDescription}`;
    } else {
      return 'selected by null';
    }
  }
}
let _getRootElement = () => null;
function overrideRootElement(fn) {
  _getRootElement = fn;
}
function getRootElement() {
  return _getRootElement();
}
function install(assert) {
  assert.dom = function (target, rootElement) {
    if (!isValidRootElement(rootElement)) {
      throw new Error(`${rootElement} is not a valid root element`);
    }
    rootElement = rootElement || this.dom.rootElement || getRootElement();
    return new DOMAssertions(target !== undefined ? target : rootElement instanceof Element ? rootElement : null, rootElement, this);
  };
  function isValidRootElement(element) {
    return !element || typeof element === 'object' && typeof element.querySelector === 'function' && typeof element.querySelectorAll === 'function';
  }
}
function setup(assert, options = {}) {
  install(assert);
  const getRootElement = typeof options.getRootElement === 'function' ? options.getRootElement : () => document.querySelector('#ember-testing');
  overrideRootElement(getRootElement);
}

class Router extends EmberRouter {
  location = 'none';
  rootURL = '/';
}
class TestApp extends Application {
  modulePrefix = 'test-app';
  Resolver = Resolver.withModules({
    'test-app/router': {
      default: Router
    }
    // add any custom services here
  });
}

// eslint-disable-next-line @typescript-eslint/no-empty-function
Router.map(function () {});
function start() {
  setApplication(TestApp.create({
    autoboot: false,
    rootElement: '#ember-testing'
  }));
  // eslint-disable-next-line import-x/namespace
  setup(qunitExports.assert);
  setupEmberOnerrorValidation();
  start$1();
}

start();
